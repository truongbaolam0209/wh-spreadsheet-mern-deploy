[{"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\index.js":"1","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\App.js":"2","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\reportWebVitals.js":"3","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\contexts\\cellContext.js":"4","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\contexts\\rowContext.js":"5","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\contexts\\projectContext.js":"6","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\contexts\\_createDataContext.js":"7","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\utils\\index.js":"8","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\constants\\index.js":"9","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\_dashboardComp\\utils\\functionDashboard.js":"10","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\_dashboardComp\\assets\\constantDashboard.js":"11","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\_dashboardComp\\PageDashboard.js":"12","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\PageSpreadsheet.js":"13","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\_dashboardComp\\componentsDashboard\\_ChartBarDrawing.js":"14","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\_dashboardComp\\componentsDashboard\\CardPanelProject.js":"15","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\_dashboardComp\\componentsDashboard\\_ChartBarDrawingLate.js":"16","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\_dashboardComp\\componentsDashboard\\_ChartBarStack.js":"17","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\_dashboardComp\\componentsDashboard\\_ChartProgress.js":"18","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\_dashboardComp\\componentsDashboard\\_ChartPieDrawing.js":"19","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\CellIndex.js":"20","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\_dashboardComp\\componentsDashboard\\_FormPivot.js":"21","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\_dashboardComp\\componentsDashboard\\_TableDrawingList.js":"22","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\CellHeader.js":"23","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\Cell.js":"24","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\IconTable.js":"25","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\InputSearch.js":"26","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\PanelFunction.js":"27","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\PanelSetting.js":"28","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\_dashboardComp\\componentsDashboard\\CardPanel.js":"29","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\_dashboardComp\\componentsDashboard\\PanelRightClick.js":"30","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\_dashboardComp\\componentsDashboard\\ChartBarRecordPanel.js":"31","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\PanelCalendar.js":"32","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\TableCellHistory.js":"33","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\TableDrawingDetail.js":"34","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\TableActivityHistory.js":"35","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\ReorderColumnForm.js":"36","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\PanelConfirm.js":"37","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\FormSort.js":"38","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\FormFilter.js":"39","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\FormGroup.js":"40","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\FormCellColorizedCheck.js":"41","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\FormDrawingTypeOrder.js":"42","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\FormDateAutomation.js":"43","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\ButtonGroupComp.js":"44","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\ColorizedForm.js":"45","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\_dashboardComp\\componentsDashboard\\ChartBarRecord.js":"46","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\FormFilterActivityHistory.js":"47","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\PanelCalendarDuration.js":"48","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\ButtonStyle.js":"49","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\ButtonColumnTag.js":"50","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\PanelPickNumber.js":"51","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\ViewTemplateSelect.js":"52","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\ButtonAdminUploadData.js":"53","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\ButtonAdminUploadDataPDD.js":"54","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\PanelConfirmResetMode.js":"55","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\ButtonAdminCreateAndUpdateRows.js":"56","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\ButtonAdminDeleteRowsHistory.js":"57","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\ButtonAdminCreateAndUpdateRowsHistory.js":"58","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\ExcelExport.js":"59"},{"size":507,"mtime":1614149861000,"results":"60","hashOfConfig":"61"},{"size":3125,"mtime":1615216992714,"results":"62","hashOfConfig":"61"},{"size":362,"mtime":1614149861000,"results":"63","hashOfConfig":"61"},{"size":1859,"mtime":1614149861000,"results":"64","hashOfConfig":"61"},{"size":549,"mtime":1614149861000,"results":"65","hashOfConfig":"61"},{"size":917,"mtime":1614149861000,"results":"66","hashOfConfig":"61"},{"size":590,"mtime":1614149861000,"results":"67","hashOfConfig":"61"},{"size":25967,"mtime":1615149715301,"results":"68","hashOfConfig":"61"},{"size":2430,"mtime":1615216946093,"results":"69","hashOfConfig":"61"},{"size":15538,"mtime":1614149861000,"results":"70","hashOfConfig":"61"},{"size":3472,"mtime":1615216959978,"results":"71","hashOfConfig":"61"},{"size":11618,"mtime":1614187922860,"results":"72","hashOfConfig":"61"},{"size":44418,"mtime":1615217029114,"results":"73","hashOfConfig":"61"},{"size":6282,"mtime":1614149861000,"results":"74","hashOfConfig":"61"},{"size":1063,"mtime":1614149861000,"results":"75","hashOfConfig":"61"},{"size":3911,"mtime":1614149861000,"results":"76","hashOfConfig":"61"},{"size":6160,"mtime":1614149861000,"results":"77","hashOfConfig":"61"},{"size":3173,"mtime":1614149861000,"results":"78","hashOfConfig":"61"},{"size":2866,"mtime":1614149861000,"results":"79","hashOfConfig":"61"},{"size":1633,"mtime":1615138099734,"results":"80","hashOfConfig":"61"},{"size":5489,"mtime":1614149861000,"results":"81","hashOfConfig":"61"},{"size":19584,"mtime":1614149861000,"results":"82","hashOfConfig":"61"},{"size":508,"mtime":1614149861000,"results":"83","hashOfConfig":"61"},{"size":21292,"mtime":1615145692694,"results":"84","hashOfConfig":"61"},{"size":4511,"mtime":1615137742460,"results":"85","hashOfConfig":"61"},{"size":2460,"mtime":1615137560697,"results":"86","hashOfConfig":"61"},{"size":5604,"mtime":1615142178507,"results":"87","hashOfConfig":"61"},{"size":37891,"mtime":1615142156320,"results":"88","hashOfConfig":"61"},{"size":965,"mtime":1614149861000,"results":"89","hashOfConfig":"61"},{"size":1089,"mtime":1614149861000,"results":"90","hashOfConfig":"61"},{"size":3117,"mtime":1614149861000,"results":"91","hashOfConfig":"61"},{"size":361,"mtime":1614149861000,"results":"92","hashOfConfig":"61"},{"size":2068,"mtime":1614149861000,"results":"93","hashOfConfig":"61"},{"size":5150,"mtime":1615137016945,"results":"94","hashOfConfig":"61"},{"size":11235,"mtime":1615142160788,"results":"95","hashOfConfig":"61"},{"size":3909,"mtime":1614149861000,"results":"96","hashOfConfig":"61"},{"size":1464,"mtime":1615137495872,"results":"97","hashOfConfig":"61"},{"size":3904,"mtime":1615142148320,"results":"98","hashOfConfig":"61"},{"size":7605,"mtime":1615142918805,"results":"99","hashOfConfig":"61"},{"size":4019,"mtime":1615144872417,"results":"100","hashOfConfig":"61"},{"size":3534,"mtime":1614149861000,"results":"101","hashOfConfig":"61"},{"size":33375,"mtime":1615148537320,"results":"102","hashOfConfig":"61"},{"size":4218,"mtime":1614149861000,"results":"103","hashOfConfig":"61"},{"size":722,"mtime":1615138418881,"results":"104","hashOfConfig":"61"},{"size":3504,"mtime":1614149861000,"results":"105","hashOfConfig":"61"},{"size":3126,"mtime":1614149861000,"results":"106","hashOfConfig":"61"},{"size":5267,"mtime":1614149861000,"results":"107","hashOfConfig":"61"},{"size":753,"mtime":1614149861000,"results":"108","hashOfConfig":"61"},{"size":729,"mtime":1615138392070,"results":"109","hashOfConfig":"61"},{"size":2483,"mtime":1615138443852,"results":"110","hashOfConfig":"61"},{"size":904,"mtime":1614149861000,"results":"111","hashOfConfig":"61"},{"size":4223,"mtime":1615147296940,"results":"112","hashOfConfig":"61"},{"size":2333,"mtime":1615216814679,"results":"113","hashOfConfig":"61"},{"size":2280,"mtime":1615216888834,"results":"114","hashOfConfig":"61"},{"size":2426,"mtime":1615137450878,"results":"115","hashOfConfig":"61"},{"size":1996,"mtime":1615216804952,"results":"116","hashOfConfig":"61"},{"size":2204,"mtime":1615216811477,"results":"117","hashOfConfig":"61"},{"size":2031,"mtime":1615216808428,"results":"118","hashOfConfig":"61"},{"size":2718,"mtime":1615204880447,"results":"119","hashOfConfig":"61"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},"utwymk",{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135","usedDeprecatedRules":"122"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138","usedDeprecatedRules":"122"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"141","messages":"142","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"143","usedDeprecatedRules":"122"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"146","messages":"147","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"148","usedDeprecatedRules":"122"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"151","messages":"152","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"153","usedDeprecatedRules":"122"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"166","usedDeprecatedRules":"122"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"171","usedDeprecatedRules":"122"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"174","usedDeprecatedRules":"122"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"177","usedDeprecatedRules":"122"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"180","usedDeprecatedRules":"122"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"185","usedDeprecatedRules":"122"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"188","usedDeprecatedRules":"122"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"197","usedDeprecatedRules":"122"},{"filePath":"198","messages":"199","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"200","usedDeprecatedRules":"122"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"203","usedDeprecatedRules":"122"},{"filePath":"204","messages":"205","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"206","usedDeprecatedRules":"122"},{"filePath":"207","messages":"208","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"209","messages":"210","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"211","usedDeprecatedRules":"122"},{"filePath":"212","messages":"213","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"214","messages":"215","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"216","usedDeprecatedRules":"122"},{"filePath":"217","messages":"218","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"219","messages":"220","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"221","usedDeprecatedRules":"122"},{"filePath":"222","messages":"223","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"224","usedDeprecatedRules":"122"},{"filePath":"225","messages":"226","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"227","messages":"228","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"229","messages":"230","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"231","messages":"232","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"233","messages":"234","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"235","messages":"236","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"237","messages":"238","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"239","usedDeprecatedRules":"122"},{"filePath":"240","messages":"241","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"242","usedDeprecatedRules":"122"},{"filePath":"243","messages":"244","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"245","messages":"246","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"247","messages":"248","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"249","messages":"250","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"251","messages":"252","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"253","messages":"254","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"255","messages":"256","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"257","messages":"258","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"259","messages":"260","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\index.js",[],["261","262"],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\App.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\reportWebVitals.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\contexts\\cellContext.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\contexts\\rowContext.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\contexts\\projectContext.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\contexts\\_createDataContext.js",["263"],"import React, { createContext, useReducer } from 'react';\n\n\nexport default (reducer, actions, initValue) => {\n\n    const Context = createContext();\n\n    const Provider = ({ children }) => {\n        const [state, dispatch] = useReducer(reducer, initValue);\n\n        const boundActions = {};\n        for (let key in actions) {\n            boundActions[key] = actions[key](dispatch);\n        };\n\n        return (\n            <Context.Provider value={{ state, ...boundActions }}>\n                {children}\n            </Context.Provider>\n        );\n    };\n    return { Context, Provider };\n};\n","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\utils\\index.js",["264","265","266","267","268","269","270","271","272","273","274","275","276","277","278","279","280"],"import _ from 'lodash';\n\n\nexport const colorTypeStatus = {\n    yellow: '#fff200',\n    dark: '#1e272e',\n    grey0: '#ecf0f1',\n    grey1: '#bdc3c7',\n    grey2: '#636e72',\n    grey3: '#dfe4ea',\n    grey4: '#f1f2f6',\n    red: '#FA8072',\n    green: '#009432',\n    blue: '#0984e3',\n    orange: '#cc8e35',\n    purple: '#303952',\n    rose: '#e84118',\n    black: 'black',\n    orange2: '#f1c40f',\n    pp: '#9b59b6',\n    pp2: '#10ac84',\n};\n\n\n\nexport const randomColorRangeStatus = {\n    'Approved with comments, to Resubmit': colorTypeStatus.purple,\n    'Approved with Comment, no submission Required': colorTypeStatus.blue,\n    'Approved for Construction': colorTypeStatus.green,\n    'Consultant reviewing': colorTypeStatus.grey2,\n    'Not Started': colorTypeStatus.orange,\n    'Revise In-Progress': colorTypeStatus.yellow,\n    '1st cut of drawing in-progress': colorTypeStatus.pp2,\n    '1st cut of model in-progress': colorTypeStatus.pp,\n    'Pending design': colorTypeStatus.orange2,\n    'Reject and resubmit': colorTypeStatus.red,\n\n    'Consultant review and reply': colorTypeStatus.blue,\n    'Create update drawing': colorTypeStatus.orange,\n    'Create update model': colorTypeStatus.green,\n};\nexport const randomColorRange = [\n    '#FFDEAD',\n    '#98FB98',\n    '#e74c3c',\n    '#9b59b6',\n    '#1abc9c',\n    '#95a5a6'\n];\n\n\nexport const formatStringNameToId = (str) => {\n    let mystring = str\n        .replace(/ /g, '')\n        .replace(/\\(|\\)/g, '')\n        .replace(/\\//g, '');\n\n    return mystring.charAt(0).toLowerCase() + mystring.slice(1);\n};\n\nexport const genId = (xxx) => {\n    let arr = [];\n    for (let i = 0; i < xxx; i++) {\n        arr.push(mongoObjectId());\n    };\n    return arr;\n};\n\nexport const debounceFnc = (func, delay) => {\n    let timeout;\n    return function (...args) {\n        const context = this;\n        if (timeout) clearTimeout(timeout);\n        timeout = setTimeout(() => {\n            timeout = null;\n            func.apply(context, args);\n        }, delay);\n    };\n};\n\nexport const extractCellInfo = (key) => {\n    return {\n        rowId: key.slice(0, 24),\n        headerName: key.slice(25, key.length)\n    }\n};\n\n\nexport const mongoObjectId = () => {\n    var timestamp = (new Date().getTime() / 1000 | 0).toString(16);\n    return timestamp + 'xxxxxxxxxxxxxxxx'.replace(/[x]/g, function () {\n        return (Math.random() * 16 | 0).toString(16);\n    }).toLowerCase();\n};\n\n\nexport const getHeadersText = (headers) => {\n    if (!headers) return [];\n    let arr = [];\n    headers.forEach(hd => {\n        arr.push(hd.text);\n    });\n    return arr;\n};\n\nexport const getHeaderKey = (headers, headerText) => {\n    if (!headers) return;\n    return headers.find(hd => hd.text === headerText).key;\n};\n\n\n\nexport const groupRowsBy = (array, key) => {\n\n    return array.reduce((result, currentValue) => {\n        (result[currentValue[key]] = result[currentValue[key]] || []).push(\n            currentValue\n        );\n\n        return result;\n    }, {});\n};\n\n\n\n\n\n\n\n\nexport const mapSubRows = (rows) => {\n\n    if (!rows) return;\n\n    let rowsArr = rows.filter(r => r._rowLevel === 0);\n\n    if (rowsArr.length < 1) return rows;\n\n    let rowsSubArr = rows.filter(r => r._rowLevel === 1);\n    if (rowsSubArr.length < 1) return rows;\n\n    const rowsDataOutput = rowsArr.map(r => {\n        let subR = rowsSubArr.filter(rSub => rSub._parentRow === r.id);\n        return {\n            ...r, children: subR\n        }\n    });\n    return rowsDataOutput;\n};\n\n\n\n\nexport const groupByHeaders = (data, headers) => {\n    let res = [];\n    let _map = {};\n    // push all rowIds have children in here\n    let parentIdsArr = [];\n    let _mapParentIds = {};\n    for (let item of data) {\n        let _prevLevelKey = '';\n        let _prevLevelParent = null;\n        for (let i = 0, level = headers.length * (-1) + 1; i < headers.length; i++, level++) {\n            let arrayParent = i == 0 ? res : _prevLevelParent.children;\n\n            let header = headers[i];\n            let value = (item[header] || '').trim();\n\n            let levelKey = `${_prevLevelKey}_._${value}`;\n            let levelParentIndex = _map[levelKey];\n            let levelParent = arrayParent[levelParentIndex];\n            \n            if (!levelParent) {\n \n                let iddd = levelKey + value;\n                levelParent = _newParent(item, header, level, iddd);\n\n                _map[levelKey] = arrayParent.length;\n                arrayParent.push(levelParent);\n            };\n\n            levelParent.count++;\n\n            levelParent['Drawing Number'] = `${item[header] || 'No Data'}: (${levelParent.count} nos)`;\n\n            if (!_mapParentIds[levelParent.id]) { // levelParent id not yet been push to parentIdsArr\n                parentIdsArr.push(levelParent.id);\n                _mapParentIds[levelParent.id] = true;\n            }\n\n            if (i == headers.length - 1) {\n                levelParent.children.push(item);\n            } else {\n                _prevLevelKey = levelKey;\n                _prevLevelParent = levelParent;\n            };\n        };\n    };\n    return {\n        rows: res,\n        expandedRows: parentIdsArr\n    };\n};\nfunction _newParent(item, header, level, iddd) {\n    return {\n        id: iddd,\n        _rowLevel: level,\n        count: 0,\n        children: []\n    };\n};\n\n\n\nexport const convertCellTempToHistory = (\n    cellsModifiedTemp,\n    stateProject\n) => {\n    const { email, publicSettings } = stateProject.allDataOneSheet;\n    const cellsHistoryData = Object.keys(cellsModifiedTemp).map(key => {\n        const { rowId, headerName } = extractCellInfo(key);\n        const dataOut = {\n            rowId,\n            headerKey: getHeaderKey(publicSettings.headers, headerName),\n            history: {\n                text: cellsModifiedTemp[key],\n                email,\n                createdAt: new Date(),\n            }\n        };\n        return dataOut;\n    });\n    return cellsHistoryData;\n};\n\nexport const convertDrawingVersionToHistory = (\n    rowsHistory,\n    stateProject\n) => {\n    const { publicSettings } = stateProject.allDataOneSheet;\n\n    const rowsHistoryOutput = rowsHistory.map(rowsH => {\n        let obj = {};\n        publicSettings.headers.forEach(hd => {\n            if (rowsH[hd.text]) obj = { ...obj || {}, [hd.key]: rowsH[hd.text] };\n        });\n        return {\n            row: rowsH.id,\n            history: obj,\n        };\n    });\n    return rowsHistoryOutput;\n};\n\n\n\n\nexport const convertHistoryData = (data) => {\n    let arr = [];\n    data.forEach(ch => {\n        const { histories, headerKey, row } = ch;\n        histories.forEach(dt => {\n            arr.push({\n                ...dt,\n                headerKey, row\n            });\n        });\n    });\n    return arr\n};\n\n\n\n\n\n\n\n\nexport const addZero = (num) => {\n    if (num < 10) return '0' + num;\n    return num;\n};\n\nconst getRndInteger = (min, max) => {\n    return Math.floor(Math.random() * (max - min)) + min;\n};\n\n\nconst findHeaderId = (headers, headerName) => {\n    let header = headers.find(hd => hd.text === headerName);\n    return header.key;\n};\n\n\n\nexport const convertHeadersTextToKeyArray = (headersText, headers) => {\n\n    return headersText.map(hdText => {\n        let hdObj = headers.find(hd => hd.text === hdText);\n\n        return hdObj.key\n    });\n};\n\n\n\n\nconst _groupSubRowsByParentId = (subRows) => {\n    let groups = {};\n    for (let subRow of subRows) {\n        let parentId = subRow._parentRow;\n        let group = groups[parentId] || [];\n        groups[parentId] = group;\n        group.push(subRow);\n    };\n    return groups;\n};\nconst _filterRows = (rowsData) => {\n    let rows = [];\n    let subRowsLv1 = [];\n    let subRowsLv2 = [];\n\n    for (let rowData of rowsData) {\n        let level = rowData._rowLevel;\n        if (level === 0) {\n            rows.push(rowData);\n        } else if (level == 1) {\n            subRowsLv1.push(rowData);\n        } else if (level == 2) {\n            subRowsLv2.push(rowData);\n        };\n    };\n    return [rows, subRowsLv1, subRowsLv2];\n};\nexport const sortRowsReorder = (rowsData) => {\n    let [rows, subRowsLv1, subRowsLv2] = _filterRows(rowsData);\n    let rowsProcessed = [];\n    let groupSubRowsLv1 = _groupSubRowsByParentId(subRowsLv1);\n    let groupSubRowsLv2 = _groupSubRowsByParentId(subRowsLv2);\n\n    let firstRowIndex = rows.findIndex((row) => row._preRow === null);\n    if (firstRowIndex >= 0) {\n        let preRow = rows.splice(firstRowIndex, 1)[0];\n        while (preRow) {\n            rowsProcessed.push(preRow);\n\n            // sort & format subRowsLv1\n            let subRowsLv1 = groupSubRowsLv1[preRow.id] || [];\n            let firstSubRowLv1Index = subRowsLv1.findIndex(\n                (sr1) => sr1._preRow == null\n            );\n            if (firstSubRowLv1Index >= 0) {\n                let preSubRowLv1 = subRowsLv1.splice(firstSubRowLv1Index, 1)[0];\n                while (preSubRowLv1) {\n                    rowsProcessed.push(preSubRowLv1);\n\n                    // sort & format subRowsLv2\n                    let subRowsLv2 = groupSubRowsLv2[preSubRowLv1.id] || [];\n                    let firstSubRowLv2Index = subRowsLv2.findIndex(\n                        (sr2) => sr2._preRow == null\n                    );\n                    if (firstSubRowLv2Index >= 0) {\n                        let preSubRowLv2 = subRowsLv2.splice(firstSubRowLv2Index, 1)[0];\n                        while (preSubRowLv2) {\n                            rowsProcessed.push(preSubRowLv2);\n\n                            let nextSubRowLv2Index = subRowsLv2.findIndex(\n                                (sr2) => String(sr2._preRow) == String(preSubRowLv2.id)\n                            );\n                            if (nextSubRowLv2Index >= 0) {\n                                preSubRowLv2 = subRowsLv2.splice(nextSubRowLv2Index, 1)[0];\n                            } else {\n                                preSubRowLv2 = null;\n                            };\n                        };\n                    };\n\n                    let nextSubRowLv1Index = subRowsLv1.findIndex(\n                        (sr1) => String(sr1._preRow) == String(preSubRowLv1.id)\n                    );\n                    if (nextSubRowLv1Index >= 0) {\n                        preSubRowLv1 = subRowsLv1.splice(nextSubRowLv1Index, 1)[0];\n                    } else {\n                        preSubRowLv1 = null;\n                    };\n                };\n            };\n\n            let nextRowIndex = rows.findIndex(\n                (row) => String(row._preRow) == String(preRow.id)\n            );\n            if (nextRowIndex >= 0) {\n                preRow = rows.splice(nextRowIndex, 1)[0];\n            } else {\n                preRow = null;\n            };\n        };\n    };\n\n    return rowsProcessed;\n}\n\n\n\n\n\n\n\n// WORKING WITH SMARTHSHEET ..................................................................\n\nexport const getDataConvertedSmartsheet = (projectArray) => {\n\n    let dataOutput = {};\n    for (let i = 0; i < projectArray.length; i++) {\n\n        // get the column header\n        const project = projectArray[i];\n        const categoryArray = _.map(project.columns, 'title');\n        let columnsIndexArray = {};\n        categoryArray.forEach(cate => {\n            project.columns.forEach(cl => {\n                if (cl.title === cate) columnsIndexArray[cate] = cl.index;\n            });\n        });\n\n        let allDrawings = [];\n\n        for (let i = 0; i < project.rows.length; i++) {\n            const dwg = project.rows[i];\n            allDrawings.push([...dwg.cells]);\n        };\n\n        dataOutput[project.name.slice(0, project.name.length - 17)] = {\n            allDrawings,\n            allDrawingsSorted: pickDataToTable(allDrawings, columnsIndexArray)\n        };\n    };\n\n    return dataOutput;\n};\n\nconst pickDataToTable = (drawings, columnsIndexArray) => {\n    let arrayDrw = [];\n    drawings.forEach(dwg => {\n        let objDwg = {};\n        Object.keys(columnsIndexArray).forEach(header => {\n            if (header === 'Rev') {\n                objDwg[checkSpelling(header)] = dwg[columnsIndexArray[header]].displayValue;\n            } else {\n                if (dwg[columnsIndexArray[header]].value) {\n                    objDwg[checkSpelling(header)] = dwg[columnsIndexArray[header]].value;\n                };\n            };\n        });\n        arrayDrw.push(objDwg);\n    });\n    return arrayDrw;\n};\n\n\nconst checkSpelling = (header) => {\n    if (header === 'Construction issuance date') return 'Construction Issuance Date';\n    if (header === 'Drg to Consultant (T)') return 'Drg To Consultant (T)';\n    if (header === 'Drg to Consultant (A)') return 'Drg To Consultant (A)';\n    if (header === 'get Approval (A)') return 'Get Approval (A)';\n    if (header === 'get Approval (T)') return 'Get Approval (T)';\n    return header;\n};\n\n\n\nexport const getHeaderWidth = (header) => {\n\n    if (header === 'RFA Ref') return 200;\n    else if (\n        header === 'Block/Zone' ||\n        header === 'Level' || header === 'Unit/CJ' ||\n        header === 'Use For' ||\n        header === 'Coordinator In Charge' || header === 'Modeller' ||\n        header === 'Model Progress' || header === 'Drawing Progress' ||\n        header === 'Construction Start'\n    ) return 120;\n    else if (header === 'Drg Type') return 180;\n    else if (header === 'Construction Issuance Date') return 120;\n    else if (header === 'Drawing') return 300;\n\n    else if (\n        header === 'Drg To Consultant (A)' ||\n        header === 'Drg To Consultant (T)' ||\n        header === 'Get Approval (A)' ||\n        header === 'Get Approval (T)'\n    ) return 120;\n\n    else if (header.includes('(A)') || header.includes('(T)')) return 90;\n\n    else if (header === 'Rev') return 60;\n    else if (header === 'Status') return 280;\n    else if (header === 'Remark') return 700;\n    else if (header === 'Drawing Number') return 400;\n    else if (header === 'Drawing Name') return 450;\n\n    else return 300;\n\n};\n\nexport const rowClassNameGetColumnsValue = (rows, headers) => {\n    let valueObj = {};\n    headers.forEach(hd => {\n        let valueArr = rows.map(row => row[hd.text] || '');\n        valueArr = [...new Set(valueArr)].filter(e => e);\n        valueArr.sort((a, b) => a > b ? 1 : (b > a ? -1 : 0));\n        if (valueArr.length > 0) valueObj[hd.text] = valueArr;\n    });\n    return valueObj;\n};\nexport const getActionName = (type) => {\n    if (type === 'filter-ICON') return 'Create New Filter';\n    if (type === 'reorderColumn-ICON') return 'Columns Layout';\n    if (type === 'group-ICON') return 'Group Data';\n    if (type === 'sort-ICON') return 'Sort Data';\n    if (type === 'swap-ICON-1') return 'Quit Grouping Mode';\n    if (type === 'swap-ICON-2') return 'Clear Filter/Sort/Search';\n    if (type === 'addDrawingType-ICON') return 'Drawing Type Organization';\n    if (type === 'color-cell-history-ICON') return 'Check Data Changed';\n    if (type === 'View Cell History') return 'Cell History';\n    if (type === 'Delete Drawing') return 'Delete Drawing';\n    if (type === 'colorized-ICON') return 'Drawing Colorization';\n    if (type === 'viewTemplate-ICON') return 'View Template';\n    if (type === 'addNewRFA-ICON') return 'Add New RFA';\n    if (type && (type.includes('Insert Drawings') || type === 'Duplicate Drawings')) return 'Nos Of Drawings';\n\n    else return '';\n};\n\n\n\nconst createParentRows = (arr) => {\n    let newRows = [];\n    arr.forEach((title, i) => {\n        newRows.push({\n            id: mongoObjectId(),\n            _rowLevel: 0,\n            expanded: true,\n            'Drawing Number': title\n        });\n    });\n    return newRows;\n};\nconst getParentRowsHandy = () => {\n    let arrParentTitle = [\n        'COLUMN AND WALL SETTING OUT Keyplan',\n        'UNIT TYPE LAYOUT TSO Plan',\n        'STAIRCASES and LIFT LOBBIES',\n        'ANCILLARY STRUCTURES',\n        'No Name 1',\n        'No Name 2',\n        'PBU Tile layout',\n        'Tile layout',\n        'Clubhouse',\n        'RCP',\n        'RCP Unit type',\n        'RCP Clubhouse',\n        'Swimming Pool',\n        'External Sections/ Elevations',\n        'Driveway/ Pavement',\n        'No Name 3',\n        'No Name 4',\n        'Carpark Details',\n        'M&E Details',\n        'FAÇADE Maintenance',\n        'No Name 5',\n        'TOILETS Details',\n    ];\n    let rows = createParentRows(arrParentTitle);\n    return rows;\n};\nconst getParent_IdHandy = (i) => {\n    if (i >= 3 && i <= 47) return 0;\n    if (i >= 49 && i <= 94) return 1;\n    if (i >= 96 && i <= 147) return 2;\n    if (i >= 149 && i <= 162) return 3;\n    if (i >= 164 && i <= 168) return 4;\n\n    if (i >= 170 && i <= 175) return 5;\n    if (i >= 177 && i <= 191) return 6;\n    if (i >= 193 && i <= 202) return 7;\n    if (i >= 204 && i <= 209) return 8;\n    if (i >= 211 && i <= 224) return 9;\n\n    if (i >= 226 && i <= 246) return 10;\n    if (i >= 248 && i <= 250) return 11;\n    if (i >= 252 && i <= 259) return 12;\n    if (i >= 261 && i <= 264) return 13;\n    if (i >= 266 && i <= 269) return 14;\n\n    if (i >= 271 && i <= 274) return 15;\n    if (i >= 276 && i <= 279) return 16;\n    if (i >= 281 && i <= 283) return 17;\n    if (i >= 285 && i <= 289) return 18;\n    if (i >= 291 && i <= 292) return 19;\n\n    if (i >= 294 && i <= 296) return 20;\n    if (i >= 298 && i <= 306) return 21;\n};\nconst getParentRowsSumang = () => {\n    let arrParentTitle = [\n        'GRID LINE',\n        'PRE-COMPUTATION',\n        'SUBSTATION',\n        'BASEMENT',\n        'EDECK',\n        'WSO (WALL SETTING-OUT PLANS) - BLK 42(11)',\n        'WSO (WALL SETTING-OUT PLANS) - BLK 44(12)',\n        'WSO (WALL SETTING-OUT PLANS) - BLK 22(1)',\n        'WSO (WALL SETTING-OUT PLANS) - BLK 24(3)',\n        'WSO (WALL SETTING-OUT PLANS) - BLK 26(4)',\n        'WSO (WALL SETTING-OUT PLANS) - BLK 32(6)',\n        'WSO (WALL SETTING-OUT PLANS) - BLK 34(7)',\n        'WSO (WALL SETTING-OUT PLANS) - BLK 28(5)',\n        'WSO (WALL SETTING-OUT PLANS) - BLK 46(13)',\n        'WSO (WALL SETTING-OUT PLANS) - BLK 36(8)',\n        'WSO (WALL SETTING-OUT PLANS) - BLK 30(2)',\n        'WSO (WALL SETTING-OUT PLANS) - BLK 38(9)',\n        'WSO (WALL SETTING-OUT PLANS) - BLK 40(10)',\n        'OVERALL FINISHING LAYOUT',\n        'SSS (STAIRCASE STOREY SHELTER)',\n        'REFLECTED CEILING PLAN',\n        'LIFT LOBBY',\n    ];\n    let rows = createParentRows(arrParentTitle);\n    return rows;\n};\nconst getParent_IdSumang = (i) => {\n    if (i >= 3 && i <= 4) return 0;\n    if (i >= 6 && i <= 6) return 1;\n    if (i >= 8 && i <= 9) return 2;\n    if (i >= 11 && i <= 20) return 3;\n    if (i >= 22 && i <= 35) return 4;\n\n    if (i >= 38 && i <= 43) return 5;\n    if (i >= 45 && i <= 50) return 6;\n    if (i >= 52 && i <= 59) return 7;\n    if (i >= 61 && i <= 70) return 8;\n    if (i >= 72 && i <= 78) return 9;\n\n    if (i >= 80 && i <= 85) return 10;\n    if (i >= 87 && i <= 92) return 11;\n    if (i >= 94 && i <= 100) return 12;\n    if (i >= 102 && i <= 107) return 13;\n    if (i >= 109 && i <= 114) return 14;\n\n    if (i >= 116 && i <= 121) return 15;\n    if (i >= 123 && i <= 128) return 16;\n    if (i >= 130 && i <= 135) return 17;\n    if (i >= 137 && i <= 175) return 18;\n    if (i >= 177 && i <= 211) return 19;\n\n    if (i >= 213 && i <= 213) return 20;\n    if (i >= 216 && i <= 254) return 21;\n};\n\nexport const getCurrentAndHistoryDrawings = (allProjects, headers) => {\n    let final = {};\n    Object.keys(allProjects).forEach(prj => {\n\n        let drawingTypeTree = prj === 'Sumang' ? getParentRowsSumang() : getParentRowsHandy();\n        drawingTypeTree.forEach(r => {\n            let headerKeyDrawingNumber = headers.find(hd => hd.text === 'Drawing Number').key;\n            r[headerKeyDrawingNumber] = r['Drawing Number'];\n            delete r['Drawing Number'];\n        });\n\n        let rows = prj === 'Sumang' ? allProjects['Sumang'].allDrawingsSorted : allProjects['Handy'].allDrawingsSorted;\n\n        let objChildren = {};\n        rows.forEach((r, i) => {\n            const parentIndex = prj === 'Sumang' ? getParent_IdSumang(i + 1) : getParent_IdHandy(i + 1);\n            objChildren[parentIndex] = [...objChildren[parentIndex] || [], r];\n        });\n\n        let historyOutput = [];\n        let rowsAllCurrentOutput = [];\n        Object.keys(objChildren).forEach(index => {\n            if (index !== 'undefined') {\n                let allRowsInEachFolder = objChildren[index];\n                let obj = {};\n                allRowsInEachFolder.forEach(r => {\n                    const key = `${r['Drawing Number'] || ''}-${r['Drawing Name'] || ''}`;\n                    obj[key] = [...obj[key] || [], r];\n                });\n\n                let rowCurrentOutput = [];\n                Object.keys(obj).forEach((key, i) => {\n                    const arr = obj[key];\n                    arr.sort((a, b) => ((a['Rev'] || '').toLowerCase() > (b['Rev'] || '').toLowerCase()) ? 1 : (((b['Rev'] || '').toLowerCase() > (a['Rev'] || '').toLowerCase()) ? -1 : 0));\n                    let rowsHistory = arr.filter((r, index) => index < arr.length - 1);\n                    let rowId = mongoObjectId();\n                    if (rowsHistory.length > 0) {\n                        let rowsHistoryOutput = rowsHistory.map(r => {\n                            let rowDataObj = { row: rowId };\n                            headers.forEach(hd => {\n                                if (r[hd.text]) rowDataObj.history = { ...rowDataObj.history || {}, [hd.key]: r[hd.text] };\n                            });\n                            return rowDataObj;\n                        });\n                        historyOutput = [...historyOutput, ...rowsHistoryOutput];\n                    };\n\n                    let rowCurrent = arr[arr.length - 1];\n                    let rowCurrentObj = {};\n\n                    headers.forEach(hd => {\n                        if (rowCurrent[hd.text]) rowCurrentObj.data = { ...rowCurrentObj.data || {}, [hd.key]: rowCurrent[hd.text] };\n                    });\n                    rowCurrentObj._id = rowId;\n                    rowCurrentObj.parentRow = drawingTypeTree[parseInt(index)].id;\n                    rowCurrentObj.level = 1;\n                    rowCurrentOutput.push(rowCurrentObj);\n                });\n                rowCurrentOutput.forEach((r, i) => {\n                    r.preRow = i === 0 ? null : rowCurrentOutput[i - 1]._id;\n                });\n                rowsAllCurrentOutput = [...rowsAllCurrentOutput, ...rowCurrentOutput];\n            };\n        });\n        final[prj] = {\n            rows: rowsAllCurrentOutput,\n            historyRows: historyOutput,\n            drawingTypeTree\n        };\n    });\n\n    return final;\n};\nconst getParentIdHandy = (i) => {\n    if (i >= 1 && i < 20) return 0;\n    if (i >= 20 && i < 42) return 1;\n    if (i >= 42 && i < 60) return 2;\n    if (i >= 60 && i < 76) return 3;\n    if (i >= 76 && i < 81) return 4;\n    if (i >= 81 && i < 87) return 5;\n    if (i >= 87 && i < 99) return 6;\n    if (i >= 99 && i < 109) return 7;\n    if (i >= 109 && i < 112) return 8;\n    if (i >= 112 && i < 126) return 9;\n    if (i >= 126 && i < 147) return 10;\n    if (i >= 147 && i < 150) return 11;\n    if (i >= 150 && i < 155) return 12;\n    if (i >= 155 && i < 159) return 13;\n    if (i >= 159 && i < 163) return 14;\n    if (i >= 163 && i < 167) return 15;\n    if (i >= 167 && i < 171) return 16;\n    if (i >= 171 && i < 174) return 17;\n    if (i >= 174 && i < 179) return 18;\n    if (i >= 179 && i < 181) return 19;\n    if (i >= 181 && i < 184) return 20;\n    if (i >= 184 && i < 193) return 21;\n};\n\nconst returnPreRowNullSumang = (i) => {\n    if (\n        i === 0 ||\n        i === 1 ||\n        i === 20 ||\n        i === 42 ||\n        i === 60 ||\n        i === 76 ||\n        i === 81 ||\n        i === 87 ||\n        i === 99 ||\n        i === 109 ||\n        i === 112 ||\n        i === 126 ||\n        i === 147 ||\n        i === 150 ||\n        i === 155 ||\n        i === 159 ||\n        i === 163 ||\n        i === 167 ||\n        i === 171 ||\n        i === 174 ||\n        i === 179 ||\n\n        i === 181 ||\n        i === 184\n    ) {\n        return true;\n    } else return false;\n};\nconst returnPreRowNullHandy = (i) => {\n    if (\n        i === 0 ||\n        i === 1 ||\n        i === 20 ||\n        i === 42 ||\n        i === 60 ||\n        i === 76 ||\n        i === 81 ||\n        i === 87 ||\n        i === 99 ||\n        i === 109 ||\n        i === 112 ||\n        i === 126 ||\n        i === 147 ||\n        i === 150 ||\n        i === 155 ||\n        i === 159 ||\n        i === 163 ||\n        i === 167 ||\n        i === 171 ||\n        i === 174 ||\n        i === 179 ||\n\n        i === 181 ||\n        i === 184\n    ) {\n        return true;\n    } else return false;\n};\n\n\n\nexport const reorderRowsFnc = (data) => {\n    let rows = [...data];\n    let rowsProcessed = [];\n    let firstRowIndex = rows.findIndex(row => row._preRow === null);\n    while (firstRowIndex >= 0) {\n        let preRow = rows.splice(firstRowIndex, 1)[0];\n        while (preRow) {\n            rowsProcessed.push(preRow);\n            let nextRowIndex = rows.findIndex(row => String(row._preRow) == String(preRow.id));\n            if (nextRowIndex >= 0) {\n                preRow = rows.splice(nextRowIndex, 1)[0];\n            } else {\n                preRow = null;\n            };\n        };\n        firstRowIndex = rows.findIndex((row) => row._preRow === null);\n    };\n    return rowsProcessed;\n};\n\n\n\nexport const ExcelDateToJSDate = (serial) => {\n    let utc_days  = Math.floor(serial - 25569);\n    let utc_value = utc_days * 86400;                                        \n    let date_info = new Date(utc_value * 1000);\n \n    let fractional_day = serial - Math.floor(serial) + 0.0000001;\n \n    let total_seconds = Math.floor(86400 * fractional_day);\n \n    let seconds = total_seconds % 60;\n \n    total_seconds -= seconds;\n \n    let hours = Math.floor(total_seconds / (60 * 60));\n    let minutes = Math.floor(total_seconds / 60) % 60;\n \n    return new Date(date_info.getFullYear(), date_info.getMonth(), date_info.getDate(), hours, minutes, seconds);\n };","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\constants\\index.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\_dashboardComp\\utils\\functionDashboard.js",["281","282","283","284","285","286","287","288","289","290","291","292","293","294"],"import Axios from 'axios';\nimport _ from 'lodash';\nimport moment from 'moment';\nimport { _SelectColumnFilter } from '../componentsDashboard/_TableDrawingList';\n\n\n\n\n\n\nexport const api = Axios.create({\n   baseURL: '/api',\n   headers: {\n      'Content-Type': 'application/json'\n   }\n});\n\n\n\nexport const removeUnwantedHeaders = (columnsIndexArray) => {\n\n   const unwantedHeader = [\n      'Delta_Date',\n      'Delta_IT_CT',\n      'Delta_Issue',\n      'Delta_KTP'\n   ];\n   unwantedHeader.forEach(hd => {\n      delete columnsIndexArray[hd];\n   });\n   return columnsIndexArray;\n};\n\n\n\n\nexport const getDataConverted = (projectArray) => {\n   let dataOutput = {};\n   for (let i = 0; i < projectArray.length; i++) {\n\n      // get the column header\n      const project = projectArray[i];\n      const categoryArray = _.map(project.columns, 'title');\n      let columnsIndexArray = {};\n      categoryArray.forEach(cate => {\n         project.columns.forEach(cl => {\n            if (cl.title === cate) columnsIndexArray[cate] = cl.index;\n         });\n      });\n\n      const indexDrawingName = columnsIndexArray['Drawing Name'];\n      const indexRev = columnsIndexArray['Rev'];\n\n      let allDrawings = [];\n      let allDrawingsLatestRevision = [];\n\n      for (let i = 0; i < project.rows.length; i++) {\n         const dwg = project.rows[i];\n         if (dwg.cells[indexDrawingName].value === undefined) continue; // make sure all drawing name is keyed in\n         allDrawings.push([...dwg.cells]);\n\n         if (dwg.cells[indexRev].value === undefined) {\n            allDrawingsLatestRevision.push([...dwg.cells]);\n            continue;\n         };\n\n         let found = false;\n         for (let j = 0; j < allDrawingsLatestRevision.length; j++) {\n            if (allDrawingsLatestRevision[j][indexDrawingName].value === dwg.cells[indexDrawingName].value) {\n               found = true;\n               if (String(allDrawingsLatestRevision[j][indexRev].value) < String(dwg.cells[indexRev].value)) {\n                  allDrawingsLatestRevision.splice(j, 1);\n                  allDrawingsLatestRevision.push([...dwg.cells]);\n               };\n               break;\n            };\n         };\n         if (!found) allDrawingsLatestRevision.push([...dwg.cells]);\n      };\n\n      dataOutput[project.name.slice(0, project.name.length - 17)] = {\n         columnsIndexArray: removeUnwantedHeaders(columnsIndexArray),\n         allDrawings,\n         allDrawingsLatestRevision\n      };\n   };\n   return dataOutput;\n};\n\n\n\nexport const getAllDrawingSameValueInOneColumn = (data, column, dataType) => {\n\n   const { columnsIndexArray, allDrawings, allDrawingsLatestRevision } = data;\n\n   const drawings = dataType === 'all' ? allDrawings : allDrawingsLatestRevision;\n   const indexCategory = columnsIndexArray[column];\n\n   let drawingCount = {};\n   let drawingList = {};\n\n   drawings.forEach(dwg => {\n      const { value } = dwg[indexCategory];\n\n      drawingCount[value] = (drawingCount[value] || 0) + 1;\n      drawingList[value] = [...drawingList[value] || [], dwg];\n   });\n\n   return {\n      drawingCount,\n      drawingList\n   };\n};\n\n\n\nexport const getDrawingLateNow = (data, type) => {\n\n   const { allDrawingsLatestRevision, columnsIndexArray } = data;\n\n   const dwgsLateNow = [];\n   const columnHeader = type === 'getApproval' ? 'get Approval'\n      : type === 'drgToConsultant' ? 'Drg to Consultant' : null;\n\n   allDrawingsLatestRevision.forEach(dwg => {\n      const status = dwg[columnsIndexArray['Status']].value;\n      // make sure drawing is not approved or consultant reviewing\n      if (status && (status.includes('Approved') || status === 'Consultant reviewing')) return;\n\n      const dateT = dwg[columnsIndexArray[`${columnHeader} (T)`]].value;\n      const dateA = dwg[columnsIndexArray[`${columnHeader} (A)`]].value;\n      if (dateT === undefined || dateA !== undefined) return;\n\n      const diff = moment(dateT).diff(moment(), 'days');\n      if (diff < 0) dwgsLateNow.push([...dwg]);\n   });\n   return dwgsLateNow;\n};\n\nexport const getDrawingLateNow1 = (drawings, type) => {\n\n   const dwgsLateNow = [];\n   drawings.forEach(dwg => {\n      const status = dwg['Status'];\n      // make sure drawing is not approved or consultant reviewing\n      if (status && (status.includes('Approved') || status === 'Consultant reviewing')) return;\n\n      const dateT = dwg[`${type} (T)`];\n      const dateA = dwg[`${type} (A)`];\n      if (dateT === undefined || dateA !== undefined) return;\n\n      const diff = moment(dateT).diff(moment(), 'days');\n      if (diff < 0) dwgsLateNow.push(dwg);\n   });\n   return dwgsLateNow;\n};\n\n\n\nexport const mergeUndefined = ({ drawingCount, drawingList }, mergeWith, columnsIndexArray, columnHeader) => {\n   if (drawingCount['undefined'] === undefined) return;\n\n   drawingCount[mergeWith] = (drawingCount[mergeWith] || 0) + drawingCount['undefined'];\n   delete drawingCount['undefined'];\n\n   drawingList[mergeWith] = [...drawingList[mergeWith] || [], ...drawingList['undefined']];\n   delete drawingList['undefined'];\n\n   return {\n      drawingCount,\n      drawingList\n   };\n};\n\n\nexport const formatStringNameToId = (str) => {\n   let mystring = str.replace(/ /g, '').replace(/\\(|\\)/g, '');\n   return mystring.charAt(0).toLowerCase() + mystring.slice(1);\n};\n\n\nexport const pickDataToTable = (drawings, columnsIndexArray) => {\n   let arr = [];\n   drawings.forEach(dwg => {\n      let obj = {};\n      Object.keys(columnsIndexArray).forEach(header => {\n         obj[formatStringNameToId(header)] = dwg[columnsIndexArray[header]].value || '. ';\n      });\n      arr.push(obj);\n   });\n   return arr;\n};\n\n\nexport const convertDataToStackedChart = (data) => {\n   let dataChart = [];\n   let allKeys = [];\n   data && Object.keys(data).forEach(project => {\n      const { drawingCount } = mergeUndefined(getAllDrawingSameValueInOneColumn(data[project], 'Status'), 'Not Started');\n      dataChart.push({ ...drawingCount, name: project });\n      allKeys = [...allKeys, ...Object.keys(drawingCount)];\n   });\n   const itemArr = [...new Set(allKeys)];\n\n   itemArr.forEach(key => {\n      dataChart.forEach(projectData => {\n         if (key in projectData) return;\n         projectData[key] = 0;\n      });\n   });\n\n   return {\n      dataChart,\n      itemArr\n   };\n};\n\n\n\nexport const sortStatusOrder = (data) => {\n\n   const statusArr = [...data];\n   const inputStackData = [\n      'Not Started',\n      '1st cut of model in-progress',\n      '1st cut of drawing in-progress',\n      'Pending design',\n      'Consultant reviewing',\n      'Reject and resubmit',\n      'Approved with comments, to Resubmit',\n      'Revise In-Progress',\n      'Approved with Comment, no submission Required',\n      'Approved for Construction',\n   ];\n   let arr = [];\n   inputStackData.forEach(element => {\n      statusArr.forEach(e => {\n         if (element === e) arr.push(element);\n      });\n   });\n   if (arr.length === 0) return statusArr;\n   return arr;\n};\n\n\n\nexport const randomInteger = (min, max) => {\n   return Math.floor(Math.random() * (max - min + 1)) + min;\n};\n\n\nexport const createDummyRecords = () => {\n\n   let categoryArr = [\n      'Drawing Approved For Construction',\n      'Drawing Approved With Comments To Resubmit',\n      'Drawing Late For Approval',\n      'Drawing Late For Submission',\n      'Drawing Late For Construction',\n   ];\n\n   let recordArray = {};\n\n   categoryArr.forEach(cate => {\n      let arr = {};\n      if (cate === 'Drawing Late For Approval' || cate === 'Drawing Late For Submission') {\n         for (let i = 0; i < 100; i++) {\n            if (i % 3 == 0) {\n               arr[moment(new Date(2020, 6, 21)).add(i, 'day')._d] = 0;\n            } else {\n               arr[moment(new Date(2020, 6, 21)).add(i, 'day')._d] = randomInteger(0, 1);\n            };\n         };\n\n      } else if (cate === 'Drawing Late For Construction') {\n\n         for (let i = 0; i < 100; i++) {\n            if (i % 3 == 0) {\n               arr[moment(new Date(2020, 6, 21)).add(i, 'day')._d] = 0;\n            } else {\n               arr[moment(new Date(2020, 6, 21)).add(i, 'day')._d] = randomInteger(0, 2);\n            };\n         };\n\n      } else {\n\n         for (let i = 0; i < 100; i++) {\n            if (i % 3 == 0) {\n               arr[moment(new Date(2020, 6, 21)).add(i, 'day')._d] = 1;\n            } else {\n               arr[moment(new Date(2020, 6, 21)).add(i, 'day')._d] = randomInteger(1, 4);\n            };\n         };\n      };\n      recordArray[cate] = arr;\n   });\n   return recordArray;\n};\n\n\nconst getColumnWidth = (rows, accessor, headerText) => {\n   const maxWidth = 400;\n   const magicSpacing = 10;\n   const cellLength = Math.max(\n      ...rows.map(row => (`${row[accessor]}` || '').length),\n      headerText.length,\n   );\n\n   return Math.min(maxWidth, cellLength * magicSpacing);\n};\n\n\n\n\nconst getHeaderWidth = (header) => {\n\n   if (header === 'RFA Ref') return 270;\n   else if (\n      header === 'Block/Zone' ||\n      header === 'Level' || header === 'Unit/CJ' ||\n      header === 'Drg Type' || header === 'Use For' ||\n      header === 'Coordinator In Charge' || header === 'Modeller' ||\n      header === 'Model Progress' || header === 'Drawing Progress' ||\n      header === 'Construction Start'\n   ) return 200;\n   else if (header === 'Construction Issuance Date') return 220;\n   else if (header === 'Drawing') return 200;\n\n   else if (\n      header === 'Drg To Consultant (A)' ||\n      header === 'Drg To Consultant (T)' ||\n      header === 'Get Approval (A)' ||\n      header === 'Get Approval (T)'\n   ) return 220;\n\n   else if (header.includes('(A)') || header.includes('(T)')) return 190;\n\n\n\n\n   else if (header === 'Rev') return 150;\n   else if (header === 'Status') return 380;\n   else if (header === 'Remark') return 350;\n   else if (header === 'Drawing Number') return 300;\n   else if (header === 'Drawing Name') return 350;\n   else return 300;\n\n};\n\n\n\n\nexport const getColumnsHeader1 = (columnsIndexArray) => {\n\n   let columnsName = [\n      {\n         Header: '',\n         id: 'index',\n         accessor: (row, i) => i + 1,\n         width: 50,\n      },\n   ];\n\n   const filterSelect = (key) => {\n      if (\n         key === 'Status' ||\n         key === 'Rev' ||\n         key === 'Modeller' ||\n         key === 'Remark' ||\n         key === 'Coordinator In Charge' ||\n         key === 'Drg Type' ||\n         key === 'Use For' ||\n         key === 'Block/Zone' ||\n         key === 'Level' ||\n         key === 'Unit/CJ' ||\n         key === 'RFA Ref'\n      ) {\n         return true;\n      };\n   };\n\n   columnsIndexArray.forEach(hd => {\n      const width = getHeaderWidth(hd);\n\n      // const accessor = formatStringNameToId(hd);\n      const accessor = hd;\n\n      if (filterSelect(hd)) {\n         columnsName.push({\n            Header: hd,\n            Filter: _SelectColumnFilter,\n            accessor,\n            width,\n         });\n      } else {\n         columnsName.push({\n            Header: hd,\n            accessor,\n            width,\n         });\n      };\n   });\n   return columnsName;\n};\n\n\n\nexport const getHeaderSorted = (columnsData, columnsHeader) => {\n\n   let arr = [];\n   columnsData.forEach(headerData => {\n      if (headerData.Header === '') {\n         arr.push(headerData);\n         return;\n      };\n      columnsHeader.forEach(header => {\n         if (headerData.Header === header) arr.push(headerData);\n      });\n   });\n   return arr;\n};\nexport const getHeaderSorted1 = (columnsData, columnsHeader) => {\n   let arr = [];\n   columnsData.forEach(headerData => {\n      if (headerData.Header === '') {\n         arr.push(headerData);\n         return;\n      };\n      columnsHeader.forEach(header => {\n         if (headerData.Header === header) arr.push(headerData);\n      });\n   });\n   return arr;\n};\n\n\nexport const countAverage = (nums) => nums.reduce((a, b) => (a + b)) / nums.length;\n\n\nexport const recordGetAllMonth = (data, category) => {\n   let arr = [];\n   Object.keys(data[category]).forEach(item => {\n      arr.push(moment(item).add(-1, 'day').format('MM/YY'));\n   });\n   return [...new Set(arr)];\n};\n\n\nfunction getRandomInt(min, max) {\n   min = Math.ceil(min);\n   max = Math.floor(max);\n   return Math.floor(Math.random() * (max - min) + min); //The maximum is exclusive and the minimum is inclusive\n};\nexport const recordDataToChartDaily = (data, category, month) => {\n   let arr = [];\n   Object.keys(data[category]).forEach((item, i) => {\n\n      const addNos = i % 3 == 0 ? -1 \n         : i % 2 == 0 ? 1\n         : i % 5 == 0 ? 2 : 0;\n\n      const date = moment(item).add(-1, 'day');\n      if (date.format('MM/YY') === month) {\n         arr.push({\n            date: date.format('DD'),\n            value: data[category][item],\n            target: data[category][item] + addNos\n         });\n      };\n   });\n   return arr;\n};\n\n\nexport const recordDataToChartWeekly = (data, category) => {\n   let arr = [];\n   Object.keys(data[category]).forEach((item, i) => {\n      \n      const addNos = i % 3 == 0 ? -1 \n         : i % 5 == 0 ? 1\n         : i % 7 == 0 ? 2 : 0;\n\n      const date = moment(item).add(-1, 'day');\n      arr.push({\n         week: date.format('W'),\n         month: date.format('MM'),\n         year: date.format('YY'),\n         value: data[category][item],\n         target: data[category][item] + addNos\n      });\n   });\n\n   let groups = {};\n   for (let i = 0; i < arr.length; i++) {\n      let weekName = `W${arr[i].week} ${arr[i].month}/${arr[i].year}`;\n      groups[weekName] = {};\n   };\n   \n\n   for (let i = 0; i < arr.length; i++) {\n      let weekName = `W${arr[i].week} ${arr[i].month}/${arr[i].year}`;\n      groups[weekName].value = [...groups[weekName].value || [], arr[i].value];\n      groups[weekName].target = [...groups[weekName].target || [], arr[i].target];\n   };\n\n   let arrOutput = [];\n   for (let week in groups) {\n      arrOutput.push({ \n         week, \n         value: groups[week].value.reduce((a, b) => a + b, 0),\n         target: groups[week].target.reduce((a, b) => a + b, 0),\n      });\n   };\n   return arrOutput;\n};\n\n\nexport const recordDataToChartMonthly = (data, category) => {\n   let arr = [];\n   Object.keys(data[category]).forEach((item, i) => {\n\n      const addNos = i % 4 == 0 ? -4 \n         : i % 3 == 0 ? 3\n         : i % 2 == 0 ? 2 : 0;\n\n      const date = moment(item).add(-1, 'day');\n      arr.push({\n         week: date.format('W'),\n         month: date.format('MM'),\n         year: date.format('YY'),\n         value: data[category][item],\n         target: data[category][item] + getRandomInt(-3, 3)\n      });\n   });\n   let groups = {};\n   for (let i = 0; i < arr.length; i++) {\n      let monthName = `${arr[i].month}/${arr[i].year}`;\n      groups[monthName] = {};\n   };\n\n   for (let i = 0; i < arr.length; i++) {\n      let monthName = `${arr[i].month}/${arr[i].year}`;\n      groups[monthName].value = [...groups[monthName].value || [], arr[i].value];\n      groups[monthName].target = [...groups[monthName].target || [], arr[i].target];\n   };\n\n   let arrOutput = [];\n   for (let month in groups) {\n      arrOutput.push({ \n         month, \n         value: groups[month].value.reduce((a, b) => a + b, 0),\n         target: groups[month].target.reduce((a, b) => a + b, 0),\n      });\n   };\n   return arrOutput;\n};\n\n\n\n\nexport const changeColumnOrder = (arr, accessor, leftOrRight, to) => {\n   const array = [...arr];\n   let cl = array.find(item => item.accessor === accessor);\n   const index = array.indexOf(cl);\n   const f = array.splice(index, 1)[0];\n   if (leftOrRight) {\n      array.splice(index + leftOrRight, 0, f);\n   } else {\n      array.splice(to, 0, f);\n   };\n   return array;\n};","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\_dashboardComp\\assets\\constantDashboard.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\_dashboardComp\\PageDashboard.js",["295","296","297","298","299","300","301","302","303","304"],"import { Col, Divider, Modal, Row, Skeleton } from 'antd';\nimport Axios from 'axios';\nimport React, { useEffect, useState } from 'react';\nimport { SERVER_URL } from './assets/constantDashboard';\nimport CardPanelProject from './componentsDashboard/CardPanelProject';\nimport _ChartBarDrawing from './componentsDashboard/_ChartBarDrawing';\nimport _ChartBarDrawingLate from './componentsDashboard/_ChartBarDrawingLate';\nimport _ChartBarStack from './componentsDashboard/_ChartBarStack';\nimport _ChartPieDrawing from './componentsDashboard/_ChartPieDrawing';\nimport _ChartProgress from './componentsDashboard/_ChartProgress';\nimport _FormPivot from './componentsDashboard/_FormPivot';\nimport _TableDrawingList from './componentsDashboard/_TableDrawingList';\nimport { createDummyRecords } from './utils/functionDashboard';\n\n\n\n\nconst convertDataFromDB = (data, projectsArray) => {\n\n   let output = {};\n   data.forEach(projectData => {\n      let { publicSettings: { headers, drawingTypeTree }, rows: rowsAllInProject, _id } = projectData;\n\n      let rows = [];\n      const wohhupNode = drawingTypeTree.find(x => x['Drawing Number'] === 'Woh Hup Private Ltd');\n      if (wohhupNode) {\n         const wohhupAllNodes = getTreeFlattenOfNodeInArray(drawingTypeTree, wohhupNode);\n         wohhupAllNodes.forEach(node => {\n            rows = [...rows, ...rowsAllInProject.filter(x => x._parentRow === node.id)];\n         });\n      };\n\n\n      if (rows.length <= 20) return;\n\n      let projectName = projectsArray.find(dt => dt.id === _id).name;\n\n      let headersArr = headers.map(hd => hd.text);\n\n      rows.forEach(r => {\n         if (!r.Rev) r.Rev = '0';\n         if (!r.Status) r.Status = 'Not Started';\n      });\n\n      const getUniqueValueByColumns = (rows, header) => {\n         let valueArr = [];\n         rows.forEach(row => valueArr.push(row[header]));\n         return [...new Set(valueArr)];\n      };\n      let revArr = getUniqueValueByColumns(rows, 'Rev');\n      let inputStack = getUniqueValueByColumns(rows, 'Status');\n      let drawingCountSubStatus = [];\n      let drawingListSubStatus = {};\n      revArr.forEach(rev => {\n         let rowsFilter = rows.filter(r => r['Rev'] === rev);\n         let obj = {};\n         let objDwgs = {};\n         rowsFilter.forEach(r => {\n            obj[r.Status] = (obj[r.Status] || 0) + 1;\n            objDwgs[r.Status] = [...objDwgs[r.Status] || [], r];\n         });\n         obj.name = rev;\n         drawingCountSubStatus.push(obj);\n         drawingListSubStatus[rev] = objDwgs;\n      });\n\n\n      let drawingCountStatus = {};\n      let drawingsListStatus = {};\n      inputStack.forEach(stt => {\n         let rrrArr = rows.filter(r => r.Status === stt);\n         rrrArr.forEach(r => {\n            drawingCountStatus[stt] = (drawingCountStatus[stt] || 0) + 1;\n         });\n         drawingsListStatus[stt] = rrrArr;\n      });\n      const dataPieChartStatus = Object.keys(drawingCountStatus).map(key => ({ name: key, value: drawingCountStatus[key] }));\n\n      output[projectName] = {\n         rowsAll: rows,\n         drawingCountSubStatus,\n         drawingListSubStatus,\n         inputStack,\n         headers: headersArr,\n         drawingCountStatus,\n         drawingsListStatus,\n         dataPieChartStatus,\n         projectsCount: data.length\n      };\n   });\n\n   return output;\n};\n\n\nconst PageDashboard = ({ projectsArray, token }) => {\n\n   const [dataDB, setDataDB] = useState(null);\n   const [loading, setLoading] = useState(false);\n   const [dummy, setDummy] = useState({});\n\n\n   useEffect(() => {\n\n      const loadData = async () => {\n         setLoading(true);\n         try {\n            setDummy(dummyData);\n\n            const resDB = await Axios.post(`${SERVER_URL}/sheet/find-many`, { token, sheetIds: projectsArray.map(x => x.id) });\n            setDataDB(convertDataFromDB(resDB.data, projectsArray));\n\n            setLoading(false);\n\n         } catch (err) {\n            console.log(err);\n            setLoading(false);\n         };\n      };\n      loadData();\n   }, []);\n\n\n\n   const [_drawingTableVisible, set_DrawingTableVisible] = useState(false);\n   const [_drawingTableData, set_DrawingTableData] = useState(null);\n   const _openDrawingTable = (projectName, title, drawings, headers, columnsHeaderSorted, isSelectedShownOnly) => {\n      set_DrawingTableData({ projectName, title, drawings, headers, columnsHeaderSorted, isSelectedShownOnly });\n      set_DrawingTableVisible(true);\n   };\n   const _closeTableAndReset = () => {\n      set_DrawingTableVisible(false);\n      set_DrawingTableData(null);\n   };\n\n\n   return (\n      <div style={{ marginTop: 15 }}>\n         <Row justify='space-around' style={{ margin: '25px 0 5px 0' }}>\n            {dataDB && Object.keys(dataDB).length > 1 && (\n               <>\n                  <_ChartBarDrawingLate data={dummy.dummyLateConstruction} title='No Of Drawing Late Construction' />\n                  <_ChartBarDrawingLate data={dataDB} title='No Of Drawing Late Approval' />\n                  <_ChartBarStack data={dataDB} title='Drawing Status' />\n                  <_ChartBarStack data={dummy.productivityDummy} title='Productivity - (days per drawing)' />\n               </>\n            )}\n         </Row>\n\n         {!loading && dataDB ? (\n            <div style={{ padding: '0 12px' }}>\n               {Object.keys(dataDB).map(projectName => {\n                  return (\n                     <CardPanelProject\n                        title={projectName.toUpperCase()}\n                        key={projectName}\n                        projectsCount={dataDB[projectName].projectsCount}\n                     >\n                        <ChartPanel title='Overdue submissions'>\n                           <_ChartProgress\n                              data={dataDB[projectName]}\n                              openDrawingTable={_openDrawingTable}\n                              projectName={projectName}\n\n                           />\n                        </ChartPanel>\n\n                        <ChartPanel title='Drawing Status'>\n                           <_ChartPieDrawing\n                              data={dataDB[projectName]}\n                              openDrawingTable={_openDrawingTable}\n                              projectName={projectName}\n                           />\n                        </ChartPanel>\n\n                        <ChartPanel title='Nos of drawing per revision'>\n                           <_ChartBarDrawing\n                              data={dataDB[projectName]}\n                              openDrawingTable={_openDrawingTable}\n                              projectName={projectName}\n                           />\n                        </ChartPanel>\n\n                        <ChartPanel title='Sorted table by category'>\n                           <_FormPivot\n                              data={dataDB[projectName]}\n                              openDrawingTable={_openDrawingTable}\n                              projectName={projectName}\n                              dataRecordedDummy={createDummyRecords()}\n                           />\n                        </ChartPanel>\n\n                     </CardPanelProject>\n                  )\n               })}\n\n            </div>\n         ) : <SkeletonCard />}\n\n\n         {_drawingTableData && (\n            <Modal\n               title={_drawingTableData.projectName}\n               visible={_drawingTableVisible}\n               footer={false}\n               onCancel={_closeTableAndReset}\n               width={0.9 * window.innerWidth}\n               height={0.7 * window.innerHeight}\n               // centered={true}\n               style={{\n                  // justifyContent: 'center',\n                  // alignItems: 'center'\n               }}\n               bodyStyle={{\n                  paddingTop: 10\n               }}\n            >\n               <div style={{ display: 'flex' }}>\n                  <h3 style={{ padding: '0 0 10px 0' }}>{_drawingTableData.title.type}</h3>\n                  <Divider type='vertical' style={{ height: 25 }} />\n                  <h3 style={{ padding: '0 10px' }}>{_drawingTableData.title.category}</h3>\n                  <Divider type='vertical' style={{ height: 25 }} />\n                  <h3 style={{ padding: '0 10px' }}>{_drawingTableData.drawings.length + ' drawings'}</h3>\n               </div>\n\n               <_TableDrawingList\n                  data={_drawingTableData}\n                  title={_drawingTableData.title}\n               />\n\n            </Modal>\n         )}\n      </div>\n\n   );\n};\n\nexport default PageDashboard;\n\n\n\nconst ChartPanel = ({ title, children }) => {\n   return (\n      <Col style={{ marginBottom: 10 }} xs={24} md={12} xl={6}>\n         <div style={{ fontSize: '18px', textAlign: 'center', fontWeight: 'bold' }}>{title}</div>\n         {children}\n      </Col>\n   );\n};\n\n\nconst SkeletonCard = () => {\n   return (\n      <div style={{ padding: '0 12px' }}>\n         <CardPanelProject title='Project loading ...'>\n            <div style={{ padding: '0 3px' }}>\n               <Skeleton paragraph={{ rows: 14 }} active />\n            </div>\n         </CardPanelProject>\n      </div>\n   );\n};\n\n\n\nconst dummyData = {\n   productivityDummy: {\n      inputData: [\n         {\n            // 'Consultant review and reply': 4,\n            // 'Create update drawing': 3,\n            // 'Create update model': 7,\n            // 'name': 'Sumang',\n            'Consultant review and reply': 4,\n            'Create update drawing': 3,\n            'Create update model': 7,\n            'name': 'Sumang'\n         },\n         {\n            // 'Consultant review and reply': 5,\n            // 'Create update drawing': 4,\n            // 'Create update model': 6,\n            // 'name': 'Handy',\n            'Consultant review and reply': 5,\n            'Create update drawing': 4,\n            'Create update model': 6,\n            'name': 'Handy',\n         }\n      ],\n      inputStack: ['Consultant review and reply', 'Create update drawing', 'Create update model']\n   },\n   dummyLateConstruction: [\n      // { name: 'Handy', value: 6 },\n      // { name: 'Sumang', value: 15 },\n      { name: 'Handy', value: 8 },\n      { name: 'Sumang', value: 13 },\n   ]\n};\n\n\nexport const flattenAllTreeChildNode1 = (root) => {\n   let temp = [];\n   let queue = [...root];\n   while (queue.length > 0) {\n      let node = queue.shift();\n      if (node.children) {\n         let childNode = [];\n         node.children.forEach(nd => {\n            childNode.push({ ...nd, parentId: node.id });\n         });\n         queue = [...queue, ...childNode];\n         let nodeObj = { ...node };\n         delete nodeObj.children;\n         temp.push(nodeObj);\n      } else {\n         let nodeObj = { ...node };\n         delete nodeObj.children;\n         temp.push(nodeObj);\n      };\n   };\n   return temp;\n};\n\nconst getListOfBranchesTree = (inputArr) => {\n   const arr = inputArr.map(x => ({ ...x }));\n   arr.sort((a, b) => { return b.treeLevel - a.treeLevel });\n\n   const parentArrIds = [];\n   arr.forEach(x => {\n      let item = arr.find(fld => fld.id === x.parentId);\n      if (item) {\n         item.children = [...item.children || [], x];\n      } else {\n         parentArrIds.push(x.id);\n      };\n   });\n   return arr.filter(x => parentArrIds.indexOf(x.id) !== -1);\n};\nconst getTreeFlattenOfNodeInArray = (treeArray, node) => {\n   let obj = { ...node };\n   let arrayTree = treeArray.map(x => ({ ...x })).filter(x => x.treeLevel > obj.treeLevel);\n   arrayTree = [...arrayTree, obj];\n   const treeOfFound = getListOfBranchesTree(arrayTree).find(x => x.id === obj.id);\n   return flattenAllTreeChildNode1([treeOfFound]);\n};\n","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\PageSpreadsheet.js",["305","306","307","308","309","310"],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\_dashboardComp\\componentsDashboard\\_ChartBarDrawing.js",["311"],"import { Badge } from 'antd';\nimport React, { useState } from 'react';\nimport { Bar, BarChart, CartesianGrid, LabelList, Tooltip, XAxis, YAxis } from 'recharts';\nimport styled from 'styled-components';\nimport { pieChartColors2 } from '../assets/constantDashboard';\nimport { getAllDrawingSameValueInOneColumn, sortStatusOrder } from '../utils/functionDashboard';\n\n\n\nconst getSubDrawingByStatus = (drawingList, columnsIndexArray) => {\n\n    let drawingCountSubStatus = [];\n    let drawingListSubStatus = {};\n    let inputStack = [];\n\n    for (const key in drawingList) {\n        const result = getAllDrawingSameValueInOneColumn({\n            allDrawingsLatestRevision: drawingList[key],\n            columnsIndexArray\n        }, 'Status');\n\n        const drawingCountArr = result.drawingCount;\n        const drawingListArr = result.drawingList;\n\n\n        if ('undefined' in drawingCountArr) {\n            drawingCountArr['Not Started'] = drawingCountArr['undefined'] + drawingCountArr['Not Started'] || 0;\n            delete drawingCountArr['undefined'];\n        };\n\n        if ('undefined' in drawingListArr) {\n            drawingListArr['Not Started'] = [...drawingListArr['undefined'], drawingListArr['Not Started'] || []];\n            delete drawingListArr['undefined'];\n        };\n\n        for (const key in drawingCountArr) {\n            if (key !== 'undefined') inputStack.push(key);\n        };\n\n        drawingCountArr['name'] = key;\n        drawingCountSubStatus.push(drawingCountArr);\n        drawingListSubStatus[key] = drawingListArr;\n    };\n\n    return {\n        drawingCountSubStatus,\n        drawingListSubStatus,\n        inputStack: [...new Set(inputStack)]\n    };\n};\n\n\nconst _ChartBarDrawing = ({ data, openDrawingTable, projectName }) => {\n\n    const { drawingCountSubStatus, drawingListSubStatus, inputStack, headers } = data;\n\n\n    const onClick = (e, item) => {\n        openDrawingTable(\n            projectName,\n            { type: 'Drawings by revision', category: `Revision: ${e.name} - Status: ${item}` },\n            drawingListSubStatus[e.name][item],\n            headers\n        );\n    };\n\n    const LabelCustomStacked = (props) => {\n        const { x, y, value, height } = props;\n        const fontSize = 13;\n        return (\n            <text\n                style={{ fontSize: fontSize, boxShadow: '5px 15px 24px 5px black', }}\n                x={x + 24}\n                y={y + height / 2}\n                fill='#2c3e50'\n                dominantBaseline='central'\n            >\n                {height + 3 < fontSize ? null : value}\n            </text>\n        );\n    };\n\n    const LabelCustomStackedTotal = (props) => {\n        const { x, y, value, topBar } = props;\n        return (\n            <>\n                <text\n                    style={{ fontSize: 17, fontWeight: 'bold' }}\n                    x={x - 2}\n                    y={y - 10}\n                    fill='black'\n                    dominantBaseline='central'\n\n                >\n                    {topBar ? value : null}\n                </text>\n            </>\n        );\n    };\n    const [tooltip, setTooltip] = useState(false);\n    const TooltipCustom = (props) => {\n        const { active, payload } = props;\n        if (!active || !tooltip) return null;\n        for (const bar of payload)\n            if (bar.dataKey === tooltip) {\n                return (\n                    <div style={{\n                        backgroundColor: 'white',\n                        color: bar.fill,\n                        fontSize: 14,\n                        border: `1px solid ${bar.fill}`,\n                        padding: '3px',\n                        maxWidth: '170px'\n                    }}>\n                        {bar.name}\n                        <br />\n                        <mark style={{ backgroundColor: bar.fill }}>\n                            ({bar.value})\n                        </mark>\n                    </div>\n                );\n            };\n        return null;\n    };\n\n\n    return (\n        <div style={{ margin: '0 auto', display: 'table' }}>\n            <BarChart\n                width={350}\n                height={350}\n                data={drawingCountSubStatus.sort((a, b) => {\n                    if (a.name < b.name) return -1;\n                    if (a.name > b.name) return 1;\n                    return 0;\n                })}\n                margin={{ top: 35, right: 15, left: 0, bottom: 20 }}\n                padding={{ top: 5 }}\n                barSize={23}\n            >\n                <CartesianGrid strokeDasharray='3 3' />\n                <XAxis tickSize={3} dataKey='name' textAnchor='middle' interval={0} scale='point' padding={{ left: 35, right: 35 }} />\n                <YAxis />\n                <Tooltip content={<TooltipCustom />} />\n                {sortStatusOrder(inputStack).map((item, i) => {\n                    return (\n                        <Bar\n                            key={item}\n                            dataKey={item}\n                            stackId='a'\n                            fill={pieChartColors2[item]}\n                            isAnimationActive={false}\n                            onClick={(e) => onClick(e, item)}\n                            onMouseOver={() => setTooltip(item)}\n                            label={<LabelCustomStackedTotal topBar={i === inputStack.length - 1} />}\n                        >\n                            <LabelList dataKey={item} position='left' content={<LabelCustomStacked item={item} />} />\n                        </Bar>\n                    )\n                })}\n\n            </BarChart>\n\n            <div style={{ paddingLeft: 50, height: 180 }}>\n\n                {sortStatusOrder(inputStack).reverse().map((key, i) => (\n                    <div key={key} style={{ display: 'flex' }}>\n                        <StyledBadge\n                            size='small'\n                            color={pieChartColors2[key]}\n                            text={key}\n                        />\n                    </div>\n                ))}\n                \n            </div>\n        </div>\n\n    );\n};\n\nexport default _ChartBarDrawing;\n\nconst StyledBadge = styled(Badge)`\n    .ant-badge-status-dot {\n        width: 15px;\n        height: 15px;\n        border-radius: 0;\n    }\n`;\n","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\_dashboardComp\\componentsDashboard\\CardPanelProject.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\_dashboardComp\\componentsDashboard\\_ChartBarDrawingLate.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\_dashboardComp\\componentsDashboard\\_ChartBarStack.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\_dashboardComp\\componentsDashboard\\_ChartProgress.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\_dashboardComp\\componentsDashboard\\_ChartPieDrawing.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\CellIndex.js",["312"],"import React, { useContext } from 'react';\nimport styled from 'styled-components';\nimport { Context as CellContext } from '../../contexts/cellContext';\nimport { Context as ProjectContext } from '../../contexts/projectContext';\nimport { Context as RowContext } from '../../contexts/rowContext';\nimport { addZero } from '../../utils';\nimport { rowLocked } from './Cell';\n\n\nconst CellIndex = ({ rowData }) => {\n\n   const { state: stateRow, getSheetRows } = useContext(RowContext);\n   const { state: stateCell, setCellActive } = useContext(CellContext);\n   const { state: stateProject } = useContext(ProjectContext);\n\n   const { drawingTypeTree, rowsAll, modeGroup, rowsSelected } = stateRow;\n   const { roleTradeCompany } = stateProject.allDataOneSheet;\n\n   const isLockedRow = rowLocked(roleTradeCompany, rowData, modeGroup, drawingTypeTree);\n\n\n   const onClickCellIndex = () => {\n      setCellActive(null);\n      if (isLockedRow) return;\n      const row = rowsAll.find(x => x.id === rowData.id);\n      if (!rowsSelected.find(x => x.id === rowData.id) && rowData._rowLevel === 1) {\n         getSheetRows({\n            ...stateRow,\n            rowsSelected: [...rowsSelected, row],\n            rowsSelectedToMove: []\n         });\n      };\n   };\n\n   return (\n      <Styled onClick={onClickCellIndex}>\n         {rowData._rowLevel === 1 ? addZero(rowsAll.indexOf(rowsAll.find(r => r.id === rowData.id)) + 1) : ''}\n      </Styled>\n   );\n};\n\nexport default CellIndex;\n\n\n\nconst Styled = styled.div`\n    color: grey;\n    font-size: 12px;\n\n    width: 100%;\n    height: 100%;\n    padding: 5px;\n    padding-right: 8px;\n    text-align: right\n\n`;\n\n","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\_dashboardComp\\componentsDashboard\\_FormPivot.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\_dashboardComp\\componentsDashboard\\_TableDrawingList.js",["313","314","315","316"],"import { Button, Icon, Input } from 'antd';\nimport React, { useCallback, useEffect, useMemo, useRef, useState } from 'react';\nimport {\n    useBlockLayout,\n    useColumnOrder,\n    useExpanded,\n    useFilters,\n    useFlexLayout,\n    useGlobalFilter,\n    useGroupBy,\n    useResizeColumns,\n    useRowSelect,\n    useSortBy,\n    useTable\n} from 'react-table';\nimport { FixedSizeList } from 'react-window';\nimport styled from 'styled-components';\nimport { colorType } from '../assets/constantDashboard';\nimport { changeColumnOrder, formatStringNameToId, getColumnsHeader1, getHeaderSorted1 } from '../utils/functionDashboard';\nimport PanelRightClick from './PanelRightClick';\n\n\n\nconst scrollbarWidth = () => {\n    const scrollDiv = document.createElement('div');\n    scrollDiv.setAttribute(\n        'style',\n        'width: 100px; height: 100px; overflow: scroll; position: absolute; top: -9999px;'\n    );\n    document.body.appendChild(scrollDiv);\n    const scrollbarWidth = scrollDiv.offsetWidth - scrollDiv.clientWidth;\n    document.body.removeChild(scrollDiv);\n    return scrollbarWidth;\n};\n\nconst headerProps = (props, { column }) => {\n    return getStyles(props, column.align);\n};\n\nconst checkCellFix = (cell) => (\n    !cell.isAggregated &&\n    !cell.isGrouped &&\n    cell.isRepeatedValue &&\n    cell.row.subRows.length !== 0 &&\n    // cell.row.depth === 0\n    cell.row.groupByID !== cell.column.id\n);\n\nconst cellProps = (props, { cell }) => {\n\n    const colorFix = checkCellFix(cell) && '#f6e58d';\n\n    props.style.background = colorFix || (cell.isGrouped ? '#7ed6df' :\n        cell.isAggregated ? '#f6e58d' :\n            cell.isPlaceholder ? '#ff000042' :\n                'white');\n    return getStyles(props, cell.column.align);\n};\n\nconst getStyles = (props, align = 'left') => [props,\n    {\n        style: {\n            justifyContent: align === 'right' ? 'flex-end' : 'flex-start',\n            alignItems: 'flex-start',\n            display: 'flex',\n        },\n    },\n];\n\nconst headerWithNoGroupFunction = (column) => {\n    const arr = [\n        'Drawing Number', 'Drawing Name'\n    ];\n    return arr.indexOf(column) !== -1;\n};\n\nexport const DefaultColumnFilter = ({\n    column: { filterValue, preFilteredRows, setFilter },\n}) => {\n    const count = preFilteredRows.length;\n\n    const [btnActive, setBtnActive] = useState(false);\n    const toggleBtn = () => {\n        setBtnActive(!btnActive);\n        setFilter(undefined);\n    };\n\n    return (\n        <div style={{ display: 'flex' }}>\n            <div onClick={toggleBtn} style={{ cursor: 'pointer' }}>\n                {btnActive ? <IconTable type='search' color='green' /> : <IconTable type='search' />}\n            </div>\n            {btnActive && (\n                <input\n                    value={filterValue || ''}\n                    onChange={e => {\n                        setFilter(e.target.value || undefined) // Set undefined to remove the filter entirely\n                    }}\n                    placeholder={`Search ${count} records...`}\n                    style={{ height: 21, margin: 0 }}\n                />\n            )}\n        </div>\n    );\n};\n\nexport const _SelectColumnFilter = ({\n    column: { filterValue, setFilter, preFilteredRows, id }\n}) => {\n\n    const options = useMemo(() => {\n        const options = new Set();\n\n        preFilteredRows.forEach(row => {\n            options.add(row.values[id]);\n        });\n\n        return [...options.values()];\n    }, [id, preFilteredRows]);\n\n    const [btnActive, setBtnActive] = useState(false);\n\n    const toggleBtn = () => {\n        setBtnActive(!btnActive);\n        setFilter(undefined);\n    };\n\n    return (\n        <div style={{ display: 'flex' }}>\n\n            <div onClick={toggleBtn} style={{ cursor: 'pointer' }}>\n                {btnActive\n                    ? <IconTable type='search' color='green' />\n                    : <IconTable type='search' />\n                }\n            </div>\n\n            {btnActive && (\n                <select\n                    value={filterValue}\n                    onChange={e => setFilter(e.target.value || undefined)}\n                    style={{ height: 21, width: 40, margin: 0 }}\n                >\n                    <option value=''>All</option>\n                    {options.map((option, i) => (\n                        <option key={i} value={option}>\n                            {option}\n                        </option>\n                    ))}\n                </select>\n            )}\n        </div>\n    );\n};\n\nexport const GlobalFilter = ({ filter, setFilter }) => {\n\n    const [value, setValue] = useState(filter);\n\n    const onChange = value => {\n        setTimeout(() => {\n            setFilter(value || undefined);\n        }, 1000);\n    };\n\n    return (\n        <Input.Search\n            placeholder='Search ...'\n            value={value || ''}\n            onChange={e => {\n                setValue(e.target.value);\n                onChange(e.target.value);\n            }}\n            style={{ width: 200 }}\n        />\n    );\n};\n\n\n\nconst _TableDrawingList = ({ data }) => {\n\n    const [openAllColumn, setOpenAllColumn] = useState(false);\n    const { title, drawings, headers, columnsHeaderSorted, isSelectedShownOnly } = data;\n\n    const tableDataInput = drawings;\n    const columnsName = getColumnsHeader1(headers);\n\n\n    const columns = useMemo(() => {\n        return columnsHeaderSorted && !openAllColumn && isSelectedShownOnly ?\n            getHeaderSorted1(columnsName, columnsHeaderSorted) :\n            columnsName;\n    }, [columnsHeaderSorted, columnsName, openAllColumn, isSelectedShownOnly]);\n\n\n    const [reorderColumns, setReorderColumns] = useState(false);\n    const columnsInput = reorderColumns ? reorderColumns : columns;\n\n\n    const openAllColumnTable = () => {\n        setOpenAllColumn(true);\n    };\n\n    const moveColumnLocation = (value, columnActive) => {\n        if (value === 1 || value === -1) {\n            setReorderColumns(changeColumnOrder(columnsInput, columnActive.id, value));\n        };\n    };\n\n\n    return (\n        <Table\n            title={title}\n            columns={columnsInput}\n            data={tableDataInput}\n            openAllColumnTable={openAllColumnTable}\n            moveColumnLocation={moveColumnLocation}\n            columnsHeaderSorted={columnsHeaderSorted}\n            hiddenColumnsArray={columns.filter(\n                cl => cl.Header.includes('(A)') ||\n                    cl.Header.includes('(T)') ||\n                    cl.Header === 'Model Progress' ||\n                    cl.Header === 'Drawing Progress'\n            ).map(x => x.accessor)}\n\n        />\n    );\n};\nexport default _TableDrawingList;\n\n\n\nconst Table = ({\n    columns,\n    data,\n    hiddenColumnsArray,\n    openAllColumnTable,\n    title,\n    moveColumnLocation,\n    columnsHeaderSorted\n}) => {\n\n    const listRef = useRef();\n    const defaultColumn = useMemo(() => ({\n        // minWidth: 30, // minWidth is only used as a limit for resizing\n        // width: 150, // width is used for both the flex-basis and flex-grow\n        // maxWidth: 200, // maxWidth is only used as a limit for resizing\n        Filter: DefaultColumnFilter,\n    }), []);\n\n    const scrollBarSize = useMemo(() => scrollbarWidth(), []);\n\n    const reactTable = useTable(\n        {\n            columns,\n            data,\n            defaultColumn,\n            initialState: {\n                hiddenColumns: hiddenColumnsArray\n            },\n            autoResetExpanded: false,\n        },\n        useFilters,\n        useGlobalFilter,\n        useGroupBy,\n        useExpanded,\n        useSortBy,\n        useResizeColumns,\n        useFlexLayout,\n        useRowSelect,\n        useBlockLayout,\n        useColumnOrder,\n        hooks => {\n            hooks.useInstanceBeforeDimensions.push(({ headerGroups }) => {\n                // fix the parent group of the selection button to not be resizable\n                const selectionGroupHeader = headerGroups[0].headers[0];\n                selectionGroupHeader.canResize = true;\n            })\n        },\n    );\n\n    const {\n        getTableProps,\n        getTableBodyProps,\n        headerGroups,\n        rows,\n        totalColumnsWidth,\n        prepareRow,\n        disableMultiSort,\n        isMultiSortEvent = (e) => e.shiftKey,\n        state,\n        setGlobalFilter,\n        toggleHideAllColumns,\n        toggleGroupBy,\n        toggleExpanded,\n        expandedRows\n\n    } = reactTable;\n\n    const { globalFilter, expanded } = state;\n    const [panelFunctionVisible, setPanelFunctionVisible] = useState(false);\n    const [topPanelFunction, setTopPanelFunction] = useState(0);\n    const [leftPanelFunction, setLeftPanelFunction] = useState(0);\n\n\n\n\n    useEffect(() => {\n        columnsHeaderSorted && columnsHeaderSorted.forEach(name => {\n            if (name !== 'Drawing Name' && name !== 'Drawing Number') {\n                toggleGroupBy(formatStringNameToId(name), true);\n            };\n        });\n    }, []);\n\n    const [maxRowExpand, setMaxRowExpand] = useState(0);\n    useEffect(() => {\n        setMaxRowExpand(Object.values(expanded).length);\n\n        if (Object.values(expanded).length >= maxRowExpand) {\n            expandedRows.forEach(row => {\n                toggleExpanded(row.id, true);\n            });\n        };\n    }, [expandedRows]);\n\n\n    const handleMouseDown = (e) => {\n        if (e.button === 0) setPanelFunctionVisible(false);\n    };\n    useEffect(() => {\n        document.addEventListener('mousedown', handleMouseDown);\n        return () => document.removeEventListener('mousedown', handleMouseDown);\n    }, []);\n\n    const panelFunction = (e, column) => {\n        setColumnActive(column);\n        setPanelFunctionVisible(true);\n        const clickX = e.clientX;\n        const clickY = e.clientY;\n        const screenW = window.innerWidth;\n        const screenH = window.innerHeight;\n\n        const right = (screenW - clickX) > 179;\n        const left = !right;\n        const top = (screenH - clickY) > 379;\n        const bottom = !top;\n\n        if (right) {\n            setLeftPanelFunction(`${clickX + 5}px`);\n        };\n        if (left) {\n            setLeftPanelFunction(`${clickX - 179 - 5}px`);\n        };\n        if (top) {\n            setTopPanelFunction(`${clickY + 5}px`);\n        };\n        if (bottom) {\n            setTopPanelFunction(`${clickY - 379 - 5}px`);\n        };\n    };\n\n    const [columnActive, setColumnActive] = useState(false);\n    const buttonPanelFunction = (btn) => {\n        if (btn === 'Hide this column') {\n            columnActive.toggleHidden(true);\n        } else if (btn === 'Unhide all') {\n            toggleHideAllColumns(false);\n        } else if (btn === 'Move to left') {\n            moveColumnLocation(-1, columnActive);\n        } else if (btn === 'Move to right') {\n            moveColumnLocation(1, columnActive);\n        } else if (btn === 'Move to ...') {\n            return;\n        };\n    };\n\n\n\n    const RenderRow = useCallback(args => {\n        const { index, style } = args;\n        const row = rows[index];\n        prepareRow(row);\n\n        return (\n            <div {...row.getRowProps({ style })} className='tr'>\n                {row.cells.map(cell => {\n                    return (\n                        <div {...cell.getCellProps(cellProps)} className='td'>\n                            {cell.isGrouped ? (\n                                <>\n                                    <span {...row.getExpandedToggleProps()}>\n                                        {row.isExpanded ? <IconTable type='up-circle' color='grey' /> : <IconTable type='down-circle' color='grey' />}\n                                    </span>{' '}\n                                    {cell.render('Cell')} ({row.subRows.length + ' nos'})\n                                </>\n                            ) : cell.isAggregated ? cell.render('Aggregated')\n                                    : cell.isPlaceholder ? null\n                                        : checkCellFix(cell) ? null\n                                            : cell.render('Cell')}\n                        </div>\n                    );\n                })}\n            </div>\n        );\n    }, [prepareRow, rows]);\n\n\n\n\n    return (\n        <>\n            <div style={{ display: 'flex', marginBottom: 15 }}>\n                <GlobalFilter filter={globalFilter} setFilter={setGlobalFilter} />\n\n                {title.type === 'Sorted table' && (\n                    <Button onClick={openAllColumnTable} style={{ marginLeft: 15, background: colorType.grey4 }}>View all drawings</Button>\n                )}\n\n            </div>\n\n\n            <Container>\n                <div {...getTableProps()} className='table'>\n                    <div className='thead'>\n                        {headerGroups.map(headerGroup => (\n                            <div className='tr' {...headerGroup.getHeaderGroupProps()}>\n                                {headerGroup.headers.map(column => {\n                                    return (\n                                        <div\n                                            className='th'\n                                            {...column.getHeaderProps(headerProps)}\n                                        >\n                                            {column.canResize && (\n                                                <div {...column.getResizerProps()}\n                                                    className={`resizer ${column.isResizing ? 'isResizing' : ''}`}\n                                                />\n                                            )}\n\n                                            <div style={{ fontWeight: 'bold', marginRight: 10 }}>\n                                                {column.render('Header')}\n                                            </div>\n\n                                            {column.canGroupBy && column.Header !== '' && (\n                                                <span {...column.getGroupByToggleProps()}>\n                                                    {headerWithNoGroupFunction(column.Header) ? null\n                                                        : column.isGrouped ? <IconTable type='stop' color='red' />\n                                                            : <IconTable type='plus-circle' />\n                                                    }\n                                                </span>\n                                            )}\n\n                                            <span {...column.getSortByToggleProps()}\n                                                onClick={\n                                                    column.canSort ? (e) => {\n                                                        e.persist();\n                                                        column.toggleSortBy(undefined, !disableMultiSort && isMultiSortEvent(e));\n                                                        listRef.current.scrollToItem(0);\n                                                    } : undefined\n                                                }\n                                            >\n                                                {column.isSorted\n                                                    ? (column.isSortedDesc\n                                                        ? <IconTable type='sort-ascending' color='green' />\n                                                        : <IconTable type='sort-descending' color='green' />)\n                                                    : <IconTable type='ordered-list' />}\n                                            </span>\n\n                                            <span>\n                                                {column.canFilter && column.Header !== ''\n                                                    ? column.render('Filter') : null\n                                                }\n                                            </span>\n\n\n                                        </div>\n                                    )\n                                })}\n                            </div>\n                        ))}\n                    </div>\n\n                    <div {...getTableBodyProps()} className='tbody'>\n                        <FixedSizeList\n                            ref={listRef}\n                            height={500}\n                            itemCount={rows.length}\n                            itemSize={25}\n                            width={totalColumnsWidth}\n                            // width={3500}\n                            style={{ overflowX: 'hidden' }}\n                        >\n                            {RenderRow}\n                        </FixedSizeList>\n                    </div>\n\n                </div>\n            </Container>\n\n            {panelFunctionVisible && (\n                <PanelRightClick\n                    left={leftPanelFunction} top={topPanelFunction}\n                    buttonPanelFunction={buttonPanelFunction}\n                />\n            )}\n\n        </>\n    );\n};\n\nconst borderLine = `1px solid ${colorType.grey2}`\n\nconst Container = styled.div`\n\n    white-space: nowrap;\n    height: ${0.6 * window.innerHeight}px;\n    display: block;\n    overflow: scroll;\n    overflow-y: hidden;\n    border: ${borderLine};\n\n\n    .table {\n\n        border-spacing: 0;\n        position: relative;\n\n        .thead {\n            position: absolute;\n            z-index: 1000;\n            background-color: ${colorType.grey1};\n            top: 0;\n        }\n\n        .tbody {\n            padding-top: 36px;\n            overflow-y: auto;\n            overflow-x: hidden;\n            height: ${0.7 * window.innerHeight}px;\n            /* width: ${props => props.totalWidth}px; */\n            /* .tr:first-child {\n                padding-top: 100px; // shift down the first row of body\n            } */\n        }\n\n        .tr {\n            :last-child {\n                .td {\n                    /* border-bottom: 0; */\n                }\n            }\n        }\n\n    \n        /* .tr:nth-child(even) {\n            background-color: ${colorType.grey4};\n        } */\n        \n        .th, .td {\n            color: black;\n            margin: 0;\n            padding: 0.1rem;\n            padding-left: 0.3rem;\n            border-right: ${borderLine};\n            border-bottom: ${borderLine};\n            /* In this example we use an absolutely position resizer, so this is required. */\n            position: relative;\n\n            white-space: nowrap;\n            overflow: hidden;\n            text-overflow: ellipsis;\n\n            \n            :last-child {\n                border-right: 0;\n            }\n            .resizer {\n                right: 0;\n                background: ${colorType.grey1};\n                width: 5px;\n                height: 100%;\n                position: absolute;\n                top: 0;\n                z-index: 1;\n                /* prevents from scrolling while dragging on touch devices */\n                touch-action :none;\n                &.isResizing {\n                    background: ${colorType.grey2};\n                }\n            }\n        }\n\n        .th {\n            padding: 0.4rem;\n        }\n\n        \n    }\n`;\n\n\n\nconst IconTable = ({ type, color }) => {\n    return (\n        <IconStyle color={color || colorType.black} type={type} />\n    );\n};\n\nconst IconStyle = styled(Icon)`\n   font-size: 16px;\n   margin-right: 5px;\n   color: ${props => props.color};\n   padding: 2px;\n   border-radius: 3px;\n   border: 0.5px solid ${colorType.grey4};\n   :hover {\n      background: ${colorType.grey4}\n   }\n`;\n\n\n\n\n\n","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\CellHeader.js",["317","318","319","320","321","322"],"import React from 'react';\n\n\nconst CellHeader = (props) => {\n\n    const { className, column, columns, columnIndex, onMouseDownColumnHeader, headerIndex, container } = props;\n\n    return (\n        <div\n            style={{\n                height: '100%',\n                width: '100%',\n                verticalAlign: 'middle',\n            }}\n            // onMouseDown={(e) => onMouseDownColumnHeader(e, column.title)}\n        >\n            {column.title}\n        </div>\n    );\n};\n\nexport default CellHeader;\n","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\Cell.js",["323","324","325","326"],"import { message, Tooltip, Upload } from 'antd';\nimport moment from 'moment';\nimport React, { useContext, useEffect, useRef, useState } from 'react';\nimport styled from 'styled-components';\nimport { colorType, imgLink } from '../../constants';\nimport { Context as CellContext } from '../../contexts/cellContext';\nimport { Context as ProjectContext } from '../../contexts/projectContext';\nimport { Context as RowContext } from '../../contexts/rowContext';\nimport { getTreeFlattenOfNodeInArray } from './FormDrawingTypeOrder';\nimport PanelCalendar from './PanelCalendar';\n\n\nconst Cell = (props) => {\n\n   const {\n      rowData, column, rowIndex, columnIndex, onRightClickCell,\n      setPosition, getCurrentDOMCell\n   } = props;\n\n\n   let cellData = props.cellData;\n\n   if ((column.key.includes('(A)') || column.key.includes('(T)') ||\n      column.key === 'Construction Issuance Date' || column.key === 'Construction Start') &&\n      cellData && cellData.length === 10 && cellData.includes('-')) {\n      cellData = moment(cellData, 'YYYY-MM-DD').format('DD/MM/YY');\n   };\n\n\n\n   const { state: stateCell, getCellModifiedTemp, setCellActive } = useContext(CellContext);\n   const { state: stateProject } = useContext(ProjectContext);\n   const { state: stateRow, getSheetRows } = useContext(RowContext);\n   let { drawingTypeTree, rowsAll, modeGroup, rowsSelected, rowsSelectedToMove, modeFilter } = stateRow;\n\n   const { roleTradeCompany } = stateProject.allDataOneSheet;\n\n\n   let info = ''\n   if (rowData.treeLevel && column.key === 'Drawing Number') {\n      const node = drawingTypeTree.find(x => x.id === rowData.id);\n      const branches = getTreeFlattenOfNodeInArray(drawingTypeTree, node);\n\n      const branchesWithDrawing = branches.filter(x => !branches.find(y => y.parentId === x.id));\n\n      let rowsArr = [];\n      branchesWithDrawing.forEach(brch => {\n         rowsArr = [...rowsArr, ...rowsAll.filter(r => r._parentRow === brch.id)];\n      });\n      modeFilter.forEach(filter => {\n         if (filter.id) {\n            rowsArr = rowsArr.filter(r => r[filter.header] === filter.value);\n         };\n      });\n      let obj = {};\n      rowsArr.forEach(row => {\n         if (!row['Status'] || row['Status'] === 'INFO') {\n            obj['Not Started'] = (obj['Not Started'] || 0) + 1;\n         } else {\n            obj[row['Status']] = (obj[row['Status']] || 0) + 1;\n         }\n\n      });\n\n      let str = '';\n      Object.keys(obj).forEach((stt, i) => {\n         let code;\n         let init = i === 0 ? '' : ' + ';\n\n         if (stt === 'Not Started') code = 'NS';\n         if (stt === '1st cut of model in-progress') code = 'MIP';\n         if (stt === '1st cut of drawing in-progress') code = 'DIP';\n         if (stt === 'Pending design') code = 'PD';\n         if (stt === 'Consultant reviewing') code = 'CR';\n         if (stt === 'Reject and resubmit') code = 'RR';\n         if (stt === 'Approved with comments, to Resubmit') code = 'AR';\n         if (stt === 'Revise In-Progress') code = 'RP';\n         if (stt === 'Approved with Comment, no submission Required') code = 'AC';\n         if (stt === 'Approved for Construction') code = 'AP';\n         if (stt === 'INFO') code = 'NS';\n\n         str += `${init}${obj[stt]} ${code}`;\n\n      });\n      let end = rowsArr.length === 0 ? '' : ' : ';\n      info = ` - (${rowsArr.length} Drawings${end}${str})`;\n   };\n\n\n   const isLockedColumn = columnLocked(roleTradeCompany, rowData, modeGroup, column.key);\n   const isLockedRow = rowLocked(roleTradeCompany, rowData, modeGroup, drawingTypeTree);\n\n\n   const inputRef = useRef();\n   const cellRef = useRef();\n   const panelRef = useRef();\n   const buttonRef = useRef();\n\n   const [inputRender, setInputRender] = useState(false);\n   const [valueInput, setValueInput] = useState({ current: cellData || '', init: cellData || '' });\n\n   const [btnShown, setBtnShown] = useState(false);\n   const [panelData, setPanelData] = useState(false);\n\n   const cellDataTypeBtn = checkCellDateFormat(column.key);\n\n\n   const getCellTempId = () => `${rowData['id']}-${column.key}`;\n\n   const cellEditDone = (value) => {\n      if (rowData._rowLevel === 1) {\n         if (\n            (cellDataTypeBtn === 'cell-type-date' && !(moment(value, 'DD/MM/YY').format('DD/MM/YY') === value) && value !== '') ||\n            (column.key === 'Status' && cellStatusFormat.indexOf(value) === -1 && value !== '') ||\n            (column.key === 'Use For' && cellUseForFormat.indexOf(value) === -1 && value !== '') ||\n            (column.key === 'Drg Type' && cellDrgTypeFormat.indexOf(value) === -1 && value !== '') ||\n            ((column.key === 'Model Progress' || column.key === 'Drawing Progress') && cellProgressFormatData.indexOf(value) === -1 && value !== '')\n         ) {\n            setValueInput({ ...valueInput, current: valueInput.init });\n            message.info('Data input should be in correct format', 1);\n         } else {\n            setValueInput({ ...valueInput, current: value });\n\n            getCellModifiedTemp({ [getCellTempId()]: value });\n            let row = rowsAll.find(r => r.id === rowData.id);\n            row[column.key] = value;\n\n            getSheetRows({\n               ...stateRow,\n               rowsAll\n            });\n         };\n      };\n   };\n\n\n   const onDoubleClick = () => {\n      if (isLockedColumn || isLockedRow) return;\n      setInputRender(true);\n      setBtnShown(false);\n      getCurrentDOMCell(); // double click to activate cell\n   };\n   const onClick = () => {\n      if (rowsSelected.length > 0 || rowsSelectedToMove.length > 0) {\n         getSheetRows({\n            ...stateRow, rowsSelected: [], rowsSelectedToMove: []\n         });\n      };\n      if (isLockedColumn || isLockedRow) return;\n      setBtnShown(true);\n      if (!inputRender) { // single click just highlight cell, not activate\n         setPosition({ cell: cellRef.current.parentElement, rowIndex, columnIndex });\n      };\n\n      if (rowsSelected.length > 0) {\n         getSheetRows({ ...stateRow, rowsSelected: [] });\n      };\n   };\n\n\n\n   useEffect(() => {\n      document.addEventListener('click', EventClickToHidePanelAndInput);\n      return () => document.removeEventListener('click', EventClickToHidePanelAndInput);\n   }, []);\n   const EventClickToHidePanelAndInput = (e) => {\n      if (!buttonRef.current && panelRef.current) {\n         setPanelData(false);\n      };\n   };\n\n\n   const onMouseLeave = () => {\n      setBtnShown(false);\n   };\n   const onMouseDown = (e) => {\n      if (e.button === 2) { // check mouse RIGHT CLICK ...\n         onRightClickCell(e, props);\n      } else {\n         if (isLockedColumn || isLockedRow) return;\n      };\n   };\n   const pickDataSelect = (type, value) => {\n      setBtnShown(false);\n      setPanelData(false);\n      setInputRender(false);\n      if (type === 'text') {\n         cellEditDone(value);\n      } else if (type === 'date') {\n         cellEditDone(moment(value).format('DD/MM/YY'));\n      } else if (type === 'div') {\n         cellEditDone(value.props.type);\n      };\n   };\n   const onBlur = () => {\n      cellEditDone(valueInput.current);\n      setBtnShown(false);\n      setPanelData(false);\n      setInputRender(false);\n   };\n   const onChange = (e) => {\n      setValueInput({ ...valueInput, current: e.target.value });\n   };\n\n   useEffect(() => { // after keydown ENTER to show input ...\n      if (\n         !inputRender &&\n         stateCell.cellActive &&\n         stateCell.cellActive.rowIndex === rowIndex &&\n         stateCell.cellActive.columnIndex === columnIndex &&\n         !isLockedColumn && !isLockedRow\n      ) {\n         setInputRender(true);\n      };\n   }, [stateCell.cellActive]);\n\n\n   useEffect(() => {\n      if (\n         !inputRender &&\n         stateCell.cellAppliedAction &&\n         stateCell.cellAppliedAction.currentDOMCell.rowIndex === rowIndex &&\n         stateCell.cellAppliedAction.currentDOMCell.columnIndex === columnIndex &&\n         !isLockedColumn && !isLockedRow\n      ) {\n         const { e } = stateCell.cellAppliedAction;\n         if (e.key === 'Delete') {\n            cellEditDone('');\n         } else if (e.key === 'v' && e.ctrlKey) {\n            cellEditDone(stateCell.tempCopiedText);\n         };\n      };\n   }, [stateCell.cellAppliedAction]);\n\n   useEffect(() => { // FOCUS right after press ENTER...\n      if (inputRender) inputRef.current.focus();\n   }, [inputRender]);\n\n   useEffect(() => { // Hide Button after pick on PANEL (setBtnShown fasle in pickDataSelect doesn't work)\n      setBtnShown(false);\n   }, [valueInput]);\n\n   const onKeyDown = (e) => { // ENTER to hide input after finishing typing ...\n      if (\n         e.key === 'Enter' &&\n         inputRender &&\n         stateCell.cellActive &&\n         stateCell.cellActive.rowIndex === rowIndex &&\n         stateCell.cellActive.columnIndex === columnIndex &&\n         !isLockedColumn && !isLockedRow\n      ) {\n         inputRef.current.blur();\n         setCellActive(null);\n      };\n   };\n\n\n\n   const [fileList, setFileList] = useState(null);\n\n   const onChangeUploadFile = (info) => {\n\n   };\n\n\n   return (\n      <>\n         <div\n            ref={cellRef}\n            onDoubleClick={onDoubleClick}\n            onClick={onClick}\n            onMouseLeave={onMouseLeave}\n            onMouseDown={onMouseDown}\n            style={{\n               width: '100%',\n               height: '100%',\n               padding: 5,\n               paddingLeft: cellDataTypeBtn === 'cell-type-upload' ? 30 : 5,\n               position: 'relative',\n               color: 'black',\n               background: 'transparent',\n               overflow: !rowData.treeLevel && column.key === 'Drawing Number' ? 'hidden' : 'visible' // fix bug frozen panel move to the left\n            }}\n         >\n            {inputRender ? (\n               <input\n                  value={valueInput.current}\n                  onChange={onChange}\n                  onBlur={onBlur}\n                  onKeyDown={onKeyDown}\n                  ref={inputRef}\n                  style={{\n                     outline: 'none',\n                     border: 'none',\n                     background: 'transparent',\n                     width: column.width - 30\n                  }}\n               />\n\n            ) : (\n               <div style={{\n                  textOverflow: column.key === 'Drawing Number' ? 'unset' : 'ellipsis',\n                  overflow: column.key === 'Drawing Number' ? 'visible' : 'hidden',\n                  whiteSpace: 'nowrap',\n                  width: column.width - 30,\n                  color: rowData['Status'] === 'Reject and resubmit' ? 'red' :\n                     (\n                        rowData['Status'] === 'Approved with Comment, no submission Required' ||\n                        rowData['Status'] === 'Approved for Construction'\n                     ) ? 'green' : 'black'\n               }}>\n                  {\n                     ((column.key === 'Model Progress' || column.key === 'Drawing Progress') && <BtnProgress type={cellData} />) ||\n                     (column.key === 'Drawing Number' && rowData.treeLevel && <><span style={{ fontWeight: 'bold' }}>{cellData}</span><span>{info}</span></>) ||\n                     stateCell.cellsModifiedTemp[getCellTempId()] ||  // there is modified data\n                     (getCellTempId() in stateCell.cellsModifiedTemp && ' ') || // there is modified data === empty, MUST BE ' ', not ''\n                     cellData // there is no modification\n                  }\n               </div>\n            )\n            }\n\n\n            {btnShown && !cellBtnDisabled(column.key) && (\n               <>\n                  {cellDataTypeBtn === 'cell-type-upload' ? (\n                     <Upload\n                        name='file' accept='application/pdf' multiple={false}\n                        headers={{ authorization: 'authorization-text' }}\n                        showUploadList={false}\n                        beforeUpload={() => {\n                           return false;\n                        }}\n                        onChange={onChangeUploadFile}\n                     >\n                        <Tooltip placement='topRight' title='Upload Drawing'>\n                           <div style={{\n                              cursor: 'pointer',\n                              position: 'absolute',\n                              left: 4,\n                              top: 5,\n                              height: 17,\n                              width: 17,\n                              backgroundImage: `url(${imgLink.btnFileUpload})`,\n                              backgroundSize: 17\n                           }}\n                              ref={buttonRef}\n                           />\n                        </Tooltip>\n                     </Upload>\n                  ) : (\n                     <div style={{\n                        cursor: 'pointer',\n                        position: 'absolute',\n                        right: 4,\n                        top: 5,\n                        height: 17,\n                        width: 17,\n                        backgroundImage: cellDataTypeBtn === 'cell-type-date' ? `url(${imgLink.btnDate})`\n                           : cellDataTypeBtn === 'cell-type-text' ? `url(${imgLink.btnText})`\n                              : null,\n                        backgroundSize: 17\n                     }}\n                        onMouseDown={(e) => {\n                           e.stopPropagation();\n                           setPanelData(!panelData);\n                        }}\n                        ref={buttonRef}\n                     />\n                  )}\n               </>\n            )}\n\n\n\n            {panelData && (\n               <div style={{\n                  position: 'absolute',\n                  background: 'white',\n                  top: 30,\n                  left: 0,\n                  minWidth: column.width,\n                  zIndex: 999,\n                  padding: '3px 5px 3px 7px',\n                  boxShadow: 'rgba(0, 0, 0, 0.09) 0px 2px 1px, rgba(0, 0, 0, 0.09) 0px 4px 2px, rgba(0, 0, 0, 0.09) 0px 8px 4px, rgba(0, 0, 0, 0.09) 0px 16px 8px, rgba(0, 0, 0, 0.09) 0px 32px 16px',\n\n                  maxHeight: 400,\n                  overflowY: 'scroll'\n\n               }}\n                  ref={panelRef}\n               >\n                  {cellDataTypeBtn === 'cell-type-date' ? (\n                     <PanelCalendar pickDate={(item) => pickDataSelect('date', item)} />\n                  ) : getColumnsValue(rowsAll, column.key).map(item => {\n                     return (\n                        <SelectStyled\n                           key={(column.key === 'Drawing Progress' || column.key === 'Model Progress') ? item.key : item}\n                           onMouseDown={(e) => {\n                              e.stopPropagation();\n                              if (column.key === 'Drawing Progress' || column.key === 'Model Progress') {\n                                 pickDataSelect('div', item);\n                              } else {\n                                 pickDataSelect('text', item);\n                              };\n                           }}\n                        >{item}</SelectStyled>\n                     );\n                  })}\n               </div>\n            )}\n         </div>\n      </>\n   );\n};\n\nexport default Cell;\n\nconst SelectStyled = styled.div`\n   padding: 4px;\n   &:hover {\n      background-color: ${colorType.grey4};\n      cursor: pointer;\n   };\n   transition: 0.2s;\n`;\n\n\nconst BtnProgress = ({ type }) => {\n   const img = type === 'Empty' ? imgLink.btnProgress0 :\n      type === 'Quarter' ? imgLink.btnProgress1 :\n         type === 'Half' ? imgLink.btnProgress2 :\n            type === 'Third Quarter' ? imgLink.btnProgress3 :\n               type === 'Full' ? imgLink.btnProgress4 :\n                  null;\n\n   return (\n      <div style={{ display: 'flex', textAlign: 'center', width: '100%' }}>\n         <div style={{\n            cursor: 'pointer',\n            height: 20,\n            width: 20,\n            backgroundImage: `url(${img})`,\n            backgroundSize: 20,\n            padding: 0\n         }}\n         />\n      </div>\n   );\n};\nconst cellProgressFormat = [\n   <BtnProgress key='0' type='Empty' />,\n   <BtnProgress key='1' type='Quarter' />,\n   <BtnProgress key='2' type='Half' />,\n   <BtnProgress key='3' type='Third Quarter' />,\n   <BtnProgress key='4' type='Full' />,\n];\nconst cellProgressFormatData = [\n   'Empty', 'Quarter', 'Half', 'Third Quarter', 'Full'\n];\n\nconst checkCellDateFormat = (header) => {\n   if (\n      header.includes('(A)') ||\n      header.includes('(T)') ||\n      header === 'Construction Issuance Date' ||\n      header === 'Construction Start'\n   ) return 'cell-type-date';\n   else if (header === 'Drawing') return 'cell-type-upload';\n   else if (header === 'Index' || header === 'Drawing Number' || header === 'Drawing Name') return 'cell-type-none';\n   else return 'cell-type-text';\n};\nconst cellBtnDisabled = (headerId) => {\n   if (headerId === 'Index' || headerId === 'Drawing Number' || headerId === 'Drawing Name') return true;\n};\nconst getColumnsValue = (rows, headerKey) => {\n   let valueArr = [];\n   rows.filter(r => r._rowLevel === 1).forEach(row => {\n      valueArr.push(row[headerKey]);\n   });\n   valueArr = [...new Set(valueArr)].filter(e => e);\n   valueArr.sort((a, b) => a > b ? 1 : (b > a ? -1 : 0));\n\n   if (headerKey === 'Status') return cellStatusFormat;\n   if (headerKey === 'Use For') return cellUseForFormat;\n   if (headerKey === 'Drg Type') return cellDrgTypeFormat;\n   if (headerKey === 'Model Progress' || headerKey === 'Drawing Progress') return cellProgressFormat;\n   return valueArr;\n};\n\nconst cellStatusFormat = [\n   'Not Started',\n   '1st cut of model in-progress',\n   '1st cut of drawing in-progress',\n   'Pending design',\n   'Consultant reviewing',\n   'Reject and resubmit',\n   'Approved with comments, to Resubmit',\n   'Revise In-Progress',\n   'Approved with Comment, no submission Required',\n   'Approved for Construction',\n];\n\n\n\nconst cellUseForFormat = [\n   'SUBMISSION',\n   'INFO',\n   'COORDINATION'\n];\nconst cellDrgTypeFormat = [\n   'Key plan',\n   'Column wall setting out',\n   'Tile layout & detail',\n   'Reflected celing plan',\n   'Finishing layout',\n   'Door layout',\n   'Core layout & detail',\n   'Toilet',\n   'Edeck layout & detail',\n   'Staircase layout & detail',\n   'Surface drain',\n   'Lift lobby/ corridor',\n   'Material schedule',\n   'Other'\n];\n\nconst columnsLockedModeller = [\n   'Model Start (T)',\n   'Model Finish (T)',\n   'Drawing Start (T)',\n   'Drawing Finish (T)',\n   'Drg To Consultant (T)',\n   'Consultant Reply (T)',\n   'Get Approval (T)',\n   'Construction Issuance Date',\n   'Construction Start',\n];\n\nexport const columnLocked = (roleTradeCompany, rowData, modeGroup, column) => {\n   if (\n      column === 'Drawing' ||\n      (rowData && !rowData._rowLevel) || // lock drawing type ...\n      modeGroup.length > 0 ||\n      (roleTradeCompany.role === 'Modeller' && columnsLockedModeller.includes(column)) ||\n      (roleTradeCompany.role === 'View-Only User') ||\n      (roleTradeCompany.role === 'Production' && column !== 'Construction Start')\n   ) {\n      return true;\n   } else {\n      return false;\n   };\n};\nexport const rowLocked = (roleTradeCompany, rowData, modeGroup, drawingTypeTree) => {\n   if (!rowData._rowLevel || rowData._rowLevel < 1) return true;\n   if (modeGroup.length > 0) return true;\n   if (roleTradeCompany.role === 'Document Controller') return false;\n\n\n   const drawingTypeTreeClone = drawingTypeTree.map(x => ({ ...x }));\n   const dwgType = drawingTypeTreeClone.find(x => x.id === rowData._parentRow);\n\n   let companyName;\n   if (dwgType.treeLevel >= 1) {\n      companyName = getCompanyNameTextFnc(dwgType, drawingTypeTreeClone);\n   };\n\n   if (roleTradeCompany.role === 'Production' && companyName === 'Woh Hup Private Ltd') return false;\n\n\n   let tradeName;\n   if (companyName === 'Woh Hup Private Ltd' && dwgType.treeLevel >= 2) {\n\n      tradeName = getTradeNameTextFnc(dwgType, drawingTypeTreeClone);\n\n      return companyName !== roleTradeCompany.company || tradeName !== roleTradeCompany.trade;\n   } else {\n      return companyName !== roleTradeCompany.company;\n   };\n};\n\n\nexport const getCompanyNameTextFnc = (dwgType, drawingTypeTreeClone) => {\n   if (dwgType.treeLevel === 1) return dwgType['Drawing Number'];\n   let result;\n   const getCompanyFnc = (dwgType, dwgTypeTree) => {\n      const parent = dwgTypeTree.find(x => x.id === dwgType.parentId);\n      if (parent.treeLevel === 1) {\n         result = parent['Drawing Number'];\n      } else {\n         getCompanyFnc(parent, dwgTypeTree);\n      };\n      return result;\n   };\n   getCompanyFnc(dwgType, drawingTypeTreeClone);\n   return result;\n};\nexport const getTradeNameTextFnc = (dwgType, drawingTypeTreeClone) => {\n   const tree = drawingTypeTreeClone.filter(x => x.treeLevel !== 1);\n   if (dwgType.treeLevel === 2) return dwgType['Drawing Number'];\n   let result;\n   const getTradeFnc = (dwgType, dwgTypeTree) => {\n      const parent = dwgTypeTree.find(x => x.id === dwgType.parentId);\n      if (parent.treeLevel === 2) {\n         result = parent['Drawing Number'];\n      } else {\n         getTradeFnc(parent, dwgTypeTree);\n      };\n      return result;\n   };\n   getTradeFnc(dwgType, tree);\n   return result;\n};\n\n\n","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\IconTable.js",["327"],"import { Icon, Tooltip } from 'antd';\nimport React, { useContext } from 'react';\nimport styled from 'styled-components';\nimport { colorType } from '../../constants';\nimport { Context as RowContext } from '../../contexts/rowContext';\n\n\n\nconst IconTable = (props) => {\n\n   const { type, onClick } = props;\n\n   const { state: stateRow } = useContext(RowContext);\n\n\n   const modeGroup = stateRow && stateRow.modeGroup;\n   const modeFilter = stateRow && stateRow.modeFilter;\n   const modeSort = stateRow && stateRow.modeSort;\n\n   let disabled = false;\n   if (modeGroup && modeGroup.length > 0 && type !== 'swap' && type !== 'save') {\n      disabled = true;\n   };\n\n\n   return (\n      <Tooltip placement={type === 'menu' ? 'topLeft' : 'top'} title={toolTipBtn(type)}>\n         <DivStyled>\n            <IconStyled\n               style={{\n                  background: modeFilter && modeFilter.length > 0 && type === 'filter' ? colorType.grey1 :\n                     modeSort && Object.keys(modeSort).length === 3 && type === 'sort-ascending' ? colorType.grey1 :\n                        modeGroup && modeGroup.length > 0 && type === 'apartment' ? colorType.grey1 :\n                           null\n               }}\n               type={type}\n               onClick={onClick}\n               disabled={disabled}\n            />\n\n\n         </DivStyled>\n      </Tooltip>\n   );\n};\n\nexport default IconTable;\n\n\nconst toolTipBtn = (type) => {\n   return type === 'filter' ? 'Filter Data' :\n      type === 'apartment' ? 'Grouping Data' :\n         type === 'layout' ? 'Reorder Columns' :\n            type === 'sort-ascending' ? 'Sort Rows' :\n               type === 'search' ? 'Search' :\n                  type === 'save' ? 'Save' :\n                     type === 'highlight' ? 'Colorized Rows' :\n                        type === 'eye' ? 'Rows Hide/Unhide' :\n                           type === 'menu' ? 'Projects List' :\n                              type === 'swap' ? 'Clear Filter/Sort/Group/Search' :\n                                 type === 'history' ? 'Activity History' :\n                                    type === 'border-outer' ? 'PUBLIC' :\n                                       type === 'radius-upright' ? 'USER' :\n                                          type === 'save' ? 'Save' :\n                                             type === 'fullscreen-exit' ? 'Save SMARTSHEET To Server SUMANG' :\n                                                type === 'fall' ? 'Save SMARTSHEET To Server HANDY' :\n                                                   type === 'delete' ? 'Delete All Data In Every DB Collections' :\n                                                      type === 'pic-center' ? 'Save Random Rows To Server' :\n                                                         type === 'folder-add' ? 'Drawing Type Organization' :\n                                                            type === 'heat-map' ? 'Highlight Data Changed' :\n                                                               type === 'export' ? 'Export To Excel' :\n                                                                  type === 'plus' ? 'Save View Template' :\n                                                                     type === 'edit' ? 'Change User Name To Check Multi-User' :\n                                                                        type === 'upload' ? 'Upload Data To Server' :\n                                                                           type === 'rfa-button' ? 'Go To RFA View' :\n                                                                              type === 'plus-square' ? 'Add New RFA' :\n                                                                                 'No Title';\n};\n\nconst DivStyled = styled.div`\n   &:hover {\n      background-color: ${colorType.grey1}\n   };\n   transition: 0.2s;\n   border-radius: 5px;\n`;\n\n\nconst IconStyled = styled(Icon)`\n   border: ${props => props.disabled ? '1px solid grey' : '1px solid black'};\n   padding: 3px;\n   font-size: 17px;\n   margin: 3px;\n   border-radius: 5px;\n   color: ${props => props.disabled ? 'grey' : 'black'};\n   pointer-events: ${props => props.disabled && 'none'};\n`;\n\nconst IconRFA = styled.div`\n   &:hover {\n      cursor: pointer;\n   }\n   border: ${props => props.disabled ? '1px solid grey' : '1px solid black'};\n   padding: 3px;\n   font-size: 11.5px;\n   margin: 3px;\n   border-radius: 5px;\n   color: ${props => props.disabled ? 'grey' : 'black'};\n   pointer-events: ${props => props.disabled && 'none'};\n`;","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\InputSearch.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\PanelFunction.js",["328"],"import React, { useContext } from 'react';\nimport styled from 'styled-components';\nimport { colorType } from '../../constants';\nimport { Context as ProjectContext } from '../../contexts/projectContext';\nimport { Context as RowContext } from '../../contexts/rowContext';\nimport { columnLocked, getCompanyNameTextFnc, getTradeNameTextFnc, rowLocked } from './Cell';\n\n\n\nconst PanelFunction = (props) => {\n\n   const { buttonPanelFunction, panelType } = props;\n\n   const { state: stateRow } = useContext(RowContext);\n   const { state: stateProject } = useContext(ProjectContext);\n\n   const { roleTradeCompany } = stateProject.allDataOneSheet;\n\n   const { rowsSelectedToMove, rowsSelected, drawingTypeTree, modeGroup } = stateRow;\n\n   const { rowData, column } = panelType.cellProps;\n\n   const isLockedColumn = columnLocked(roleTradeCompany, rowData, modeGroup, column.key);\n   const isLockedRow = rowLocked(roleTradeCompany, rowData, modeGroup, drawingTypeTree);\n\n   const dwgType = drawingTypeTree.find(x => x.id === rowData.id);\n\n   let company, trade;\n   if (rowData.treeLevel >= 1) {\n      company = getCompanyNameTextFnc(dwgType, drawingTypeTree);\n   };\n   if (rowData.treeLevel >= 2) {\n      trade = getTradeNameTextFnc(dwgType, drawingTypeTree);\n   };\n\n   const isLockedByCompanyOrTrade =\n      roleTradeCompany.role === 'Document Controller' && roleTradeCompany.company === 'Woh Hup Private Ltd'\n         ? false\n         : roleTradeCompany.company === 'Woh Hup Private Ltd'\n            ? (company !== roleTradeCompany.company || trade !== roleTradeCompany.trade)\n            : company !== roleTradeCompany.company;\n\n\n   const listButton = (rowData._rowLevel && rowData._rowLevel === 1 && !isLockedColumn && !isLockedRow) ? [\n      'View Drawing Revision',\n      'Create New Drawing Revision',\n      'Date Automation',\n      'View Cell History',\n      'Duplicate Drawings',\n      'Insert Drawings Below',\n      'Insert Drawings Above',\n      'Move Drawings',\n      'Paste Drawings',\n      'Delete Drawing'\n\n   ] : (rowData._rowLevel && rowData._rowLevel === 1 && (isLockedColumn || isLockedRow)) ? [\n      'View Drawing Revision',\n      'View Cell History',\n\n   ] : (rowData.treeLevel) ? [\n      'Paste Drawings',\n      'Insert Drawings By Type'\n\n   ] : [];\n\n\n   const onClickBtn = (btn) => {\n      buttonPanelFunction(btn);\n   };\n\n\n   return (\n      <div\n         style={{\n            border: `1px solid ${colorType.grey1}`,\n            background: 'white',\n         }}\n      >\n         {listButton.map(btn => (\n            <Container\n               key={btn}\n               onMouseDown={() => onClickBtn(btn)}\n               style={disabledBtn(\n                  props,\n                  btn,\n                  rowsSelectedToMove,\n                  roleTradeCompany,\n                  isLockedByCompanyOrTrade,\n                  rowsSelected,\n                  drawingTypeTree\n               )}\n            >\n               {btn}\n            </Container>\n\n         ))}\n      </div>\n   );\n};\n\nexport default PanelFunction;\n\nconst Container = styled.div`\n    padding: 7px;\n    padding-left: 25px;\n    \n    cursor: pointer;\n    color: black;\n    &:hover {\n        background: ${colorType.grey0};\n    };\n\n`;\n\n\nconst disabledBtn = ({ panelType }, btn, rowsSelectedToMove, roleTradeCompany, isLockedByCompanyOrTrade, rowsSelected, drawingTypeTree) => {\n   const { rowData } = panelType.cellProps;\n   const { _rowLevel, children, treeLevel, id } = rowData;\n\n\n   if (\n      (rowsSelectedToMove.length === 0 && btn === 'Paste Drawings') ||\n      (_rowLevel === 1 && roleTradeCompany.role === 'Modeller' && btnLocked_1.indexOf(btn) !== -1) ||\n\n      (_rowLevel === 1 && rowsSelected.length > 0 && rowsSelectedToMove.length === 0 && btn !== 'Move Drawings') ||\n      (_rowLevel === 1 && rowsSelected.length > 0 && rowsSelectedToMove.length > 0 && btn !== 'Paste Drawings') ||\n      (_rowLevel === 1 && (roleTradeCompany.role === 'View-Only User' || roleTradeCompany.role === 'Production') && btnLocked_2.indexOf(btn) !== -1) ||\n\n      (treeLevel === 1 && rowData['Drawing Number'] === 'Woh Hup Private Ltd' && (btn === 'Paste Drawings' || btn === 'Insert Drawings By Type')) ||\n      (treeLevel > 1 && drawingTypeTree.find(x => x.parentId === id) && (btn === 'Paste Drawings' || btn === 'Insert Drawings By Type')) ||\n      (treeLevel > 1 && !drawingTypeTree.find(x => x.parentId === id) && rowsSelectedToMove.length === 0 && btn === 'Paste Drawings')\n      ||\n      (treeLevel >= 1 && isLockedByCompanyOrTrade)\n\n   ) return {\n      pointerEvents: 'none',\n      color: 'grey'\n   };\n};\n\n\nconst btnLocked_1 = [\n   'Create New Drawing Revision',\n   'Date Automation',\n];\n\nconst btnLocked_2 = [\n   'Create New Drawing Revision',\n   'Date Automation',\n   'Duplicate Drawings',\n   'Insert Drawings Below',\n   'Insert Drawings Above',\n   'Move Drawings',\n   'Paste Drawings',\n   'Delete Drawing',\n   'Insert Drawings By Type'\n];\n\n\nexport const getPanelPosition = ({ x: clickX, y: clickY }) => {\n   const screenW = window.innerWidth;\n   const screenH = window.innerHeight;\n\n   const right = (screenW - clickX) < 200;\n   const left = clickX < 200;\n   const top = clickY < 200;\n   const bottom = (screenH - clickY) < 200;\n\n   return { \n      x: right && top ? clickX - 250 :\n         right && bottom ? clickX - 250 :\n         left && bottom ? clickX :\n         left && top ? clickX :\n         right ? clickX - 250 : clickX,\n      y: right && top ? clickY :\n         right && bottom ? clickY - 300 :\n         left && bottom ? clickY - 300 :\n         left && top ? clickY :\n         bottom ? clickY - 300 : clickY\n   };\n};","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\PanelSetting.js",["329","330","331","332","333","334","335","336","337","338","339","340"],"import Axios from 'axios';\nimport moment from 'moment';\nimport React, { useContext } from 'react';\nimport { SERVER_URL } from '../../constants';\nimport { Context as CellContext } from '../../contexts/cellContext';\nimport { Context as ProjectContext } from '../../contexts/projectContext';\nimport { Context as RowContext } from '../../contexts/rowContext';\nimport { convertCellTempToHistory, convertDrawingVersionToHistory, debounceFnc, extractCellInfo, genId, mongoObjectId } from '../../utils';\nimport { getOutputRowsAllSorted } from '../PageSpreadsheet';\nimport ColorizedForm from './ColorizedForm';\nimport FormCellColorizedCheck from './FormCellColorizedCheck';\nimport FormDateAutomation from './FormDateAutomation';\nimport FormDrawingTypeOrder, { compareCurrentTreeAndTreeFromDB, flattenAllTreeChildNode1, getTreeFlattenOfNodeInArray } from './FormDrawingTypeOrder';\nimport FormFilter from './FormFilter';\nimport FormGroup from './FormGroup';\nimport FormSort from './FormSort';\nimport PanelConfirm from './PanelConfirm';\nimport PanelConfirmResetMode from './PanelConfirmResetMode';\nimport PanelPickNumber from './PanelPickNumber';\nimport ReorderColumnForm from './ReorderColumnForm';\nimport TableActivityHistory from './TableActivityHistory';\nimport TableCellHistory from './TableCellHistory';\nimport TableDrawingDetail from './TableDrawingDetail';\n\n\n\n\nconst PanelSetting = (props) => {\n\n   const { state: stateRow } = useContext(RowContext);\n   const { state: stateProject } = useContext(ProjectContext);\n   const { state: stateCell, getCellModifiedTemp, OverwriteCellsModified } = useContext(CellContext);\n\n   const { panelType, panelSettingType, commandAction, onClickCancelModal, setLoading } = props;\n\n   const applyReorderColumns = (data) => commandAction({ type: 'reorder-columns', data });\n\n   const applyFilter = (filter) => commandAction({ type: 'filter-by-columns', data: { modeFilter: filter } });\n\n   const applyResetMode = (modeReset) => {\n      const modeResetObj = {};\n      modeReset.forEach(type => {\n         if (type.header === 'Filter' && type.mode === 'hidden') modeResetObj.modeFilter = [];\n         if (type.header === 'Sort' && type.mode === 'hidden') modeResetObj.modeSort = {};\n         if (type.header === 'Search' && type.mode === 'hidden') modeResetObj.modeSearch = {};\n      });\n      return commandAction({\n         type: 'reset-filter-sort',\n         data: {\n            rowsAll: stateRow.rowsAll,\n            ...modeResetObj\n         }\n      });\n   };\n   const applyQuitGroupingMode = () => {\n      return commandAction({\n         type: 'reset-filter-sort',\n         data: { modeGroup: [], modeSearch: {} }\n      });\n   };\n\n\n   const applyGroup = (data) => commandAction({ type: 'group-columns', data: { modeGroup: data } });\n\n   const applyColorization = (data) => commandAction({ type: 'drawing-colorized', data });\n\n   const setCellHistoryArr = debounceFnc((data) => commandAction({ type: 'highlight-cell-history', data }), 1);\n\n   const applySort = (data) => commandAction({ type: 'sort-data', data: { modeSort: data } });\n\n   const applyViewTemplate = (name) => {\n      let { allDataOneSheet: { publicSettings: { headers } }, userData: { headersShown, headersHidden, nosColumnFixed, colorization } } = stateProject;\n      const { viewTemplateNodeId, viewTemplates, modeFilter, modeSort } = stateRow;\n\n      headersShown = headersShown.map(hd => headers.find(x => x.text === hd).key);\n      headersHidden = headersHidden.map(hd => headers.find(x => x.text === hd).key);\n\n      commandAction({\n         type: 'add-view-templates',\n         data: {\n            viewTemplates: [...viewTemplates, {\n               id: mongoObjectId(),\n               name,\n               headersShown,\n               headersHidden,\n               nosColumnFixed,\n               colorization,\n               viewTemplateNodeId,\n               modeFilter,\n               modeSort\n            }]\n         }\n      });\n   };\n\n\n   const onClickInsertRow = (nosOfRows) => {\n      let { rowsAll, idRowsNew, rowsUpdatePreRowOrParentRow } = stateRow;\n\n      const idsArr = genId(nosOfRows);\n      idRowsNew = [...idRowsNew, ...idsArr];\n\n      let newRows = [];\n      let rowBelow;\n      if (panelSettingType === 'Insert Drawings Below') {\n         let rowAbove = panelType.cellProps.rowData;\n         newRows = idsArr.map((id, i) => {\n            return ({\n               id, _rowLevel: 1,\n               _parentRow: rowAbove._parentRow,\n               _preRow: i === 0 ? rowAbove.id : idsArr[i - 1]\n            });\n         });\n         rowBelow = rowsAll.find(r => r._preRow === rowAbove.id);\n         if (rowBelow) {\n            rowBelow._preRow = idsArr[idsArr.length - 1];\n         };\n\n      } else if (panelSettingType === 'Insert Drawings Above') {\n         rowBelow = rowsAll.find(r => r.id === panelType.cellProps.rowData.id);\n\n         newRows = idsArr.map((id, i) => {\n            return ({\n               id, _rowLevel: 1,\n               _parentRow: rowBelow._parentRow,\n               _preRow: i === 0 ? rowBelow._preRow : idsArr[i - 1]\n            });\n         });\n         rowBelow._preRow = idsArr[idsArr.length - 1];\n      };\n\n      if (rowBelow) {\n         updatePreRowParentRowToState(rowsUpdatePreRowOrParentRow, rowBelow);\n      };\n      newRows.forEach(row => {\n         updatePreRowParentRowToState(rowsUpdatePreRowOrParentRow, row);\n      });\n      rowsAll = [...rowsAll, ...newRows];\n\n      const rowsOutput = _processRowsChainNoGroupFnc1([...rowsAll]);\n      commandAction({\n         type: 'insert-drawings',\n         data: {\n            rowsAll: rowsOutput,\n            rowsUpdatePreRowOrParentRow,\n            idRowsNew\n         }\n      });\n   };\n   const onClickFolderInsertSubRows = (nosOfRows) => {\n      let { rowsAll, idRowsNew, rowsUpdatePreRowOrParentRow } = stateRow;\n\n      let idsArr = genId(nosOfRows);\n      idRowsNew = [...idRowsNew, ...idsArr];\n\n      let newRows = idsArr.map((id, i) => {\n         return ({\n            id, _rowLevel: 1,\n            _parentRow: panelType.cellProps.rowData.id,\n            _preRow: i === 0 ? null : idsArr[i - 1]\n         });\n      });\n      newRows.forEach(row => {\n         updatePreRowParentRowToState(rowsUpdatePreRowOrParentRow, row);\n      });\n      let rowBelow = rowsAll.find(r => r._parentRow === panelType.cellProps.rowData.id && r._preRow === null);\n      if (rowBelow) {\n         rowBelow._preRow = idsArr[idsArr.length - 1];\n         updatePreRowParentRowToState(rowsUpdatePreRowOrParentRow, rowBelow);\n      };\n      rowsAll = [...rowsAll, ...newRows];\n\n      const rowsOutput = _processRowsChainNoGroupFnc1([...rowsAll]);\n      commandAction({\n         type: 'insert-drawings-by-folder',\n         data: {\n            rowsAll: rowsOutput,\n            rowsUpdatePreRowOrParentRow,\n            idRowsNew\n         }\n      });\n   };\n   const onClickDuplicateRows = (nosOfRows) => {\n      let { rowsAll, idRowsNew, rowsUpdatePreRowOrParentRow } = stateRow;\n      const { headers } = stateProject.allDataOneSheet.publicSettings;\n\n      let idsArr = genId(nosOfRows);\n      idRowsNew = [...idRowsNew, ...idsArr];\n\n      const rowAbove = panelType.cellProps.rowData;\n\n      const newRows = idsArr.map((id, i) => ({\n         ...rowAbove, id,\n         _preRow: i === 0 ? rowAbove.id : idsArr[i - 1]\n      }));\n\n      const rowBelow = rowsAll.find(r => r._preRow === rowAbove.id);\n      if (rowBelow) {\n         rowBelow._preRow = idsArr[idsArr.length - 1];\n         updatePreRowParentRowToState(rowsUpdatePreRowOrParentRow, rowBelow);\n      };\n\n      let cellsModifiedTempObj = {};\n      newRows.forEach(row => {\n         headers.forEach(hd => {\n            if (row[hd.text]) {\n               cellsModifiedTempObj[`${row.id}-${hd.text}`] = row[hd.text];\n            };\n         });\n         updatePreRowParentRowToState(rowsUpdatePreRowOrParentRow, row);\n      });\n      OverwriteCellsModified({ ...stateCell.cellsModifiedTemp, ...cellsModifiedTempObj });\n      rowsAll = [...rowsAll, ...newRows];\n\n      const rowsOutput = _processRowsChainNoGroupFnc1([...rowsAll]);\n      commandAction({\n         type: 'duplicate-drawings',\n         data: {\n            rowsAll: rowsOutput,\n            rowsUpdatePreRowOrParentRow,\n            idRowsNew\n         }\n      });\n   };\n   const deleteDrawing = () => {\n      let { rowsAll, idRowsNew, rowsUpdatePreRowOrParentRow, rowsDeleted } = stateRow;\n      const { cellsModifiedTemp } = stateCell;\n      const rowId = panelType.cellProps.rowData.id;\n\n      let rowBelow = rowsAll.find(r => r._preRow === rowId);\n      if (rowBelow) {\n         rowBelow._preRow = panelType.cellProps.rowData._preRow;\n         updatePreRowParentRowToState(rowsUpdatePreRowOrParentRow, rowBelow);\n      };\n\n      if (rowId in rowsUpdatePreRowOrParentRow) delete rowsUpdatePreRowOrParentRow[rowId];\n      rowsAll = rowsAll.filter(r => r.id !== rowId);\n\n      if (idRowsNew.indexOf(rowId) === -1) {\n         rowsDeleted = [...rowsDeleted, panelType.cellProps.rowData];\n      } else {\n         idRowsNew.splice(idRowsNew.indexOf(rowId), 1);\n      };\n\n      Object.keys(cellsModifiedTemp).forEach(key => {\n         if (key.slice(0, 24) === rowId) {  // deleted cells modified temporary...\n            delete cellsModifiedTemp[key];\n         };\n      });\n      OverwriteCellsModified({ ...cellsModifiedTemp });\n\n      const rowsOutput = _processRowsChainNoGroupFnc1([...rowsAll]);\n\n      commandAction({\n         type: 'delete-drawing',\n         data: {\n            rowsAll: rowsOutput,\n            rowsUpdatePreRowOrParentRow,\n            rowsDeleted,\n            idRowsNew,\n         }\n      });\n   };\n\n   const applyFolderOrganize = (drawingTypeTreeNew, mergeList, nodeIsolated) => {\n\n      let {\n         rowsAll, rowsDeleted, idRowsNew, rowsUpdatePreRowOrParentRow,\n         drawingsTypeDeleted, drawingsTypeNewIds, drawingTypeTree, viewTemplateNodeId\n      } = stateRow;\n\n      const { cellsModifiedTemp } = stateCell;\n\n      mergeList.forEach(parentNodeId => {\n         const node = drawingTypeTree.find(x => x.id === parentNodeId);\n         const treeBranchToMerge = getTreeFlattenOfNodeInArray(drawingTypeTree, node);\n\n         const treeBranchChildren = treeBranchToMerge.filter(x => x.id !== parentNodeId);\n         let arr = [];\n         treeBranchChildren.forEach(node => {\n            const rowsChildren = rowsAll.filter(r => r._parentRow === node.id);\n            arr = [...arr, ...rowsChildren];\n         });\n         arr.forEach((row, i) => {\n            row._parentRow = parentNodeId;\n            row._preRow = i === 0 ? null : arr[i - 1].id;\n            updatePreRowParentRowToState(rowsUpdatePreRowOrParentRow, row);\n         });\n      });\n\n\n      let drawingTypeTreeUpdate = flattenAllTreeChildNode1(drawingTypeTreeNew);\n      drawingTypeTreeUpdate.forEach(item => {\n         item['Drawing Number'] = item.title;\n         delete item.title;\n         delete item.children;\n      });\n\n\n      drawingTypeTree.forEach(tr => {\n         if (!drawingTypeTreeUpdate.find(x => x.id === tr.id)) {\n            if (drawingsTypeNewIds.indexOf(tr.id) !== -1) {\n               drawingsTypeNewIds = drawingsTypeNewIds.filter(id => id !== tr.id);\n            } else {\n               drawingsTypeDeleted = [...drawingsTypeDeleted, tr];\n            };\n         };\n      });\n      drawingTypeTreeUpdate.forEach(tr => {\n         if (!drawingTypeTree.find(x => x.id === tr.id)) {\n            drawingsTypeNewIds.push(tr.id);\n         };\n      });\n\n\n      let allDrawingsParentId = [...new Set(rowsAll.map(x => x._parentRow))];\n      allDrawingsParentId.forEach(drawingParentId => {\n         const rowsChildren = rowsAll.filter(row => row._parentRow === drawingParentId);\n\n         if (!drawingTypeTreeUpdate.find(x => x.id === drawingParentId) && !mergeList.find(item => item.id === drawingParentId)) {\n            rowsChildren.forEach(rrr => {\n               if (idRowsNew.indexOf(rrr.id) === -1) {\n                  rowsDeleted = [...rowsDeleted, rrr];\n               } else {\n                  idRowsNew.splice(idRowsNew.indexOf(rrr.id), 1);\n               };\n\n               Object.keys(cellsModifiedTemp).forEach(key => {\n                  if (key.slice(0, 24) === rrr.id) {  // deleted cells modified temporary...\n                     delete cellsModifiedTemp[key];\n                  };\n               });\n               if (rrr.id in rowsUpdatePreRowOrParentRow) delete rowsUpdatePreRowOrParentRow[rrr.id];\n            });\n            rowsAll = rowsAll.filter(r => r._parentRow !== drawingParentId);\n         } else if (!drawingTypeTreeUpdate.find(x => x.id === drawingParentId) && mergeList.find(item => item.id === drawingParentId)) {\n\n\n\n         } else {\n            if (drawingTypeTreeUpdate.find(x => x.parentId === drawingParentId)) {\n               // some folders are added below drawing parent => add new type to contain\n               const nodeParentPrevious = drawingTypeTreeUpdate.find(x => x.id === drawingParentId);\n               const allTreeLevel = [...new Set(drawingTypeTreeUpdate.map(x => x.treeLevel))];\n\n               let arrayNodes = [nodeParentPrevious];\n\n               for (let i = nodeParentPrevious.treeLevel; i <= allTreeLevel.length; i++) {\n                  let arrFilter = drawingTypeTreeUpdate.filter(x => x.treeLevel === allTreeLevel[i] && arrayNodes.find(dt => dt.id === x.parentId));\n                  arrayNodes = [...arrayNodes, ...arrFilter];\n               };\n               const lowestLevel = Math.max(...arrayNodes.map(x => x.treeLevel));\n               const dwgTypeParentToShiftDrawings = arrayNodes.find(x => x.treeLevel === lowestLevel);\n\n               rowsChildren.forEach(r => {\n                  r._parentRow = dwgTypeParentToShiftDrawings.id;\n                  updatePreRowParentRowToState(rowsUpdatePreRowOrParentRow, r);\n               });\n            };\n         };\n      });\n\n      OverwriteCellsModified({ ...cellsModifiedTemp });\n\n      const rowsOutput = getOutputRowsAllSorted(drawingTypeTreeUpdate, rowsAll);\n\n      let templateObj = {};\n      if (viewTemplateNodeId !== nodeIsolated) {\n         templateObj.viewTemplateNodeId = nodeIsolated;\n      };\n\n      commandAction({\n         type: 'drawing-folder-organization',\n         data: {\n            rowsAll: rowsOutput,\n            rowsDeleted,\n            drawingTypeTree: drawingTypeTreeUpdate,\n            rowsUpdatePreRowOrParentRow,\n            drawingsTypeDeleted,\n            drawingsTypeNewIds,\n            idRowsNew,\n            ...templateObj\n         }\n      });\n   };\n   const applyDateAutomation = (dateAutomation) => {\n      let { rowsAll } = stateRow;\n      const rowId = panelType.cellProps.rowData.id;\n      let row = rowsAll.find(r => r.id === rowId);\n\n      Object.keys(dateAutomation).forEach(key => {\n         const cellTempId = `${rowId}-${key}`;\n         const dateConverted = moment(dateAutomation[key]).format('DD/MM/YY');\n         getCellModifiedTemp({ [cellTempId]: dateConverted });\n         row[key] = dateConverted;\n      });\n\n      commandAction({\n         type: 'drawing-data-automation',\n         data: { rowsAll }\n      });\n   };\n   const createNewDrawingRevision = () => {\n      const arrHeadersGoBlank = [\n         'Model Start (T)', 'Model Start (A)', 'Model Finish (T)', 'Model Finish (A)', 'Drawing Start (T)', 'Drawing Start (A)',\n         'Drawing Finish (T)', 'Drawing Finish (A)', 'Drg To Consultant (T)', 'Drg To Consultant (A)', 'Consultant Reply (T)',\n         'Consultant Reply (A)', 'Get Approval (T)', 'Get Approval (A)', 'Construction Issuance Date', 'Construction Start', 'Rev', 'Status'\n      ];\n\n      let { rowsAll } = stateRow;\n      const rowId = panelType.cellProps.rowData.id;\n      let row = rowsAll.find(r => r.id === rowId);\n      let rowOldVersiontoSave = { ...row };\n\n      arrHeadersGoBlank.forEach(hd => {\n         const cellTempId = `${rowId}-${hd}`;\n         getCellModifiedTemp({ [cellTempId]: '' });\n         row[hd] = '';\n      });\n\n      commandAction({\n         type: 'create-new-drawing-revisions',\n         data: {\n            rowsAll,\n            rowsVersionsToSave: [...stateRow.rowsVersionsToSave || [], rowOldVersiontoSave]\n         }\n      });\n   };\n\n   const saveDataToServer = async () => {\n      const { email, projectId, token, role, projectName } = stateProject.allDataOneSheet;\n      const { headersShown, headersHidden, nosColumnFixed, colorization } = stateProject.userData;\n      const { headers } = stateProject.allDataOneSheet.publicSettings;\n      let { cellsModifiedTemp } = stateCell;\n      let {\n         rowsVersionsToSave,\n         rowsUpdatePreRowOrParentRow,\n         drawingTypeTreeInit,\n         drawingTypeTree,\n         drawingsTypeDeleted,\n         rowsDeleted,\n\n         viewTemplateNodeId,\n         viewTemplates,\n         modeFilter,\n         modeSort,\n      } = stateRow;\n\n      try {\n         setLoading(true);\n         commandAction({ type: '' });\n\n         const resDB = await Axios.get(`${SERVER_URL}/sheet/`, { params: { token, projectId, email } });\n         const resCellsHistory = await Axios.get(`${SERVER_URL}/cell/history/`, { params: { token, projectId } });\n\n         let { publicSettings: publicSettingsFromDB, rows: rowsFromDBInit } = resDB.data;\n         let { drawingTypeTree: drawingTypeTreeFromDB, activityRecorded: activityRecordedFromDB } = publicSettingsFromDB;\n\n         const headerKeyDrawingNumber = headers.find(hd => hd.text === 'Drawing Number').key;\n         const headerKeyDrawingName = headers.find(hd => hd.text === 'Drawing Name').key;\n\n         let rowsFromDB = rowsFromDBInit.map(row => ({ ...row }));\n\n         let {\n            needToSaveTree,\n            treeDBModifiedToSave,\n            nodesToAddToDB,\n            nodesToRemoveFromDB\n         } = compareCurrentTreeAndTreeFromDB(\n            drawingTypeTreeInit,\n            drawingTypeTree,\n            drawingsTypeDeleted,\n            drawingTypeTreeFromDB,\n            activityRecordedFromDB.filter(x => x.action === 'Delete Drawing Type'),\n         );\n         let activityRecordedArr = [];\n\n\n         // check if row or its parents deleted by other users\n         const rowsUpdatePreRowOrParentRowArray = Object.values(rowsUpdatePreRowOrParentRow)\n            .filter(row => !activityRecordedFromDB.find(r => r.id === row.id && r.action === 'Delete Drawing') &&\n               !activityRecordedFromDB.find(r => r.id === row._parentRow && r.action === 'Delete Drawing Type'));\n\n\n         if (rowsUpdatePreRowOrParentRowArray.length > 0) {\n\n            let arrID = [];\n            rowsFromDB.forEach(r => { // take out temporarily all rowsUpdatePreRowOrParentRowArray from DB\n               if (rowsUpdatePreRowOrParentRowArray.find(row => row.id === r.id)) {\n                  arrID.push(r.id);\n                  const rowBelow = rowsFromDB.find(rrr => rrr._preRow === r.id);\n                  if (rowBelow) rowBelow._preRow = r._preRow;\n               };\n            });\n            rowsFromDB = rowsFromDB.filter(r => arrID.indexOf(r.id) === -1);\n\n\n\n            const rowsInOldParent = rowsUpdatePreRowOrParentRowArray.filter(r => {\n               return treeDBModifiedToSave.find(tr => tr.id === r._parentRow && !treeDBModifiedToSave.find(x => x.parentId === tr.id));\n            });\n            const rowsInOldParentDivertBranches = rowsUpdatePreRowOrParentRowArray.filter(r => {\n               return treeDBModifiedToSave.find(tr => tr.id === r._parentRow && treeDBModifiedToSave.find(x => x.parentId === tr.id));\n            });\n            const rowsInNewParent = rowsUpdatePreRowOrParentRowArray.filter(r => {\n               return !treeDBModifiedToSave.find(tr => tr.id === r._parentRow);\n            });\n\n\n\n            const rowsInOldParentOutput = _processChainRowsSplitGroupFnc2([...rowsInOldParent]);\n            rowsInOldParentOutput.forEach(arrChain => {\n               const rowFirst = arrChain[0];\n               const parentRowInDB = treeDBModifiedToSave.find(tr => tr.id === rowFirst._parentRow);\n               const rowAbove = rowsFromDB.find(r => r.id === rowFirst._preRow);\n               if (rowAbove) {\n                  if (rowAbove._parentRow !== rowFirst._parentRow) { // rowAbove move to other parent by other user\n                     const lastRowInParent = rowsFromDB.find(r => r._parentRow === parentRowInDB.id && !rowsFromDB.find(x => x._preRow === r.id));\n                     rowFirst._preRow = lastRowInParent ? lastRowInParent.id : null;\n                  } else { // rowAbove is still in the same parent\n                     const rowBelowRowAbove = rowsFromDB.find(r => r._preRow === rowAbove.id);\n                     if (rowBelowRowAbove) rowBelowRowAbove._preRow = arrChain[arrChain.length - 1].id;\n                     rowFirst._preRow = rowAbove.id;\n                  };\n               } else {\n                  if (rowFirst._preRow === null) {\n                     const firstRowInParent = rowsFromDB.find(r => r._parentRow === parentRowInDB.id && r._preRow === null);\n                     if (firstRowInParent) { // if firstRowInParent undefined means Drawing type has 0 drawing currently...\n                        firstRowInParent._preRow = arrChain[arrChain.length - 1].id;\n                     };\n                  } else {\n                     const lastRowInParent = rowsFromDB.find(r => r._parentRow === parentRowInDB.id && !rowsFromDB.find(x => x._preRow === r.id));\n                     rowFirst._preRow = lastRowInParent ? lastRowInParent.id : null;\n                  };\n               };\n               rowsFromDB = [...rowsFromDB, ...arrChain];\n            });\n\n\n\n            let idsOldParentDivertBranches = [...new Set(rowsInOldParentDivertBranches.map(r => r._parentRow))];\n            idsOldParentDivertBranches.forEach(idP => {\n               let arrInput = rowsInOldParentDivertBranches.filter(r => r._parentRow === idP);\n               let rowsChildren = _processRowsChainNoGroupFnc1([...arrInput]);\n\n               const treeNode = treeDBModifiedToSave.find(x => x.id === idP);\n               const newIdParent = mongoObjectId();\n               treeDBModifiedToSave.push({\n                  'Drawing Number': 'New Drawing Type',\n                  id: newIdParent,\n                  parentId: treeNode.id,\n                  treeLevel: treeNode.treeLevel + 1,\n                  expanded: true,\n               });\n               needToSaveTree = true;\n\n               activityRecordedArr.push({\n                  id: newIdParent, email, createdAt: new Date(), action: 'Create Drawing Type',\n                  [headerKeyDrawingNumber]: 'New Drawing Type',\n               });\n\n               rowsChildren.forEach((r, i) => {\n                  r._preRow = i === 0 ? null : rowsChildren[i - 1].id;\n                  r._parentRow = newIdParent;\n               });\n               rowsFromDB = [...rowsFromDB, ...rowsChildren];\n            });\n\n\n\n            let idsNewParentArray = [...new Set(rowsInNewParent.map(r => r._parentRow))];\n            idsNewParentArray.forEach(idP => {\n               let arrInput = rowsInNewParent.filter(r => r._parentRow === idP);\n               let rowsChildren = _processRowsChainNoGroupFnc1([...arrInput]);\n               rowsChildren.forEach((r, i) => {\n                  r._preRow = i === 0 ? null : rowsChildren[i - 1].id;\n               });\n               rowsFromDB = [...rowsFromDB, ...rowsChildren];\n            });\n         };\n\n\n         // SAVE CELL HISTORY\n         let objCellHistory = {};\n         resCellsHistory.data.map(cell => {\n            const headerText = headers.find(hd => hd.key === cell.headerKey).text;\n            if (cell.histories.length > 0) {\n               const latestHistoryText = cell.histories[cell.histories.length - 1].text;\n               objCellHistory[`${cell.row}-${headerText}`] = latestHistoryText;\n            };\n         });\n         Object.keys(cellsModifiedTemp).forEach(key => {\n            if (objCellHistory[key] && objCellHistory[key] === cellsModifiedTemp[key]) {\n               delete cellsModifiedTemp[key];\n            } else {\n               let rowId = key.slice(0, 24);\n               if (activityRecordedFromDB.find(x => x.id === rowId && x.action === 'Delete Drawing')) {\n                  delete cellsModifiedTemp[key];\n               };\n            };\n         });\n\n         if (Object.keys(cellsModifiedTemp).length > 0) {\n            await Axios.post(`${SERVER_URL}/cell/history/`, { token, projectId, cellsHistory: convertCellTempToHistory(cellsModifiedTemp, stateProject) });\n         };\n\n         // SAVE DRAWINGS NEW VERSION\n         rowsVersionsToSave = rowsVersionsToSave.filter(row => !activityRecordedFromDB.find(r => r.id === row.id && r.action === 'Delete Drawing'));\n         if (rowsVersionsToSave.length > 0) {\n            await Axios.post(`${SERVER_URL}/row/history/`, { token, projectId, email, rowsHistory: convertDrawingVersionToHistory(rowsVersionsToSave, stateProject) });\n         };\n\n\n\n\n         // DELETE ROWS\n         let rowDeletedFinal = [];\n         rowsDeleted.forEach(row => { // some rows already deleted by previous user => no need to delete anymore\n            const rowInDB = rowsFromDB.find(r => r.id === row.id);\n            if (rowInDB) {\n               const rowBelow = rowsFromDB.find(r => r._preRow === rowInDB.id);\n               if (rowBelow) {\n                  rowBelow._preRow = rowInDB._preRow;\n               };\n               rowsFromDB = rowsFromDB.filter(r => r.id !== rowInDB.id); // FIXEDDDDDDDDDDDDDDDDDDD\n               rowDeletedFinal.push(row);\n            };\n         });\n\n\n\n\n         if (nodesToRemoveFromDB.length > 0) {\n            nodesToRemoveFromDB.forEach(fd => {\n               activityRecordedArr.push({\n                  id: fd.id, email, createdAt: new Date(), action: 'Delete Drawing Type',\n                  [headerKeyDrawingNumber]: fd['Drawing Number'],\n               });\n            });\n         };\n         if (nodesToAddToDB.length > 0) {\n            nodesToAddToDB.forEach(fd => {\n               activityRecordedArr.push({\n                  id: fd.id, email, createdAt: new Date(), action: 'Create Drawing Type',\n                  [headerKeyDrawingNumber]: fd['Drawing Number'],\n               });\n            });\n         };\n\n         // SAVE PUBLIC SETTINGS RECORDED\n         activityRecordedArr.forEach(rc => {\n            const newRowsAddedByPreviousUserButParentDeletedByCurrentUser = rowsFromDB.filter(e => {\n               return e._parentRow === rc.id &&\n                  rc.action === 'Delete Drawing Type' &&\n                  !rowDeletedFinal.find(x => x.id === e.id);\n            });\n            rowDeletedFinal = [...rowDeletedFinal, ...newRowsAddedByPreviousUserButParentDeletedByCurrentUser];\n         });\n\n         rowDeletedFinal.forEach(r => {\n            activityRecordedArr.push({\n               id: r.id, email, createdAt: new Date(), action: 'Delete Drawing',\n               [headerKeyDrawingNumber]: r['Drawing Number'],\n               [headerKeyDrawingName]: r['Drawing Name'],\n            });\n         });\n\n\n         rowsFromDB = rowsFromDB.filter(r => !rowDeletedFinal.find(x => x.id === r.id));\n         // DELETE ...\n         if (rowDeletedFinal.length > 0) {\n            await Axios.post(`${SERVER_URL}/sheet/delete-rows/`, { token, projectId, email, rowIdsArray: rowDeletedFinal.map(r => r.id) });\n         };\n\n\n         treeDBModifiedToSave.forEach(tr => {\n            headers.forEach(hd => {\n               if (hd.text in tr) {\n                  tr[hd.key] = tr[hd.text];\n                  delete tr[hd.text];\n               };\n            });\n         });\n\n         let publicSettingsUpdated = { projectName };\n         if (needToSaveTree) {\n            publicSettingsUpdated = { ...publicSettingsUpdated, drawingTypeTree: treeDBModifiedToSave };\n         };\n         if (activityRecordedArr.length > 0) {\n            publicSettingsUpdated = { ...publicSettingsUpdated, activityRecorded: [...activityRecordedFromDB, ...activityRecordedArr] };\n         };\n         await Axios.post(`${SERVER_URL}/sheet/update-setting-public/`, { token, projectId, email, publicSettings: publicSettingsUpdated });\n\n         const userSettingsUpdated = {\n            headersShown: headersShown.map(hd => headers.find(h => h.text === hd).key),\n            headersHidden: headersHidden.map(hd => headers.find(h => h.text === hd).key),\n            nosColumnFixed, colorization, role, viewTemplateNodeId, viewTemplates, modeFilter, modeSort\n         };\n         await Axios.post(`${SERVER_URL}/sheet/update-setting-user/`, { token, projectId, email, userSettings: userSettingsUpdated });\n\n\n\n         // FILTER FINAL ROW TO UPDATE......\n         let rowsToUpdateFinal = [];\n         rowsFromDB.map(row => {\n            Object.keys(cellsModifiedTemp).forEach(key => {\n               const { rowId, headerName } = extractCellInfo(key);\n               if (rowId === row.id) row[headerName] = cellsModifiedTemp[key];\n            });\n\n            let rowOutput;\n            const found = rowsFromDBInit.find(r => r.id === row.id);\n            if (found) {\n               let toUpdate = false;\n               Object.keys(row).forEach(key => {\n                  if (found[key] !== row[key]) toUpdate = true;\n               });\n               if (toUpdate) rowOutput = { ...row };\n            } else {\n               rowOutput = { ...row };\n            };\n            if (rowOutput) {\n               let rowToSave = { _id: rowOutput.id, parentRow: rowOutput._parentRow, preRow: rowOutput._preRow };\n               headers.forEach(hd => {\n                  if (rowOutput[hd.text] || rowOutput[hd.text] === '') {\n                     rowToSave.data = { ...rowToSave.data || {}, [hd.key]: rowOutput[hd.text] };\n                  };\n               });\n               rowsToUpdateFinal.push(rowToSave);\n            };\n         });\n\n         if (rowsToUpdateFinal.length > 0) {\n            await Axios.post(`${SERVER_URL}/sheet/update-rows/`, { token, projectId, rows: rowsToUpdateFinal });\n         };\n         commandAction({ type: 'save-data-successfully' });\n\n      } catch (err) {\n         commandAction({ type: 'save-data-failure' });\n         console.log(err);\n      };\n   };\n\n   const saveDataToServerAndReloadData = async () => {\n      const { projectId, token, email } = stateProject.allDataOneSheet;\n      try {\n         await saveDataToServer();\n         const res = await Axios.get(`${SERVER_URL}/sheet/`, { params: { token, projectId, email } });\n         commandAction({ type: 'reload-data-from-server', data: res.data });\n\n      } catch (err) {\n         commandAction({ type: 'save-data-failure' });\n         console.log(err);\n      };\n   };\n\n\n\n   return (\n      <>\n         {panelSettingType === 'save-ICON' && (\n            <PanelConfirm\n               onClickCancel={onClickCancelModal}\n               onClickApply={saveDataToServerAndReloadData}\n               content='Do you want to save ?'\n            />\n         )}\n\n         {panelSettingType === 'filter-ICON' && (\n            <FormFilter applyFilter={applyFilter} onClickCancelModal={onClickCancelModal} />\n         )}\n\n         {panelSettingType === 'swap-ICON-1' && (\n            <PanelConfirm\n               onClickCancel={onClickCancelModal}\n               onClickApply={applyQuitGroupingMode}\n               content='Do you want to quit grouping mode ?'\n            />\n         )}\n         {panelSettingType === 'swap-ICON-2' && (\n            <PanelConfirmResetMode\n               onClickCancel={onClickCancelModal}\n               applyResetMode={applyResetMode}\n            />\n         )}\n\n\n         {panelSettingType === 'reorderColumn-ICON' && (\n            <ReorderColumnForm applyReorderColumns={applyReorderColumns} onClickCancelModal={onClickCancelModal} />\n         )}\n\n         {panelSettingType === 'viewTemplate-ICON' && (\n            <PanelConfirm\n               onClickApply={applyViewTemplate} onClickCancel={onClickCancelModal}\n               content='Do you want to save a new view template ?'\n            />\n         )}\n\n\n         {panelSettingType === 'sort-ICON' && (\n            <FormSort applySort={applySort} onClickCancel={onClickCancelModal} />\n         )}\n\n\n         {panelSettingType === 'group-ICON' && (\n            <FormGroup applyGroup={applyGroup} onClickCancelModal={onClickCancelModal} />\n         )}\n\n\n         {(panelSettingType === 'Insert Drawings Below' || panelSettingType === 'Insert Drawings Above') && (\n            <PanelPickNumber\n               onClickCancelModal={onClickCancelModal}\n               onClickApply={onClickInsertRow}\n            />\n         )}\n\n         {panelSettingType === 'Duplicate Drawings' && (\n            <PanelPickNumber\n               onClickCancelModal={onClickCancelModal}\n               onClickApply={onClickDuplicateRows}\n            />\n         )}\n\n         {panelSettingType === 'history-ICON' && (\n            <TableActivityHistory />\n         )}\n\n         {panelSettingType === 'color-cell-history-ICON' && (\n            <FormCellColorizedCheck setCellHistoryArr={setCellHistoryArr} />\n         )}\n\n\n         {panelSettingType === 'Date Automation' && (\n            <FormDateAutomation applyDateAutomation={applyDateAutomation} />\n         )}\n\n         {panelSettingType === 'Create New Drawing Revision' && (\n            <PanelConfirm\n               onClickCancel={onClickCancelModal}\n               onClickApply={createNewDrawingRevision}\n               content={`Are you sure to create a new revision of this drawing: ${panelType.cellProps.rowData['Drawing Number'] || ' '} - ${panelType.cellProps.rowData['Drawing Name'] || ' '} ?`}\n            />\n         )}\n\n         {panelSettingType === 'View Drawing Revision' && (\n            <TableDrawingDetail {...panelType.cellProps} />\n         )}\n\n         {panelSettingType === 'addDrawingType-ICON' && (\n            <FormDrawingTypeOrder applyFolderOrganize={applyFolderOrganize} onClickCancelModal={onClickCancelModal} />\n         )}\n\n         {panelSettingType === 'View Cell History' && (\n            <TableCellHistory {...panelType.cellProps} />\n         )}\n\n\n         {panelSettingType === 'Delete Drawing' && (\n            <PanelConfirm\n               onClickCancel={onClickCancelModal}\n               onClickApply={deleteDrawing}\n               content={`Are you sure to delete the: ${panelType.cellProps.rowData['Drawing Number'] || ' '} - ${panelType.cellProps.rowData['Drawing Name'] || ' '} ?`}\n            />\n         )}\n\n         {panelSettingType === 'colorized-ICON' && (\n            <ColorizedForm applyColorization={applyColorization} onClickCancelModal={onClickCancelModal} />\n         )}\n\n         {panelSettingType === 'Insert Drawings By Type' && (\n            <PanelPickNumber onClickCancelModal={onClickCancelModal} onClickApply={onClickFolderInsertSubRows} />\n         )}\n\n\n\n      </>\n   );\n};\n\nexport default PanelSetting;\n\n\n\n\n\n\n\n\nexport const _processRowsChainNoGroupFnc1 = (rows) => {\n   let rowsProcessed = [];\n\n   if (!(rows instanceof Array) || !rows.length) {\n      return rowsProcessed;\n   };\n\n   let firstRowIndex = rows.findIndex((row) => !row._preRow);\n   while (firstRowIndex >= 0) {\n      let preRow = rows.splice(firstRowIndex, 1)[0];\n      while (preRow) {\n         rowsProcessed.push(preRow);\n\n         let nextRowIndex = rows.findIndex((row) => String(row._preRow) == String(preRow.id));\n         if (nextRowIndex >= 0) preRow = rows.splice(nextRowIndex, 1)[0];\n         else preRow = null;\n      };\n      firstRowIndex = rows.findIndex((row) => !row._preRow);\n   };\n   _processRowsLossHeadFnc1(rows, rowsProcessed);\n   return rowsProcessed;\n};\nconst _processRowsLossHeadFnc1 = (rows, rowsProcessed) => {\n   if (!rows.length) return;\n\n   let firstRowIndex = rows.findIndex((r) => _filterRowLossPreRowFnc(r, rows));\n   while (firstRowIndex >= 0) {\n      let preRow = rows.splice(firstRowIndex, 1)[0];\n      while (preRow) {\n         rowsProcessed.push(preRow);\n\n         let nextRowIndex = rows.findIndex((row) => String(row._preRow) == String(preRow.id));\n         if (nextRowIndex >= 0) preRow = rows.splice(nextRowIndex, 1)[0];\n         else preRow = null;\n      };\n      firstRowIndex = rows.findIndex((r) => _filterRowLossPreRowFnc(r, rows));\n   };\n};\nconst _processChainRowsSplitGroupFnc2 = (rows) => {\n   let rowsProcessed = [];\n\n   if (!(rows instanceof Array) || !rows.length) return rowsProcessed;\n\n   let firstRowIndex = rows.findIndex((row) => !row._preRow);\n   while (firstRowIndex >= 0) {\n      let preRow = rows.splice(firstRowIndex, 1)[0];\n      let chain = [];\n      while (preRow) {\n         chain.push(preRow);\n         let nextRowIndex = rows.findIndex((row) => String(row._preRow) == String(preRow.id));\n\n         if (nextRowIndex >= 0) preRow = rows.splice(nextRowIndex, 1)[0];\n         else preRow = null;\n      };\n      rowsProcessed.push(chain);\n      firstRowIndex = rows.findIndex((row) => !row._preRow);\n   };\n   _processChainRowsLossHeadFnc2(rows, rowsProcessed);\n   return rowsProcessed;\n};\nconst _processChainRowsLossHeadFnc2 = (rows, rowsProcessed) => {\n   if (!rows.length) return;\n\n   let firstRowIndex = rows.findIndex((r) => _filterRowLossPreRowFnc(r, rows));\n   while (firstRowIndex >= 0) {\n      let preRow = rows.splice(firstRowIndex, 1)[0];\n      let chain = [];\n      while (preRow) {\n         chain.push(preRow);\n\n         let nextRowIndex = rows.findIndex((row) => String(row._preRow) == String(preRow.id));\n         if (nextRowIndex >= 0) preRow = rows.splice(nextRowIndex, 1)[0];\n         else preRow = null;\n      };\n      rowsProcessed.push(chain);\n      firstRowIndex = rows.findIndex((r) => _filterRowLossPreRowFnc(r, rows));\n   };\n};\nconst _filterRowLossPreRowFnc = (row, rows) => {\n   return rows.every(r => String(row._preRow) != String(r.id));\n};\n\n\n\nexport const updatePreRowParentRowToState = (objState, row) => {\n   objState[row.id] = {\n      id: row.id,\n      _preRow: row._preRow,\n      _parentRow: row._parentRow,\n   };\n};\n\n\n\n\n\n","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\_dashboardComp\\componentsDashboard\\CardPanel.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\_dashboardComp\\componentsDashboard\\PanelRightClick.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\_dashboardComp\\componentsDashboard\\ChartBarRecordPanel.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\PanelCalendar.js",["341","342"],"import { Calendar, Radio } from 'antd';\nimport React from 'react';\n\n\nconst { Group, Button } = Radio;\n\n\nconst PanelCalendar = ({ pickDate }) => {\n\n    return (\n        <div style={{ width: 300 }}>\n            <Calendar\n                fullscreen={false}\n                onSelect={pickDate}\n            />\n        </div>\n    );\n};\n\nexport default PanelCalendar;\n","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\TableCellHistory.js",["343","344"],"import { List } from 'antd';\nimport Axios from 'axios';\nimport moment from 'moment';\nimport React, { useContext, useEffect, useState } from 'react';\nimport { SERVER_URL } from '../../constants';\nimport { Context as ProjectContext } from '../../contexts/projectContext';\nimport { Context as RowContext } from '../../contexts/rowContext';\n\n\n\nconst TableCellHistory = (props) => {\n\n    const { rowData: { id: rowId }, column } = props;\n\n    const {\n        state: stateProject\n    } = useContext(ProjectContext);\n\n    const {\n        state: stateRow\n    } = useContext(RowContext);\n\n    const { projectId, token } = stateProject.allDataOneSheet;\n    const headers = stateProject.allDataOneSheet.publicSettings.headers;\n    const headerKey = headers.find(hd => hd.text === column.key).key;\n\n\n    const [history, setHistory] = useState()\n\n    useEffect(() => {\n        const fetchCellHistory = async () => {\n            try {\n\n                const res = await Axios.get(`${SERVER_URL}/cell/history/one-cell/`, { params: { token, projectId, rowId, headerKey } });\n\n                setHistory(res.data.histories.reverse());\n\n            } catch (err) {\n                console.log(err);\n            };\n        };\n        fetchCellHistory();\n    }, [])\n\n\n    return (\n        <div style={{ width: '100%', padding: 15, maxHeight: window.innerHeight * 0.7, overflowY: 'scroll' }}>\n            <List\n                size='small'\n                header={null}\n                footer={null}\n                bordered\n                dataSource={history}\n                renderItem={item => (\n                    <List.Item>\n                        <div>\n                            <div>{`${item.email}`}</div>\n                            <div style={{ fontSize: 12, color: 'grey' }}>{moment(item.createdAt).format('DD/MM/YY - HH:mm')}</div>\n                            <div style={{ fontWeight: 'bold' }}>{item.text}</div>\n                        </div>\n                    </List.Item>\n                )}\n            />\n        </div>\n    );\n};\n\nexport default TableCellHistory;\n","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\TableDrawingDetail.js",["345"],"\nimport Axios from 'axios';\nimport React, { useContext, useEffect, useState } from 'react';\nimport BaseTable, { AutoResizer } from 'react-base-table';\nimport styled from 'styled-components';\nimport { colorType, imgLink, SERVER_URL } from '../../constants';\nimport { Context as ProjectContext } from '../../contexts/projectContext';\nimport { Context as RowContext } from '../../contexts/rowContext';\nimport { getHeaderWidth, mongoObjectId } from '../../utils';\n\n\nconst Table = (props) => {\n   return (\n      <AutoResizer>\n         {({ width, height }) => {\n            return (\n               <BaseTable\n                  {...props}\n                  width={width}\n                  height={height}\n               />\n            );\n         }}\n      </AutoResizer>\n   );\n};\n\n\nconst TableDrawingDetail = (props) => {\n\n\n   const { rowData } = props;\n   const { id: rowId } = rowData;\n   const { state: stateProject } = useContext(ProjectContext);\n   const { state: stateRow } = useContext(RowContext);\n   const { headers } = stateProject.allDataOneSheet.publicSettings;\n   const { _id: projectId, token } = stateProject.allDataOneSheet;\n\n   const [rowsHistoryDatabase, setRowsHistoryDatabase] = useState(null);\n   const [rowsHistoryPrevious, setRowsHistoryPrevious] = useState([]);\n   const [rowCurrent, setRowCurrent] = useState(null);\n\n\n   useEffect(() => {\n      const fetchRowsHistory = async () => {\n         try {\n            const res = await Axios.get(`${SERVER_URL}/row/history/one-row/`, { params: { token, projectId, rowId } });\n\n            let rowsHistory = [];\n            res.data.forEach((r, i) => {\n               const { history } = r;\n               if (history) {\n                  let data = { id: mongoObjectId() };\n                  Object.keys(history).forEach(key => {\n                     const hdText = headers.find(hd => hd.key === key).text;\n                     data[hdText] = history[key];\n                  });\n                  rowsHistory.push(data);\n               };\n            });\n            setRowsHistoryDatabase(rowsHistory);\n\n\n            let rowsHistoryPrevious = [];\n            if (stateRow.rowsVersionsToSave) {\n               rowsHistoryPrevious = stateRow.rowsVersionsToSave.filter(r => r.id === rowId);\n               rowsHistoryPrevious.forEach((r, i) => {\n                  r.id = mongoObjectId();\n               });\n               setRowsHistoryPrevious(rowsHistoryPrevious);\n            };\n\n            setRowCurrent({\n               ...rowData,\n               key: rowsHistory.length + rowsHistoryPrevious.length + 1\n            });\n\n\n         } catch (err) {\n            console.log(err);\n         };\n      };\n      fetchRowsHistory();\n   }, []);\n\n   let data;\n   if (rowsHistoryDatabase && rowCurrent) {\n      data = [\n         ...rowsHistoryDatabase,\n         ...rowsHistoryPrevious,\n         rowCurrent\n      ];\n   };\n\n   const panelWidth = window.innerWidth * 0.8;\n   const panelHeight = window.innerHeight * 0.8;\n\n\n   return (\n      <div style={{\n         height: panelHeight,\n         background: 'white',\n         padding: 10,\n         display: 'flex',\n         justifyContent: 'center',\n         flexDirection: 'column',\n      }}>\n\n         {rowsHistoryDatabase && rowCurrent && (\n            <>\n               <div style={{\n                  width: panelWidth,\n                  height: 100 + data.length * 30,\n                  margin: '0 auto',\n                  textAlign: 'center'\n               }}>\n                  <div style={{ fontSize: 20, fontWeight: 'bold' }}>DRAWING HISTORY</div>\n                  <TableStyled\n                     fixed\n                     columns={generateColumns(getHeadersText(stateProject.allDataOneSheet.publicSettings.headers))}\n                     data={data}\n                     rowHeight={28}\n                  />\n\n               </div>\n\n               <div style={{\n                  margin: '0 auto',\n                  textAlign: 'center',\n                  marginTop: 100\n               }}>\n                  <img src={imgLink.timeline} alt='visualize' height={panelHeight - (100 + data.length * 30) - 100} />\n               </div>\n            </>\n         )}\n\n\n\n      </div>\n\n   );\n};\n\nexport default TableDrawingDetail;\n\n\nconst generateColumns = (headers) => headers.map((column, columnIndex) => ({\n\n   key: column,\n   dataKey: column,\n   title: column,\n   resizable: true,\n   width: getHeaderWidth(column),\n}));\n\nconst getHeadersText = (headersData) => {\n   return headersData.map(hd => {\n      return hd.text;\n   });\n};\n\n\n\n\nconst TableStyled = styled(Table)`\n\n\n   .BaseTable__row-cell-text {\n      color: black\n   }\n\n   .BaseTable__table .BaseTable__body {\n      /* -webkit-touch-callout: none;\n      -webkit-user-select: none;\n      -khtml-user-select: none;\n      -moz-user-select: none;\n      -ms-user-select: none;\n      user-select: none; */\n   }\n   .BaseTable__header-cell {\n      padding: 10px;\n      border-right: 1px solid #DCDCDC;\n\n      background: ${colorType.grey1};\n      color: black\n   }\n\n   .BaseTable__row-cell {\n      padding: 10px;\n      border-right: 1px solid #DCDCDC;\n\n      overflow: visible !important;\n   }\n`;\n\n","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\TableActivityHistory.js",["346","347","348","349","350","351"],"import { Modal } from 'antd';\nimport Axios from 'axios';\nimport moment from 'moment';\nimport React, { useContext, useEffect, useState } from 'react';\nimport BaseTable, { AutoResizer } from 'react-base-table';\nimport styled from 'styled-components';\nimport { colorType, SERVER_URL } from '../../constants';\nimport { Context as ProjectContext } from '../../contexts/projectContext';\nimport { Context as RowContext } from '../../contexts/rowContext';\nimport { convertHistoryData, mongoObjectId } from '../../utils';\nimport ButtonStyle from './ButtonStyle';\nimport FormFilterActivityHistory from './FormFilterActivityHistory';\nimport IconTable from './IconTable';\nimport PanelCalendarDuration from './PanelCalendarDuration';\n\nconst Table = (props) => {\n   return (\n      <AutoResizer>\n         {({ width, height }) => {\n            return (\n               <BaseTable\n                  {...props}\n                  width={width}\n                  height={height}\n               />\n            );\n         }}\n      </AutoResizer>\n   );\n};\n\nconst panelWidth = window.innerWidth * 0.8;\nconst panelHeight = window.innerHeight * 0.8;\n\nconst TableActivityHistory = (props) => {\n\n   const { state: stateProject } = useContext(ProjectContext);\n   const { state: stateRow } = useContext(RowContext);\n   const { allDataOneSheet: { publicSettings: { activityRecorded } } } = stateProject;\n\n\n\n   const { projectId, token } = stateProject.allDataOneSheet;\n   const { headers } = stateProject.allDataOneSheet.publicSettings;\n\n   const [historyAll, setHistoryAll] = useState(null);\n   const [historyAllInit, setHistoryAllInit] = useState(null);\n\n\n   const headersShown = [\n      'Drawing Number',\n      'Drawing Name',\n      'Column',\n      'Value',\n      'User',\n      'Created At',\n      'Action'\n   ];\n\n   const revKey = headers.find(hd => hd.text === 'Rev').key;\n   const statusKey = headers.find(hd => hd.text === 'Status').key;\n   const dwgNumber = headers.find(hd => hd.text === 'Drawing Number').key;\n   const dwgName = headers.find(hd => hd.text === 'Drawing Name').key;\n\n   useEffect(() => {\n      const fetchRowsAndCellHistory = async () => {\n         try {\n            const resRows = await Axios.get(`${SERVER_URL}/row/history/`, { params: { token, projectId } });\n            const resCells = await Axios.get(`${SERVER_URL}/cell/history/`, { params: { token, projectId } });\n\n            let rowsOutput = [];\n            resRows.data.forEach(row => {\n               const { history } = row;\n               if (history) rowsOutput.push({\n                  'Drawing Number': history[dwgNumber],\n                  'Drawing Name': history[dwgName],\n                  'Column': 'Rev & Status',\n                  'Value': `${history[revKey] || ''} - ${history[statusKey] || ''}`,\n                  'User': row.userId || 'n/a',\n                  'Created At': moment(row.createdAt).format('DD/MM/YY - HH:mm'),\n                  'Action': 'Save Drawing Version',\n                  id: mongoObjectId()\n               });\n            });\n\n            let cellsOutput = [];\n            convertHistoryData(resCells.data).forEach(cell => {\n               const row = stateRow.rowsAll.find(r => r.id === cell.row);\n               if (row) cellsOutput.push({\n                  'Drawing Number': row['Drawing Number'],\n                  'Drawing Name': row['Drawing Name'],\n                  'Column': headers.find(hd => hd.key === cell.headerKey).text,\n                  'Value': cell.text || '',\n                  'User': cell.email || 'n/a',\n                  'Created At': moment(cell.createdAt).format('DD/MM/YY - HH:mm'),\n                  'Action': 'Edit Cell',\n                  id: mongoObjectId()\n               });\n            });\n\n            const activityRecordedData = activityRecorded.map(r => {\n               return {\n                  'Drawing Number': r[dwgNumber],\n                  'Drawing Name': r[dwgName],\n                  'Column': undefined,\n                  'Value': undefined,\n                  'User': r.email || 'n/a',\n                  'Created At': moment(r.createdAt).format('DD/MM/YY - HH:mm'),\n                  'Action': r.action,\n                  id: mongoObjectId()\n               };\n            });\n            let outputArr = [...rowsOutput, ...cellsOutput, ...activityRecordedData];\n\n\n            setHistoryAll(sortDataBeforePrint(outputArr));\n            setHistoryAllInit(sortDataBeforePrint(outputArr));\n\n         } catch (err) {\n            console.log(err);\n         };\n      };\n      fetchRowsAndCellHistory();\n   }, []);\n\n\n   const [modalFilter, setModalFilter] = useState(false);\n\n   const applyFilter = (data) => {\n      setHistoryAll(data);\n      setModalFilter(false);\n   };\n\n   const sortDataBeforePrint = (data) => {\n      data.sort((b, a) => {\n         let aa = moment(a['Created At'], 'DD/MM/YY - HH:mm').toDate();\n         let bb = moment(b['Created At'], 'DD/MM/YY - HH:mm').toDate();\n         return aa > bb ? 1 : bb > aa ? -1 : 0\n      });\n\n      data.forEach((dt, i) => {\n         dt.index = i + 1;\n      });\n\n      return data;\n   };\n\n\n   const [dateRange, setDateRange] = useState(null);\n   const onClick = () => {\n      if (!dateRange) return;\n      let newData = historyAll.filter(r => {\n         let xxx = moment(r['Created At'], 'DD/MM/YY - HH:mm').toDate();\n         return xxx <= dateRange[1] && xxx >= dateRange[0];\n      });\n      setHistoryAll(sortDataBeforePrint(newData));\n   };\n   const resetDataFilter = () => {\n      setHistoryAll(sortDataBeforePrint(historyAllInit));\n   };\n\n   const checkDataWithinDays = (nos) => {\n      const addDays = (date, days) => {\n         let result = new Date(date);\n         result.setDate(result.getDate() + days);\n         return result;\n      };\n\n      let today = new Date();\n      let dateBefore = addDays(today, nos);\n      let newData = historyAllInit.filter(r => {\n         let xxx = moment(r['Created At'], 'DD/MM/YY - HH:mm').toDate();\n         return xxx <= today && xxx >= dateBefore;\n      });\n      setHistoryAll(sortDataBeforePrint(newData));\n   };\n\n\n   return (\n      <>\n         {historyAll && (\n            <div style={{\n               height: panelHeight,\n               background: 'white',\n               padding: 10,\n               display: 'flex',\n               justifyContent: 'center',\n               flexDirection: 'column',\n            }}>\n               <div style={{ paddingBottom: 10, fontSize: 20, fontWeight: 'bold', textAlign: 'center' }}>ACTIVITY HISTORY</div>\n               <div style={{ display: 'flex', marginBottom: 10 }}>\n                  <PanelCalendarDuration pickRangeDate={(e) => setDateRange(e)} />\n                  <ButtonStyle\n                     onClick={onClick}\n                     marginLeft={5}\n                     name='Check History'\n                  />\n               </div>\n               <div style={{ display: 'flex', marginBottom: 10 }}>\n                  <div style={{ marginRight: 10, display: 'flex' }}>\n                     <IconTable type='filter' onClick={() => setModalFilter(true)} />\n                     <IconTable type='swap' onClick={resetDataFilter} />\n                  </div>\n\n                  <ButtonStyle\n                     onClick={() => { }}\n                     marginRight={5}\n                     name='Today'\n                     onClick={() => checkDataWithinDays(-1)}\n                  />\n                  <ButtonStyle\n                     onClick={() => { }}\n                     marginRight={5}\n                     name='Last 3 Days'\n                     onClick={() => checkDataWithinDays(-3)}\n                  />\n\n                  <ButtonStyle\n                     onClick={() => { }}\n                     marginRight={5}\n                     name='Last 7 Days'\n                     onClick={() => checkDataWithinDays(-7)}\n                  />\n                  <ButtonStyle\n                     onClick={() => { }}\n                     marginRight={5}\n                     name='Last 14 Days'\n                     onClick={() => checkDataWithinDays(-14)}\n                  />\n                  <ButtonStyle\n                     onClick={() => { }}\n                     marginRight={5}\n                     name='This Month'\n                     onClick={() => checkDataWithinDays(-31)}\n                  />\n               </div>\n\n               <div style={{\n                  width: panelWidth,\n                  height: '100%',\n                  margin: '0 auto',\n                  textAlign: 'center'\n               }}>\n                  <TableStyled\n                     fixed\n                     columns={generateColumns(headersShown)}\n                     data={historyAll}\n                     rowHeight={28}\n                  />\n               </div>\n            </div>\n         )}\n\n         {modalFilter && (\n            <ModalStyledSetting\n               title='Filter Data Activity History'\n               visible={modalFilter}\n               footer={null}\n               onCancel={() => {\n                  setModalFilter(false);\n               }}\n               destroyOnClose={true}\n               centered={true}\n            >\n               <FormFilterActivityHistory\n                  applyFilter={applyFilter}\n                  onClickCancelModal={() => setModalFilter(false)}\n                  rowsAll={historyAll}\n                  headers={headersShown}\n               />\n            </ModalStyledSetting>\n         )}\n      </>\n   );\n};\n\nexport default TableActivityHistory;\n\n\nconst generateColumns = (headers) => {\n\n   return [\n      {\n         key: 'index',\n         dataKey: 'index',\n         title: '',\n         width: 70,\n      },\n      ...headers.map((column, columnIndex) => ({\n         key: column,\n         dataKey: column,\n         title: column,\n         resizable: true,\n         width: getHeaderWidth2(column),\n      }))\n   ];\n};\nconst getHeaderWidth2 = (header) => {\n   if (header === 'Drawing Number') return 300;\n   if (header === 'Drawing Name') return 300;\n   if (header === 'Column') return 200;\n   if (header === 'Value') return 300;\n   if (header === 'User') return 200;\n   if (header === 'Created At') return 200;\n   if (header === 'Action') return 200;\n};\n\nconst ModalStyledSetting = styled(Modal)`\n    .ant-modal-content {\n        border-radius: 0;\n    }\n   .ant-modal-close {\n      display: none;\n   }\n   .ant-modal-header {\n      padding: 10px;\n   }\n   .ant-modal-title {\n        padding-left: 10px;\n        font-size: 20px;\n        font-weight: bold;\n   }\n   .ant-modal-body {\n      padding: 0;\n      display: flex;\n      justify-content: center;\n   }\n`;\nconst TableStyled = styled(Table)`\n\n\n    .BaseTable__row-cell-text {\n        color: black\n    }\n\n    .BaseTable__table .BaseTable__body {\n      /* -webkit-touch-callout: none;\n      -webkit-user-select: none;\n      -khtml-user-select: none;\n      -moz-user-select: none;\n      -ms-user-select: none;\n      user-select: none; */\n   }\n\n    .BaseTable__header-cell {\n        padding: 10px;\n        border-right: 1px solid #DCDCDC;\n        background: ${colorType.grey1};\n        color: black\n    }\n\n    .BaseTable__row-cell {\n        padding: 10px;\n        border-right: 1px solid #DCDCDC;\n        overflow: visible !important;\n    }\n`;\n\n\n\n\n","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\ReorderColumnForm.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\PanelConfirm.js",["352"],"import { Input } from 'antd';\nimport React, { useState } from 'react';\nimport ButtonGroupComp from './ButtonGroupComp';\n\n\n\nconst PanelConfirm = ({ onClickCancel, onClickApply, content }) => {\n\n    const [value, setValue] = useState('');\n\n\n    return (\n        <div style={{\n            width: '100%',\n            height: '100%'\n        }}>\n            <div style={{ padding: 20 }}>\n                {(content === 'Do you want to save a new view template ?' ? (\n                    <div>\n                        <div>Do you want to save a new view template ?</div>\n                        <Input\n                            placeholder='Enter view template name...'\n                            style={{ width: '100%' }}\n                            value={value}\n                            onChange={(e) => setValue(e.target.value)}\n                            style={{\n                                marginBottom: 20,\n                                borderRadius: 0\n                             }}\n                        />\n                    </div>\n\n                ) : content) || 'Are you sure ?'}\n            </div>\n            <div style={{ padding: 20, paddingTop: 0, display: 'flex', flexDirection: 'row-reverse' }}>\n                <ButtonGroupComp\n                    onClickCancel={onClickCancel}\n                    onClickApply={() => onClickApply(value)}\n                />\n            </div>\n\n        </div>\n    );\n};\n\nexport default PanelConfirm;\n","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\FormSort.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\FormFilter.js",["353","354"],"import { Checkbox, Icon, Select, Tooltip } from 'antd';\nimport React, { useContext, useEffect, useState } from 'react';\nimport styled from 'styled-components';\nimport { colorType } from '../../constants';\nimport { Context as ProjectContext } from '../../contexts/projectContext';\nimport { Context as RowContext } from '../../contexts/rowContext';\nimport { mongoObjectId } from '../../utils/index';\nimport ButtonGroupComp from './ButtonGroupComp';\nimport ButtonStyle from './ButtonStyle';\n\n\n\n\nconst { Option } = Select;\n\n\nconst FormFilter = ({ applyFilter, onClickCancelModal }) => {\n\n   const { state: stateRow } = useContext(RowContext);\n   const { state: stateProject } = useContext(ProjectContext);\n\n   const { headersShown } = stateProject.userData;\n\n   const [filterColumn, setFilterColumn] = useState(\n      stateRow.modeFilter.length > 1 ?\n         stateRow.modeFilter : [\n            {\n               id: mongoObjectId(),\n               header: 'Status',\n               value: 'Select Value...'\n            },\n            {\n               isIncludedParent: 'included'\n            }\n         ]);\n\n   const setFilterSelect = (dataFilter) => {\n      let found = filterColumn.find(x => x.id === dataFilter.id);\n      found.header = dataFilter.header;\n      found.value = dataFilter.value;\n      setFilterColumn([...filterColumn]);\n   };\n\n\n   const onClickAddField = () => {\n      setFilterColumn([\n         ...filterColumn,\n         { id: mongoObjectId(), header: 'Select Field...', value: 'Select Value...' }\n      ]);\n   };\n\n   const removeFilterTag = (id) => {\n      const arr = filterColumn.filter(x => x.id !== id);\n      setFilterColumn([...arr]);\n   };\n\n   const filterObj = stateRow.modeFilter.find(x => x.isIncludedParent);\n\n   const [isChecked, setIsChecked] = useState(\n      filterObj && filterObj.isIncludedParent === 'included' ? true :\n         filterObj && filterObj.isIncludedParent === 'not included' ? false :\n            true);\n   const onChangeBox = () => {\n\n      setIsChecked(!isChecked);\n      const found = filterColumn.find(x => x.isIncludedParent);\n\n      if (found) {\n         found.isIncludedParent = isChecked ? 'not included' : 'included';\n         setFilterColumn(filterColumn);\n      } else {\n         let xxx = [...filterColumn, { isIncludedParent: isChecked ? 'not included' : 'included' }];\n         setFilterColumn(xxx);\n      };\n   };\n\n   const onClickApply = () => {\n      const output = filterColumn.filter(x => {\n         return (x.header !== 'Select Field...' && x.value !== 'Select Value...') || x.isIncludedParent;\n      });\n      if (!filterColumn.find(item => item.isIncludedParent)) {\n         output.push({ isIncludedParent: 'not included' });\n      };\n\n      if (output.length === 1 && output[0].isIncludedParent === 'included') {\n         applyFilter([]);\n      } else {\n         applyFilter(output);\n      };\n\n   };\n\n   return (\n      <div style={{\n         width: '100%',\n         height: '100%'\n      }}>\n         <div style={{ padding: 20, borderBottom: `1px solid ${colorType.grey4}` }}>\n\n            <ButtonStyle\n               colorText='black'\n               marginRight={10}\n               borderColor={colorType.grey1}\n               background={colorType.grey4}\n               onClick={onClickAddField}\n               name='Add Field'\n               marginBottom={10}\n            />\n\n            {filterColumn.filter(x => x.id).map(item => (\n               <SelectComp\n                  key={item.id}\n                  id={item.id}\n                  data={item}\n                  setFilterSelect={setFilterSelect}\n                  removeFilterTag={removeFilterTag}\n               />\n            ))}\n            <div>\n               <CheckboxStyled\n                  onChange={onChangeBox}\n                  checked={isChecked}\n               >\n                  Include Parent Rows\n               </CheckboxStyled>\n            </div>\n         </div>\n\n         <div style={{ padding: 20, display: 'flex', flexDirection: 'row-reverse' }}>\n            <ButtonGroupComp\n               onClickCancel={onClickCancelModal}\n               onClickApply={onClickApply}\n            />\n         </div>\n      </div>\n   );\n};\nexport default FormFilter;\n\n\nconst CheckboxStyled = styled(Checkbox)`\n   .ant-checkbox-inner {\n      border-radius: 0;\n      border: none;\n      background: ${colorType.primary}\n   }\n`;\n\n\nconst IconStyled = styled.div`\n    margin-left: 7px;\n    width: 18px; \n    height: 18px; \n    border: 1px solid ${colorType.grey1};\n    text-align: center;\n    &:hover {\n        background-color: ${colorType.grey4};\n        cursor: pointer;\n    };\n`;\n\n\n\nconst SelectComp = ({ setFilterSelect, data, id, removeFilterTag }) => {\n\n   const { state: stateProject } = useContext(ProjectContext);\n   const { state: stateRow } = useContext(RowContext);\n   const { rowsAll } = stateRow;\n   const { headersShown } = stateProject.userData;\n\n   const columnsValueArr = getColumnsValue(rowsAll, headersShown);\n\n   const [column, setColumn] = useState(data.header);\n\n   const [value, setValue] = useState(null);\n\n   useEffect(() => {\n      if (column) {\n         setValue(data.value || 'Select Value...');\n         setFilterSelect({ id, header: column, value: data.value || 'Select Value...' });\n      };\n   }, [column]);\n\n   return (\n      <div style={{ display: 'flex', paddingBottom: 10, width: '100%' }}>\n\n         <SelectStyled\n            defaultValue='Select Field...'\n            value={column}\n            style={{ marginRight: 13, width: '47%' }}\n            onChange={(column) => setColumn(column)}\n         >\n            {headersShown.filter(hd => columnsValueArr[hd]).map(hd => (\n               <Option key={hd} value={hd}>{hd}</Option>\n            ))}\n         </SelectStyled>\n\n\n         <SelectStyled\n            showSearch\n            optionFilterProp='children'\n            filterOption={(input, option) => {\n               let stringArray = input.split(/(\\s+)/).filter(str => str !== ' ');\n               let isFound = true;\n               stringArray.forEach(str => {\n                  if (option.props.children.toLowerCase().indexOf(str.toLowerCase()) === -1) {\n                     isFound = false;\n                  };\n               });\n               return isFound;\n            }}\n\n            style={{ width: '47%' }}\n            onChange={(value) => {\n               setFilterSelect({ id, header: column, value });\n               setValue(value);\n            }}\n            disabled={!column ? true : false}\n            value={value}\n         >\n            {column && columnsValueArr[column] && columnsValueArr[column].map(hd => (\n               <Option key={hd} value={hd}>{hd}</Option>\n            ))}\n         </SelectStyled>\n\n\n         <Tooltip title='Remove Field'>\n            <IconStyled>\n               <Icon\n                  type='delete'\n                  style={{ transform: 'translate(0, -3px)', color: colorType.grey2, fontSize: 12 }}\n                  onClick={() => removeFilterTag(id)}\n               />\n            </IconStyled>\n         </Tooltip>\n\n      </div>\n   );\n};\n\n\nconst SelectStyled = styled(Select)`\n    .ant-select-selection {\n        border-radius: 0;\n    }\n`;\n\n\nconst getColumnsValue = (rows, headers) => {\n   let valueObj = {};\n   headers.forEach(hd => {\n      let valueArr = [];\n      rows.filter(r => r._rowLevel === 1).forEach(row => {\n         valueArr.push(row[hd] || '');\n      });\n      valueArr = [...new Set(valueArr)].filter(e => e);\n      valueArr.sort((a, b) => a > b ? 1 : (b > a ? -1 : 0));\n      if (valueArr.length > 0) valueObj[hd] = valueArr;\n   });\n\n   return valueObj;\n};\n","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\FormGroup.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\FormCellColorizedCheck.js",["355","356"],"import Axios from 'axios';\nimport moment from 'moment';\nimport React, { useContext, useEffect, useState } from 'react';\nimport { SERVER_URL } from '../../constants';\nimport { Context as ProjectContext } from '../../contexts/projectContext';\nimport { convertHistoryData } from '../../utils';\nimport ButtonStyle from './ButtonStyle';\nimport PanelCalendarDuration from './PanelCalendarDuration';\n\n\n\n\nconst FormCellColorizedCheck = ({ setCellHistoryArr }) => {\n\n   const { state: stateProject } = useContext(ProjectContext);\n\n   const { projectId, token } = stateProject.allDataOneSheet;\n   const headersArr = stateProject.allDataOneSheet.publicSettings.headers;\n\n   useEffect(() => {\n      const fetchProjectHistory = async () => {\n         try {\n            const res = await Axios.get(`${SERVER_URL}/cell/history/`, { params: { token, projectId } });\n            setHistoryData(res.data);\n         } catch (err) {\n            console.log(err);\n         };\n      };\n      fetchProjectHistory();\n   }, []);\n\n   const [historyData, setHistoryData] = useState([]);\n\n   const [dateRange, setDateRange] = useState(null);\n   const onClickCheck = ({ start, end }) => {\n      let filterCells = convertHistoryData(historyData).filter(cell => {\n         let createdAt = moment(cell.createdAt).toDate();\n         return createdAt >= start && createdAt <= end;\n      });\n      const cellArr = filterCells.map(ch => {\n         const { row: rowId, headerKey } = ch;\n         let headerText = headersArr.find(hd => hd.key === headerKey).text;\n         return {\n            rowId,\n            header: headerText\n         }\n      });\n      let unique = cellArr.reduce((res, itm) => {\n         let result = res.find(item => JSON.stringify(item) == JSON.stringify(itm));\n         if (!result) return res.concat(itm);\n         return res;\n      }, []);\n\n      setCellHistoryArr(unique);\n   };\n   const checkCellWithinDates = (nos) => {\n      const addDays = (date, days) => {\n         let result = new Date(date);\n         result.setDate(result.getDate() + days);\n         return result;\n      };\n      let today = new Date();\n      let dateBefore = addDays(today, nos);\n      return {\n         start: dateBefore,\n         end: today\n      };\n   };\n\n\n   return (\n      <div style={{\n         padding: 15\n      }}>\n         <div style={{ display: 'flex', marginBottom: 10 }}>\n            <PanelCalendarDuration pickRangeDate={(e) => setDateRange(e)} />\n            <ButtonStyle\n               onClick={() => dateRange && onClickCheck({ start: dateRange[0], end: dateRange[1] })}\n               marginLeft={5}\n               name='Check Data Changed'\n            />\n         </div>\n         <div style={{ display: 'flex', marginBottom: 20, width: '100%' }}>\n            <ButtonStyle marginRight={5} name='Today'\n               onClick={() => onClickCheck(checkCellWithinDates(-1))}\n            />\n            <ButtonStyle marginRight={5} name='Last 3 Days'\n               onClick={() => onClickCheck(checkCellWithinDates(-3))}\n            />\n            <ButtonStyle marginRight={5} name='Last 7 Days'\n               onClick={() => onClickCheck(checkCellWithinDates(-7))}\n            />\n            <ButtonStyle marginRight={5} name='Last 14 Days'\n               onClick={() => onClickCheck(checkCellWithinDates(-14))}\n            />\n            <ButtonStyle marginRight={5} name='This Month'\n               onClick={() => onClickCheck(checkCellWithinDates(-31))}\n            />\n         </div>\n      </div>\n   );\n};\n\nexport default FormCellColorizedCheck;\n\n","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\FormDrawingTypeOrder.js",["357","358"],"import { Icon, Input, Modal, Tooltip } from 'antd';\nimport React, { useContext, useState } from 'react';\nimport { DraggableArea } from 'react-draggable-tags';\nimport SortableTree from 'react-sortable-tree';\nimport 'react-sortable-tree/style.css';\nimport styled from 'styled-components';\nimport { colorType } from '../../constants';\nimport { Context as ProjectContext } from '../../contexts/projectContext';\nimport { Context as RowContext } from '../../contexts/rowContext';\nimport { mongoObjectId } from '../../utils';\nimport ButtonColumnTag from './ButtonColumnTag';\nimport ButtonGroupComp from './ButtonGroupComp';\n\n\n\nconst FormDrawingTypeOrder = ({ onClickCancelModal, applyFolderOrganize }) => {\n\n   const { state: stateProject } = useContext(ProjectContext);\n   const { state: stateRow } = useContext(RowContext);\n\n   const { rowsAll } = stateRow;\n\n   const { companies, projectName, roleTradeCompany } = stateProject.allDataOneSheet;\n   const { drawingTypeTree, viewTemplateNodeId } = stateRow;\n\n\n   const [input, setInput] = useState(addProjectHeaderToTree(drawingTypeTree, projectName));\n\n   const [tradeAndCompanyAndType, setTradeAndCompanyAndType] = useState(null);\n   const [modalTitle, setModalTitle] = useState(null);\n   const [itemNode, setItemNode] = useState(null);\n   const [mergeList, setMergeList] = useState([]);\n\n   const onClickApplyTradeOrCompany = ({ node, itemsAdded }) => {\n      itemsAdded.forEach(item => {\n         node.children.push({\n            title: item,\n            id: mongoObjectId(),\n            parentId: node.id,\n            treeLevel: node.treeLevel + 1,\n            expanded: true,\n            children: [],\n         });\n      });\n      setInput(addProjectHeaderToTree(flattenAllTreeChildNode1(input[0].children), projectName));\n      setTradeAndCompanyAndType(null);\n   };\n   const addFolderBelow = (node) => {\n      if (node.treeLevel === 0) {\n         setTradeAndCompanyAndType({ node, dataTreeArray: companies.map(x => x.company) });\n      } else if (node.treeLevel === 1 && node.title === 'Woh Hup Private Ltd') {\n         setTradeAndCompanyAndType({ node, dataTreeArray: ['ARCHI', 'C&S', 'M&E', 'PRECAST'] });\n      } else if ((node.treeLevel >= 1 && node.title !== 'Woh Hup Private Ltd') || (node.treeLevel >= 2 && node.title === 'Woh Hup Private Ltd')) {\n         node.children.push({\n            title: 'New Drawing Type',\n            id: mongoObjectId(),\n            parentId: node.id,\n            treeLevel: node.treeLevel + 1,\n            expanded: true,\n            children: []\n         });\n         setInput(addProjectHeaderToTree(flattenAllTreeChildNode1(input[0].children), projectName));\n         setTradeAndCompanyAndType(null);\n      };\n   };\n   const deleteFolder = (node) => {\n      setItemNode(node);\n      setModalTitle('Delete Drawing Type');\n   };\n   const editFolderName = (node) => {\n      setItemNode(node);\n      setModalTitle('Edit Drawing Type Name');\n   };\n   const mergeChildDrawings = (node) => {\n      setItemNode(node);\n      setModalTitle('Merge All Child Drawings');\n   };\n   const confirmAction = (modalTitle, text) => {\n      if (modalTitle === 'Delete Drawing Type') {\n         let idsToDelete = flattenAllTreeChildNode1(itemNode.children).map(x => x.id);\n         idsToDelete.push(itemNode.id);\n\n         let currentNodeFlatten = flattenAllTreeChildNode1(input[0].children);\n         let outputArray = currentNodeFlatten.filter(x => idsToDelete.indexOf(x.id) === -1);\n         setInput(addProjectHeaderToTree(outputArray, projectName));\n\n      } else if (modalTitle === 'Merge All Child Drawings') {\n         let idsToMerge = flattenAllTreeChildNode1(itemNode.children).map(x => x.id);\n         let mergeListUpdate = [...mergeList];\n         idsToMerge.forEach(id => {\n            if (mergeList.indexOf(id) !== -1) {\n               mergeListUpdate = mergeListUpdate.filter(x => x !== id);\n            };\n         });\n         // setMergeList({ ...mergeList, [itemNode.id]: idsToMerge });\n         setMergeList([...mergeListUpdate, itemNode.id]);\n\n         let currentNodeFlatten = flattenAllTreeChildNode1(input[0].children);\n         let outputArray = currentNodeFlatten.filter(x => idsToMerge.indexOf(x.id) === -1);\n\n         setInput(addProjectHeaderToTree(outputArray, projectName));\n\n      } else if (modalTitle === 'Edit Drawing Type Name') {\n         itemNode.title = text;\n         setInput(addProjectHeaderToTree(flattenAllTreeChildNode1(input[0].children), projectName));\n      };\n      setTradeAndCompanyAndType(null);\n      setModalTitle(null);\n   };\n\n   const isDocumentController = roleTradeCompany.role === 'Document Controller' && roleTradeCompany.company === 'Woh Hup Private Ltd';\n   const treeFlatten = flattenAllTreeChildNode1(input);\n\n   let eyeShownInit;\n   if (viewTemplateNodeId) {\n      const nodeTreeFound = treeFlatten.find(x => x.id === viewTemplateNodeId);\n      if (nodeTreeFound) {\n         const br = getTreeFlattenOfNodeInArray(treeFlatten, nodeTreeFound);\n         eyeShownInit = br.map(x => x.id);\n      };\n   };\n   const [iconBtnEyeShownArr, setIconBtnEyeShownArr] = useState(eyeShownInit || []);\n   const [nodeIsolated, setNodeIsolated] = useState(viewTemplateNodeId || null);\n   const isolateView = (node) => {\n      setNodeIsolated(node.id);\n      const nodeFound = treeFlatten.find(x => x.id === node.id);\n      const branch = getTreeFlattenOfNodeInArray(treeFlatten, nodeFound);\n      setIconBtnEyeShownArr(branch.map(x => x.id));\n   };\n\n   return (\n      <Container>\n         <PanelStyled>\n            <SortableTreeStyled\n               treeData={input}\n               onChange={treeData => setInput(treeData)}\n               canDrag={({ node }) => {\n                  let companyNode;\n                  if (node.treeLevel >= 1) {\n                     const treeNode = treeFlatten.find(x => x.id === node.id);\n                     companyNode = getCompanyNameFnc(treeNode, treeFlatten);\n                  };\n                  let tradeNode;\n                  if (node.treeLevel >= 2) {\n                     const treeNode = treeFlatten.find(x => x.id === node.id);\n                     tradeNode = getTradeNameFnc(treeNode, treeFlatten);\n                  };\n\n                  if (node.treeLevel !== 0 && isDocumentController) return true;\n                  if (\n                     (node.treeLevel === 0) ||\n                     (node.treeLevel === 1 && !isDocumentController) ||\n                     (node.treeLevel >= 2 && companyNode !== roleTradeCompany.company) ||\n\n                     (roleTradeCompany.company === 'Woh Hup Private Ltd' && companyNode === roleTradeCompany.company && node.treeLevel === 2 && !isDocumentController) ||\n                     (roleTradeCompany.company === 'Woh Hup Private Ltd' && companyNode === roleTradeCompany.company && node.treeLevel >= 3 && tradeNode !== roleTradeCompany.trade && !isDocumentController) ||\n                     (roleTradeCompany.company === 'Woh Hup Private Ltd' && companyNode === roleTradeCompany.company && node.treeLevel >= 3 && roleTradeCompany.role !== 'Coordinator' && !isDocumentController)\n\n                  ) {\n                     return false;\n                  };\n\n                  return true;\n               }}\n               canDrop={(props) => {\n                  const { prevParent, nextParent, node } = props;\n\n                  let nodePrevParentInTree, nodeNextParentInTree;\n                  let companyNodePrevParent, companyNodeNextParent;\n\n                  if (prevParent && nextParent) {\n                     nodePrevParentInTree = treeFlatten.find(x => x.id === prevParent.id);\n                     nodeNextParentInTree = treeFlatten.find(x => x.id === nextParent.id);\n                  };\n\n                  if (nodePrevParentInTree && nodeNextParentInTree &&\n                     nodePrevParentInTree.treeLevel === nodeNextParentInTree.treeLevel &&\n                     nodePrevParentInTree.treeLevel >= 1\n                  ) {\n                     companyNodePrevParent = getCompanyNameFnc(nodePrevParentInTree, treeFlatten);\n                     companyNodeNextParent = getCompanyNameFnc(nodeNextParentInTree, treeFlatten);\n                  };\n\n                  if (node.treeLevel === 0 || !nextParent || !prevParent ||\n                     (nextParent && nextParent.treeLevel !== node.treeLevel - 1) ||\n                     (companyNodePrevParent !== companyNodeNextParent)\n                  ) {\n                     return false;\n                  };\n                  return true;\n               }}\n\n               onMoveNode={({ nextParentNode, node }) => {\n                  updateChildrenNode([node], nextParentNode.treeLevel + 1 - node.treeLevel);\n               }}\n\n               isVirtualized={false}\n\n               generateNodeProps={(props) => {\n\n                  const { node } = props;\n                  const treeNode = treeFlatten.find(x => x.id === node.id);\n\n                  let companyNode;\n                  if (node.treeLevel >= 1) {\n                     companyNode = getCompanyNameFnc(treeNode, treeFlatten);\n                  };\n\n                  let tradeNode;\n                  if (node.treeLevel >= 2) {\n                     tradeNode = getTradeNameFnc(treeNode, treeFlatten);\n                  };\n\n                  const isEyeShownColor = iconBtnEyeShownArr.indexOf(node.id) !== -1 ? 'black' : '#DCDCDC';\n                  const isEyeShownType = iconBtnEyeShownArr.indexOf(node.id) !== -1 ? 'eye' : 'eye-invisible';\n\n                  return ({\n                     className: 'xxx-xxx-xxx',\n                     buttons:\n                        (node.treeLevel === 0 && isDocumentController) ? [\n                           <IconBtn type='plus' onClick={() => addFolderBelow(node)} />,\n                           <IconBtn type={isEyeShownType} onClick={() => isolateView(node)} color={isEyeShownColor} />\n\n\n                        ] : (isDocumentController && companyNode === 'Woh Hup Private Ltd' && node.treeLevel === 1) ? [\n                           <IconBtn type='plus' onClick={() => addFolderBelow(node)} />,\n                           <IconBtn type='delete' onClick={() => deleteFolder(node)} />,\n                           <IconBtn type={isEyeShownType} onClick={() => isolateView(node)} color={isEyeShownColor} />\n                        ] : (isDocumentController && companyNode !== 'Woh Hup Private Ltd' && node.treeLevel === 1) ? [\n                           <IconBtn type='plus' onClick={() => addFolderBelow(node)} />,\n                           <IconBtn type='delete' onClick={() => deleteFolder(node)} />,\n                           node.children.length > 0 && <IconBtn type='shrink' onClick={() => mergeChildDrawings(node)} />,\n                           <IconBtn type={isEyeShownType} onClick={() => isolateView(node)} color={isEyeShownColor} />\n                        ] : (isDocumentController && companyNode === 'Woh Hup Private Ltd' && node.treeLevel === 2) ? [\n                           <IconBtn type='plus' onClick={() => addFolderBelow(node)} />,\n                           <IconBtn type='delete' onClick={() => deleteFolder(node)} />,\n                           node.children.length > 0 && <IconBtn type='shrink' onClick={() => mergeChildDrawings(node)} />,\n                           <IconBtn type={isEyeShownType} onClick={() => isolateView(node)} color={isEyeShownColor} />\n                        ] : (isDocumentController && (\n                           (companyNode === 'Woh Hup Private Ltd' && node.treeLevel >= 3) || (companyNode !== 'Woh Hup Private Ltd' && node.treeLevel >= 2)\n                        )) ? [\n                           <IconBtn type='plus' onClick={() => addFolderBelow(node)} />,\n                           <IconBtn type='edit' onClick={() => editFolderName(node)} />,\n                           <IconBtn type='delete' onClick={() => deleteFolder(node)} />,\n                           node.children.length > 0 && <IconBtn type='shrink' onClick={() => mergeChildDrawings(node)} />,\n                           <IconBtn type={isEyeShownType} onClick={() => isolateView(node)} color={isEyeShownColor} />\n\n\n\n\n                        ] : (roleTradeCompany.role === 'Coordinator' && companyNode === 'Woh Hup Private Ltd' && companyNode === roleTradeCompany.company && node.treeLevel === 2 && tradeNode === roleTradeCompany.trade) ? [\n                           <IconBtn type='plus' onClick={() => addFolderBelow(node)} />,\n                           node.children.length > 0 && <IconBtn type='shrink' onClick={() => mergeChildDrawings(node)} />,\n                           <IconBtn type={isEyeShownType} onClick={() => isolateView(node)} color={isEyeShownColor} />\n                        ] : (roleTradeCompany.role === 'Coordinator' && companyNode === 'Woh Hup Private Ltd' && companyNode === roleTradeCompany.company && node.treeLevel >= 3 && tradeNode === roleTradeCompany.trade) ? [\n                           <IconBtn type='plus' onClick={() => addFolderBelow(node)} />,\n                           <IconBtn type='edit' onClick={() => editFolderName(node)} />,\n                           <IconBtn type='delete' onClick={() => deleteFolder(node)} />,\n                           node.children.length > 0 && <IconBtn type='shrink' onClick={() => mergeChildDrawings(node)} />,\n                           <IconBtn type={isEyeShownType} onClick={() => isolateView(node)} color={isEyeShownColor} />\n\n\n\n\n                        ] : (companyNode !== 'Woh Hup Private Ltd' && companyNode === roleTradeCompany.company && node.treeLevel === 1) ? [\n                           <IconBtn type='plus' onClick={() => addFolderBelow(node)} />,\n                           node.children.length > 0 && <IconBtn type='shrink' onClick={() => mergeChildDrawings(node)} />,\n                           <IconBtn type={isEyeShownType} onClick={() => isolateView(node)} color={isEyeShownColor} />\n                        ] : (companyNode !== 'Woh Hup Private Ltd' && companyNode === roleTradeCompany.company && node.treeLevel >= 2) ? [\n                           <IconBtn type='plus' onClick={() => addFolderBelow(node)} />,\n                           <IconBtn type='edit' onClick={() => editFolderName(node)} />,\n                           <IconBtn type='delete' onClick={() => deleteFolder(node)} />,\n                           node.children.length > 0 && <IconBtn type='shrink' onClick={() => mergeChildDrawings(node)} />,\n                           <IconBtn type={isEyeShownType} onClick={() => isolateView(node)} color={isEyeShownColor} />\n\n\n\n                        ] : [\n                           <IconBtn type='eye' onClick={() => isolateView(node)} color={isEyeShownColor} />\n                        ]\n                  });\n               }}\n            />\n         </PanelStyled>\n\n         <div style={{ padding: 20, display: 'flex', flexDirection: 'row-reverse' }}>\n            <ButtonGroupComp\n               onClickCancel={onClickCancelModal}\n               onClickApply={() => applyFolderOrganize(input[0].children, mergeList, nodeIsolated)} // remove projectName item before apply...\n            />\n         </div>\n\n\n\n         {modalTitle && (\n            <ModalStyledSetting\n               title={modalTitle}\n               visible={modalTitle !== null ? true : false}\n               footer={null}\n               onCancel={() => setModalTitle(null)}\n               destroyOnClose={true}\n               centered={true}\n               width={window.innerWidth * 0.6}\n            >\n               <ConfirmOrEditNameModal\n                  modalTitle={modalTitle}\n                  confirmAction={confirmAction}\n                  itemNode={itemNode}\n                  input={input}\n                  rowsAll={rowsAll}\n               />\n            </ModalStyledSetting>\n         )}\n\n\n         {tradeAndCompanyAndType && (\n            <ModalStyledSetting\n               title={modalTitle}\n               visible={tradeAndCompanyAndType !== null ? true : false}\n               footer={null}\n               onCancel={() => setTradeAndCompanyAndType(null)}\n               destroyOnClose={true}\n               centered={true}\n               width={window.innerWidth * 0.6}\n            >\n               <RearrangeItemsForm\n                  tradeAndCompanyAndType={tradeAndCompanyAndType}\n                  onClickApplyTradeOrCompany={onClickApplyTradeOrCompany}\n                  onClickCancel={() => setTradeAndCompanyAndType(null)}\n               />\n            </ModalStyledSetting>\n         )}\n      </Container>\n   );\n};\n\nexport default FormDrawingTypeOrder;\n\n\nconst SortableTreeStyled = styled(SortableTree)`\n   .dddddd {\n      /* background-color: grey !important; */\n   }\n   .rst__node {\n      height: 45px !important;\n   }\n   .rst__rowContents {\n      min-width: fit-content;\n      background-color: transparent !important;\n   }\n`;\nconst IconStyle = styled(Icon)`\n   font-size: 14px;\n   margin: 2px;\n   padding: 4px;\n   &:hover {\n      background-color: ${colorType.grey0};\n   };\n`;\nconst ModalStyledSetting = styled(Modal)`\n    .ant-modal-content {\n        border-radius: 0;\n    }\n   .ant-modal-close {\n      display: none;\n   }\n   .ant-modal-header {\n      padding: 10px;\n   }\n   .ant-modal-title {\n        padding-left: 10px;\n        font-size: 20px;\n        font-weight: bold;\n   }\n   .ant-modal-body {\n      padding: 0;\n      display: flex;\n      justify-content: center;\n   }\n`;\nconst Container = styled.div`\n   height: ${`${window.innerHeight * 0.8}` + 'px'};\n   width: 100%;\n   display: flex;\n   flex-direction: column;\n`;\nconst PanelStyled = styled.div`\n   width: 100%;\n   float: right;\n   overflow-x: hidden;\n   border-bottom: 1px solid ${colorType.grey4};\n`;\nconst IconBtn = ({ type, onClick, color }) => {\n\n   const text = type === 'plus' ? 'Add Sub Drawing Type'\n      : type === 'delete' ? 'Delete Drawing Type'\n         : type === 'edit' ? 'Edit Name'\n            : type === 'eye' ? 'Isolate View'\n               : type === 'eye-invisible' ? 'Isolate View'\n                  : 'Merge All Sub Drawing Type'\n\n   return (\n      <Tooltip title={text}>\n         <IconStyle type={type} onClick={onClick} style={{ color: color || 'black' }} />\n      </Tooltip>\n   );\n};\nconst RearrangeItemsForm = ({ tradeAndCompanyAndType, onClickApplyTradeOrCompany, onClickCancel }) => {\n\n   const { dataTreeArray, node } = tradeAndCompanyAndType;\n\n   const onClickApply = () => {\n      let itemsAdded = tags.filter(x => x.mode === 'shown').map(x => x.header);\n      onClickApplyTradeOrCompany({ node, itemsAdded });\n   };\n\n   const setMode = (obj) => {\n      tags.forEach(tg => {\n         if (tg.header === obj.header) tg.mode = obj.mode;\n      });\n   };\n\n   const getTags = () => {\n      const arrItem = node.children.map(x => x.title);\n      const items = dataTreeArray.filter(x => arrItem.indexOf(x) === -1);\n\n      let arr = [];\n      items.forEach((header, index) => {\n         arr.push({ id: index, header, mode: 'hidden' });\n      });\n      return arr;\n   };\n\n   const [tags, setTags] = useState(getTags());\n\n   return (\n      <div style={{ width: '100%', height: '100%' }}>\n         <PanelItemsStyled>\n            <div style={{ fontSize: 11, paddingLeft: 20 }}>Click to add items</div>\n            <div style={{ width: '100%', paddingTop: 20 }}>\n               <DraggableArea\n                  isList\n                  tags={tags}\n                  render={({ tag }) => <ButtonColumnTag tag={tag} setMode={setMode} actionType='rearrange-drawing-type-tree-action' />}\n                  onChange={(tags) => setTags(tags)}\n               />\n            </div>\n         </PanelItemsStyled>\n         <div style={{ padding: 20, display: 'flex', flexDirection: 'row-reverse' }}>\n            <ButtonGroupComp\n               onClickCancel={onClickCancel}\n               onClickApply={onClickApply}\n            />\n         </div>\n      </div>\n   );\n};\nconst PanelItemsStyled = styled.div`\n   height: 60vh;\n   width: 100%;\n   overflow-y: scroll;\n   overflow-x: hidden;\n   border-bottom: 1px solid ${colorType.grey4};\n`;\nconst ConfirmOrEditNameModal = ({ modalTitle, confirmAction, itemNode, input, rowsAll }) => {\n\n   let dwgsToWarn = [];\n   if (modalTitle === 'Delete Drawing Type') {\n      const currentTree = flattenAllTreeChildNode1(input[0].children);\n      const currentTreeNode = currentTree.find(x => x.id === itemNode.id);\n      const nodeArray = getTreeFlattenOfNodeInArray(currentTree, currentTreeNode);\n      nodeArray.forEach(nd => {\n         dwgsToWarn = [...dwgsToWarn, ...rowsAll.filter(x => x._parentRow === nd.id)];\n      });\n   };\n\n\n   const [value, setValue] = useState(null);\n   const onClickApplyModal = () => {\n      if (modalTitle === 'Delete Drawing Type') {\n         confirmAction(modalTitle);\n      } else if (modalTitle === 'Edit Drawing Type Name') {\n         confirmAction(modalTitle, value);\n      } else if (modalTitle === 'Merge All Child Drawings') {\n         confirmAction(modalTitle);\n      };\n   };\n   return (\n      <div style={{ padding: 20, width: '100%', maxHeight: window.innerHeight * 0.7 }}>\n         {modalTitle === 'Delete Drawing Type' ? (\n            <div>\n               <div>Are you sure to delete the drawing type <span style={{ fontWeight: 'bold' }}>{itemNode.title}</span>?</div>\n               <div>All the following <span style={{ fontWeight: 'bold' }}>{dwgsToWarn.length}</span> drawings will be deleted accordingly:</div>\n               <br />\n               <div style={{ maxHeight: 300, overflowY: 'scroll' }}>\n                  {dwgsToWarn.map((dr, i) => (\n                     <div key={i}>({i + 1}) - {dr['Drawing Number']} - {dr['Drawing Name']}</div>\n                  ))}\n               </div>\n            </div>\n         ) : modalTitle === 'Merge All Child Drawings' ? (\n            <div>Are you sure to delete all sub folders and retains all drawings</div>\n         ) : (\n            <Input\n               placeholder='Enter new name...'\n               style={{ width: '100%' }}\n               value={value || itemNode.title}\n               onChange={(e) => setValue(e.target.value)}\n            />\n         )}\n\n         <div style={{ padding: 20, display: 'flex', flexDirection: 'row-reverse' }}>\n            <ButtonGroupComp\n               onClickCancel={() => { }}\n               onClickApply={onClickApplyModal}\n            />\n         </div>\n      </div>\n   );\n};\nconst getCompanyNameFnc = (dwgType, drawingTypeTreeClone) => {\n   if (dwgType.treeLevel === 1) return dwgType.title;\n   let result;\n   const getCompanyFnc = (dwgType, drawingTypeTreeClone) => {\n      const parent = drawingTypeTreeClone.find(x => x.id === dwgType.parentId);\n      if (parent.treeLevel === 1) {\n         result = parent.title;\n      } else {\n         getCompanyFnc(parent, drawingTypeTreeClone);\n      };\n      return result;\n   };\n   getCompanyFnc(dwgType, drawingTypeTreeClone);\n   return result;\n};\nconst getTradeNameFnc = (dwgType, drawingTypeTreeClone) => {\n   const tree = drawingTypeTreeClone.filter(x => x.treeLevel !== 1);\n   if (dwgType.treeLevel === 2) return dwgType.title;\n   let result;\n   const getTradeFnc = (dwgType, dwgTypeTree) => {\n      const parent = dwgTypeTree.find(x => x.id === dwgType.parentId);\n      if (parent.treeLevel === 2) {\n         result = parent.title;\n      } else {\n         getTradeFnc(parent, dwgTypeTree);\n      };\n      return result;\n   };\n   getTradeFnc(dwgType, tree);\n   return result;\n};\n\n\n\nexport const flattenAllTreeChildNode1 = (root) => {\n   let temp = [];\n   let queue = [...root];\n   while (queue.length > 0) {\n      let node = queue.shift();\n      if (node.children) {\n         let childNode = [];\n         node.children.forEach(nd => {\n            childNode.push({ ...nd, parentId: node.id });\n         });\n         queue = [...queue, ...childNode];\n         let nodeObj = { ...node };\n         delete nodeObj.children;\n         temp.push(nodeObj);\n      } else {\n         let nodeObj = { ...node };\n         delete nodeObj.children;\n         temp.push(nodeObj);\n      };\n   };\n   return temp;\n};\nexport const convertFlattenArraytoTree1 = (list) => {\n   let map = {}, node, roots = [], i;\n   for (i = 0; i < list.length; i += 1) {\n      map[list[i].id] = i;\n      if (list[i]._rowLevel !== 1) {\n         list[i].children = list[i].children || [];\n      };\n   };\n\n\n   let arrayOfTreeLevel = [];\n   list.forEach(tr => {\n      arrayOfTreeLevel.push(tr.treeLevel);\n   });\n   const treeLevelOfTopTree = Math.min(...arrayOfTreeLevel);\n\n   for (i = 0; i < list.length; i++) {\n      node = list[i];\n      if (node.treeLevel > treeLevelOfTopTree) {\n         list[map[node.parentId]].children.push(node);\n      } else {\n         roots.push(node);\n      };\n   };\n   return roots;\n};\nconst addProjectHeaderToTree = (tree, projectName) => {\n   const treeOutput = tree.map(item => {\n      let itemOutput = { ...item };\n      if (itemOutput['Drawing Number']) {\n         itemOutput.title = itemOutput['Drawing Number'];\n         delete itemOutput['Drawing Number'];\n      };\n      return itemOutput;\n   });\n   return [{\n      title: projectName,\n      id: projectName,\n      treeLevel: 0,\n      expanded: true,\n      children: convertFlattenArraytoTree1(treeOutput)\n   }];\n};\nconst updateChildrenNode = (arr, n) => {\n   arr.forEach(i => {\n      i.treeLevel = i.treeLevel + n;\n      if (i.children.length > 0) {\n         updateChildrenNode(i.children, n);\n      };\n   });\n};\nconst updateChildrenNodeTreeLevel = (arr) => {\n   arr.forEach(i => {\n      let childrenArr = i.children;\n      if (childrenArr && childrenArr.length > 0) {\n         childrenArr.forEach(ch => {\n            ch.treeLevel = i.treeLevel + 1;\n         });\n         updateChildrenNodeTreeLevel(childrenArr);\n      };\n   });\n};\nconst getListOfBranchesTree = (inputArr) => {\n   const arr = inputArr.map(x => ({ ...x }));\n   arr.sort((a, b) => { return b.treeLevel - a.treeLevel });\n\n   const parentArrIds = [];\n   arr.forEach(x => {\n      let item = arr.find(fld => fld.id === x.parentId);\n      if (item) {\n         item.children = [...item.children || [], x];\n      } else {\n         parentArrIds.push(x.id);\n      };\n   });\n   return arr.filter(x => parentArrIds.indexOf(x.id) !== -1);\n};\nexport const getTreeFlattenOfNodeInArray = (treeArray, node) => {\n   let obj = { ...node };\n   let arrayTree = treeArray.map(x => ({ ...x })).filter(x => x.treeLevel > obj.treeLevel);\n   arrayTree = [...arrayTree, obj];\n   const treeOfFound = getListOfBranchesTree(arrayTree).find(x => x.id === obj.id);\n   return flattenAllTreeChildNode1([treeOfFound]);\n};\nexport const compareCurrentTreeAndTreeFromDB = (treeFromCurrentInit, treeFromCurrentInput, treeDeletedFromCurrent, treeFromDBInput, treeDeletedFromDB) => {\n\n   let treeFromCurrent = treeFromCurrentInput.map(i => ({ ...i }));\n   let treeFromDB = treeFromDBInput.map(i => ({ ...i }));\n\n   // check if need to save tree or not\n   if (treeFromCurrent.length === treeFromCurrentInit.length) {\n      const stringTreeCurrent = treeFromCurrent.reduce((acc, current) => acc + `${current.id}-${current.parentId}-${current['Drawing Number']}-`, '');\n      const stringTreeInit = treeFromCurrentInit.reduce((acc, current) => acc + `${current.id}-${current.parentId}-${current['Drawing Number']}-`, '');\n      if (stringTreeCurrent === stringTreeInit) {\n         return {\n            needToSaveTree: false,\n            treeDBModifiedToSave: treeFromDB,\n            nodesToAddToDB: [],\n            nodesToRemoveFromDB: [],\n         };\n      };\n   };\n\n   let treeCurrentModified = removeNodesDeletedByOtherUsersFromTreeCurrent(treeFromCurrent, treeDeletedFromDB);\n\n   let { nodesToRemoveFromDB, treeFromDB: treeFromDBModified, nodesIdNoNeedToAddNew } = removeNodesDeletedByCurrentUserFromTreeDB(treeFromDB, treeDeletedFromCurrent, treeCurrentModified);\n  \n   let { nodesToAddToDB, treeDBModifiedToSave: treeDBModified } = haveChangedNodesInDBAndNewNodesInCurrentBackToDB(treeFromDBModified, treeCurrentModified, treeFromCurrentInit, nodesIdNoNeedToAddNew);\n\n\n\n   // reorder item follow new order...\n   let treeDBModifiedToSave = [];\n   treeFromCurrentInput.forEach(item => {\n      const found = treeDBModified.find(x => x.id === item.id);\n      if (found) {\n         treeDBModifiedToSave.push(found);\n         treeDBModified = treeDBModified.filter(x => x.id !== found.id);\n      };\n   });\n   treeDBModifiedToSave = [...treeDBModifiedToSave, ...treeDBModified].sort((a, b) => { return a.treeLevel - b.treeLevel });\n\n   return {\n      needToSaveTree: true,\n      treeDBModifiedToSave,\n      nodesToAddToDB,\n      nodesToRemoveFromDB,\n   };\n};\nconst removeNodesDeletedByOtherUsersFromTreeCurrent = (treeCurrent, treeDeletedFromDB) => {\n   let idsToCheckCurrent = [];\n   treeDeletedFromDB.forEach(item => {\n      const found = treeCurrent.find(x => x.id === item.id);\n      if (found) {\n         idsToCheckCurrent = [\n            ...idsToCheckCurrent,\n            ...getTreeFlattenOfNodeInArray(treeCurrent, found).map(x => x.id)\n         ];\n      };\n   });\n   idsToCheckCurrent = [...new Set(idsToCheckCurrent)];\n\n   const nodesArray = treeCurrent.filter(x => idsToCheckCurrent.indexOf(x.id) !== -1);\n\n   const branchTrees = getListOfBranchesTree(nodesArray);\n\n   const newIdObj = {};\n   treeDeletedFromDB.forEach(item => {\n      newIdObj[item.id] = mongoObjectId();\n   });\n\n   branchTrees.forEach(tree => {\n      let flattenArray = flattenAllTreeChildNode1([tree]);\n      let isAbleToDelete = true;\n\n      flattenArray.forEach(item => {\n         if (!treeDeletedFromDB.find(x => x.id === item.id)) isAbleToDelete = false;\n      });\n\n      if (isAbleToDelete) {\n         treeCurrent = treeCurrent.filter(x => !flattenArray.find(item => item.id === x.id));\n      } else {\n         const arrayToModify = treeCurrent.filter(item => flattenArray.find(x => x.id === item.id));\n         treeDeletedFromDB.forEach(item => {\n            const found = arrayToModify.find(x => x.id === item.id);\n            if (found) {\n               found.id = newIdObj[item.id];\n            };\n            const childrenFound = arrayToModify.filter(x => x.parentId === item.id);\n            if (childrenFound.length > 0) {\n               childrenFound.forEach(child => {\n                  child.parentId = newIdObj[item.id];\n               });\n            };\n         });\n      };\n   });\n   return treeCurrent;\n};\nconst removeNodesDeletedByCurrentUserFromTreeDB = (treeFromDB, treeDeletedFromCurrent, treeCurrent) => {\n   let listIdToRemoveFromDB = [];\n   treeDeletedFromCurrent.forEach(item => {\n      const found = treeFromDB.find(x => x.id === item.id);\n      if (found) {\n         listIdToRemoveFromDB = [\n            ...listIdToRemoveFromDB,\n            ...getTreeFlattenOfNodeInArray(treeFromDB, found).map(x => x.id)\n         ];\n      };\n   });\n\n   const nodesToRemoveFromDB = treeFromDB.filter(x => {\n      return listIdToRemoveFromDB.indexOf(x.id) !== -1 && !treeCurrent.find(item => item.id === x.id);\n   });\n   const nodesIdNoNeedToAddNew = listIdToRemoveFromDB.filter(id => treeCurrent.find(item => item.id === id))\n\n   treeFromDB = treeFromDB.filter(x => listIdToRemoveFromDB.indexOf(x.id) === -1);\n\n   return {\n      nodesToRemoveFromDB,\n      nodesIdNoNeedToAddNew,\n      treeFromDB\n   };\n};\nconst haveChangedNodesInDBAndNewNodesInCurrentBackToDB = (treeFromDB, treeCurrent, treeCurrentInit, nodesIdNoNeedToAddNew) => {\n   let nodesToAddToDB = [];\n   treeCurrent.forEach(item => {\n      if (!treeFromDB.find(x => x.id === item.id)) {\n         nodesToAddToDB.push(item);\n      };\n   });\n\n   let dwgTypeExistedInDBButLevelOrParentChangesArr = [];\n   let childrenIdsToWithdrawFromDB = [];\n   treeFromDB.forEach(item => {\n      const found = treeCurrent.find(r => r.id === item.id);\n      const foundInit = treeCurrentInit.find(r => r.id === item.id);\n      if (found && foundInit) {\n         if (found['Drawing Number'] !== foundInit['Drawing Number']) item['Drawing Number'] = found['Drawing Number'];\n\n         if (found.parentId !== item.parentId && found.parentId !== foundInit.parentId) {\n            dwgTypeExistedInDBButLevelOrParentChangesArr.push({ ...found, ['Drawing Number']: item['Drawing Number'] });\n\n            const arrIdsChildrenInDB = getTreeFlattenOfNodeInArray(treeFromDB, item).filter((x, i) => i !== 0).map(x => x.id);\n\n            childrenIdsToWithdrawFromDB = [...childrenIdsToWithdrawFromDB, ...arrIdsChildrenInDB];\n         };\n      };\n   });\n   childrenIdsToWithdrawFromDB = [...new Set(childrenIdsToWithdrawFromDB)];\n\n   const dwgTypeToWithdrawFromDB = treeFromDB.filter(x => childrenIdsToWithdrawFromDB.indexOf(x.id) !== -1);\n\n   treeFromDB = treeFromDB.filter(item => {\n      return childrenIdsToWithdrawFromDB.indexOf(item.id) === -1 && !dwgTypeExistedInDBButLevelOrParentChangesArr.find(x => x.id === item.id)\n   });\n\n\n   const listBranchesTreeToPushToDB = getListOfBranchesTree([\n      ...nodesToAddToDB,\n      ...dwgTypeExistedInDBButLevelOrParentChangesArr,\n      ...dwgTypeToWithdrawFromDB\n   ]);\n\n   listBranchesTreeToPushToDB.forEach(itemTree => {\n      treeFromDB = [...treeFromDB, ...flattenAllTreeChildNode1([itemTree])];\n   });\n\n   const treeDBModifiedToSave = convertFlattenArraytoTree1(treeFromDB);\n   updateChildrenNodeTreeLevel(treeDBModifiedToSave);\n\n   return {\n      nodesToAddToDB: nodesToAddToDB.filter(item => nodesIdNoNeedToAddNew.indexOf(item.id) === -1),\n      treeDBModifiedToSave: flattenAllTreeChildNode1(treeDBModifiedToSave)\n   };\n};\n\n\n\n\n\n\n\n","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\FormDateAutomation.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\ButtonGroupComp.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\ColorizedForm.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\_dashboardComp\\componentsDashboard\\ChartBarRecord.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\FormFilterActivityHistory.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\PanelCalendarDuration.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\ButtonStyle.js",["359"],"import { Button } from 'antd';\nimport React from 'react';\n\n\n\nconst ButtonStyle = ({\n   colorText,\n   marginRight,\n   marginLeft,\n   borderColor,\n   borderOverwritten,\n   marginBottom,\n   background,\n   name,\n   onClick,\n   disabled\n}) => {\n\n   return (\n      <Button\n         style={{\n            borderRadius: 0,\n            background: background,\n            color: colorText,\n            border: 'none',\n            marginRight,\n            marginBottom,\n            marginLeft,\n            border: `1px solid ${borderOverwritten ? borderColor : (borderColor || background)}`,\n         }}\n         onClick={onClick}\n         disabled={disabled}\n      >\n         {name}\n      </Button>\n   );\n};\n\nexport default ButtonStyle;\n\n\n","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\ButtonColumnTag.js",["360"],"\nimport React, { useEffect, useState } from 'react';\nimport { colorType } from '../../constants';\n\n\nconst ButtonColumnTag = ({ tag, setMode, actionType }) => {\n\n   const styleShown = { background: '#f1a99f', color: 'black' };\n   const styleFrozen = { background: colorType.primary, color: 'white' };\n   const styleHidden = { background: colorType.grey4, color: 'grey' };\n\n   const [btnStyle, setBtnStyle] = useState(\n      tag.mode === 'hidden' ? styleHidden :\n         tag.mode === 'frozen' ? styleFrozen :\n            styleShown\n   );\n\n   const [type, setType] = useState(tag.mode);\n\n   useEffect(() => {\n      if (actionType === 'reset-mode-action') {\n         setType(tag.mode);\n         setBtnStyle(\n            tag.mode === 'hidden' ? styleHidden :\n               tag.mode === 'frozen' ? styleFrozen :\n                  styleShown\n         );\n      };\n   }, [tag.mode]);\n\n\n   const onClick = () => {\n      if (actionType === 'reorder-columns-action') {\n         if (type === 'shown') {\n            setBtnStyle(styleFrozen);\n            setMode({ header: tag.header, id: tag.id, mode: 'frozen' });\n            setType('frozen');\n         } else if (type === 'frozen') {\n            setBtnStyle(styleHidden);\n            setMode({ header: tag.header, id: tag.id, mode: 'hidden' });\n            setType('hidden');\n         } else if (type === 'hidden') {\n            setBtnStyle(styleShown);\n            setMode({ header: tag.header, id: tag.id, mode: 'shown' });\n            setType('shown');\n         };\n      } else if (actionType === 'rearrange-drawing-type-tree-action') {\n         if (type === 'shown') {\n            setBtnStyle(styleHidden);\n            setMode({ header: tag.header, id: tag.id, mode: 'hidden' });\n            setType('hidden');\n         } else if (type === 'hidden') {\n            setBtnStyle(styleShown);\n            setMode({ header: tag.header, id: tag.id, mode: 'shown' });\n            setType('shown');\n         };\n      } else if (actionType === 'reset-mode-action') {\n         setMode({ id: tag.id });\n      };\n   };\n\n   return (\n      <div\n         style={{\n            ...btnStyle,\n            padding: 9,\n            cursor: actionType === 'reset-mode-action' && 'pointer',\n            textAlign: 'center',\n            fontWeight: 'bold',\n            width: '70%',\n            margin: 'auto',\n            marginBottom: 10\n         }}\n         onClick={onClick}\n      >\n         {tag.header}\n      </div>\n   );\n};\n\nexport default ButtonColumnTag;","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\PanelPickNumber.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\ViewTemplateSelect.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\ButtonAdminUploadData.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\ButtonAdminUploadDataPDD.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\PanelConfirmResetMode.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\ButtonAdminCreateAndUpdateRows.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\ButtonAdminDeleteRowsHistory.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\ButtonAdminCreateAndUpdateRowsHistory.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\ExcelExport.js",[],{"ruleId":"361","replacedBy":"362"},{"ruleId":"363","replacedBy":"364"},{"ruleId":"365","severity":1,"message":"366","line":4,"column":1,"nodeType":"367","endLine":23,"endColumn":3},{"ruleId":"368","severity":1,"message":"369","line":164,"column":33,"nodeType":"370","messageId":"371","endLine":164,"endColumn":35},{"ruleId":"368","severity":1,"message":"369","line":191,"column":19,"nodeType":"370","messageId":"371","endLine":191,"endColumn":21},{"ruleId":"372","severity":1,"message":"373","line":284,"column":7,"nodeType":"374","messageId":"375","endLine":284,"endColumn":20},{"ruleId":"372","severity":1,"message":"376","line":289,"column":7,"nodeType":"374","messageId":"375","endLine":289,"endColumn":19},{"ruleId":"368","severity":1,"message":"369","line":327,"column":26,"nodeType":"370","messageId":"371","endLine":327,"endColumn":28},{"ruleId":"368","severity":1,"message":"369","line":329,"column":26,"nodeType":"370","messageId":"371","endLine":329,"endColumn":28},{"ruleId":"377","severity":1,"message":"378","line":368,"column":33,"nodeType":"379","messageId":"380","endLine":368,"endColumn":88},{"ruleId":"368","severity":1,"message":"369","line":368,"column":62,"nodeType":"370","messageId":"371","endLine":368,"endColumn":64},{"ruleId":"377","severity":1,"message":"381","line":379,"column":25,"nodeType":"379","messageId":"380","endLine":379,"endColumn":80},{"ruleId":"368","severity":1,"message":"369","line":379,"column":54,"nodeType":"370","messageId":"371","endLine":379,"endColumn":56},{"ruleId":"377","severity":1,"message":"382","line":390,"column":17,"nodeType":"379","messageId":"380","endLine":390,"endColumn":66},{"ruleId":"368","severity":1,"message":"369","line":390,"column":46,"nodeType":"370","messageId":"371","endLine":390,"endColumn":48},{"ruleId":"372","severity":1,"message":"383","line":735,"column":7,"nodeType":"374","messageId":"375","endLine":735,"endColumn":23},{"ruleId":"372","severity":1,"message":"384","line":760,"column":7,"nodeType":"374","messageId":"375","endLine":760,"endColumn":29},{"ruleId":"372","severity":1,"message":"385","line":790,"column":7,"nodeType":"374","messageId":"375","endLine":790,"endColumn":28},{"ruleId":"377","severity":1,"message":"382","line":831,"column":47,"nodeType":"379","messageId":"380","endLine":831,"endColumn":94},{"ruleId":"368","severity":1,"message":"369","line":831,"column":74,"nodeType":"370","messageId":"371","endLine":831,"endColumn":76},{"ruleId":"368","severity":1,"message":"369","line":268,"column":23,"nodeType":"370","messageId":"371","endLine":268,"endColumn":25},{"ruleId":"368","severity":1,"message":"369","line":278,"column":23,"nodeType":"370","messageId":"371","endLine":278,"endColumn":25},{"ruleId":"368","severity":1,"message":"369","line":288,"column":23,"nodeType":"370","messageId":"371","endLine":288,"endColumn":25},{"ruleId":"372","severity":1,"message":"386","line":301,"column":7,"nodeType":"374","messageId":"375","endLine":301,"endColumn":21},{"ruleId":"368","severity":1,"message":"369","line":458,"column":28,"nodeType":"370","messageId":"371","endLine":458,"endColumn":30},{"ruleId":"368","severity":1,"message":"369","line":459,"column":18,"nodeType":"370","messageId":"371","endLine":459,"endColumn":20},{"ruleId":"368","severity":1,"message":"369","line":460,"column":18,"nodeType":"370","messageId":"371","endLine":460,"endColumn":20},{"ruleId":"368","severity":1,"message":"369","line":479,"column":28,"nodeType":"370","messageId":"371","endLine":479,"endColumn":30},{"ruleId":"368","severity":1,"message":"369","line":480,"column":18,"nodeType":"370","messageId":"371","endLine":480,"endColumn":20},{"ruleId":"368","severity":1,"message":"369","line":481,"column":18,"nodeType":"370","messageId":"371","endLine":481,"endColumn":20},{"ruleId":"372","severity":1,"message":"387","line":522,"column":13,"nodeType":"374","messageId":"375","endLine":522,"endColumn":19},{"ruleId":"368","severity":1,"message":"369","line":522,"column":28,"nodeType":"370","messageId":"371","endLine":522,"endColumn":30},{"ruleId":"368","severity":1,"message":"369","line":523,"column":18,"nodeType":"370","messageId":"371","endLine":523,"endColumn":20},{"ruleId":"368","severity":1,"message":"369","line":524,"column":18,"nodeType":"370","messageId":"371","endLine":524,"endColumn":20},{"ruleId":"388","severity":1,"message":"389","line":121,"column":7,"nodeType":"390","endLine":121,"endColumn":9,"suggestions":"391"},{"ruleId":"392","severity":1,"message":"393","line":142,"column":19,"nodeType":"394","endLine":142,"endColumn":118},{"ruleId":"392","severity":1,"message":"393","line":143,"column":19,"nodeType":"394","endLine":143,"endColumn":93},{"ruleId":"392","severity":1,"message":"395","line":144,"column":19,"nodeType":"394","endLine":144,"endColumn":74},{"ruleId":"392","severity":1,"message":"395","line":145,"column":19,"nodeType":"394","endLine":145,"endColumn":110},{"ruleId":"392","severity":1,"message":"396","line":160,"column":28,"nodeType":"394","endLine":165,"endColumn":30},{"ruleId":"392","severity":1,"message":"397","line":169,"column":28,"nodeType":"394","endLine":173,"endColumn":30},{"ruleId":"392","severity":1,"message":"398","line":177,"column":28,"nodeType":"394","endLine":181,"endColumn":30},{"ruleId":"392","severity":1,"message":"399","line":185,"column":28,"nodeType":"394","endLine":190,"endColumn":30},{"ruleId":"392","severity":1,"message":"400","line":226,"column":16,"nodeType":"394","endLine":229,"endColumn":18},{"ruleId":"388","severity":1,"message":"401","line":93,"column":7,"nodeType":"390","endLine":93,"endColumn":9,"suggestions":"402"},{"ruleId":"388","severity":1,"message":"403","line":444,"column":7,"nodeType":"390","endLine":444,"endColumn":9,"suggestions":"404"},{"ruleId":"372","severity":1,"message":"405","line":462,"column":28,"nodeType":"374","messageId":"375","endLine":462,"endColumn":46},{"ruleId":"406","severity":1,"message":"407","line":790,"column":19,"nodeType":"379","messageId":"408","endLine":790,"endColumn":21},{"ruleId":"406","severity":1,"message":"407","line":1120,"column":24,"nodeType":"379","messageId":"408","endLine":1120,"endColumn":26},{"ruleId":"372","severity":1,"message":"409","line":1215,"column":7,"nodeType":"374","messageId":"375","endLine":1215,"endColumn":27},{"ruleId":"372","severity":1,"message":"410","line":10,"column":7,"nodeType":"374","messageId":"375","endLine":10,"endColumn":28},{"ruleId":"372","severity":1,"message":"411","line":13,"column":19,"nodeType":"374","messageId":"375","endLine":13,"endColumn":28},{"ruleId":"372","severity":1,"message":"412","line":252,"column":11,"nodeType":"374","messageId":"375","endLine":252,"endColumn":24},{"ruleId":"388","severity":1,"message":"413","line":315,"column":8,"nodeType":"390","endLine":315,"endColumn":10,"suggestions":"414"},{"ruleId":"388","severity":1,"message":"415","line":326,"column":8,"nodeType":"390","endLine":326,"endColumn":22,"suggestions":"416"},{"ruleId":"372","severity":1,"message":"417","line":337,"column":11,"nodeType":"374","messageId":"375","endLine":337,"endColumn":24},{"ruleId":"372","severity":1,"message":"418","line":6,"column":13,"nodeType":"374","messageId":"375","endLine":6,"endColumn":22},{"ruleId":"372","severity":1,"message":"419","line":6,"column":32,"nodeType":"374","messageId":"375","endLine":6,"endColumn":39},{"ruleId":"372","severity":1,"message":"420","line":6,"column":41,"nodeType":"374","messageId":"375","endLine":6,"endColumn":52},{"ruleId":"372","severity":1,"message":"421","line":6,"column":54,"nodeType":"374","messageId":"375","endLine":6,"endColumn":77},{"ruleId":"372","severity":1,"message":"422","line":6,"column":79,"nodeType":"374","messageId":"375","endLine":6,"endColumn":90},{"ruleId":"372","severity":1,"message":"423","line":6,"column":92,"nodeType":"374","messageId":"375","endLine":6,"endColumn":101},{"ruleId":"388","severity":1,"message":"424","line":215,"column":7,"nodeType":"390","endLine":215,"endColumn":29,"suggestions":"425"},{"ruleId":"388","severity":1,"message":"426","line":233,"column":7,"nodeType":"390","endLine":233,"endColumn":36,"suggestions":"427"},{"ruleId":"372","severity":1,"message":"428","line":259,"column":11,"nodeType":"374","messageId":"375","endLine":259,"endColumn":19},{"ruleId":"372","severity":1,"message":"429","line":259,"column":21,"nodeType":"374","messageId":"375","endLine":259,"endColumn":32},{"ruleId":"372","severity":1,"message":"430","line":99,"column":7,"nodeType":"374","messageId":"375","endLine":99,"endColumn":14},{"ruleId":"372","severity":1,"message":"431","line":118,"column":23,"nodeType":"374","messageId":"375","endLine":118,"endColumn":31},{"ruleId":"377","severity":1,"message":"432","line":349,"column":64,"nodeType":"379","messageId":"380","endLine":349,"endColumn":147},{"ruleId":"406","severity":1,"message":"407","line":585,"column":40,"nodeType":"379","messageId":"408","endLine":585,"endColumn":42},{"ruleId":"406","severity":1,"message":"407","line":705,"column":29,"nodeType":"379","messageId":"408","endLine":705,"endColumn":31},{"ruleId":"377","severity":1,"message":"382","line":902,"column":44,"nodeType":"379","messageId":"380","endLine":902,"endColumn":93},{"ruleId":"368","severity":1,"message":"369","line":902,"column":73,"nodeType":"370","messageId":"371","endLine":902,"endColumn":75},{"ruleId":"377","severity":1,"message":"382","line":920,"column":44,"nodeType":"379","messageId":"380","endLine":920,"endColumn":93},{"ruleId":"368","severity":1,"message":"369","line":920,"column":73,"nodeType":"370","messageId":"371","endLine":920,"endColumn":75},{"ruleId":"377","severity":1,"message":"382","line":938,"column":44,"nodeType":"379","messageId":"380","endLine":938,"endColumn":93},{"ruleId":"368","severity":1,"message":"369","line":938,"column":73,"nodeType":"370","messageId":"371","endLine":938,"endColumn":75},{"ruleId":"377","severity":1,"message":"382","line":959,"column":44,"nodeType":"379","messageId":"380","endLine":959,"endColumn":93},{"ruleId":"368","severity":1,"message":"369","line":959,"column":73,"nodeType":"370","messageId":"371","endLine":959,"endColumn":75},{"ruleId":"368","severity":1,"message":"433","line":968,"column":47,"nodeType":"370","messageId":"371","endLine":968,"endColumn":49},{"ruleId":"372","severity":1,"message":"434","line":5,"column":9,"nodeType":"374","messageId":"375","endLine":5,"endColumn":14},{"ruleId":"372","severity":1,"message":"435","line":5,"column":16,"nodeType":"374","messageId":"375","endLine":5,"endColumn":22},{"ruleId":"372","severity":1,"message":"436","line":20,"column":16,"nodeType":"374","messageId":"375","endLine":20,"endColumn":24},{"ruleId":"388","severity":1,"message":"437","line":43,"column":8,"nodeType":"390","endLine":43,"endColumn":10,"suggestions":"438"},{"ruleId":"388","severity":1,"message":"439","line":84,"column":7,"nodeType":"390","endLine":84,"endColumn":9,"suggestions":"440"},{"ruleId":"388","severity":1,"message":"441","line":124,"column":7,"nodeType":"390","endLine":124,"endColumn":9,"suggestions":"442"},{"ruleId":"443","severity":1,"message":"444","line":209,"column":22,"nodeType":"445","endLine":209,"endColumn":61},{"ruleId":"443","severity":1,"message":"444","line":215,"column":22,"nodeType":"445","endLine":215,"endColumn":61},{"ruleId":"443","severity":1,"message":"444","line":222,"column":22,"nodeType":"445","endLine":222,"endColumn":61},{"ruleId":"443","severity":1,"message":"444","line":228,"column":22,"nodeType":"445","endLine":228,"endColumn":62},{"ruleId":"443","severity":1,"message":"444","line":234,"column":22,"nodeType":"445","endLine":234,"endColumn":62},{"ruleId":"443","severity":1,"message":"444","line":26,"column":29,"nodeType":"445","endLine":29,"endColumn":32},{"ruleId":"372","severity":1,"message":"446","line":22,"column":12,"nodeType":"374","messageId":"375","endLine":22,"endColumn":24},{"ruleId":"388","severity":1,"message":"447","line":182,"column":7,"nodeType":"390","endLine":182,"endColumn":15,"suggestions":"448"},{"ruleId":"388","severity":1,"message":"449","line":30,"column":7,"nodeType":"390","endLine":30,"endColumn":9,"suggestions":"450"},{"ruleId":"368","severity":1,"message":"369","line":49,"column":61,"nodeType":"370","messageId":"371","endLine":49,"endColumn":63},{"ruleId":"451","severity":1,"message":"452","line":382,"column":44,"nodeType":"370","messageId":"453","endLine":382,"endColumn":45},{"ruleId":"454","severity":1,"message":"455","line":798,"column":75,"nodeType":"456","messageId":"457","endLine":798,"endColumn":117,"fix":"458"},{"ruleId":"459","severity":1,"message":"460","line":29,"column":13,"nodeType":"461","messageId":"371","endLine":29,"endColumn":19},{"ruleId":"388","severity":1,"message":"462","line":29,"column":7,"nodeType":"390","endLine":29,"endColumn":17,"suggestions":"463"},"no-native-reassign",["464"],"no-negated-in-lhs",["465"],"import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-unused-vars","'getRndInteger' is assigned a value but never used.","Identifier","unusedVar","'findHeaderId' is assigned a value but never used.","no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'preSubRowLv2'.","ArrowFunctionExpression","unsafeRefs","Function declared in a loop contains unsafe references to variable(s) 'preSubRowLv1'.","Function declared in a loop contains unsafe references to variable(s) 'preRow'.","'getParentIdHandy' is assigned a value but never used.","'returnPreRowNullSumang' is assigned a value but never used.","'returnPreRowNullHandy' is assigned a value but never used.","'getColumnWidth' is assigned a value but never used.","'addNos' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'projectsArray' and 'token'. Either include them or remove the dependency array. If 'setDataDB' needs the current value of 'projectsArray', you can also switch to useReducer instead of useState and read 'projectsArray' in the reducer.","ArrayExpression",["466"],"react/jsx-pascal-case","Imported JSX component _ChartBarDrawingLate must be in PascalCase or SCREAMING_SNAKE_CASE","JSXOpeningElement","Imported JSX component _ChartBarStack must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component _ChartProgress must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component _ChartPieDrawing must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component _ChartBarDrawing must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component _FormPivot must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component _TableDrawingList must be in PascalCase or SCREAMING_SNAKE_CASE","React Hook useEffect has a missing dependency: 'EventKeyDown'. Either include it or remove the dependency array.",["467"],"React Hook useEffect has missing dependencies: 'companies', 'company', 'email', 'fetchDataOneSheet', 'getSheetRows', 'projectId', 'projectName', 'role', 'roleTradeCompany', 'setUserData', and 'token'. Either include them or remove the dependency array.",["468"],"'setExpandColumnKey' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","expectedInside","'compareDataExcelVsDB' is assigned a value but never used.","'getSubDrawingByStatus' is assigned a value but never used.","'stateCell' is assigned a value but never used.","'scrollBarSize' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'columnsHeaderSorted' and 'toggleGroupBy'. Either include them or remove the dependency array.",["469"],"React Hook useEffect has missing dependencies: 'expanded', 'maxRowExpand', and 'toggleExpanded'. Either include them or remove the dependency array.",["470"],"'panelFunction' is assigned a value but never used.","'className' is assigned a value but never used.","'columns' is assigned a value but never used.","'columnIndex' is assigned a value but never used.","'onMouseDownColumnHeader' is assigned a value but never used.","'headerIndex' is assigned a value but never used.","'container' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'columnIndex', 'inputRender', 'isLockedColumn', 'isLockedRow', and 'rowIndex'. Either include them or remove the dependency array.",["471"],"React Hook useEffect has missing dependencies: 'cellEditDone', 'columnIndex', 'inputRender', 'isLockedColumn', 'isLockedRow', 'rowIndex', and 'stateCell.tempCopiedText'. Either include them or remove the dependency array.",["472"],"'fileList' is assigned a value but never used.","'setFileList' is assigned a value but never used.","'IconRFA' is assigned a value but never used.","'children' is assigned a value but never used.","Function declared in a loop contains unsafe references to variable(s) 'arrayNodes'.","Expected '!==' and instead saw '!='.","'Group' is assigned a value but never used.","'Button' is assigned a value but never used.","'stateRow' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'headerKey', 'projectId', 'rowId', and 'token'. Either include them or remove the dependency array.",["473"],"React Hook useEffect has missing dependencies: 'headers', 'projectId', 'rowData', 'rowId', 'stateRow.rowsVersionsToSave', and 'token'. Either include them or remove the dependency array.",["474"],"React Hook useEffect has missing dependencies: 'activityRecorded', 'dwgName', 'dwgNumber', 'headers', 'projectId', 'revKey', 'stateRow.rowsAll', 'statusKey', and 'token'. Either include them or remove the dependency array.",["475"],"react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","'headersShown' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'data.value', 'id', and 'setFilterSelect'. Either include them or remove the dependency array. If 'setFilterSelect' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["476"],"React Hook useEffect has missing dependencies: 'projectId' and 'token'. Either include them or remove the dependency array.",["477"],"no-useless-concat","Unexpected string concatenation of literals.","unexpectedConcat","no-useless-computed-key","Unnecessarily computed property ['Drawing Number'] found.","Property","unnecessarilyComputedProperty",{"range":"478","text":"479"},"no-dupe-keys","Duplicate key 'border'.","ObjectExpression","React Hook useEffect has missing dependencies: 'actionType', 'styleFrozen', 'styleHidden', and 'styleShown'. Either include them or remove the dependency array.",["480"],"no-global-assign","no-unsafe-negation",{"desc":"481","fix":"482"},{"desc":"483","fix":"484"},{"desc":"485","fix":"486"},{"desc":"487","fix":"488"},{"desc":"489","fix":"490"},{"desc":"491","fix":"492"},{"desc":"493","fix":"494"},{"desc":"495","fix":"496"},{"desc":"497","fix":"498"},{"desc":"499","fix":"500"},{"desc":"501","fix":"502"},{"desc":"503","fix":"504"},[32040,32058],"'Drawing Number'",{"desc":"505","fix":"506"},"Update the dependencies array to be: [projectsArray, token]",{"range":"507","text":"508"},"Update the dependencies array to be: [EventKeyDown]",{"range":"509","text":"510"},"Update the dependencies array to be: [companies, company, email, fetchDataOneSheet, getSheetRows, projectId, projectName, role, roleTradeCompany, setUserData, token]",{"range":"511","text":"512"},"Update the dependencies array to be: [columnsHeaderSorted, toggleGroupBy]",{"range":"513","text":"514"},"Update the dependencies array to be: [expanded, expandedRows, maxRowExpand, toggleExpanded]",{"range":"515","text":"516"},"Update the dependencies array to be: [columnIndex, inputRender, isLockedColumn, isLockedRow, rowIndex, stateCell.cellActive]",{"range":"517","text":"518"},"Update the dependencies array to be: [cellEditDone, columnIndex, inputRender, isLockedColumn, isLockedRow, rowIndex, stateCell.cellAppliedAction, stateCell.tempCopiedText]",{"range":"519","text":"520"},"Update the dependencies array to be: [headerKey, projectId, rowId, token]",{"range":"521","text":"522"},"Update the dependencies array to be: [headers, projectId, rowData, rowId, stateRow.rowsVersionsToSave, token]",{"range":"523","text":"524"},"Update the dependencies array to be: [activityRecorded, dwgName, dwgNumber, headers, projectId, revKey, stateRow.rowsAll, statusKey, token]",{"range":"525","text":"526"},"Update the dependencies array to be: [column, data.value, id, setFilterSelect]",{"range":"527","text":"528"},"Update the dependencies array to be: [projectId, token]",{"range":"529","text":"530"},"Update the dependencies array to be: [actionType, styleFrozen, styleHidden, styleShown, tag.mode]",{"range":"531","text":"532"},[4010,4012],"[projectsArray, token]",[3528,3530],"[EventKeyDown]",[18119,18121],"[companies, company, email, fetchDataOneSheet, getSheetRows, projectId, projectName, role, roleTradeCompany, setUserData, token]",[8932,8934],"[columnsHeaderSorted, toggleGroupBy]",[9259,9273],"[expanded, expandedRows, maxRowExpand, toggleExpanded]",[7607,7629],"[columnIndex, inputRender, isLockedColumn, isLockedRow, rowIndex, stateCell.cellActive]",[8188,8217],"[cellEditDone, columnIndex, inputRender, isLockedColumn, isLockedRow, rowIndex, stateCell.cellAppliedAction, stateCell.tempCopiedText]",[1242,1244],"[headerKey, projectId, rowId, token]",[2695,2697],"[headers, projectId, rowData, rowId, stateRow.rowsVersionsToSave, token]",[4547,4549],"[activityRecorded, dwgName, dwgNumber, headers, projectId, revKey, stateRow.rowsAll, statusKey, token]",[5264,5272],"[column, data.value, id, setFilterSelect]",[999,1001],"[projectId, token]",[864,874],"[actionType, styleFrozen, styleHidden, styleShown, tag.mode]"]
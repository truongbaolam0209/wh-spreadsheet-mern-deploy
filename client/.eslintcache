[{"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\index.js":"1","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\App.js":"2","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\reportWebVitals.js":"3","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\DashboardLayout\\PageDashboard.js":"4","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\PageDataEntrySheet.js":"5","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\PageSpreadsheet.js":"6","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\DashboardLayout\\assets\\constantDashboard.js":"7","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\DashboardLayout\\componentsDashboard\\CardPanelProject.js":"8","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\DashboardLayout\\componentsDashboard\\ChartBarStack.js":"9","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\DashboardLayout\\componentsDashboard\\ChartBarDrawingLate.js":"10","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\DashboardLayout\\componentsDashboard\\ChartPieDrawing.js":"11","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\DashboardLayout\\componentsDashboard\\ChartBarDrawing.js":"12","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\DashboardLayout\\componentsDashboard\\ChartProgress.js":"13","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\DashboardLayout\\utils\\functionDashboard.js":"14","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\DashboardLayout\\componentsDashboard\\FormPivot.js":"15","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\DashboardLayout\\componentsDashboard\\TableDrawingList.js":"16","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\contexts\\cellContext.js":"17","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\contexts\\projectContext.js":"18","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\contexts\\rowContext.js":"19","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\generalComponents\\CellHeader.js":"20","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\generalComponents\\InputSearch.js":"21","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\generalComponents\\ViewTemplateSelect.js":"22","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\generalComponents\\IconTable.js":"23","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\generalComponents\\FormSort.js":"24","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\pageDataEntrySheet\\Cell2.js":"25","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\pageDataEntrySheet\\CellIndex2.js":"26","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\pageDataEntrySheet\\ExcelExport2.js":"27","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\pageDataEntrySheet\\FormDrawingTypeOrder2.js":"28","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\pageDataEntrySheet\\PanelFunction2.js":"29","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\pageDataEntrySheet\\PanelSetting2.js":"30","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\pageSpreadsheet\\ButtonAdminCreateAndUpdateRows.js":"31","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\pageSpreadsheet\\ButtonAdminCreateAndUpdateRowsHistory.js":"32","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\pageSpreadsheet\\ButtonAdminDeleteRowsHistory.js":"33","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\pageSpreadsheet\\ButtonAdminUploadData.js":"34","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\pageSpreadsheet\\Cell.js":"35","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\pageSpreadsheet\\ButtonAdminUploadDataPDD.js":"36","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\pageSpreadsheet\\FormDrawingTypeOrder.js":"37","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\pageSpreadsheet\\ExcelExport.js":"38","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\pageSpreadsheet\\PanelSetting.js":"39","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\pageSpreadsheet\\PanelFunction.js":"40","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\pageSpreadsheet\\CellIndex.js":"41","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\constants\\index.js":"42","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\utils\\index.js":"43","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\DashboardLayout\\componentsDashboard\\CardPanel.js":"44","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\DashboardLayout\\componentsDashboard\\ChartBarRecordPanel.js":"45","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\DashboardLayout\\componentsDashboard\\PanelSettingDashboard.js":"46","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\contexts\\createDataContext.js":"47","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\generalComponents\\ButtonGroupComp.js":"48","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\generalComponents\\PanelCalendar.js":"49","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\generalComponents\\ButtonColumnTag.js":"50","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\pageSpreadsheet\\TableDrawingDetail.js":"51","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\pageSpreadsheet\\FormDateAutomation.js":"52","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\pageSpreadsheet\\TableCellHistory.js":"53","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\pageSpreadsheet\\ColorizedForm.js":"54","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\pageSpreadsheet\\FormCellColorizedCheck.js":"55","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\pageSpreadsheet\\TableActivityHistory.js":"56","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\generalComponents\\ReorderColumnForm.js":"57","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\generalComponents\\PanelConfirmResetMode.js":"58","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\generalComponents\\PanelConfirm.js":"59","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\generalComponents\\PanelPickNumber.js":"60","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\generalComponents\\FormFilter.js":"61","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\pageDataEntrySheet\\TableActivityHistory2.js":"62","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\generalComponents\\FormGroup.js":"63","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\pageDataEntrySheet\\TableCellHistory2.js":"64","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\pageDataEntrySheet\\ColorizedForm2.js":"65","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\pageDataEntrySheet\\FormCellColorizedCheck2.js":"66","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\DashboardLayout\\componentsDashboard\\ChartBarRecord.js":"67","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\generalComponents\\ButtonStyle.js":"68","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\generalComponents\\PanelCalendarDuration.js":"69","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\generalComponents\\FormFilterActivityHistory.js":"70"},{"size":507,"mtime":1616043237000,"results":"71","hashOfConfig":"72"},{"size":897835,"mtime":1616382575345,"results":"73","hashOfConfig":"72"},{"size":362,"mtime":1616043237000,"results":"74","hashOfConfig":"72"},{"size":13711,"mtime":1616392836577,"results":"75","hashOfConfig":"72"},{"size":41400,"mtime":1616392876648,"results":"76","hashOfConfig":"72"},{"size":45256,"mtime":1616395276668,"results":"77","hashOfConfig":"72"},{"size":3195,"mtime":1616384949287,"results":"78","hashOfConfig":"72"},{"size":1063,"mtime":1616043237000,"results":"79","hashOfConfig":"72"},{"size":5854,"mtime":1616330763352,"results":"80","hashOfConfig":"72"},{"size":3398,"mtime":1616330674217,"results":"81","hashOfConfig":"72"},{"size":2346,"mtime":1616394723195,"results":"82","hashOfConfig":"72"},{"size":7262,"mtime":1616392365284,"results":"83","hashOfConfig":"72"},{"size":3369,"mtime":1616391697087,"results":"84","hashOfConfig":"72"},{"size":23518,"mtime":1616389700211,"results":"85","hashOfConfig":"72"},{"size":5059,"mtime":1616075048350,"results":"86","hashOfConfig":"72"},{"size":15257,"mtime":1616394732112,"results":"87","hashOfConfig":"72"},{"size":1858,"mtime":1616043237000,"results":"88","hashOfConfig":"72"},{"size":916,"mtime":1616043237000,"results":"89","hashOfConfig":"72"},{"size":548,"mtime":1616043237000,"results":"90","hashOfConfig":"72"},{"size":451,"mtime":1616043237000,"results":"91","hashOfConfig":"72"},{"size":2595,"mtime":1616330992318,"results":"92","hashOfConfig":"72"},{"size":4223,"mtime":1616043237000,"results":"93","hashOfConfig":"72"},{"size":4548,"mtime":1616329426673,"results":"94","hashOfConfig":"72"},{"size":3559,"mtime":1616079827987,"results":"95","hashOfConfig":"72"},{"size":11649,"mtime":1616043237000,"results":"96","hashOfConfig":"72"},{"size":1291,"mtime":1616043237000,"results":"97","hashOfConfig":"72"},{"size":3065,"mtime":1616330284956,"results":"98","hashOfConfig":"72"},{"size":21746,"mtime":1616043237000,"results":"99","hashOfConfig":"72"},{"size":3955,"mtime":1616043237000,"results":"100","hashOfConfig":"72"},{"size":38582,"mtime":1616394561778,"results":"101","hashOfConfig":"72"},{"size":1936,"mtime":1616043237000,"results":"102","hashOfConfig":"72"},{"size":1971,"mtime":1616043237000,"results":"103","hashOfConfig":"72"},{"size":2143,"mtime":1616043237000,"results":"104","hashOfConfig":"72"},{"size":2333,"mtime":1616043237000,"results":"105","hashOfConfig":"72"},{"size":21209,"mtime":1616329080565,"results":"106","hashOfConfig":"72"},{"size":2216,"mtime":1616043237000,"results":"107","hashOfConfig":"72"},{"size":33413,"mtime":1616043237000,"results":"108","hashOfConfig":"72"},{"size":2781,"mtime":1616330235653,"results":"109","hashOfConfig":"72"},{"size":38756,"mtime":1616394707634,"results":"110","hashOfConfig":"72"},{"size":5604,"mtime":1616043237000,"results":"111","hashOfConfig":"72"},{"size":1633,"mtime":1616043237000,"results":"112","hashOfConfig":"72"},{"size":3429,"mtime":1616384961866,"results":"113","hashOfConfig":"72"},{"size":9848,"mtime":1616328807098,"results":"114","hashOfConfig":"72"},{"size":1187,"mtime":1616124930845,"results":"115","hashOfConfig":"72"},{"size":3117,"mtime":1616317129329,"results":"116","hashOfConfig":"72"},{"size":3632,"mtime":1616391946353,"results":"117","hashOfConfig":"72"},{"size":590,"mtime":1616043237000,"results":"118","hashOfConfig":"72"},{"size":722,"mtime":1616043237000,"results":"119","hashOfConfig":"72"},{"size":361,"mtime":1616043237000,"results":"120","hashOfConfig":"72"},{"size":2483,"mtime":1616043237000,"results":"121","hashOfConfig":"72"},{"size":5150,"mtime":1616043237000,"results":"122","hashOfConfig":"72"},{"size":4218,"mtime":1616043237000,"results":"123","hashOfConfig":"72"},{"size":2068,"mtime":1616043237000,"results":"124","hashOfConfig":"72"},{"size":3523,"mtime":1616043237000,"results":"125","hashOfConfig":"72"},{"size":3572,"mtime":1616043237000,"results":"126","hashOfConfig":"72"},{"size":11334,"mtime":1616329776930,"results":"127","hashOfConfig":"72"},{"size":3909,"mtime":1616043237000,"results":"128","hashOfConfig":"72"},{"size":2186,"mtime":1616121066142,"results":"129","hashOfConfig":"72"},{"size":1464,"mtime":1616043237000,"results":"130","hashOfConfig":"72"},{"size":904,"mtime":1616043237000,"results":"131","hashOfConfig":"72"},{"size":7159,"mtime":1616077902672,"results":"132","hashOfConfig":"72"},{"size":11597,"mtime":1616043237000,"results":"133","hashOfConfig":"72"},{"size":3901,"mtime":1616121524238,"results":"134","hashOfConfig":"72"},{"size":2017,"mtime":1616043237000,"results":"135","hashOfConfig":"72"},{"size":3543,"mtime":1616043237000,"results":"136","hashOfConfig":"72"},{"size":3784,"mtime":1616043237000,"results":"137","hashOfConfig":"72"},{"size":3191,"mtime":1616317345385,"results":"138","hashOfConfig":"72"},{"size":729,"mtime":1616043237000,"results":"139","hashOfConfig":"72"},{"size":753,"mtime":1616043237000,"results":"140","hashOfConfig":"72"},{"size":5267,"mtime":1616043237000,"results":"141","hashOfConfig":"72"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},"utwymk",{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"151","messages":"152","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"153","messages":"154","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"165","messages":"166","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"167","usedDeprecatedRules":"144"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"172","usedDeprecatedRules":"144"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"175","usedDeprecatedRules":"144"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"178","messages":"179","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"192","usedDeprecatedRules":"144"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"197","usedDeprecatedRules":"144"},{"filePath":"198","messages":"199","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"200","usedDeprecatedRules":"144"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"203","messages":"204","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"205","usedDeprecatedRules":"144"},{"filePath":"206","messages":"207","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"208","messages":"209","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"210","messages":"211","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"212","messages":"213","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"214","messages":"215","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"216","messages":"217","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"218","messages":"219","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"220","usedDeprecatedRules":"144"},{"filePath":"221","messages":"222","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"223","messages":"224","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"225","usedDeprecatedRules":"144"},{"filePath":"226","messages":"227","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"228","messages":"229","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"230","messages":"231","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"232","usedDeprecatedRules":"144"},{"filePath":"233","messages":"234","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"235","usedDeprecatedRules":"144"},{"filePath":"236","messages":"237","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"238","messages":"239","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"240","usedDeprecatedRules":"144"},{"filePath":"241","messages":"242","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"243","messages":"244","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"245","messages":"246","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"247","messages":"248","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"249","usedDeprecatedRules":"144"},{"filePath":"250","messages":"251","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"252","messages":"253","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"254","usedDeprecatedRules":"144"},{"filePath":"255","messages":"256","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"257","usedDeprecatedRules":"144"},{"filePath":"258","messages":"259","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"260","usedDeprecatedRules":"144"},{"filePath":"261","messages":"262","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"263","messages":"264","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"265","usedDeprecatedRules":"144"},{"filePath":"266","messages":"267","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"268","messages":"269","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"270","usedDeprecatedRules":"144"},{"filePath":"271","messages":"272","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"273","usedDeprecatedRules":"144"},{"filePath":"274","messages":"275","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"276","messages":"277","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"278","messages":"279","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"280","usedDeprecatedRules":"144"},{"filePath":"281","messages":"282","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"283","messages":"284","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"285","usedDeprecatedRules":"144"},{"filePath":"286","messages":"287","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"288","usedDeprecatedRules":"144"},{"filePath":"289","messages":"290","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"291","messages":"292","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"293","usedDeprecatedRules":"144"},{"filePath":"294","messages":"295","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"296","messages":"297","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"298","usedDeprecatedRules":"144"},{"filePath":"299","messages":"300","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"301","messages":"302","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"303","usedDeprecatedRules":"144"},{"filePath":"304","messages":"305","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"306","messages":"307","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\index.js",[],["308","309"],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\App.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\reportWebVitals.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\DashboardLayout\\PageDashboard.js",["310","311"],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\PageDataEntrySheet.js",["312","313","314","315","316","317","318"],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\PageSpreadsheet.js",["319","320","321","322","323","324"],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\DashboardLayout\\assets\\constantDashboard.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\DashboardLayout\\componentsDashboard\\CardPanelProject.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\DashboardLayout\\componentsDashboard\\ChartBarStack.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\DashboardLayout\\componentsDashboard\\ChartBarDrawingLate.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\DashboardLayout\\componentsDashboard\\ChartPieDrawing.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\DashboardLayout\\componentsDashboard\\ChartBarDrawing.js",["325"],"import { Badge } from 'antd';\nimport React, { useState } from 'react';\nimport { Bar, BarChart, CartesianGrid, LabelList, Tooltip, XAxis, YAxis } from 'recharts';\nimport styled from 'styled-components';\nimport { pieChartColors2 } from '../assets/constantDashboard';\nimport { ChartPanel } from '../PageDashboard';\nimport { converToInputStack, sortStatusOrder } from '../utils/functionDashboard';\n\n\n\n\nconst ChartBarDrawing = ({ type, data, openDrawingTable, projectId, title }) => {\n\n   const { panel, dataInfo } = data;\n\n   const {\n      barDrawingRevCount,\n      barDrawingModellerCount,\n      barDrawingCoordinatorCount,\n      barDrawingResubmitCount,\n      barDrawingTradeCount\n   } = dataInfo;\n\n\n\n   const barDrawingCount = type === 'rev' ? barDrawingRevCount :\n      type === 'modeller' ? barDrawingModellerCount :\n         type === 'coordinator' ? barDrawingCoordinatorCount :\n            type === 'resubmit' ? barDrawingResubmitCount :\n               type === 'trade' ? barDrawingTradeCount :\n                  [];\n\n\n   const inputStack = converToInputStack(barDrawingCount);\n\n   const onClick = (portion, status) => {\n      openDrawingTable({\n         projectId,\n         panel,\n         type: type === 'rev' ? 'Bar Drawing Rev' :\n            type === 'modeller' ? 'Bar Drawing Modeller' :\n               type === 'coordinator' ? 'Bar Drawing Coordinator' :\n                  type === 'resubmit' ? 'Bar Drawing Resubmit' :\n                     type === 'trade' ? 'Bar Drawing Trade' : null,\n         category: portion.name,\n         categorySub1: status\n      });\n   };\n\n\n   const onClickXAxis = ({ value }) => {\n      openDrawingTable({\n         projectId,\n         panel,\n         type: type === 'rev' ? 'Bar Drawing Rev' :\n            type === 'modeller' ? 'Bar Drawing Modeller' :\n               type === 'coordinator' ? 'Bar Drawing Coordinator' :\n                  type === 'resubmit' ? 'Bar Drawing Resubmit' :\n                     type === 'trade' ? 'Bar Drawing Trade' : null,\n         category: value,\n      });\n   };\n\n\n   const LabelCustomStacked = (props) => {\n      const { x, y, value, height } = props;\n      const fontSize = 13;\n      return (\n         <text\n            style={{ fontSize: fontSize, boxShadow: '5px 15px 24px 5px black' }}\n            x={x + 24}\n            y={y + height / 2}\n            fill='#2c3e50'\n            dominantBaseline='central'\n         >\n            {/* {height + 3 < fontSize ? null : value} */}\n            {null}\n         </text>\n      );\n   };\n\n   const LabelCustomStackedTotal = (props) => {\n      const { x, y, value, topBar } = props;\n      return (\n         <>\n            <text\n               style={{ fontSize: 13, fontWeight: 'bold' }}\n               x={x - 2}\n               y={y - 10}\n               fill='black'\n               dominantBaseline='central'\n            >\n               {topBar ? value : null}\n            </text>\n         </>\n      );\n   };\n\n\n   const [tooltip, setTooltip] = useState(false);\n   const TooltipCustom = (props) => {\n      const { active, payload } = props;\n      if (!active || !tooltip) return null;\n      for (const bar of payload)\n         if (bar.dataKey === tooltip) {\n            return (\n               <div style={{\n                  backgroundColor: 'white',\n                  color: bar.fill,\n                  fontSize: 14,\n                  border: `1px solid ${bar.fill}`,\n                  padding: '3px',\n                  maxWidth: '170px'\n               }}>\n                  {bar.name}\n                  <br />\n                  <mark style={{ backgroundColor: bar.fill }}>({bar.value})</mark>\n               </div>\n            );\n         };\n      return null;\n   };\n\n\n   return (\n      <>\n         {inputStack.length > 0 && (\n            <ChartPanel title={title} panel={panel}>\n               <div style={{\n                  margin: '0 auto', overflow: 'auto'\n                  // display: 'table', \n               }}>\n                  <BarChart\n                     width={type === 'resubmit' ? 320 : 450}\n                     height={type === 'resubmit' ? 300 : 350}\n                     data={barDrawingCount}\n                     margin={{ top: 35, right: 15, left: 0, bottom: 20 }}\n                     padding={{ top: 5 }}\n                     barSize={18}\n                  >\n                     <CartesianGrid strokeDasharray='3 3' />\n                     {type === 'rev' || type === 'resubmit' ? (\n                        <XAxis\n                           style={{ cursor: 'pointer' }}\n                           onClick={onClickXAxis}\n                           tickSize={3} dataKey='name' textAnchor='middle' interval={0} scale='point'\n                           padding={{ left: 20, right: 20 }}\n                        />\n                     ) : (\n                        <XAxis\n                           style={{ cursor: 'pointer' }}\n                           onClick={onClickXAxis}\n                           fontSize={11} tickSize={3} dataKey='name' textAnchor='end' angle={-25} interval={0} scale='point'\n                           padding={{ left: 20, right: 20 }}\n                        />\n                     )}\n\n                     <YAxis />\n                     <Tooltip content={<TooltipCustom />} />\n\n                     {sortStatusOrder(inputStack).reverse().map((item, i) => {\n                        return (\n                           <Bar\n                              style={{ cursor: 'pointer' }}\n                              key={item}\n                              dataKey={item}\n                              stackId='a'\n                              fill={pieChartColors2[item]}\n                              isAnimationActive={false}\n                              onClick={(e) => onClick(e, item)}\n                              onMouseOver={() => setTooltip(item)}\n                              label={<LabelCustomStackedTotal topBar={i === inputStack.length - 1} />}\n                           >\n                              <LabelList dataKey={item} position='left' content={<LabelCustomStacked item={item} />} />\n                           </Bar>\n                        )\n                     })}\n\n                  </BarChart>\n\n                  {type === 'resubmit' && (\n                     <div style={{ transform: 'translateY(-15px)', display: 'flex' }}>\n                        <div style={{ marginRight: 10 }}>\n                           <StyledBadge\n                              size='small'\n                              color={pieChartColors2['Reject, to resubmit']}\n                              text={'Reject, to resubmit'}\n                           />\n                        </div>\n\n                        <StyledBadge\n                           size='small'\n                           color={pieChartColors2['Approved in previous version but need resubmit']}\n                           text={'Approved in previous version but need resubmit'}\n                        />\n                     </div>\n                  )}\n               </div>\n            </ChartPanel>\n         )}\n      </>\n   );\n};\n\nexport default ChartBarDrawing;\n\nconst StyledBadge = styled(Badge)`\n    .ant-badge-status-dot {\n        width: 15px;\n        height: 15px;\n        border-radius: 0;\n    }\n`;\n\n\n","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\DashboardLayout\\componentsDashboard\\ChartProgress.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\DashboardLayout\\utils\\functionDashboard.js",["326","327","328","329","330","331","332","333","334","335","336","337","338"],"import moment from 'moment';\n\n\nexport const inputStackData = [\n   'Approved for Construction',\n   'Approved with Comment, no submission Required',\n   'Revise In-Progress',\n   'Approved with comments, to Resubmit',\n   'Reject and resubmit',\n   'Consultant reviewing',\n   'Pending design',\n   '1st cut of drawing in-progress',\n   '1st cut of model in-progress',\n   'Not Started',\n];\nconst inputStackResubmit = [\n   'Approved in previous version but need resubmit',\n   'Reject, to resubmit',\n];\n\nexport const converToInputStack = (data) => {\n   \n   let output = [];\n   data.forEach(item => {\n      let arr = { ...item };\n      delete arr.name;\n      Object.keys(arr).forEach(stt => {\n         if (inputStackData.indexOf(stt) !== -1 || inputStackResubmit.indexOf(stt) !== -1) {\n            output = [...output, stt];\n         };\n      });\n   });\n   return [...new Set(output)];\n};\n\n\nexport const sortStatusOrder = (data) => {\n\n   const statusArr = [...data];\n\n   let arr = [];\n   inputStackData.forEach(element => {\n      statusArr.forEach(e => {\n         if (element === e) arr.push(element);\n      });\n   });\n   if (arr.length === 0) return statusArr;\n   return arr;\n};\n\nconst checkDiffDates = (dateInput1, dateInput2) => {\n   let date1 = dateInput1;\n   let date2 = dateInput2;\n   if (dateInput1 && dateInput1.length === 8 && dateInput1.includes('/')) date1 = moment(dateInput1, 'DD/MM/YY').format('YYYY-MM-DD');\n   if (dateInput2 && dateInput2.length === 8 && dateInput2.includes('/')) date2 = moment(dateInput2, 'DD/MM/YY').format('YYYY-MM-DD');\n\n   if (date1 && date2) {\n      return  moment(date1).diff(moment(date2), 'days');\n   } else if (date1 && !date2) {\n      return moment(date1).diff(moment(), 'days');\n   };\n};\n\n\nexport const getDrawingLateNow1 = (drawings, type) => {\n   const conditionArray1 = [\n      'Approved for Construction',\n      'Approved with Comment, no submission Required',\n      'Consultant reviewing'\n   ];\n   const conditionArray2 = [\n      'Approved for Construction',\n      'Approved with Comment, no submission Required',\n   ];\n\n   let rowsLateOutput;\n\n\n   \n   if (type === 'drawingsLateStart') {\n      rowsLateOutput = drawings.filter(r => {\n         return conditionArray1.indexOf(r.Status) === -1 && \n         r['Drawing Start (T)'] && checkDiffDates(r['Drawing Start (T)']) < 0 &&\n         (\n            !r['Drawing Start (A)'] ||\n            (r['Drawing Start (A)'] && r['Drawing Start (T)'] && checkDiffDates(r['Drawing Start (A)'], r['Drawing Start (T)']) > 0)\n         );\n      });\n   } else if (type === 'drawingsLateSubmission') {\n      rowsLateOutput = drawings.filter(r => {\n         return conditionArray1.indexOf(r.Status) === -1 && \n         r['Drg To Consultant (T)'] && checkDiffDates(r['Drg To Consultant (T)']) < 0 &&\n         !r['Drg To Consultant (A)'];\n      });\n   } else if (type === 'drawingsLateApproval') {\n      rowsLateOutput = drawings.filter(r => {\n         return conditionArray2.indexOf(r.Status) === -1 && \n         r['Get Approval (T)'] && checkDiffDates(r['Get Approval (T)']) < 0 &&\n         (\n            !r['Get Approval (A)'] ||\n            (r['Get Approval (A)'] && r['Get Approval (T)'] && checkDiffDates(r['Get Approval (A)'], r['Get Approval (T)']) > 0)\n         );\n      });\n   } else if (type === 'drawingsLateConstruction') {\n      rowsLateOutput = drawings.filter(r => {\n         return conditionArray2.indexOf(r.Status) === -1 && \n         (\n            !r['Drg To Consultant (A)'] ||\n            (r['Get Approval (A)'] && r['Construction Issuance Date'] && checkDiffDates(r['Get Approval (A)'], r['Construction Issuance Date']) > 0)\n         );\n      });\n   };\n   return rowsLateOutput;\n};\n\n\n\n\n\nexport const formatStringNameToId = (str) => {\n   let mystring = str.replace(/ /g, '').replace(/\\(|\\)/g, '');\n   return mystring.charAt(0).toLowerCase() + mystring.slice(1);\n};\n\n\n\n\n\n\n\nconst randomInteger = (min, max) => {\n   return Math.floor(Math.random() * (max - min + 1)) + min;\n};\nexport const createDummyRecords = () => {\n   let categoryArr = [\n      'Drawing Approved For Construction',\n      'Drawing Approved With Comments To Resubmit',\n      'Drawing Late For Approval',\n      'Drawing Late For Submission',\n      'Drawing Late For Construction',\n   ];\n\n   let recordArray = {};\n\n   categoryArr.forEach(cate => {\n      let arr = {};\n      if (cate === 'Drawing Late For Approval' || cate === 'Drawing Late For Submission') {\n         for (let i = 0; i < 100; i++) {\n            if (i % 3 == 0) {\n               arr[moment(new Date(2020, 6, 21)).add(i, 'day')._d] = 0;\n            } else {\n               arr[moment(new Date(2020, 6, 21)).add(i, 'day')._d] = randomInteger(0, 1);\n            };\n         };\n\n      } else if (cate === 'Drawing Late For Construction') {\n\n         for (let i = 0; i < 100; i++) {\n            if (i % 3 == 0) {\n               arr[moment(new Date(2020, 6, 21)).add(i, 'day')._d] = 0;\n            } else {\n               arr[moment(new Date(2020, 6, 21)).add(i, 'day')._d] = randomInteger(0, 2);\n            };\n         };\n\n      } else {\n\n         for (let i = 0; i < 100; i++) {\n            if (i % 3 == 0) {\n               arr[moment(new Date(2020, 6, 21)).add(i, 'day')._d] = 1;\n            } else {\n               arr[moment(new Date(2020, 6, 21)).add(i, 'day')._d] = randomInteger(1, 4);\n            };\n         };\n      };\n      recordArray[cate] = arr;\n   });\n   return recordArray;\n};\n\n\n\n\n\n\nconst getRandomInt = (min, max) => {\n   min = Math.ceil(min);\n   max = Math.floor(max);\n   return Math.floor(Math.random() * (max - min) + min); //The maximum is exclusive and the minimum is inclusive\n};\nexport const recordDataToChartDaily = (data, category, month) => {\n   let arr = [];\n   Object.keys(data[category]).forEach((item, i) => {\n\n      const addNos = i % 3 == 0 ? -1\n         : i % 2 == 0 ? 1\n            : i % 5 == 0 ? 2 : 0;\n\n      const date = moment(item).add(-1, 'day');\n      if (date.format('MM/YY') === month) {\n         arr.push({\n            date: date.format('DD'),\n            value: data[category][item],\n            target: data[category][item] + addNos\n         });\n      };\n   });\n   return arr;\n};\nexport const recordDataToChartWeekly = (data, category) => {\n   let arr = [];\n   Object.keys(data[category]).forEach((item, i) => {\n\n      const addNos = i % 3 == 0 ? -1\n         : i % 5 == 0 ? 1\n            : i % 7 == 0 ? 2 : 0;\n\n      const date = moment(item).add(-1, 'day');\n      arr.push({\n         week: date.format('W'),\n         month: date.format('MM'),\n         year: date.format('YY'),\n         value: data[category][item],\n         target: data[category][item] + addNos\n      });\n   });\n\n   let groups = {};\n   for (let i = 0; i < arr.length; i++) {\n      let weekName = `W${arr[i].week} ${arr[i].month}/${arr[i].year}`;\n      groups[weekName] = {};\n   };\n\n\n   for (let i = 0; i < arr.length; i++) {\n      let weekName = `W${arr[i].week} ${arr[i].month}/${arr[i].year}`;\n      groups[weekName].value = [...groups[weekName].value || [], arr[i].value];\n      groups[weekName].target = [...groups[weekName].target || [], arr[i].target];\n   };\n\n   let arrOutput = [];\n   for (let week in groups) {\n      arrOutput.push({\n         week,\n         value: groups[week].value.reduce((a, b) => a + b, 0),\n         target: groups[week].target.reduce((a, b) => a + b, 0),\n      });\n   };\n   return arrOutput;\n};\nexport const recordDataToChartMonthly = (data, category) => {\n   let arr = [];\n   Object.keys(data[category]).forEach((item, i) => {\n\n      const addNos = i % 4 == 0 ? -4\n         : i % 3 == 0 ? 3\n            : i % 2 == 0 ? 2 : 0;\n\n      const date = moment(item).add(-1, 'day');\n      arr.push({\n         week: date.format('W'),\n         month: date.format('MM'),\n         year: date.format('YY'),\n         value: data[category][item],\n         target: data[category][item] + getRandomInt(-3, 3)\n      });\n   });\n   let groups = {};\n   for (let i = 0; i < arr.length; i++) {\n      let monthName = `${arr[i].month}/${arr[i].year}`;\n      groups[monthName] = {};\n   };\n\n   for (let i = 0; i < arr.length; i++) {\n      let monthName = `${arr[i].month}/${arr[i].year}`;\n      groups[monthName].value = [...groups[monthName].value || [], arr[i].value];\n      groups[monthName].target = [...groups[monthName].target || [], arr[i].target];\n   };\n\n   let arrOutput = [];\n   for (let month in groups) {\n      arrOutput.push({\n         month,\n         value: groups[month].value.reduce((a, b) => a + b, 0),\n         target: groups[month].target.reduce((a, b) => a + b, 0),\n      });\n   };\n   return arrOutput;\n};\n\n\n\n\n\n\n\n\n\n\n\nconst flattenAllTreeChildNode1 = (root) => {\n   let temp = [];\n   let queue = [...root];\n   while (queue.length > 0) {\n      let node = queue.shift();\n      if (node.children) {\n         let childNode = [];\n         node.children.forEach(nd => {\n            childNode.push({ ...nd, parentId: node.id });\n         });\n         queue = [...queue, ...childNode];\n         let nodeObj = { ...node };\n         delete nodeObj.children;\n         temp.push(nodeObj);\n      } else {\n         let nodeObj = { ...node };\n         delete nodeObj.children;\n         temp.push(nodeObj);\n      };\n   };\n   return temp;\n};\nconst getListOfBranchesTree = (inputArr) => {\n   const arr = inputArr.map(x => ({ ...x }));\n   arr.sort((a, b) => { return b.treeLevel - a.treeLevel });\n\n   const parentArrIds = [];\n   arr.forEach(x => {\n      let item = arr.find(fld => fld.id === x.parentId);\n      if (item) {\n         item.children = [...item.children || [], x];\n      } else {\n         parentArrIds.push(x.id);\n      };\n   });\n   return arr.filter(x => parentArrIds.indexOf(x.id) !== -1);\n};\nconst getTreeFlattenOfNodeInArray = (treeArray, node) => {\n   let obj = { ...node };\n   let arrayTree = treeArray.map(x => ({ ...x })).filter(x => x.treeLevel > obj.treeLevel);\n   arrayTree = [...arrayTree, obj];\n   const treeOfFound = getListOfBranchesTree(arrayTree).find(x => x.id === obj.id);\n   return flattenAllTreeChildNode1([treeOfFound]);\n};\nconst getUniqueValueByColumns = (rows, header) => {\n   let valueArr = [];\n   rows.forEach(row => valueArr.push(row[header]));\n   return [...new Set(valueArr)];\n};\nconst countDrawingsByColumnAndStatus = (rows, column) => {\n   let valueArray = getUniqueValueByColumns(rows, column).sort();\n\n   let arrCount = [];\n   let objDrawings = {};\n   valueArray.forEach(columnValue => {\n      if (columnValue !== 'NOT ASSIGNED') {\n         let rowsFilter = rows.filter(r => r[column] === columnValue);\n         let obj = {};\n         let objDwgs = {};\n         rowsFilter.forEach(r => {\n            obj[r.Status] = (obj[r.Status] || 0) + 1;\n            objDwgs[r.Status] = [...objDwgs[r.Status] || [], r];\n         });\n         obj.name = columnValue;\n         arrCount.push(obj);\n         objDrawings[columnValue] = objDwgs;\n      };\n   });\n\n   let rowsFilterNA = rows.filter(r => r[column] === 'NOT ASSIGNED');\n   let objNA = {};\n   let objDwgsNA = {};\n   rowsFilterNA.forEach(r => {\n      objNA[r.Status] = (objNA[r.Status] || 0) + 1;\n      objDwgsNA[r.Status] = [...objDwgsNA[r.Status] || [], r];\n   });\n   objNA.name = 'NOT ASSIGNED';\n\n   arrCount.unshift(objNA);\n   objDrawings['NOT ASSIGNED'] = objDwgsNA;\n\n\n   return { arrCount, objDrawings };\n};\n\nconst countDrawingsByRevAndStatus = (rows) => {\n   let valueArray = getUniqueValueByColumns(rows, 'Rev').sort();\n   valueArray.unshift('NS');\n\n   let arrCount = [];\n   let objDrawings = {};\n   valueArray.forEach(columnValue => {\n      let obj = {};\n      let objDwgs = {};\n      let rowsFilter;\n      if (columnValue !== 'NS') {\n         rowsFilter = rows.filter(r => {\n            return r['Rev'] === columnValue &&\n               r.Status !== 'Not Started' &&\n               r.Status !== '1st cut of model in-progress' &&\n               r.Status !== '1st cut of drawing in-progress';\n         });\n      } else {\n         rowsFilter = rows.filter(r => {\n            return r.Status === 'Not Started' ||\n               r.Status === '1st cut of model in-progress' ||\n               r.Status === '1st cut of drawing in-progress';\n         });\n      };\n      rowsFilter.forEach(r => {\n         obj[r.Status] = (obj[r.Status] || 0) + 1;\n         objDwgs[r.Status] = [...objDwgs[r.Status] || [], r];\n      });\n      obj.name = columnValue;\n      arrCount.push(obj);\n      objDrawings[columnValue] = objDwgs;\n   });\n   return { arrCount, objDrawings };\n};\nconst convertToInputDataForChart = (rows, rowsHistory, headers) => {\n\n   rows.forEach(r => {\n      if (!r.Rev) r.Rev = '0';\n      r.Rev = r.Rev.toUpperCase();\n\n      if (!r.Status) r.Status = 'Not Started';\n\n      if (!r.Modeller) r.Modeller = 'Not assigned';\n      r.Modeller = r.Modeller.toUpperCase();\n\n      if (!r['Coordinator In Charge']) r['Coordinator In Charge'] = 'Not assigned';\n      r['Coordinator In Charge'] = r['Coordinator In Charge'].toUpperCase();\n   });\n\n\n\n\n\n   let inputStack = getUniqueValueByColumns(rows, 'Status');\n\n\n   const { arrCount: barDrawingRevCount, objDrawings: barDrawingRevDrawings } = countDrawingsByRevAndStatus(rows);\n   let { arrCount: barDrawingModellerCount, objDrawings: barDrawingModellerDrawings } = countDrawingsByColumnAndStatus(rows, 'Modeller');\n   let { arrCount: barDrawingCoordinatorCount, objDrawings: barDrawingCoordinatorDrawings } = countDrawingsByColumnAndStatus(rows, 'Coordinator In Charge');\n\n   let itemNoData1 = barDrawingModellerCount.filter(x => x.name === 'Not assigned');\n   let itemRest1 = barDrawingModellerCount.filter(x => x.name !== 'Not assigned');\n   barDrawingModellerCount = [...itemNoData1, ...itemRest1];\n\n   let itemNoData2 = barDrawingCoordinatorCount.filter(x => x.name === 'Not assigned');\n   let itemRest2 = barDrawingCoordinatorCount.filter(x => x.name !== 'Not assigned');\n   barDrawingCoordinatorCount = [...itemNoData2, ...itemRest2];\n\n\n\n\n   let pieDrawingStatusCount = {};\n   let pieDrawingStatusDrawings = {};\n   inputStack.forEach(stt => {\n      let rowArr = rows.filter(r => r.Status === stt);\n      rowArr.forEach(r => {\n         pieDrawingStatusCount[stt] = (pieDrawingStatusCount[stt] || 0) + 1;\n      });\n      pieDrawingStatusDrawings[stt] = rowArr;\n   });\n\n\n   const drawingsLateSubmission = getDrawingLateNow1(rows, 'drawingsLateSubmission');\n   const drawingsLateApproval = getDrawingLateNow1(rows, 'drawingsLateApproval');\n   const drawingsLateStart = getDrawingLateNow1(rows, 'drawingsLateStart');\n   const drawingsLateConstruction = getDrawingLateNow1(rows, 'drawingsLateConstruction');\n\n\n\n\n\n   const revArray = ['0', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J'];\n   const allDwgsToResubmit = rows.filter(x => {\n      return x['Status'] === 'Approved with comments, to Resubmit' || x['Status'] === 'Reject and resubmit';\n   });\n\n\n   let objData = {};\n   allDwgsToResubmit.forEach(r => {\n      const columnIndex = revArray.indexOf(r['Rev'] || '0') + 1;\n      objData[columnIndex] = [...objData[columnIndex] || [], r];\n   });\n\n\n   let barDrawingResubmitDrawings = {};\n   let barDrawingResubmitCount = [];\n\n   Object.keys(objData).forEach(cl => {\n      const rows = objData[cl];\n      let rejectToResubmit = [];\n      let approvedPreviousVersion = [];\n      rows.forEach(row => {\n         const histories = rowsHistory.filter(r => r.row === row.id);\n         const found = histories.find(x => x['Status'] === 'Approved for Construction' || x['Status'] === 'Approved with Comment, no submission Required');\n         if (found) {\n            approvedPreviousVersion.push(row);\n         } else {\n            rejectToResubmit.push(row);\n         };\n      });\n      barDrawingResubmitCount.push({\n         'Approved in previous version but need resubmit': approvedPreviousVersion.length,\n         'Reject, to resubmit': rejectToResubmit.length,\n         name: cl\n      });\n      barDrawingResubmitDrawings[cl] = { \n         'Approved in previous version but need resubmit': approvedPreviousVersion,\n         'Reject, to resubmit': rejectToResubmit\n      };\n   });\n\n\n   return {\n      rows,\n      headers,\n\n      'Bar Drawing Rev': barDrawingRevDrawings,\n      barDrawingRevCount,\n      'Bar Drawing Modeller': barDrawingModellerDrawings,\n      barDrawingModellerCount,\n      'Bar Drawing Coordinator': barDrawingCoordinatorDrawings,\n      barDrawingCoordinatorCount,\n      'Bar Drawing Resubmit': barDrawingResubmitDrawings,\n      barDrawingResubmitCount,\n\n\n      'Pie Drawing Status': pieDrawingStatusDrawings,\n      pieDrawingStatusCount,\n\n\n      drawingsLateSubmission,\n      drawingsLateApproval,\n      drawingsLateStart,\n      drawingsLateConstruction\n\n   };\n};\n\n\nconst converHistoryData = (rowsHistory, headers) => {\n   return rowsHistory.map(rowH => {\n      let obj = {\n         row: rowH.row\n      };\n      const { history } = rowH;\n      if (history) {\n         headers.forEach(hd => {\n            if (history[hd.key]) obj[hd.text] = history[hd.key];\n         });\n      };\n      return obj;\n   });\n};\n\nconst splitRowsStatusByTrade = (rows, title) => {\n   const statusArray = [...new Set(rows.map(x => x['Status']))];\n   let obj = {};\n   let objCount = {};\n   statusArray.forEach(stt => {\n      const rowsFound = rows.filter(r => r['Status'] === stt);\n      obj[stt] = rowsFound;\n      objCount[stt] = rowsFound.length;\n   });\n   return {\n      objDrawings: obj,\n      objCount: { ...objCount, name: title }\n   }\n};\n\n\nexport const convertDataFromDB = (data, dataRowHistories, projectsArray) => {\n\n   let output = {\n      projectSplit: [],\n   };\n\n   const arrComparison = ['OVERALL', 'WH - ARCHI', 'WH - C&S', 'WH - M&E', 'WH - PRECAST', 'SUBCON'].map(item => ({\n      name: item,\n      data: []\n   }));\n\n\n   data.forEach(projectData => {\n\n      let { publicSettings: { headers, drawingTypeTree }, rows: rowsAllInProject, _id } = projectData;\n      const headersArrayText = headers.map(x => x.text);\n      const projectName = projectsArray.find(dt => dt.id === _id).name;\n\n\n      const historiesThisProject = dataRowHistories.find(x => x.projectId === _id).histories || [];\n\n      const dataRowHistoriesThisProject = converHistoryData(historiesThisProject, headers);\n      const dataInfoOverAll = convertToInputDataForChart(rowsAllInProject, dataRowHistoriesThisProject, headersArrayText);\n      let projectOutput = [{ panel: 'OVERALL', dataInfo: dataInfoOverAll }];\n\n      const found = arrComparison.find(x => x.name === 'OVERALL');\n      found.data.push({\n         projectName,\n         projectId: _id,\n         compareDrawingStatus: dataInfoOverAll.pieDrawingStatusCount,\n   \n         compareDrawingsLateSubmission: dataInfoOverAll.drawingsLateSubmission.length,\n         compareDrawingsLateApproval: dataInfoOverAll.drawingsLateApproval.length,\n         compareDrawingsLateStart: dataInfoOverAll.drawingsLateStart.length,\n         compareDrawingsLateConstruction: dataInfoOverAll.drawingsLateConstruction.length,\n      });\n\n      let objTradeStatus = {};\n      let arrTradeCount = [];\n      const wohhupNode = drawingTypeTree.find(x => x.treeLevel === 1 && x['Drawing Number'] === 'Woh Hup Private Ltd');\n      if (wohhupNode) {\n         const arrWHTrade = ['ARCHI', 'C&S', 'M&E', 'PRECAST'];\n         arrWHTrade.forEach(trade => {\n            const tradeNode = drawingTypeTree.find(x => {\n               return x.treeLevel === 2 && x['Drawing Number'] === trade && x.parentId === wohhupNode.id;\n            });\n            if (tradeNode) {\n               const allNodesUnderThisTrade = getTreeFlattenOfNodeInArray(drawingTypeTree, tradeNode);\n               const allIdsNode = [...new Set(allNodesUnderThisTrade.map(x => x.id))];\n               const rowsInThisTrade = rowsAllInProject.filter(x => allIdsNode.find(id => id === x._parentRow));\n\n\n               const rowsHistoriesThisTrade = dataRowHistoriesThisProject.filter(r => rowsInThisTrade.find(x => x._id === r.row));\n\n               const dataInfoThisTrade = convertToInputDataForChart(rowsInThisTrade, rowsHistoriesThisTrade, headersArrayText);\n\n               projectOutput.push({\n                  panel: 'WH - ' + trade,\n                  dataInfo: dataInfoThisTrade\n               });\n\n               const foundTrade = arrComparison.find(x => x.name === 'WH - ' + trade);\n               if (foundTrade) {\n                  foundTrade.data.push({\n                     projectName,\n                     projectId: _id,\n                     compareDrawingStatus: dataInfoThisTrade.pieDrawingStatusCount,\n\n                     compareDrawingsLateSubmission: dataInfoThisTrade.drawingsLateSubmission.length,\n                     compareDrawingsLateApproval: dataInfoThisTrade.drawingsLateApproval.length,\n                     compareDrawingsLateStart: dataInfoThisTrade.drawingsLateStart.length,\n                     compareDrawingsLateConstruction: dataInfoThisTrade.drawingsLateConstruction.length,\n                  });\n               };\n\n               const { objCount: objCountTrade, objDrawings: rowsTradeSplitStatus } = splitRowsStatusByTrade(rowsInThisTrade, 'WH - ' + trade);\n               objTradeStatus['WH - ' + trade] = rowsTradeSplitStatus;\n               arrTradeCount.push(objCountTrade);\n            };\n         });\n      };\n\n\n      const subconGroup = drawingTypeTree.filter(x => x.treeLevel === 1 && x['Drawing Number'] !== 'Woh Hup Private Ltd');\n      let allIsSubconAndUnder = [];\n      subconGroup.forEach(sb => {\n         const allNodesUnderThisSubcon = getTreeFlattenOfNodeInArray(drawingTypeTree, sb);\n         const allIdsNode = [...new Set(allNodesUnderThisSubcon.map(x => x.id))];\n         allIsSubconAndUnder = [...allIsSubconAndUnder, ...allIdsNode];\n      });\n      allIsSubconAndUnder = [...new Set(allIsSubconAndUnder)];\n      const rowsOfSubcon = rowsAllInProject.filter(x => allIsSubconAndUnder.find(id => id === x._parentRow));\n      const rowsHistoriesSubcon = dataRowHistoriesThisProject.filter(r => rowsOfSubcon.find(x => x._id === r.row));\n      const dataInfoSubcon = convertToInputDataForChart(rowsOfSubcon, rowsHistoriesSubcon, headersArrayText);\n      projectOutput.push({\n         panel: 'SUBCON',\n         dataInfo: dataInfoSubcon\n      });\n\n      const foundSubcon = arrComparison.find(x => x.name === 'SUBCON');\n      if (foundSubcon) {\n         foundSubcon.data.push({\n            projectName,\n            projectId: _id,\n            compareDrawingStatus: dataInfoSubcon.pieDrawingStatusCount,\n\n            compareDrawingsLateSubmission: dataInfoSubcon.drawingsLateSubmission.length,\n            compareDrawingsLateApproval: dataInfoSubcon.drawingsLateApproval.length,\n            compareDrawingsLateStart: dataInfoSubcon.drawingsLateStart.length,\n            compareDrawingsLateConstruction: dataInfoSubcon.drawingsLateConstruction.length,\n         });\n      };\n\n\n      const { objCount: objCountSubcon, objDrawings: rowsSubconSplitStatus } = splitRowsStatusByTrade(rowsOfSubcon, 'SUBCON');\n      objTradeStatus['SUBCON'] = rowsSubconSplitStatus;\n      arrTradeCount.push(objCountSubcon);\n\n      const overAllObj = projectOutput.find(x => x.panel === 'OVERALL');\n      overAllObj.dataInfo['Bar Drawing Trade'] = objTradeStatus;\n      overAllObj.dataInfo['barDrawingTradeCount'] = arrTradeCount;\n\n\n      output.projectSplit.push({\n         projectId: _id,\n         projectName,\n         dataProject: projectOutput\n      });\n   });\n\n   output.projectComparison = arrComparison;\n   // console.log('output--->>>', output);\n   return output;\n};\n\nexport const getRandomIntInclusive = (min, max) => {\n   min = Math.ceil(min);\n   max = Math.floor(max);\n   return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\n","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\DashboardLayout\\componentsDashboard\\FormPivot.js",["339"],"import { Button, Divider, Modal, Select } from 'antd';\nimport React, { useState } from 'react';\nimport { colorType } from '../assets/constantDashboard';\nimport ChartBarRecordPanel from './ChartBarRecordPanel';\n\n\n\nconst FormPivot = ({ projectName, data, openDrawingTable, dataRecordedDummy, projectId }) => {\n\n   const { panel, dataInfo: { headers, rows: rowsAll } } = data;\n\n\n   const [columnsHeaderSorted, setColumnsHeaderSorted] = useState(null);\n\n\n   const [titleLeft, setTitleLeft] = useState(headers.filter(x => {\n      return !x.includes('(A)') &&\n         !x.includes('(T)') &&\n         x !== 'Model Progress' &&\n         x !== 'Drawing' &&\n         x !== 'Drawing Progress';\n   }));\n\n\n   const [value, setValue] = useState('Select an option...');\n   const [chartRecord, setChartRecord] = useState(false);\n   const [modalConfirm, setModalConfirm] = useState(false);\n\n\n   const onChange = value => {\n      setValue('Select an option...');\n      setTitleLeft(titleLeft.filter(title => title !== value));\n      setColumnsHeaderSorted([...columnsHeaderSorted || [], value]);\n   };\n\n\n   const onResetHandle = () => {\n      setColumnsHeaderSorted(null);\n      setTitleLeft(headers);\n   };\n\n\n   const onRemoveCategory = (e) => {\n      const btnName = e.target.previousSibling.previousSibling.innerText;\n      setColumnsHeaderSorted(columnsHeaderSorted.filter(x => x !== btnName));\n      setTitleLeft([...titleLeft, btnName]);\n   };\n\n\n   const sortedTableOpen = () => {\n      if (!columnsHeaderSorted) {\n         openDrawingTable({\n            projectId,\n            panel,\n            type: 'Pivot Table All',\n         });\n      } else {\n         setModalConfirm(true);\n      }\n   };\n\n\n   const confirmShowSelected = (isShowSelectedOnly) => {\n      openDrawingTable({\n         projectId,\n         panel,\n         type: 'Pivot Table Group',\n         isShowSelectedOnly,\n         headersGroup: columnsHeaderSorted\n      });\n   };\n\n\n   return (\n      <div style={{ marginTop: '10px', padding: '20px' }}>\n         {columnsHeaderSorted && columnsHeaderSorted.map(cl => (\n            <div key={cl} style={{ display: 'flex', width: '100%', margin: '10px auto', padding: 5, border: `1px solid ${colorType.grey1}`, borderRadius: 3 }}>\n               <span style={{ marginRight: 5 }}>{cl}</span>\n               <Divider type='vertical' style={{ height: 21 }} />\n               <span\n                  style={{\n                     marginRight: 15,\n                     color: colorType.red,\n                     cursor: 'pointer',\n                     textAlign: 'center'\n                  }}\n                  onClick={onRemoveCategory}\n               >X</span>\n            </div>\n         ))}\n\n         <Select\n            value={value}\n            showSearch\n            style={{ width: '100%', margin: '0 auto', display: 'table' }}\n            placeholder='Select a title'\n            optionFilterProp='children'\n            onChange={onChange}\n            filterOption={(input, option) => option.props.children.toLowerCase().indexOf(input.toLowerCase()) >= 0}\n         >\n            {titleLeft.map(cl => (\n               <Select.Option value={cl} key={cl}>{cl}</Select.Option>\n            ))}\n         </Select>\n\n         <div style={{ display: 'flex', paddingBottom: '20px' }}>\n            <Button\n               style={{ background: colorType.grey0, width: '100%', margin: '10px auto' }}\n               onClick={sortedTableOpen}\n            >Go to sorted table</Button>\n\n            <Button\n               style={{ background: colorType.grey0, width: '100%', margin: '10px auto' }}\n               onClick={onResetHandle}\n            >Reset</Button>\n         </div>\n\n         <Divider type='horizontal' style={{ padding: '3px 0' }} />\n\n         <div style={{ fontSize: '18px', fontWeight: 'bold', width: '100%', textAlign: 'center', paddingBottom: '15px' }}>Chart report</div>\n         <Button\n            style={{ background: colorType.grey4, width: '100%' }}\n            onClick={() => setChartRecord(true)}\n         >Chart Report</Button>\n\n\n         <Modal\n            title={`Record ${projectName}`}\n            visible={chartRecord}\n            onCancel={() => setChartRecord(false)}\n            width={0.9 * window.innerWidth}\n            footer={null}\n            bodyStyle={{ padding: 15 }}\n         >\n            <ChartBarRecordPanel\n               data={dataRecordedDummy}\n            />\n         </Modal>\n\n         <Modal\n            title='Do you want to show all columns or selected one?'\n            visible={modalConfirm}\n            onCancel={() => setModalConfirm(false)}\n            footer={null}\n         >\n            <Button onClick={() => {\n               confirmShowSelected(true);\n               setModalConfirm(false);\n            }}\n               style={{ margin: 15 }}\n            >Show selected only</Button>\n\n            <Button onClick={() => {\n               confirmShowSelected(false);\n               setModalConfirm(false);\n            }}>Show all</Button>\n\n         </Modal>\n\n      </div>\n   );\n};\n\nexport default FormPivot;\n\n\n\n","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\DashboardLayout\\componentsDashboard\\TableDrawingList.js",["340","341"],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\contexts\\cellContext.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\contexts\\projectContext.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\contexts\\rowContext.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\generalComponents\\CellHeader.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\generalComponents\\InputSearch.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\generalComponents\\ViewTemplateSelect.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\generalComponents\\IconTable.js",["342"],"import { Icon, Tooltip } from 'antd';\nimport React, { useContext } from 'react';\nimport styled from 'styled-components';\nimport { colorType } from '../../constants';\nimport { Context as RowContext } from '../../contexts/rowContext';\n\n\n\nconst IconTable = (props) => {\n\n   const { type, onClick, isActivityTable } = props;\n\n   const { state: stateRow } = useContext(RowContext);\n\n\n   const modeGroup = stateRow && stateRow.modeGroup;\n   const modeFilter = stateRow && stateRow.modeFilter;\n   const modeSort = stateRow && stateRow.modeSort;\n\n   let disabled = false;\n   if (modeGroup && modeGroup.length > 0 && type !== 'swap' && type !== 'save') {\n      disabled = true;\n   };\n\n\n   return (\n      <Tooltip placement={type === 'menu' ? 'topLeft' : 'top'} title={toolTipBtn(type)}>\n         <DivStyled>\n            <IconStyled\n               style={{\n                  background: modeFilter && modeFilter.length > 0 && type === 'filter' && !isActivityTable ? colorType.grey1 :\n                     modeSort && Object.keys(modeSort).length === 3 && type === 'sort-ascending' ? colorType.grey1 :\n                        modeGroup && modeGroup.length > 0 && type === 'apartment' ? colorType.grey1 :\n                           null\n               }}\n               type={type}\n               onClick={onClick}\n               disabled={disabled}\n            />\n\n\n         </DivStyled>\n      </Tooltip>\n   );\n};\n\nexport default IconTable;\n\n\nconst toolTipBtn = (type) => {\n   return type === 'filter' ? 'Filter Data' :\n      type === 'apartment' ? 'Grouping Data' :\n         type === 'layout' ? 'Reorder Columns' :\n            type === 'sort-ascending' ? 'Sort Rows' :\n               type === 'search' ? 'Search' :\n                  type === 'save' ? 'Save' :\n                     type === 'highlight' ? 'Colorized Rows' :\n                        type === 'eye' ? 'Rows Hide/Unhide' :\n                           type === 'menu' ? 'Projects List' :\n                              type === 'swap' ? 'Clear Filter/Sort/Group/Search' :\n                                 type === 'history' ? 'Activity History' :\n                                    type === 'border-outer' ? 'PUBLIC' :\n                                       type === 'radius-upright' ? 'USER' :\n                                          type === 'save' ? 'Save' :\n                                             type === 'fullscreen-exit' ? 'Save SMARTSHEET To Server SUMANG' :\n                                                type === 'fall' ? 'Save SMARTSHEET To Server HANDY' :\n                                                   type === 'delete' ? 'Delete All Data In Every DB Collections' :\n                                                      type === 'pic-center' ? 'Save Random Rows To Server' :\n                                                         type === 'folder-add' ? 'Drawing Type Organization' :\n                                                            type === 'heat-map' ? 'Highlight Data Changed' :\n                                                               type === 'export' ? 'Export To Excel' :\n                                                                  type === 'plus' ? 'Save View Template' :\n                                                                     type === 'edit' ? 'Change User Name To Check Multi-User' :\n                                                                        type === 'upload' ? 'Upload Data To Server' :\n                                                                           type === 'rfa-button' ? 'Go To RFA View' :\n                                                                              type === 'plus-square' ? 'Add New RFA' :\n                                                                                 'No Title';\n};\n\nconst DivStyled = styled.div`\n   &:hover {\n      background-color: ${colorType.grey1}\n   };\n   transition: 0.2s;\n   border-radius: 5px;\n`;\n\n\nconst IconStyled = styled(Icon)`\n   border: ${props => props.disabled ? '1px solid grey' : '1px solid black'};\n   padding: 3px;\n   font-size: 17px;\n   margin: 3px;\n   border-radius: 5px;\n   color: ${props => props.disabled ? 'grey' : 'black'};\n   pointer-events: ${props => props.disabled && 'none'};\n`;\n\nconst IconRFA = styled.div`\n   &:hover {\n      cursor: pointer;\n   }\n   border: ${props => props.disabled ? '1px solid grey' : '1px solid black'};\n   padding: 3px;\n   font-size: 11.5px;\n   margin: 3px;\n   border-radius: 5px;\n   color: ${props => props.disabled ? 'grey' : 'black'};\n   pointer-events: ${props => props.disabled && 'none'};\n`;","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\generalComponents\\FormSort.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\pageDataEntrySheet\\Cell2.js",["343","344"],"import { Checkbox, message } from 'antd';\nimport moment from 'moment';\nimport React, { useContext, useEffect, useRef, useState } from 'react';\nimport styled from 'styled-components';\nimport { colorType, imgLink } from '../../constants';\nimport { Context as CellContext } from '../../contexts/cellContext';\nimport { Context as ProjectContext } from '../../contexts/projectContext';\nimport { Context as RowContext } from '../../contexts/rowContext';\nimport PanelCalendar from '../generalComponents/PanelCalendar';\n\n\n\n\nconst Cell2 = (props) => {\n\n   const {\n      rowData, column, columns, rowIndex, columnIndex, onRightClickCell,\n      setPosition, getCurrentDOMCell\n   } = props;\n\n   let { cellData } = props;\n\n\n   const { state: stateCell, getCellModifiedTemp, setCellActive } = useContext(CellContext);\n   const { state: stateRow, getSheetRows } = useContext(RowContext);\n   const { state: stateProject } = useContext(ProjectContext);\n\n\n   let { rowsAll, rowsSelected, rowsSelectedToMove } = stateRow;\n   const { role, publicSettings } = stateProject.allDataOneSheet;\n   const headerData = publicSettings.headers.find(hd => hd.text === column.key);\n\n   const isLockedColumn = headerData.roleCanEdit.indexOf(role.name) === -1;\n   const isLockedRow = rowData.treeLevel || rowData._rowLevel < 1;\n\n\n   let columnKeyToPutFolderName;\n   if (rowData.treeLevel || rowData._rowLevel < 1) {\n      columnKeyToPutFolderName = columns[1].key;\n   };\n\n\n   const inputRef = useRef();\n   const cellRef = useRef();\n   const panelRef = useRef();\n   const buttonRef = useRef();\n\n   const [inputRender, setInputRender] = useState(false);\n   const [valueInput, setValueInput] = useState({ current: cellData || '', init: cellData || '' });\n\n   const [btnShown, setBtnShown] = useState(false);\n   const [panelData, setPanelData] = useState(false);\n\n\n   const getCellTempId = () => `${rowData['id']}~#&&#~${column.key}`;\n\n   const cellEditDone = (value) => {\n\n      if (rowData._rowLevel === 1) {\n         if (\n            (headerData.type === 'date' && !(moment(value, 'DD/MM/YY').format('DD/MM/YY') === value) && value !== '') ||\n            (headerData.type === 'dropdown' && headerData.valueArray.indexOf(value) === -1 && value !== '')\n         ) {\n            setValueInput({ ...valueInput, current: valueInput.init });\n            message.info('Data input should be in correct format', 1);\n\n         } else if (headerData.type === 'checkbox') {\n            getCellModifiedTemp({ [getCellTempId()]: !value || value === 'unchecked' ? 'unchecked' : 'checked' });\n            let row = rowsAll.find(r => r.id === rowData.id);\n            row[column.key] = value ? 'checked' : 'unchecked';\n\n            getSheetRows({ ...stateRow, rowsAll });\n         } else {\n            setValueInput({ ...valueInput, current: value });\n\n            getCellModifiedTemp({ [getCellTempId()]: value });\n            let row = rowsAll.find(r => r.id === rowData.id);\n            row[column.key] = value;\n\n            getSheetRows({ ...stateRow, rowsAll });\n         };\n      };\n   };\n\n\n   const onDoubleClick = () => {\n      if (isLockedColumn || isLockedRow || headerData.type === 'checkbox') return;\n      setInputRender(true);\n      setBtnShown(false);\n      getCurrentDOMCell(); // double click to activate cell\n   };\n   const onClick = () => {\n      if (rowsSelected.length > 0 || rowsSelectedToMove.length > 0) {\n         getSheetRows({\n            ...stateRow, rowsSelected: [], rowsSelectedToMove: []\n         });\n      };\n      if (isLockedColumn || isLockedRow) return;\n      setBtnShown(true);\n      if (!inputRender) { // single click just highlight cell, not activate\n         setPosition({ cell: cellRef.current.parentElement, rowIndex, columnIndex });\n      };\n   };\n\n\n\n   useEffect(() => {\n      document.addEventListener('click', EventClickToHidePanelAndInput);\n      return () => document.removeEventListener('click', EventClickToHidePanelAndInput);\n   }, []);\n   const EventClickToHidePanelAndInput = (e) => {\n      if (!buttonRef.current && panelRef.current) {\n         setPanelData(false);\n      };\n   };\n\n\n   const onMouseLeave = () => {\n      if (btnShown) {\n         setBtnShown(false);\n      };\n   };\n   const onMouseDown = (e) => {\n      if (isLockedColumn) return;\n      if (e.button === 2) { // check mouse RIGHT CLICK ...\n         onRightClickCell(e, props);\n      };\n   };\n   const pickDataSelect = (value) => {\n      setBtnShown(false);\n      setPanelData(false);\n      setInputRender(false);\n      cellEditDone(value);\n   };\n   const onBlur = () => {\n      cellEditDone(valueInput.current);\n      setBtnShown(false);\n      setPanelData(false);\n      setInputRender(false);\n   };\n   const onChange = (e) => {\n      setValueInput({ ...valueInput, current: e.target.value });\n   };\n\n\n   const [checkBoxValue, setCheckBoxValue] = useState(cellData);\n   const onChangeCheckBox = () => {\n      setCheckBoxValue(!checkBoxValue || checkBoxValue === 'unchecked' ? 'checked' : 'unchecked');\n      cellEditDone(!checkBoxValue || checkBoxValue === 'unchecked' ? 'checked' : 'unchecked');\n   };\n\n\n   useEffect(() => { // after keydown ENTER to show input ...\n      if (\n         !inputRender &&\n         stateCell.cellActive &&\n         stateCell.cellActive.rowIndex === rowIndex &&\n         stateCell.cellActive.columnIndex === columnIndex &&\n         !isLockedColumn && !isLockedRow\n      ) {\n         setInputRender(true);\n      };\n   }, [stateCell.cellActive]);\n\n   useEffect(() => {\n      if (\n         !inputRender &&\n         stateCell.cellAppliedAction &&\n         stateCell.cellAppliedAction.currentDOMCell.rowIndex === rowIndex &&\n         stateCell.cellAppliedAction.currentDOMCell.columnIndex === columnIndex &&\n         !isLockedColumn && !isLockedRow\n      ) {\n         const { e } = stateCell.cellAppliedAction;\n         if (e.key === 'Delete') {\n            cellEditDone('');\n         } else if (e.key === 'v' && e.ctrlKey) {\n            cellEditDone(stateCell.tempCopiedText);\n         };\n      };\n   }, [stateCell.cellAppliedAction]);\n\n   useEffect(() => { // FOCUS right after press ENTER...\n      if (inputRender) inputRef.current.focus();\n   }, [inputRender]);\n\n   useEffect(() => { // Hide Button after pick on PANEL (setBtnShown fasle in pickDataSelect doesn't work)\n      setBtnShown(false);\n   }, [valueInput]);\n\n   const onKeyDown = (e) => { // ENTER to hide input after finishing typing ...\n      if (\n         e.key === 'Enter' &&\n         inputRender &&\n         stateCell.cellActive &&\n         stateCell.cellActive.rowIndex === rowIndex &&\n         stateCell.cellActive.columnIndex === columnIndex &&\n         !isLockedColumn\n      ) {\n         inputRef.current.blur();\n         setCellActive(null);\n      };\n   };\n\n\n   return (\n      <>\n         <div\n            ref={cellRef}\n            onDoubleClick={onDoubleClick}\n            onClick={onClick}\n            onMouseLeave={onMouseLeave}\n            onMouseDown={onMouseDown}\n            style={{\n               width: '100%', height: '100%', padding: 5,\n               position: 'relative',\n               color: 'black', background: 'transparent'\n            }}\n         >\n            {headerData.type !== 'checkbox' ? (\n               <>\n                  {inputRender ? (\n                     <input\n                        value={valueInput.current}\n                        onChange={onChange}\n                        onBlur={onBlur}\n                        onKeyDown={onKeyDown}\n                        ref={inputRef}\n                        style={{ outline: 'none', border: 'none', background: 'transparent', width: column.width - 30 }}\n                     />\n\n                  ) : (\n                     <div style={{\n                        textOverflow: 'ellipsis',\n                        overflow: 'hidden',\n                        whiteSpace: 'nowrap',\n                        width: column.width - 30,\n                     }}>\n                        {\n                           (columnKeyToPutFolderName && columnKeyToPutFolderName === column.key && rowData.title) ||\n                           stateCell.cellsModifiedTemp[getCellTempId()] ||  // there is modified data\n                           (getCellTempId() in stateCell.cellsModifiedTemp && ' ') || // there is modified data === empty, MUST BE ' ', not ''\n                           cellData // there is no modification\n                        }\n                     </div>\n                  )}\n               </>\n            ) : (\n               <>\n                  {rowData._rowLevel && rowData._rowLevel === 1 ? (\n                     <CheckboxStyled\n                        onChange={onChangeCheckBox}\n                        checked={checkBoxValue === 'checked' ? true : false}\n                     />\n                  ) : null}\n               </>\n            )}\n\n\n\n\n            {btnShown && headerData.type !== 'checkbox' && (\n               <div style={{\n                  cursor: 'pointer',\n                  position: 'absolute',\n                  right: 4,\n                  top: 5,\n                  height: 17,\n                  width: 17,\n                  backgroundImage: headerData.type === 'date' ? `url(${imgLink.btnDate})`\n                     : headerData.type === 'dropdown' ? `url(${imgLink.btnText})`\n                        : null,\n                  backgroundSize: 17\n               }}\n                  onMouseDown={(e) => {\n                     e.stopPropagation();\n                     setPanelData(!panelData);\n                  }}\n                  ref={buttonRef}\n               />\n            )}\n\n\n            {panelData && (\n               <div\n                  style={{\n                     position: 'absolute',\n                     background: 'white',\n                     top: 30,\n                     left: 0,\n                     minWidth: column.width,\n                     zIndex: 999,\n                     padding: '3px 5px 3px 7px',\n                     boxShadow: 'rgba(0, 0, 0, 0.09) 0px 2px 1px, rgba(0, 0, 0, 0.09) 0px 4px 2px, rgba(0, 0, 0, 0.09) 0px 8px 4px, rgba(0, 0, 0, 0.09) 0px 16px 8px, rgba(0, 0, 0, 0.09) 0px 32px 16px',\n                     maxHeight: 400,\n                     overflowY: 'scroll'\n                  }}\n                  ref={panelRef}\n               >\n                  {headerData.type === 'date' ? (\n                     <PanelCalendar pickDate={(item) => pickDataSelect(moment(item).format('DD/MM/YY'))} />\n                  ) : getColumnsValue(rowsAll, column.key, headerData).map(item => {\n                     return (\n                        <SelectStyled\n                           key={item}\n                           onMouseDown={(e) => {\n                              e.stopPropagation();\n                              pickDataSelect(item);\n                           }}\n                        >{item}</SelectStyled>\n                     );\n                  })}\n               </div>\n            )}\n\n         </div>\n      </>\n   );\n};\n\nexport default Cell2;\n\nconst SelectStyled = styled.div`\n   padding: 4px;\n   &:hover {\n      background-color: ${colorType.grey4};\n      cursor: pointer;\n   };\n   transition: 0.2s;\n`;\n\nconst CheckboxStyled = styled(Checkbox)`\n   \n   .ant-checkbox-inner {\n      border-radius: 0;\n   };\n`;\n\n\n\n\nconst getColumnsValue = (rows, headerKey, headerData) => {\n\n   if (headerData.type === 'dropdown') return headerData.valueArray;\n\n   let valueArr = [];\n   rows.filter(r => r._rowLevel === 1).forEach(row => {\n      valueArr.push(row[headerKey]);\n   });\n   valueArr = [...new Set(valueArr)].filter(e => e);\n   valueArr.sort((a, b) => a > b ? 1 : (b > a ? -1 : 0));\n\n   return valueArr;\n};\n\n\n\n\n\n","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\pageDataEntrySheet\\CellIndex2.js",["345"],"import React, { useContext } from 'react';\nimport styled from 'styled-components';\nimport { Context as CellContext } from '../../contexts/cellContext';\nimport { Context as RowContext } from '../../contexts/rowContext';\nimport { addZero } from '../../utils';\n\n\nconst CellIndex2 = ({ rowData }) => {\n\n    const { state: stateRow, getSheetRows } = useContext(RowContext);\n    const { state: stateCell, setCellActive } = useContext(CellContext);\n\n    const { rowsAll, rowsSelected } = stateRow;\n\n\n\n    const onClickCellIndex = () => {\n        setCellActive(null);\n        const row = rowsAll.find(x => x.id === rowData.id);\n        if (!rowsSelected.find(x => x.id === rowData.id) && rowData._rowLevel === 1) {\n            getSheetRows({\n                ...stateRow,\n                rowsSelected: [...rowsSelected, row],\n                rowsSelectedToMove: []\n            });\n        };\n    };\n\n    return (\n        <Styled onClick={onClickCellIndex}>\n            {rowData._rowLevel === 1 ? addZero(rowsAll.indexOf(rowsAll.find(r => r.id === rowData.id)) + 1) : ''}\n        </Styled>\n    );\n};\n\nexport default CellIndex2;\n\n\n\nconst Styled = styled.div`\n    color: grey;\n    font-size: 12px;\n\n    width: 100%;\n    height: 100%;\n    padding: 5px;\n    padding-right: 8px;\n    text-align: right\n\n`;\n\n","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\pageDataEntrySheet\\ExcelExport2.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\pageDataEntrySheet\\FormDrawingTypeOrder2.js",["346"],"import { Icon, Input, Modal, Tooltip } from 'antd';\nimport React, { useContext, useState } from 'react';\nimport SortableTree from 'react-sortable-tree';\nimport 'react-sortable-tree/style.css';\nimport styled from 'styled-components';\nimport { colorType } from '../../constants';\nimport { Context as ProjectContext } from '../../contexts/projectContext';\nimport { Context as RowContext } from '../../contexts/rowContext';\nimport { mongoObjectId } from '../../utils';\nimport ButtonGroupComp from '../generalComponents/ButtonGroupComp';\n\n\n\n\nconst FormDrawingTypeOrder2 = ({ onClickCancelModal, applyFolderOrganize }) => {\n\n    const { state: stateProject } = useContext(ProjectContext);\n    const { state: stateRow } = useContext(RowContext);\n\n    const { rowsAll } = stateRow;\n\n    const { projectName, projectId, role } = stateProject.allDataOneSheet;\n    const { drawingTypeTree, viewTemplateNodeId } = stateRow;\n\n\n    const [input, setInput] = useState(addProjectHeaderToTree(drawingTypeTree, projectName, projectId));\n\n    const [modalTitle, setModalTitle] = useState(null);\n    const [itemNode, setItemNode] = useState(null);\n    const [mergeList, setMergeList] = useState([]);\n\n    const addFolderBelow = (node) => {\n        node.children.push({\n            title: 'New Folder',\n            id: mongoObjectId(),\n            parentId: node.id,\n            treeLevel: node.treeLevel + 1,\n            expanded: true,\n            children: []\n        });\n        setInput(addProjectHeaderToTree(flattenAllTreeChildNode1(input[0].children), projectName, projectId));\n\n    };\n    const deleteFolder = (node) => {\n        setItemNode(node);\n        setModalTitle('Delete Folder');\n    };\n    const editFolderName = (node) => {\n        setItemNode(node);\n        setModalTitle('Edit Folder Name');\n    };\n    const mergeChildDrawings = (node) => {\n        setItemNode(node);\n        setModalTitle('Merge All Child Drawings');\n    };\n    const confirmAction = (modalTitle, text) => {\n        if (modalTitle === 'Delete Folder') {\n            let idsToDelete = flattenAllTreeChildNode1(itemNode.children).map(x => x.id);\n            idsToDelete.push(itemNode.id);\n\n            let currentNodeFlatten = flattenAllTreeChildNode1(input[0].children);\n            let outputArray = currentNodeFlatten.filter(x => idsToDelete.indexOf(x.id) === -1);\n            setInput(addProjectHeaderToTree(outputArray, projectName, projectId));\n\n        } else if (modalTitle === 'Merge All Child Drawings') {\n            let idsToMerge = flattenAllTreeChildNode1(itemNode.children).map(x => x.id);\n            let mergeListUpdate = [...mergeList];\n            idsToMerge.forEach(id => {\n                if (mergeList.indexOf(id) !== -1) {\n                    mergeListUpdate = mergeListUpdate.filter(x => x !== id);\n                };\n            });\n\n            setMergeList([...mergeListUpdate, itemNode.id]);\n\n            let currentNodeFlatten = flattenAllTreeChildNode1(input[0].children);\n            let outputArray = currentNodeFlatten.filter(x => idsToMerge.indexOf(x.id) === -1);\n\n            setInput(addProjectHeaderToTree(outputArray, projectName, projectId));\n\n        } else if (modalTitle === 'Edit Folder Name') {\n            itemNode.title = text;\n            setInput(addProjectHeaderToTree(flattenAllTreeChildNode1(input[0].children), projectName, projectId));\n        };\n\n        setModalTitle(null);\n    };\n\n    const treeFlatten = flattenAllTreeChildNode1(input);\n\n    let eyeShownInit;\n    if (viewTemplateNodeId) {\n        const nodeTreeFound = treeFlatten.find(x => x.id === viewTemplateNodeId);\n        if (nodeTreeFound) {\n            const br = getTreeFlattenOfNodeInArray(treeFlatten, nodeTreeFound);\n            eyeShownInit = br.map(x => x.id);\n        };\n    };\n    const [iconBtnEyeShownArr, setIconBtnEyeShownArr] = useState(eyeShownInit || []);\n    const [nodeIsolated, setNodeIsolated] = useState(viewTemplateNodeId || null);\n    const isolateView = (node) => {\n        setNodeIsolated(node.id);\n        const nodeFound = treeFlatten.find(x => x.id === node.id);\n        const branch = getTreeFlattenOfNodeInArray(treeFlatten, nodeFound);\n        setIconBtnEyeShownArr(branch.map(x => x.id));\n    };\n\n    return (\n        <Container>\n            <PanelStyled>\n                <SortableTreeStyled\n                    treeData={input}\n                    onChange={treeData => setInput(treeData)}\n                    canDrag={({ node }) => {\n                        if (node.treeLevel === 0) return false;\n                        if (!role.canEditParent) return false;\n                        return true;\n                    }}\n                    canDrop={({ prevParent, nextParent, node }) => {\n                        if (node.treeLevel === 0 || !nextParent || !prevParent ||\n                            (nextParent && nextParent.treeLevel !== node.treeLevel - 1)\n                        ) {\n                            return false;\n                        };\n                        return true;\n                    }}\n                    onMoveNode={({ nextParentNode, node }) => {\n                        updateChildrenNode([node], nextParentNode.treeLevel + 1 - node.treeLevel);\n                    }}\n                    isVirtualized={false}\n\n                    generateNodeProps={({ node }) => {\n\n                        const isEyeShownColor = iconBtnEyeShownArr.indexOf(node.id) !== -1 ? 'black' : '#DCDCDC';\n                        const isEyeShownType = iconBtnEyeShownArr.indexOf(node.id) !== -1 ? 'eye' : 'eye-invisible';\n\n                        return ({\n                            className: 'parent-tags',\n                            buttons:\n                                node.treeLevel === 0 ? [\n                                    <IconBtn type='plus' onClick={() => addFolderBelow(node)} />,\n                                    node.children.length > 0 && <IconBtn type='shrink' onClick={() => mergeChildDrawings(node)} />,\n                                    <IconBtn type={isEyeShownType} onClick={() => isolateView(node)} color={isEyeShownColor} />\n\n                                ] : [\n                                    <IconBtn type='plus' onClick={() => addFolderBelow(node)} />,\n                                    <IconBtn type='edit' onClick={() => editFolderName(node)} />,\n                                    <IconBtn type='delete' onClick={() => deleteFolder(node)} />,\n                                    node.children.length > 0 && <IconBtn type='shrink' onClick={() => mergeChildDrawings(node)} />,\n                                    <IconBtn type={isEyeShownType} onClick={() => isolateView(node)} color={isEyeShownColor} />\n                                ]\n                        });\n                    }}\n                />\n            </PanelStyled>\n\n            <div style={{ padding: 20, display: 'flex', flexDirection: 'row-reverse' }}>\n                <ButtonGroupComp\n                    onClickCancel={onClickCancelModal}\n                    onClickApply={() => applyFolderOrganize(input[0].children, mergeList, nodeIsolated)} // remove projectName item before apply...\n                />\n            </div>\n\n\n            {modalTitle && (\n                <ModalStyledSetting\n                    title={modalTitle}\n                    visible={modalTitle !== null ? true : false}\n                    footer={null}\n                    onCancel={() => setModalTitle(null)}\n                    destroyOnClose={true}\n                    centered={true}\n                    width={window.innerWidth * 0.6}\n                >\n                    <ConfirmOrEditNameModal\n                        modalTitle={modalTitle}\n                        confirmAction={confirmAction}\n                        itemNode={itemNode}\n                        input={input}\n                        rowsAll={rowsAll}\n                    />\n                </ModalStyledSetting>\n            )}\n\n        </Container>\n    );\n};\n\nexport default FormDrawingTypeOrder2;\n\n\nconst SortableTreeStyled = styled(SortableTree)`\n   .rst__node {\n      height: 45px !important;\n   }\n   .rst__rowContents {\n      min-width: fit-content;\n      background-color: transparent !important;\n   }\n`;\nconst IconStyle = styled(Icon)`\n   font-size: 14px;\n   margin: 2px;\n   padding: 4px;\n   &:hover {\n      background-color: ${colorType.grey0};\n   };\n`;\nconst ModalStyledSetting = styled(Modal)`\n    .ant-modal-content {\n        border-radius: 0;\n    }\n   .ant-modal-close {\n      display: none;\n   }\n   .ant-modal-header {\n      padding: 10px;\n   }\n   .ant-modal-title {\n        padding-left: 10px;\n        font-size: 20px;\n        font-weight: bold;\n   }\n   .ant-modal-body {\n      padding: 0;\n      display: flex;\n      justify-content: center;\n   }\n`;\nconst Container = styled.div`\n   height: ${`${window.innerHeight * 0.8}` + 'px'};\n   width: 100%;\n   display: flex;\n   flex-direction: column;\n`;\nconst PanelStyled = styled.div`\n   width: 100%;\n   float: right;\n   overflow-x: hidden;\n   border-bottom: 1px solid ${colorType.grey4};\n`;\nconst IconBtn = ({ type, onClick, color }) => {\n    const text = type === 'plus' ? 'Add Sub Folder'\n        : type === 'delete' ? 'Delete Folder'\n            : type === 'edit' ? 'Edit Name'\n                : type === 'eye' ? 'Isolate View'\n                    : type === 'eye-invisible' ? 'Isolate View'\n                        : 'Merge All Sub Folders'\n\n    return (\n        <Tooltip title={text}>\n            <IconStyle type={type} onClick={onClick} style={{ color: color || 'black' }} />\n        </Tooltip>\n    );\n};\n\n\nconst ConfirmOrEditNameModal = ({ modalTitle, confirmAction, itemNode, input, rowsAll }) => {\n\n    let dwgsToWarn = [];\n    if (modalTitle === 'Delete Folder') {\n        const currentTree = flattenAllTreeChildNode1(input[0].children);\n        const currentTreeNode = currentTree.find(x => x.id === itemNode.id);\n        const nodeArray = getTreeFlattenOfNodeInArray(currentTree, currentTreeNode);\n        nodeArray.forEach(nd => {\n            dwgsToWarn = [...dwgsToWarn, ...rowsAll.filter(x => x._parentRow === nd.id)];\n        });\n    };\n\n\n    const [value, setValue] = useState(null);\n    const onClickApplyModal = () => {\n        if (modalTitle === 'Delete Folder') {\n            confirmAction(modalTitle);\n        } else if (modalTitle === 'Edit Folder Name') {\n            confirmAction(modalTitle, value);\n        } else if (modalTitle === 'Merge All Child Drawings') {\n            confirmAction(modalTitle);\n        };\n    };\n    return (\n        <div style={{ padding: 20, width: '100%', maxHeight: window.innerHeight * 0.7 }}>\n            {modalTitle === 'Delete Folder' ? (\n                <div>\n                    <div>Are you sure to delete the folder <span style={{ fontWeight: 'bold' }}>{itemNode.title}</span>?</div>\n                    <div>All the <span style={{ fontWeight: 'bold' }}>{dwgsToWarn.length}</span> following drawings will be deleted accordingly</div>\n                </div>\n            ) : modalTitle === 'Merge All Child Drawings' ? (\n                <div>Are you sure to delete all sub folders and retains all drawings</div>\n            ) : (\n                <Input\n                    style={{ width: '100%' }}\n                    value={value || itemNode.title}\n                    onChange={(e) => setValue(e.target.value)}\n                />\n            )}\n\n            <div style={{ padding: 20, display: 'flex', flexDirection: 'row-reverse' }}>\n                <ButtonGroupComp\n                    onClickCancel={() => { }}\n                    onClickApply={onClickApplyModal}\n                />\n            </div>\n        </div>\n    );\n};\n\n\n\nexport const flattenAllTreeChildNode1 = (root) => {\n    let temp = [];\n    let queue = [...root];\n    while (queue.length > 0) {\n        let node = queue.shift();\n        if (node.children) {\n            let childNode = [];\n            node.children.forEach(nd => {\n                childNode.push({ ...nd, parentId: node.id });\n            });\n            queue = [...queue, ...childNode];\n            let nodeObj = { ...node };\n            delete nodeObj.children;\n            temp.push(nodeObj);\n        } else {\n            let nodeObj = { ...node };\n            delete nodeObj.children;\n            temp.push(nodeObj);\n        };\n    };\n    return temp;\n};\nexport const convertFlattenArraytoTree1 = (list) => {\n    let map = {}, node, roots = [], i;\n    for (i = 0; i < list.length; i += 1) {\n        map[list[i].id] = i;\n        if (list[i]._rowLevel !== 1) {\n            list[i].children = list[i].children || [];\n        };\n    };\n\n    let arrayOfTreeLevel = [];\n    list.forEach(tr => {\n        arrayOfTreeLevel.push(tr.treeLevel);\n    });\n    const treeLevelOfTopTree = Math.min(...arrayOfTreeLevel);\n\n    for (i = 0; i < list.length; i++) {\n        node = list[i];\n        if (node.treeLevel > treeLevelOfTopTree) {\n            list[map[node.parentId]].children.push(node);\n        } else {\n            roots.push(node);\n        };\n    };\n    return roots;\n};\nconst addProjectHeaderToTree = (tree, projectName, projectId) => {\n    return [{\n        title: projectName,\n        id: projectId,\n        treeLevel: 0,\n        expanded: true,\n        children: convertFlattenArraytoTree1(tree.map(x => ({ ...x })))\n    }];\n};\nconst updateChildrenNode = (arr, n) => {\n    arr.forEach(i => {\n        i.treeLevel = i.treeLevel + n;\n        if (i.children.length > 0) {\n            updateChildrenNode(i.children, n);\n        };\n    });\n};\nconst updateChildrenNodeTreeLevel = (arr) => {\n    arr.forEach(i => {\n        let childrenArr = i.children;\n        if (childrenArr && childrenArr.length > 0) {\n            childrenArr.forEach(ch => {\n                ch.treeLevel = i.treeLevel + 1;\n            });\n            updateChildrenNodeTreeLevel(childrenArr);\n        };\n    });\n};\nconst getListOfBranchesTree = (inputArr) => {\n    const arr = inputArr.map(x => ({ ...x }));\n    arr.sort((a, b) => { return b.treeLevel - a.treeLevel });\n\n    const parentArrIds = [];\n    arr.forEach(x => {\n        let item = arr.find(fld => fld.id === x.parentId);\n        if (item) {\n            item.children = [...item.children || [], x];\n        } else {\n            parentArrIds.push(x.id);\n        };\n    });\n    return arr.filter(x => parentArrIds.indexOf(x.id) !== -1);\n};\nexport const getTreeFlattenOfNodeInArray = (treeArray, node) => {\n    let obj = { ...node };\n    let arrayTree = treeArray.map(x => ({ ...x })).filter(x => x.treeLevel > obj.treeLevel);\n    arrayTree = [...arrayTree, obj];\n    const treeOfFound = getListOfBranchesTree(arrayTree).find(x => x.id === obj.id);\n    return flattenAllTreeChildNode1([treeOfFound]);\n};\nexport const compareCurrentTreeAndTreeFromDB = (treeFromCurrentInit, treeFromCurrentInput, treeDeletedFromCurrent, treeFromDBInput, treeDeletedFromDB) => {\n\n    let treeFromCurrent = treeFromCurrentInput.map(i => ({ ...i }));\n    let treeFromDB = treeFromDBInput.map(i => ({ ...i }));\n\n    // check if need to save tree or not\n    if (treeFromCurrent.length === treeFromCurrentInit.length) {\n        const stringTreeCurrent = treeFromCurrent.reduce((acc, current) => acc + `${current.id}-${current.parentId}-${current.title}-`, '');\n        const stringTreeInit = treeFromCurrentInit.reduce((acc, current) => acc + `${current.id}-${current.parentId}-${current.title}-`, '');\n        if (stringTreeCurrent === stringTreeInit) {\n            return {\n                needToSaveTree: false,\n                treeDBModifiedToSave: treeFromDB,\n                nodesToAddToDB: [],\n                nodesToRemoveFromDB: [],\n            };\n        };\n    };\n\n    let treeCurrentModified = removeNodesDeletedByOtherUsersFromTreeCurrent(treeFromCurrent, treeDeletedFromDB);\n\n    let { nodesToRemoveFromDB, treeFromDB: treeFromDBModified, nodesIdNoNeedToAddNew } = removeNodesDeletedByCurrentUserFromTreeDB(treeFromDB, treeDeletedFromCurrent, treeCurrentModified);\n\n    let { nodesToAddToDB, treeDBModifiedToSave: treeDBModified } = haveChangedNodesInDBAndNewNodesInCurrentBackToDB(treeFromDBModified, treeCurrentModified, treeFromCurrentInit, nodesIdNoNeedToAddNew);\n\n\n\n    // reorder item follow new order...\n    let treeDBModifiedToSave = [];\n    treeFromCurrentInput.forEach(item => {\n        const found = treeDBModified.find(x => x.id === item.id);\n        if (found) {\n            treeDBModifiedToSave.push(found);\n            treeDBModified = treeDBModified.filter(x => x.id !== found.id);\n        };\n    });\n    treeDBModifiedToSave = [...treeDBModifiedToSave, ...treeDBModified].sort((a, b) => { return a.treeLevel - b.treeLevel });\n\n    return {\n        needToSaveTree: true,\n        treeDBModifiedToSave,\n        nodesToAddToDB,\n        nodesToRemoveFromDB,\n    };\n};\nconst removeNodesDeletedByOtherUsersFromTreeCurrent = (treeCurrent, treeDeletedFromDB) => {\n    let idsToCheckCurrent = [];\n    treeDeletedFromDB.forEach(item => {\n        const found = treeCurrent.find(x => x.id === item.id);\n        if (found) {\n            idsToCheckCurrent = [\n                ...idsToCheckCurrent,\n                ...getTreeFlattenOfNodeInArray(treeCurrent, found).map(x => x.id)\n            ];\n        };\n    });\n    idsToCheckCurrent = [...new Set(idsToCheckCurrent)];\n\n    const nodesArray = treeCurrent.filter(x => idsToCheckCurrent.indexOf(x.id) !== -1);\n\n    const branchTrees = getListOfBranchesTree(nodesArray);\n\n    const newIdObj = {};\n    treeDeletedFromDB.forEach(item => {\n        newIdObj[item.id] = mongoObjectId();\n    });\n\n    branchTrees.forEach(tree => {\n        let flattenArray = flattenAllTreeChildNode1([tree]);\n        let isAbleToDelete = true;\n\n        flattenArray.forEach(item => {\n            if (!treeDeletedFromDB.find(x => x.id === item.id)) isAbleToDelete = false;\n        });\n\n        if (isAbleToDelete) {\n            treeCurrent = treeCurrent.filter(x => !flattenArray.find(item => item.id === x.id));\n        } else {\n            const arrayToModify = treeCurrent.filter(item => flattenArray.find(x => x.id === item.id));\n            treeDeletedFromDB.forEach(item => {\n                const found = arrayToModify.find(x => x.id === item.id);\n                if (found) {\n                    found.id = newIdObj[item.id];\n                };\n                const childrenFound = arrayToModify.filter(x => x.parentId === item.id);\n                if (childrenFound.length > 0) {\n                    childrenFound.forEach(child => {\n                        child.parentId = newIdObj[item.id];\n                    });\n                };\n            });\n        };\n    });\n    return treeCurrent;\n};\nconst removeNodesDeletedByCurrentUserFromTreeDB = (treeFromDB, treeDeletedFromCurrent, treeCurrent) => {\n    let listIdToRemoveFromDB = [];\n    treeDeletedFromCurrent.forEach(item => {\n        const found = treeFromDB.find(x => x.id === item.id);\n        if (found) {\n            listIdToRemoveFromDB = [\n                ...listIdToRemoveFromDB,\n                ...getTreeFlattenOfNodeInArray(treeFromDB, found).map(x => x.id)\n            ];\n        };\n    });\n\n    const nodesToRemoveFromDB = treeFromDB.filter(x => {\n        return listIdToRemoveFromDB.indexOf(x.id) !== -1 && !treeCurrent.find(item => item.id === x.id);\n    });\n    const nodesIdNoNeedToAddNew = listIdToRemoveFromDB.filter(id => treeCurrent.find(item => item.id === id))\n\n    treeFromDB = treeFromDB.filter(x => listIdToRemoveFromDB.indexOf(x.id) === -1);\n\n    return {\n        nodesToRemoveFromDB,\n        nodesIdNoNeedToAddNew,\n        treeFromDB\n    };\n};\nconst haveChangedNodesInDBAndNewNodesInCurrentBackToDB = (treeFromDB, treeCurrent, treeCurrentInit, nodesIdNoNeedToAddNew) => {\n    let nodesToAddToDB = [];\n    treeCurrent.forEach(item => {\n        if (!treeFromDB.find(x => x.id === item.id)) {\n            nodesToAddToDB.push(item);\n        };\n    });\n\n    let dwgTypeExistedInDBButLevelOrParentChangesArr = [];\n    let childrenIdsToWithdrawFromDB = [];\n    treeFromDB.forEach(item => {\n        const found = treeCurrent.find(r => r.id === item.id);\n        const foundInit = treeCurrentInit.find(r => r.id === item.id);\n        if (found && foundInit) {\n            if (found.title !== foundInit.title) item.title = found.title;\n\n            if (found.parentId !== item.parentId && found.parentId !== foundInit.parentId) {\n                dwgTypeExistedInDBButLevelOrParentChangesArr.push({ ...found, title: item.title });\n\n                const arrIdsChildrenInDB = getTreeFlattenOfNodeInArray(treeFromDB, item).filter((x, i) => i !== 0).map(x => x.id);\n\n                childrenIdsToWithdrawFromDB = [...childrenIdsToWithdrawFromDB, ...arrIdsChildrenInDB];\n            };\n        };\n    });\n    childrenIdsToWithdrawFromDB = [...new Set(childrenIdsToWithdrawFromDB)];\n\n    const dwgTypeToWithdrawFromDB = treeFromDB.filter(x => childrenIdsToWithdrawFromDB.indexOf(x.id) !== -1);\n\n    treeFromDB = treeFromDB.filter(item => {\n        return childrenIdsToWithdrawFromDB.indexOf(item.id) === -1 && !dwgTypeExistedInDBButLevelOrParentChangesArr.find(x => x.id === item.id)\n    });\n\n\n    const listBranchesTreeToPushToDB = getListOfBranchesTree([\n        ...nodesToAddToDB,\n        ...dwgTypeExistedInDBButLevelOrParentChangesArr,\n        ...dwgTypeToWithdrawFromDB\n    ]);\n\n    listBranchesTreeToPushToDB.forEach(itemTree => {\n        treeFromDB = [...treeFromDB, ...flattenAllTreeChildNode1([itemTree])];\n    });\n\n    const treeDBModifiedToSave = convertFlattenArraytoTree1(treeFromDB);\n    updateChildrenNodeTreeLevel(treeDBModifiedToSave);\n\n    return {\n        nodesToAddToDB: nodesToAddToDB.filter(item => nodesIdNoNeedToAddNew.indexOf(item.id) === -1),\n        treeDBModifiedToSave: flattenAllTreeChildNode1(treeDBModifiedToSave)\n    };\n};\n\n\n\n\n\n\n\n","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\pageDataEntrySheet\\PanelFunction2.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\pageDataEntrySheet\\PanelSetting2.js",["347","348","349","350","351","352","353","354","355","356","357","358","359"],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\pageSpreadsheet\\ButtonAdminCreateAndUpdateRows.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\pageSpreadsheet\\ButtonAdminCreateAndUpdateRowsHistory.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\pageSpreadsheet\\ButtonAdminDeleteRowsHistory.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\pageSpreadsheet\\ButtonAdminUploadData.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\pageSpreadsheet\\Cell.js",["360","361"],"import { message, Tooltip, Upload } from 'antd';\nimport moment from 'moment';\nimport React, { useContext, useEffect, useRef, useState } from 'react';\nimport styled from 'styled-components';\nimport { colorTextRow, colorType, imgLink } from '../../constants';\nimport { Context as CellContext } from '../../contexts/cellContext';\nimport { Context as ProjectContext } from '../../contexts/projectContext';\nimport { Context as RowContext } from '../../contexts/rowContext';\nimport PanelCalendar from '../generalComponents/PanelCalendar';\nimport { getTreeFlattenOfNodeInArray } from './FormDrawingTypeOrder';\n\n\nconst Cell = (props) => {\n\n   const {\n      rowData, column, rowIndex, columnIndex, onRightClickCell,\n      setPosition, getCurrentDOMCell\n   } = props;\n\n\n   let cellData = props.cellData;\n\n   if ((column.key.includes('(A)') || column.key.includes('(T)') ||\n      column.key === 'Construction Issuance Date' || column.key === 'Construction Start') &&\n      cellData && cellData.length === 10 && cellData.includes('-')) {\n      cellData = moment(cellData, 'YYYY-MM-DD').format('DD/MM/YY');\n   };\n\n\n\n   const { state: stateCell, getCellModifiedTemp, setCellActive } = useContext(CellContext);\n   const { state: stateProject } = useContext(ProjectContext);\n   const { state: stateRow, getSheetRows } = useContext(RowContext);\n   let { drawingTypeTree, rowsAll, modeGroup, rowsSelected, rowsSelectedToMove, modeFilter } = stateRow;\n\n   const { roleTradeCompany } = stateProject.allDataOneSheet;\n\n\n   let info = '';\n   if (rowData.treeLevel && column.key === 'Drawing Number') {\n      const node = drawingTypeTree.find(x => x.id === rowData.id);\n      const branches = getTreeFlattenOfNodeInArray(drawingTypeTree, node);\n\n      const branchesWithDrawing = branches.filter(x => !branches.find(y => y.parentId === x.id));\n\n      let rowsArr = [];\n      branchesWithDrawing.forEach(brch => {\n         rowsArr = [...rowsArr, ...rowsAll.filter(r => r._parentRow === brch.id)];\n      });\n      modeFilter.forEach(filter => {\n         if (filter.id) {\n            rowsArr = rowsArr.filter(r => r[filter.header] === filter.value);\n         };\n      });\n      let obj = {};\n      rowsArr.forEach(row => {\n         if (!row['Status'] || row['Status'] === 'INFO') {\n            obj['Not Started'] = (obj['Not Started'] || 0) + 1;\n         } else {\n            obj[row['Status']] = (obj[row['Status']] || 0) + 1;\n         }\n\n      });\n\n      let str = '';\n      Object.keys(obj).forEach((stt, i) => {\n         let code;\n         let init = i === 0 ? '' : ' + ';\n\n         if (stt === 'Not Started') code = 'NS';\n         if (stt === '1st cut of model in-progress') code = 'MIP';\n         if (stt === '1st cut of drawing in-progress') code = 'DIP';\n         if (stt === 'Pending design') code = 'PD';\n         if (stt === 'Consultant reviewing') code = 'CR';\n         if (stt === 'Reject and resubmit') code = 'RR';\n         if (stt === 'Approved with comments, to Resubmit') code = 'AR';\n         if (stt === 'Revise In-Progress') code = 'RP';\n         if (stt === 'Approved with Comment, no submission Required') code = 'AC';\n         if (stt === 'Approved for Construction') code = 'AP';\n         if (stt === 'INFO') code = 'NS';\n\n         str += `${init}${obj[stt]} ${code}`;\n\n      });\n      let end = rowsArr.length === 0 ? '' : ' : ';\n      info = ` - (${rowsArr.length} Drawings${end}${str})`;\n   };\n\n\n   const isLockedColumn = columnLocked(roleTradeCompany, rowData, modeGroup, column.key);\n   const isLockedRow = rowLocked(roleTradeCompany, rowData, modeGroup, drawingTypeTree);\n\n\n   const inputRef = useRef();\n   const cellRef = useRef();\n   const panelRef = useRef();\n   const buttonRef = useRef();\n\n   const [inputRender, setInputRender] = useState(false);\n   const [valueInput, setValueInput] = useState({ current: cellData || '', init: cellData || '' });\n\n   const [btnShown, setBtnShown] = useState(false);\n   const [panelData, setPanelData] = useState(false);\n\n   const cellDataTypeBtn = checkCellDateFormat(column.key);\n\n\n   const getCellTempId = () => `${rowData['id']}~#&&#~${column.key}`;\n\n   const cellEditDone = (value) => {\n      if (rowData._rowLevel === 1) {\n         if (\n            (cellDataTypeBtn === 'cell-type-date' && !(moment(value, 'DD/MM/YY').format('DD/MM/YY') === value) && value !== '') ||\n            (column.key === 'Status' && cellStatusFormat.indexOf(value) === -1 && value !== '') ||\n            (column.key === 'Use For' && cellUseForFormat.indexOf(value) === -1 && value !== '') ||\n            (column.key === 'Drg Type' && cellDrgTypeFormat.indexOf(value) === -1 && value !== '') ||\n            ((column.key === 'Model Progress' || column.key === 'Drawing Progress') && cellProgressFormatData.indexOf(value) === -1 && value !== '')\n         ) {\n            setValueInput({ ...valueInput, current: valueInput.init });\n            message.info('Data input should be in correct format', 1);\n         } else {\n            setValueInput({ ...valueInput, current: value });\n\n            getCellModifiedTemp({ [getCellTempId()]: value });\n            let row = rowsAll.find(r => r.id === rowData.id);\n            row[column.key] = value;\n\n            getSheetRows({\n               ...stateRow,\n               rowsAll\n            });\n         };\n      };\n   };\n\n\n   const onDoubleClick = () => {\n      if (isLockedColumn || isLockedRow) return;\n      setInputRender(true);\n      setBtnShown(false);\n      getCurrentDOMCell(); // double click to activate cell\n   };\n   const onClick = () => {\n      if (rowsSelected.length > 0 || rowsSelectedToMove.length > 0) {\n         getSheetRows({\n            ...stateRow, rowsSelected: [], rowsSelectedToMove: []\n         });\n      };\n      if (isLockedColumn || isLockedRow) return;\n      setBtnShown(true);\n      if (!inputRender) { // single click just highlight cell, not activate\n         setPosition({ cell: cellRef.current.parentElement, rowIndex, columnIndex });\n      };\n\n      if (rowsSelected.length > 0) {\n         getSheetRows({ ...stateRow, rowsSelected: [] });\n      };\n   };\n\n\n\n   useEffect(() => {\n      document.addEventListener('click', EventClickToHidePanelAndInput);\n      return () => document.removeEventListener('click', EventClickToHidePanelAndInput);\n   }, []);\n   const EventClickToHidePanelAndInput = (e) => {\n      if (!buttonRef.current && panelRef.current) {\n         setPanelData(false);\n      };\n   };\n\n\n   const onMouseLeave = () => {\n      setBtnShown(false);\n   };\n   const onMouseDown = (e) => {\n      if (e.button === 2) { // check mouse RIGHT CLICK ...\n         onRightClickCell(e, props);\n      } else {\n         if (isLockedColumn || isLockedRow) return;\n      };\n   };\n   const pickDataSelect = (type, value) => {\n      setBtnShown(false);\n      setPanelData(false);\n      setInputRender(false);\n      if (type === 'text') {\n         cellEditDone(value);\n      } else if (type === 'date') {\n         cellEditDone(moment(value).format('DD/MM/YY'));\n      } else if (type === 'div') {\n         cellEditDone(value.props.type);\n      };\n   };\n   const onBlur = () => {\n      cellEditDone(valueInput.current);\n      setBtnShown(false);\n      setPanelData(false);\n      setInputRender(false);\n   };\n   const onChange = (e) => {\n      setValueInput({ ...valueInput, current: e.target.value });\n   };\n\n   useEffect(() => { // after keydown ENTER to show input ...\n      if (\n         !inputRender &&\n         stateCell.cellActive &&\n         stateCell.cellActive.rowIndex === rowIndex &&\n         stateCell.cellActive.columnIndex === columnIndex &&\n         !isLockedColumn && !isLockedRow\n      ) {\n         setInputRender(true);\n      };\n   }, [stateCell.cellActive]);\n\n\n   useEffect(() => {\n      if (\n         !inputRender &&\n         stateCell.cellAppliedAction &&\n         stateCell.cellAppliedAction.currentDOMCell.rowIndex === rowIndex &&\n         stateCell.cellAppliedAction.currentDOMCell.columnIndex === columnIndex &&\n         !isLockedColumn && !isLockedRow\n      ) {\n         const { e } = stateCell.cellAppliedAction;\n         if (e.key === 'Delete') {\n            cellEditDone('');\n         } else if (e.key === 'v' && e.ctrlKey) {\n            cellEditDone(stateCell.tempCopiedText);\n         };\n      };\n   }, [stateCell.cellAppliedAction]);\n\n   useEffect(() => { // FOCUS right after press ENTER...\n      if (inputRender) inputRef.current.focus();\n   }, [inputRender]);\n\n   useEffect(() => { // Hide Button after pick on PANEL (setBtnShown fasle in pickDataSelect doesn't work)\n      setBtnShown(false);\n   }, [valueInput]);\n\n   const onKeyDown = (e) => { // ENTER to hide input after finishing typing ...\n      if (\n         e.key === 'Enter' &&\n         inputRender &&\n         stateCell.cellActive &&\n         stateCell.cellActive.rowIndex === rowIndex &&\n         stateCell.cellActive.columnIndex === columnIndex &&\n         !isLockedColumn && !isLockedRow\n      ) {\n         inputRef.current.blur();\n         setCellActive(null);\n      };\n   };\n\n\n\n   const onChangeUploadFile = (info) => {\n\n   };\n\n\n   return (\n      <>\n         <div\n            ref={cellRef}\n            onDoubleClick={onDoubleClick}\n            onClick={onClick}\n            onMouseLeave={onMouseLeave}\n            onMouseDown={onMouseDown}\n            style={{\n               width: '100%',\n               height: '100%',\n               padding: 5,\n               paddingLeft: cellDataTypeBtn === 'cell-type-upload' ? 30 : 5,\n               position: 'relative',\n               color: 'black',\n               background: 'transparent',\n               overflow: !rowData.treeLevel && column.key === 'Drawing Number' ? 'hidden' : 'visible' // fix bug frozen panel move to the left\n            }}\n         >\n            {inputRender ? (\n               <input\n                  value={valueInput.current}\n                  onChange={onChange}\n                  onBlur={onBlur}\n                  onKeyDown={onKeyDown}\n                  ref={inputRef}\n                  style={{\n                     outline: 'none',\n                     border: 'none',\n                     background: 'transparent',\n                     width: column.width - 30\n                  }}\n               />\n\n            ) : (\n               <div style={{\n                  textOverflow: column.key === 'Drawing Number' ? 'unset' : 'ellipsis',\n                  overflow: column.key === 'Drawing Number' ? 'visible' : 'hidden',\n                  whiteSpace: 'nowrap',\n                  width: column.width - 30,\n                  color: colorTextRow[rowData['Status']] || 'black'\n               }}>\n                  {\n                     ((column.key === 'Model Progress' || column.key === 'Drawing Progress') && <BtnProgress type={cellData} />) ||\n                     (\n                        column.key === 'Drawing Number' && \n                        (rowData.treeLevel || rowData._rowLevel < 1) && \n                        <><span style={{ fontWeight: 'bold' }}>{cellData}</span><span>{info}</span></>\n                     ) ||\n                     stateCell.cellsModifiedTemp[getCellTempId()] ||  // there is modified data\n                     (getCellTempId() in stateCell.cellsModifiedTemp && ' ') || // there is modified data === empty, MUST BE ' ', not ''\n                     cellData // there is no modification\n                  }\n               </div>\n            )\n            }\n\n\n            {btnShown && !cellBtnDisabled(column.key) && (\n               <>\n                  {cellDataTypeBtn === 'cell-type-upload' ? (\n                     <Upload\n                        name='file' accept='application/pdf' multiple={false}\n                        headers={{ authorization: 'authorization-text' }}\n                        showUploadList={false}\n                        beforeUpload={() => {\n                           return false;\n                        }}\n                        onChange={onChangeUploadFile}\n                     >\n                        <Tooltip placement='topRight' title='Upload Drawing'>\n                           <div style={{\n                              cursor: 'pointer',\n                              position: 'absolute',\n                              left: 4,\n                              top: 5,\n                              height: 17,\n                              width: 17,\n                              backgroundImage: `url(${imgLink.btnFileUpload})`,\n                              backgroundSize: 17\n                           }}\n                              ref={buttonRef}\n                           />\n                        </Tooltip>\n                     </Upload>\n                  ) : (\n                     <div style={{\n                        cursor: 'pointer',\n                        position: 'absolute',\n                        right: 4,\n                        top: 5,\n                        height: 17,\n                        width: 17,\n                        backgroundImage: cellDataTypeBtn === 'cell-type-date' ? `url(${imgLink.btnDate})`\n                           : cellDataTypeBtn === 'cell-type-text' ? `url(${imgLink.btnText})`\n                              : null,\n                        backgroundSize: 17\n                     }}\n                        onMouseDown={(e) => {\n                           e.stopPropagation();\n                           setPanelData(!panelData);\n                        }}\n                        ref={buttonRef}\n                     />\n                  )}\n               </>\n            )}\n\n\n\n            {panelData && (\n               <div style={{\n                  position: 'absolute',\n                  background: 'white',\n                  top: 30,\n                  left: 0,\n                  minWidth: column.width,\n                  zIndex: 999,\n                  padding: '3px 5px 3px 7px',\n                  boxShadow: 'rgba(0, 0, 0, 0.09) 0px 2px 1px, rgba(0, 0, 0, 0.09) 0px 4px 2px, rgba(0, 0, 0, 0.09) 0px 8px 4px, rgba(0, 0, 0, 0.09) 0px 16px 8px, rgba(0, 0, 0, 0.09) 0px 32px 16px',\n\n                  maxHeight: 400,\n                  overflowY: 'scroll'\n\n               }}\n                  ref={panelRef}\n               >\n                  {cellDataTypeBtn === 'cell-type-date' ? (\n                     <PanelCalendar pickDate={(item) => pickDataSelect('date', item)} />\n                  ) : getColumnsValue(rowsAll, column.key).map(item => {\n                     return (\n                        <SelectStyled\n                           key={(column.key === 'Drawing Progress' || column.key === 'Model Progress') ? item.key : item}\n                           onMouseDown={(e) => {\n                              e.stopPropagation();\n                              if (column.key === 'Drawing Progress' || column.key === 'Model Progress') {\n                                 pickDataSelect('div', item);\n                              } else {\n                                 pickDataSelect('text', item);\n                              };\n                           }}\n                        >{item}</SelectStyled>\n                     );\n                  })}\n               </div>\n            )}\n         </div>\n      </>\n   );\n};\n\nexport default Cell;\n\nconst SelectStyled = styled.div`\n   padding: 4px;\n   &:hover {\n      background-color: ${colorType.grey4};\n      cursor: pointer;\n   };\n   transition: 0.2s;\n`;\n\n\nconst BtnProgress = ({ type }) => {\n   const img = type === 'Empty' ? imgLink.btnProgress0 :\n      type === 'Quarter' ? imgLink.btnProgress1 :\n         type === 'Half' ? imgLink.btnProgress2 :\n            type === 'Third Quarter' ? imgLink.btnProgress3 :\n               type === 'Full' ? imgLink.btnProgress4 :\n                  null;\n\n   return (\n      <div style={{ display: 'flex', textAlign: 'center', width: '100%' }}>\n         <div style={{\n            cursor: 'pointer',\n            height: 20,\n            width: 20,\n            backgroundImage: `url(${img})`,\n            backgroundSize: 20,\n            padding: 0\n         }}\n         />\n      </div>\n   );\n};\nconst cellProgressFormat = [\n   <BtnProgress key='0' type='Empty' />,\n   <BtnProgress key='1' type='Quarter' />,\n   <BtnProgress key='2' type='Half' />,\n   <BtnProgress key='3' type='Third Quarter' />,\n   <BtnProgress key='4' type='Full' />,\n];\nconst cellProgressFormatData = [\n   'Empty', 'Quarter', 'Half', 'Third Quarter', 'Full'\n];\n\nconst checkCellDateFormat = (header) => {\n   if (\n      header.includes('(A)') ||\n      header.includes('(T)') ||\n      header === 'Construction Issuance Date' ||\n      header === 'Construction Start'\n   ) return 'cell-type-date';\n   else if (header === 'Drawing') return 'cell-type-upload';\n   else if (header === 'Index' || header === 'Drawing Number' || header === 'Drawing Name') return 'cell-type-none';\n   else return 'cell-type-text';\n};\nconst cellBtnDisabled = (headerId) => {\n   if (headerId === 'Index' || headerId === 'Drawing Number' || headerId === 'Drawing Name') return true;\n};\nconst getColumnsValue = (rows, headerKey) => {\n   let valueArr = [];\n   rows.filter(r => r._rowLevel === 1).forEach(row => {\n      valueArr.push(row[headerKey]);\n   });\n   valueArr = [...new Set(valueArr)].filter(e => e);\n   valueArr.sort((a, b) => a > b ? 1 : (b > a ? -1 : 0));\n\n   if (headerKey === 'Status') return cellStatusFormat;\n   if (headerKey === 'Use For') return cellUseForFormat;\n   if (headerKey === 'Drg Type') return cellDrgTypeFormat;\n   if (headerKey === 'Model Progress' || headerKey === 'Drawing Progress') return cellProgressFormat;\n   return valueArr;\n};\n\nconst cellStatusFormat = [\n   'Not Started',\n   '1st cut of model in-progress',\n   '1st cut of drawing in-progress',\n   'Pending design',\n   'Consultant reviewing',\n   'Reject and resubmit',\n   'Approved with comments, to Resubmit',\n   'Revise In-Progress',\n   'Approved with Comment, no submission Required',\n   'Approved for Construction',\n];\n\n\n\nconst cellUseForFormat = [\n   'Coordination',\n\t'Issue for Construction',\n\t'Request for Approval',\n\t'Request for Confirmation',\n];\nconst cellDrgTypeFormat = [\n   'Key plan',\n   'Column wall setting out',\n   'Tile layout & detail',\n   'Reflected celing plan',\n   'Finishing layout',\n   'Door layout',\n   'Core layout & detail',\n   'Toilet',\n   'Edeck layout & detail',\n   'Staircase layout & detail',\n   'Surface drain',\n   'Lift lobby/ corridor',\n   'Material schedule',\n   'Other'\n];\n\nconst columnsLockedModeller = [\n   'Model Start (T)',\n   'Model Finish (T)',\n   'Drawing Start (T)',\n   'Drawing Finish (T)',\n   'Drg To Consultant (T)',\n   'Consultant Reply (T)',\n   'Get Approval (T)',\n   'Construction Issuance Date',\n   'Construction Start',\n];\n\nexport const columnLocked = (roleTradeCompany, rowData, modeGroup, column) => {\n   if (\n      column === 'Drawing' ||\n      (rowData && !rowData._rowLevel) || // lock drawing type ...\n      modeGroup.length > 0 ||\n      (roleTradeCompany.role === 'Modeller' && columnsLockedModeller.includes(column)) ||\n      (roleTradeCompany.role === 'View-Only User') ||\n      (roleTradeCompany.role === 'Production' && column !== 'Construction Start')\n   ) {\n      return true;\n   } else {\n      return false;\n   };\n};\nexport const rowLocked = (roleTradeCompany, rowData, modeGroup, drawingTypeTree) => {\n   if (!rowData._rowLevel || rowData._rowLevel < 1) return true;\n   if (modeGroup.length > 0) return true;\n   if (roleTradeCompany.role === 'Document Controller') return false;\n\n\n   const drawingTypeTreeClone = drawingTypeTree.map(x => ({ ...x }));\n   const dwgType = drawingTypeTreeClone.find(x => x.id === rowData._parentRow);\n\n   let companyName;\n   if (dwgType.treeLevel >= 1) {\n      companyName = getCompanyNameTextFnc(dwgType, drawingTypeTreeClone);\n   };\n\n   if (roleTradeCompany.role === 'Production' && companyName === 'Woh Hup Private Ltd') return false;\n\n\n   let tradeName;\n   if (companyName === 'Woh Hup Private Ltd' && dwgType.treeLevel >= 2) {\n\n      tradeName = getTradeNameTextFnc(dwgType, drawingTypeTreeClone);\n\n      return companyName !== roleTradeCompany.company || tradeName !== roleTradeCompany.trade;\n   } else {\n      return companyName !== roleTradeCompany.company;\n   };\n};\n\n\nexport const getCompanyNameTextFnc = (dwgType, drawingTypeTreeClone) => {\n   if (dwgType.treeLevel === 1) return dwgType['Drawing Number'];\n   let result;\n   const getCompanyFnc = (dwgType, dwgTypeTree) => {\n      const parent = dwgTypeTree.find(x => x.id === dwgType.parentId);\n      if (parent.treeLevel === 1) {\n         result = parent['Drawing Number'];\n      } else {\n         getCompanyFnc(parent, dwgTypeTree);\n      };\n      return result;\n   };\n   getCompanyFnc(dwgType, drawingTypeTreeClone);\n   return result;\n};\nexport const getTradeNameTextFnc = (dwgType, drawingTypeTreeClone) => {\n   const tree = drawingTypeTreeClone.filter(x => x.treeLevel !== 1);\n   if (dwgType.treeLevel === 2) return dwgType['Drawing Number'];\n   let result;\n   const getTradeFnc = (dwgType, dwgTypeTree) => {\n      const parent = dwgTypeTree.find(x => x.id === dwgType.parentId);\n      if (parent.treeLevel === 2) {\n         result = parent['Drawing Number'];\n      } else {\n         getTradeFnc(parent, dwgTypeTree);\n      };\n      return result;\n   };\n   getTradeFnc(dwgType, tree);\n   return result;\n};\n\n\n","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\pageSpreadsheet\\ButtonAdminUploadDataPDD.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\pageSpreadsheet\\FormDrawingTypeOrder.js",["362","363"],"import { Icon, Input, Modal, Tooltip } from 'antd';\nimport React, { useContext, useState } from 'react';\nimport { DraggableArea } from 'react-draggable-tags';\nimport SortableTree from 'react-sortable-tree';\nimport 'react-sortable-tree/style.css';\nimport styled from 'styled-components';\nimport { colorType } from '../../constants';\nimport { Context as ProjectContext } from '../../contexts/projectContext';\nimport { Context as RowContext } from '../../contexts/rowContext';\nimport { mongoObjectId } from '../../utils';\nimport ButtonColumnTag from '../generalComponents/ButtonColumnTag';\nimport ButtonGroupComp from '../generalComponents/ButtonGroupComp';\n\n\n\nconst FormDrawingTypeOrder = ({ onClickCancelModal, applyFolderOrganize }) => {\n\n   const { state: stateProject } = useContext(ProjectContext);\n   const { state: stateRow } = useContext(RowContext);\n\n   const { rowsAll } = stateRow;\n\n   const { companies, projectName, roleTradeCompany } = stateProject.allDataOneSheet;\n   const { drawingTypeTree, viewTemplateNodeId } = stateRow;\n\n\n   const [input, setInput] = useState(addProjectHeaderToTree(drawingTypeTree, projectName));\n\n   const [tradeAndCompanyAndType, setTradeAndCompanyAndType] = useState(null);\n   const [modalTitle, setModalTitle] = useState(null);\n   const [itemNode, setItemNode] = useState(null);\n   const [mergeList, setMergeList] = useState([]);\n\n   const onClickApplyTradeOrCompany = ({ node, itemsAdded }) => {\n      itemsAdded.forEach(item => {\n         node.children.push({\n            title: item,\n            id: mongoObjectId(),\n            parentId: node.id,\n            treeLevel: node.treeLevel + 1,\n            expanded: true,\n            children: [],\n         });\n      });\n      setInput(addProjectHeaderToTree(flattenAllTreeChildNode1(input[0].children), projectName));\n      setTradeAndCompanyAndType(null);\n   };\n   const addFolderBelow = (node) => {\n      if (node.treeLevel === 0) {\n         setTradeAndCompanyAndType({ node, dataTreeArray: companies.map(x => x.company) });\n      } else if (node.treeLevel === 1 && node.title === 'Woh Hup Private Ltd') {\n         setTradeAndCompanyAndType({ node, dataTreeArray: ['ARCHI', 'C&S', 'M&E', 'PRECAST'] });\n      } else if ((node.treeLevel >= 1 && node.title !== 'Woh Hup Private Ltd') || (node.treeLevel >= 2 && node.title === 'Woh Hup Private Ltd')) {\n         node.children.push({\n            title: 'New Drawing Type',\n            id: mongoObjectId(),\n            parentId: node.id,\n            treeLevel: node.treeLevel + 1,\n            expanded: true,\n            children: []\n         });\n         setInput(addProjectHeaderToTree(flattenAllTreeChildNode1(input[0].children), projectName));\n         setTradeAndCompanyAndType(null);\n      };\n   };\n   const deleteFolder = (node) => {\n      setItemNode(node);\n      setModalTitle('Delete Drawing Type');\n   };\n   const editFolderName = (node) => {\n      setItemNode(node);\n      setModalTitle('Edit Drawing Type Name');\n   };\n   const mergeChildDrawings = (node) => {\n      setItemNode(node);\n      setModalTitle('Merge All Child Drawings');\n   };\n   const confirmAction = (modalTitle, text) => {\n      if (modalTitle === 'Delete Drawing Type') {\n         let idsToDelete = flattenAllTreeChildNode1(itemNode.children).map(x => x.id);\n         idsToDelete.push(itemNode.id);\n\n         let currentNodeFlatten = flattenAllTreeChildNode1(input[0].children);\n         let outputArray = currentNodeFlatten.filter(x => idsToDelete.indexOf(x.id) === -1);\n         setInput(addProjectHeaderToTree(outputArray, projectName));\n\n      } else if (modalTitle === 'Merge All Child Drawings') {\n         let idsToMerge = flattenAllTreeChildNode1(itemNode.children).map(x => x.id);\n         let mergeListUpdate = [...mergeList];\n         idsToMerge.forEach(id => {\n            if (mergeList.indexOf(id) !== -1) {\n               mergeListUpdate = mergeListUpdate.filter(x => x !== id);\n            };\n         });\n         // setMergeList({ ...mergeList, [itemNode.id]: idsToMerge });\n         setMergeList([...mergeListUpdate, itemNode.id]);\n\n         let currentNodeFlatten = flattenAllTreeChildNode1(input[0].children);\n         let outputArray = currentNodeFlatten.filter(x => idsToMerge.indexOf(x.id) === -1);\n\n         setInput(addProjectHeaderToTree(outputArray, projectName));\n\n      } else if (modalTitle === 'Edit Drawing Type Name') {\n         itemNode.title = text;\n         setInput(addProjectHeaderToTree(flattenAllTreeChildNode1(input[0].children), projectName));\n      };\n      setTradeAndCompanyAndType(null);\n      setModalTitle(null);\n   };\n\n   const isDocumentController = roleTradeCompany.role === 'Document Controller' && roleTradeCompany.company === 'Woh Hup Private Ltd';\n   const treeFlatten = flattenAllTreeChildNode1(input);\n\n   let eyeShownInit;\n   if (viewTemplateNodeId) {\n      const nodeTreeFound = treeFlatten.find(x => x.id === viewTemplateNodeId);\n      if (nodeTreeFound) {\n         const br = getTreeFlattenOfNodeInArray(treeFlatten, nodeTreeFound);\n         eyeShownInit = br.map(x => x.id);\n      };\n   };\n   const [iconBtnEyeShownArr, setIconBtnEyeShownArr] = useState(eyeShownInit || []);\n   const [nodeIsolated, setNodeIsolated] = useState(viewTemplateNodeId || null);\n   const isolateView = (node) => {\n      setNodeIsolated(node.id);\n      const nodeFound = treeFlatten.find(x => x.id === node.id);\n      const branch = getTreeFlattenOfNodeInArray(treeFlatten, nodeFound);\n      setIconBtnEyeShownArr(branch.map(x => x.id));\n   };\n\n   return (\n      <Container>\n         <PanelStyled>\n            <SortableTreeStyled\n               treeData={input}\n               onChange={treeData => setInput(treeData)}\n               canDrag={({ node }) => {\n                  let companyNode;\n                  if (node.treeLevel >= 1) {\n                     const treeNode = treeFlatten.find(x => x.id === node.id);\n                     companyNode = getCompanyNameFnc(treeNode, treeFlatten);\n                  };\n                  let tradeNode;\n                  if (node.treeLevel >= 2) {\n                     const treeNode = treeFlatten.find(x => x.id === node.id);\n                     tradeNode = getTradeNameFnc(treeNode, treeFlatten);\n                  };\n\n                  if (node.treeLevel !== 0 && isDocumentController) return true;\n                  if (\n                     (node.treeLevel === 0) ||\n                     (node.treeLevel === 1 && !isDocumentController) ||\n                     (node.treeLevel >= 2 && companyNode !== roleTradeCompany.company) ||\n\n                     (roleTradeCompany.company === 'Woh Hup Private Ltd' && companyNode === roleTradeCompany.company && node.treeLevel === 2 && !isDocumentController) ||\n                     (roleTradeCompany.company === 'Woh Hup Private Ltd' && companyNode === roleTradeCompany.company && node.treeLevel >= 3 && tradeNode !== roleTradeCompany.trade && !isDocumentController) ||\n                     (roleTradeCompany.company === 'Woh Hup Private Ltd' && companyNode === roleTradeCompany.company && node.treeLevel >= 3 && roleTradeCompany.role !== 'Coordinator' && !isDocumentController)\n\n                  ) {\n                     return false;\n                  };\n\n                  return true;\n               }}\n               canDrop={(props) => {\n                  const { prevParent, nextParent, node } = props;\n\n                  let nodePrevParentInTree, nodeNextParentInTree;\n                  let companyNodePrevParent, companyNodeNextParent;\n\n                  if (prevParent && nextParent) {\n                     nodePrevParentInTree = treeFlatten.find(x => x.id === prevParent.id);\n                     nodeNextParentInTree = treeFlatten.find(x => x.id === nextParent.id);\n                  };\n\n                  if (nodePrevParentInTree && nodeNextParentInTree &&\n                     nodePrevParentInTree.treeLevel === nodeNextParentInTree.treeLevel &&\n                     nodePrevParentInTree.treeLevel >= 1\n                  ) {\n                     companyNodePrevParent = getCompanyNameFnc(nodePrevParentInTree, treeFlatten);\n                     companyNodeNextParent = getCompanyNameFnc(nodeNextParentInTree, treeFlatten);\n                  };\n\n                  if (node.treeLevel === 0 || !nextParent || !prevParent ||\n                     (nextParent && nextParent.treeLevel !== node.treeLevel - 1) ||\n                     (companyNodePrevParent !== companyNodeNextParent)\n                  ) {\n                     return false;\n                  };\n                  return true;\n               }}\n\n               onMoveNode={({ nextParentNode, node }) => {\n                  updateChildrenNode([node], nextParentNode.treeLevel + 1 - node.treeLevel);\n               }}\n\n               isVirtualized={false}\n\n               generateNodeProps={(props) => {\n\n                  const { node } = props;\n                  const treeNode = treeFlatten.find(x => x.id === node.id);\n\n                  let companyNode;\n                  if (node.treeLevel >= 1) {\n                     companyNode = getCompanyNameFnc(treeNode, treeFlatten);\n                  };\n\n                  let tradeNode;\n                  if (node.treeLevel >= 2) {\n                     tradeNode = getTradeNameFnc(treeNode, treeFlatten);\n                  };\n\n                  const isEyeShownColor = iconBtnEyeShownArr.indexOf(node.id) !== -1 ? 'black' : '#DCDCDC';\n                  const isEyeShownType = iconBtnEyeShownArr.indexOf(node.id) !== -1 ? 'eye' : 'eye-invisible';\n\n                  return ({\n                     className: 'xxx-xxx-xxx',\n                     buttons:\n                        (node.treeLevel === 0 && isDocumentController) ? [\n                           <IconBtn type='plus' onClick={() => addFolderBelow(node)} />,\n                           <IconBtn type={isEyeShownType} onClick={() => isolateView(node)} color={isEyeShownColor} />\n\n\n                        ] : (isDocumentController && companyNode === 'Woh Hup Private Ltd' && node.treeLevel === 1) ? [\n                           <IconBtn type='plus' onClick={() => addFolderBelow(node)} />,\n                           <IconBtn type='delete' onClick={() => deleteFolder(node)} />,\n                           <IconBtn type={isEyeShownType} onClick={() => isolateView(node)} color={isEyeShownColor} />\n                        ] : (isDocumentController && companyNode !== 'Woh Hup Private Ltd' && node.treeLevel === 1) ? [\n                           <IconBtn type='plus' onClick={() => addFolderBelow(node)} />,\n                           <IconBtn type='delete' onClick={() => deleteFolder(node)} />,\n                           node.children.length > 0 && <IconBtn type='shrink' onClick={() => mergeChildDrawings(node)} />,\n                           <IconBtn type={isEyeShownType} onClick={() => isolateView(node)} color={isEyeShownColor} />\n                        ] : (isDocumentController && companyNode === 'Woh Hup Private Ltd' && node.treeLevel === 2) ? [\n                           <IconBtn type='plus' onClick={() => addFolderBelow(node)} />,\n                           <IconBtn type='delete' onClick={() => deleteFolder(node)} />,\n                           node.children.length > 0 && <IconBtn type='shrink' onClick={() => mergeChildDrawings(node)} />,\n                           <IconBtn type={isEyeShownType} onClick={() => isolateView(node)} color={isEyeShownColor} />\n                        ] : (isDocumentController && (\n                           (companyNode === 'Woh Hup Private Ltd' && node.treeLevel >= 3) || (companyNode !== 'Woh Hup Private Ltd' && node.treeLevel >= 2)\n                        )) ? [\n                           <IconBtn type='plus' onClick={() => addFolderBelow(node)} />,\n                           <IconBtn type='edit' onClick={() => editFolderName(node)} />,\n                           <IconBtn type='delete' onClick={() => deleteFolder(node)} />,\n                           node.children.length > 0 && <IconBtn type='shrink' onClick={() => mergeChildDrawings(node)} />,\n                           <IconBtn type={isEyeShownType} onClick={() => isolateView(node)} color={isEyeShownColor} />\n\n\n\n\n                        ] : (roleTradeCompany.role === 'Coordinator' && companyNode === 'Woh Hup Private Ltd' && companyNode === roleTradeCompany.company && node.treeLevel === 2 && tradeNode === roleTradeCompany.trade) ? [\n                           <IconBtn type='plus' onClick={() => addFolderBelow(node)} />,\n                           node.children.length > 0 && <IconBtn type='shrink' onClick={() => mergeChildDrawings(node)} />,\n                           <IconBtn type={isEyeShownType} onClick={() => isolateView(node)} color={isEyeShownColor} />\n                        ] : (roleTradeCompany.role === 'Coordinator' && companyNode === 'Woh Hup Private Ltd' && companyNode === roleTradeCompany.company && node.treeLevel >= 3 && tradeNode === roleTradeCompany.trade) ? [\n                           <IconBtn type='plus' onClick={() => addFolderBelow(node)} />,\n                           <IconBtn type='edit' onClick={() => editFolderName(node)} />,\n                           <IconBtn type='delete' onClick={() => deleteFolder(node)} />,\n                           node.children.length > 0 && <IconBtn type='shrink' onClick={() => mergeChildDrawings(node)} />,\n                           <IconBtn type={isEyeShownType} onClick={() => isolateView(node)} color={isEyeShownColor} />\n\n\n\n\n                        ] : (companyNode !== 'Woh Hup Private Ltd' && companyNode === roleTradeCompany.company && node.treeLevel === 1) ? [\n                           <IconBtn type='plus' onClick={() => addFolderBelow(node)} />,\n                           node.children.length > 0 && <IconBtn type='shrink' onClick={() => mergeChildDrawings(node)} />,\n                           <IconBtn type={isEyeShownType} onClick={() => isolateView(node)} color={isEyeShownColor} />\n                        ] : (companyNode !== 'Woh Hup Private Ltd' && companyNode === roleTradeCompany.company && node.treeLevel >= 2) ? [\n                           <IconBtn type='plus' onClick={() => addFolderBelow(node)} />,\n                           <IconBtn type='edit' onClick={() => editFolderName(node)} />,\n                           <IconBtn type='delete' onClick={() => deleteFolder(node)} />,\n                           node.children.length > 0 && <IconBtn type='shrink' onClick={() => mergeChildDrawings(node)} />,\n                           <IconBtn type={isEyeShownType} onClick={() => isolateView(node)} color={isEyeShownColor} />\n\n\n\n                        ] : [\n                           <IconBtn type='eye' onClick={() => isolateView(node)} color={isEyeShownColor} />\n                        ]\n                  });\n               }}\n            />\n         </PanelStyled>\n\n         <div style={{ padding: 20, display: 'flex', flexDirection: 'row-reverse' }}>\n            <ButtonGroupComp\n               onClickCancel={onClickCancelModal}\n               onClickApply={() => applyFolderOrganize(input[0].children, mergeList, nodeIsolated)} // remove projectName item before apply...\n            />\n         </div>\n\n\n\n         {modalTitle && (\n            <ModalStyledSetting\n               title={modalTitle}\n               visible={modalTitle !== null ? true : false}\n               footer={null}\n               onCancel={() => setModalTitle(null)}\n               destroyOnClose={true}\n               centered={true}\n               width={window.innerWidth * 0.6}\n            >\n               <ConfirmOrEditNameModal\n                  modalTitle={modalTitle}\n                  confirmAction={confirmAction}\n                  itemNode={itemNode}\n                  input={input}\n                  rowsAll={rowsAll}\n               />\n            </ModalStyledSetting>\n         )}\n\n\n         {tradeAndCompanyAndType && (\n            <ModalStyledSetting\n               title={modalTitle}\n               visible={tradeAndCompanyAndType !== null ? true : false}\n               footer={null}\n               onCancel={() => setTradeAndCompanyAndType(null)}\n               destroyOnClose={true}\n               centered={true}\n               width={window.innerWidth * 0.6}\n            >\n               <RearrangeItemsForm\n                  tradeAndCompanyAndType={tradeAndCompanyAndType}\n                  onClickApplyTradeOrCompany={onClickApplyTradeOrCompany}\n                  onClickCancel={() => setTradeAndCompanyAndType(null)}\n               />\n            </ModalStyledSetting>\n         )}\n      </Container>\n   );\n};\n\nexport default FormDrawingTypeOrder;\n\n\nconst SortableTreeStyled = styled(SortableTree)`\n   .dddddd {\n      /* background-color: grey !important; */\n   }\n   .rst__node {\n      height: 45px !important;\n   }\n   .rst__rowContents {\n      min-width: fit-content;\n      background-color: transparent !important;\n   }\n`;\nconst IconStyle = styled(Icon)`\n   font-size: 14px;\n   margin: 2px;\n   padding: 4px;\n   &:hover {\n      background-color: ${colorType.grey0};\n   };\n`;\nconst ModalStyledSetting = styled(Modal)`\n    .ant-modal-content {\n        border-radius: 0;\n    }\n   .ant-modal-close {\n      display: none;\n   }\n   .ant-modal-header {\n      padding: 10px;\n   }\n   .ant-modal-title {\n        padding-left: 10px;\n        font-size: 20px;\n        font-weight: bold;\n   }\n   .ant-modal-body {\n      padding: 0;\n      display: flex;\n      justify-content: center;\n   }\n`;\nconst Container = styled.div`\n   height: ${`${window.innerHeight * 0.8}` + 'px'};\n   width: 100%;\n   display: flex;\n   flex-direction: column;\n`;\nconst PanelStyled = styled.div`\n   width: 100%;\n   float: right;\n   overflow-x: hidden;\n   border-bottom: 1px solid ${colorType.grey4};\n`;\nconst IconBtn = ({ type, onClick, color }) => {\n\n   const text = type === 'plus' ? 'Add Sub Drawing Type'\n      : type === 'delete' ? 'Delete Drawing Type'\n         : type === 'edit' ? 'Edit Name'\n            : type === 'eye' ? 'Isolate View'\n               : type === 'eye-invisible' ? 'Isolate View'\n                  : 'Merge All Sub Drawing Type'\n\n   return (\n      <Tooltip title={text}>\n         <IconStyle type={type} onClick={onClick} style={{ color: color || 'black' }} />\n      </Tooltip>\n   );\n};\nconst RearrangeItemsForm = ({ tradeAndCompanyAndType, onClickApplyTradeOrCompany, onClickCancel }) => {\n\n   const { dataTreeArray, node } = tradeAndCompanyAndType;\n\n   const onClickApply = () => {\n      let itemsAdded = tags.filter(x => x.mode === 'shown').map(x => x.header);\n      onClickApplyTradeOrCompany({ node, itemsAdded });\n   };\n\n   const setMode = (obj) => {\n      tags.forEach(tg => {\n         if (tg.header === obj.header) tg.mode = obj.mode;\n      });\n   };\n\n   const getTags = () => {\n      const arrItem = node.children.map(x => x.title);\n      const items = dataTreeArray.filter(x => arrItem.indexOf(x) === -1);\n\n      let arr = [];\n      items.forEach((header, index) => {\n         arr.push({ id: index, header, mode: 'hidden' });\n      });\n      return arr;\n   };\n\n   const [tags, setTags] = useState(getTags());\n\n   return (\n      <div style={{ width: '100%', height: '100%' }}>\n         <PanelItemsStyled>\n            <div style={{ fontSize: 11, paddingLeft: 20 }}>Click to add items</div>\n            <div style={{ width: '100%', paddingTop: 20 }}>\n               <DraggableArea\n                  isList\n                  tags={tags}\n                  render={({ tag }) => <ButtonColumnTag tag={tag} setMode={setMode} actionType='rearrange-drawing-type-tree-action' />}\n                  onChange={(tags) => setTags(tags)}\n               />\n            </div>\n         </PanelItemsStyled>\n         <div style={{ padding: 20, display: 'flex', flexDirection: 'row-reverse' }}>\n            <ButtonGroupComp\n               onClickCancel={onClickCancel}\n               onClickApply={onClickApply}\n            />\n         </div>\n      </div>\n   );\n};\nconst PanelItemsStyled = styled.div`\n   height: 60vh;\n   width: 100%;\n   overflow-y: scroll;\n   overflow-x: hidden;\n   border-bottom: 1px solid ${colorType.grey4};\n`;\nconst ConfirmOrEditNameModal = ({ modalTitle, confirmAction, itemNode, input, rowsAll }) => {\n\n   let dwgsToWarn = [];\n   if (modalTitle === 'Delete Drawing Type') {\n      const currentTree = flattenAllTreeChildNode1(input[0].children);\n      const currentTreeNode = currentTree.find(x => x.id === itemNode.id);\n      const nodeArray = getTreeFlattenOfNodeInArray(currentTree, currentTreeNode);\n      nodeArray.forEach(nd => {\n         dwgsToWarn = [...dwgsToWarn, ...rowsAll.filter(x => x._parentRow === nd.id)];\n      });\n   };\n\n\n   const [value, setValue] = useState(null);\n   const onClickApplyModal = () => {\n      if (modalTitle === 'Delete Drawing Type') {\n         confirmAction(modalTitle);\n      } else if (modalTitle === 'Edit Drawing Type Name') {\n         confirmAction(modalTitle, value);\n      } else if (modalTitle === 'Merge All Child Drawings') {\n         confirmAction(modalTitle);\n      };\n   };\n   return (\n      <div style={{ padding: 20, width: '100%', maxHeight: window.innerHeight * 0.7 }}>\n         {modalTitle === 'Delete Drawing Type' ? (\n            <div>\n               <div>Are you sure to delete the drawing type <span style={{ fontWeight: 'bold' }}>{itemNode.title}</span>?</div>\n               <div>All the following <span style={{ fontWeight: 'bold' }}>{dwgsToWarn.length}</span> drawings will be deleted accordingly:</div>\n               <br />\n               <div style={{ maxHeight: 300, overflowY: 'scroll' }}>\n                  {dwgsToWarn.map((dr, i) => (\n                     <div key={i}>({i + 1}) - {dr['Drawing Number']} - {dr['Drawing Name']}</div>\n                  ))}\n               </div>\n            </div>\n         ) : modalTitle === 'Merge All Child Drawings' ? (\n            <div>Are you sure to delete all sub folders and retains all drawings</div>\n         ) : (\n            <Input\n               placeholder='Enter new name...'\n               style={{ width: '100%' }}\n               value={value || itemNode.title}\n               onChange={(e) => setValue(e.target.value)}\n            />\n         )}\n\n         <div style={{ padding: 20, display: 'flex', flexDirection: 'row-reverse' }}>\n            <ButtonGroupComp\n               onClickCancel={() => { }}\n               onClickApply={onClickApplyModal}\n            />\n         </div>\n      </div>\n   );\n};\nconst getCompanyNameFnc = (dwgType, drawingTypeTreeClone) => {\n   if (dwgType.treeLevel === 1) return dwgType.title;\n   let result;\n   const getCompanyFnc = (dwgType, drawingTypeTreeClone) => {\n      const parent = drawingTypeTreeClone.find(x => x.id === dwgType.parentId);\n      if (parent.treeLevel === 1) {\n         result = parent.title;\n      } else {\n         getCompanyFnc(parent, drawingTypeTreeClone);\n      };\n      return result;\n   };\n   getCompanyFnc(dwgType, drawingTypeTreeClone);\n   return result;\n};\nconst getTradeNameFnc = (dwgType, drawingTypeTreeClone) => {\n   const tree = drawingTypeTreeClone.filter(x => x.treeLevel !== 1);\n   if (dwgType.treeLevel === 2) return dwgType.title;\n   let result;\n   const getTradeFnc = (dwgType, dwgTypeTree) => {\n      const parent = dwgTypeTree.find(x => x.id === dwgType.parentId);\n      if (parent.treeLevel === 2) {\n         result = parent.title;\n      } else {\n         getTradeFnc(parent, dwgTypeTree);\n      };\n      return result;\n   };\n   getTradeFnc(dwgType, tree);\n   return result;\n};\n\n\n\nexport const flattenAllTreeChildNode1 = (root) => {\n   let temp = [];\n   let queue = [...root];\n   while (queue.length > 0) {\n      let node = queue.shift();\n      if (node.children) {\n         let childNode = [];\n         node.children.forEach(nd => {\n            childNode.push({ ...nd, parentId: node.id });\n         });\n         queue = [...queue, ...childNode];\n         let nodeObj = { ...node };\n         delete nodeObj.children;\n         temp.push(nodeObj);\n      } else {\n         let nodeObj = { ...node };\n         delete nodeObj.children;\n         temp.push(nodeObj);\n      };\n   };\n   return temp;\n};\nexport const convertFlattenArraytoTree1 = (list) => {\n   let map = {}, node, roots = [], i;\n   for (i = 0; i < list.length; i += 1) {\n      map[list[i].id] = i;\n      if (list[i]._rowLevel !== 1) {\n         list[i].children = list[i].children || [];\n      };\n   };\n\n\n   let arrayOfTreeLevel = [];\n   list.forEach(tr => {\n      arrayOfTreeLevel.push(tr.treeLevel);\n   });\n   const treeLevelOfTopTree = Math.min(...arrayOfTreeLevel);\n\n   for (i = 0; i < list.length; i++) {\n      node = list[i];\n      if (node.treeLevel > treeLevelOfTopTree) {\n         list[map[node.parentId]].children.push(node);\n      } else {\n         roots.push(node);\n      };\n   };\n   return roots;\n};\nconst addProjectHeaderToTree = (tree, projectName) => {\n   const treeOutput = tree.map(item => {\n      let itemOutput = { ...item };\n      if (itemOutput['Drawing Number']) {\n         itemOutput.title = itemOutput['Drawing Number'];\n         delete itemOutput['Drawing Number'];\n      };\n      return itemOutput;\n   });\n   return [{\n      title: projectName,\n      id: projectName,\n      treeLevel: 0,\n      expanded: true,\n      children: convertFlattenArraytoTree1(treeOutput)\n   }];\n};\nconst updateChildrenNode = (arr, n) => {\n   arr.forEach(i => {\n      i.treeLevel = i.treeLevel + n;\n      if (i.children.length > 0) {\n         updateChildrenNode(i.children, n);\n      };\n   });\n};\nconst updateChildrenNodeTreeLevel = (arr) => {\n   arr.forEach(i => {\n      let childrenArr = i.children;\n      if (childrenArr && childrenArr.length > 0) {\n         childrenArr.forEach(ch => {\n            ch.treeLevel = i.treeLevel + 1;\n         });\n         updateChildrenNodeTreeLevel(childrenArr);\n      };\n   });\n};\nconst getListOfBranchesTree = (inputArr) => {\n   const arr = inputArr.map(x => ({ ...x }));\n   arr.sort((a, b) => { return b.treeLevel - a.treeLevel });\n\n   const parentArrIds = [];\n   arr.forEach(x => {\n      let item = arr.find(fld => fld.id === x.parentId);\n      if (item) {\n         item.children = [...item.children || [], x];\n      } else {\n         parentArrIds.push(x.id);\n      };\n   });\n   return arr.filter(x => parentArrIds.indexOf(x.id) !== -1);\n};\nexport const getTreeFlattenOfNodeInArray = (treeArray, node) => {\n   let obj = { ...node };\n   let arrayTree = treeArray.map(x => ({ ...x })).filter(x => x.treeLevel > obj.treeLevel);\n   arrayTree = [...arrayTree, obj];\n   const treeOfFound = getListOfBranchesTree(arrayTree).find(x => x.id === obj.id);\n   return flattenAllTreeChildNode1([treeOfFound]);\n};\nexport const compareCurrentTreeAndTreeFromDB = (treeFromCurrentInit, treeFromCurrentInput, treeDeletedFromCurrent, treeFromDBInput, treeDeletedFromDB) => {\n\n   let treeFromCurrent = treeFromCurrentInput.map(i => ({ ...i }));\n   let treeFromDB = treeFromDBInput.map(i => ({ ...i }));\n\n   // check if need to save tree or not\n   if (treeFromCurrent.length === treeFromCurrentInit.length) {\n      const stringTreeCurrent = treeFromCurrent.reduce((acc, current) => acc + `${current.id}-${current.parentId}-${current['Drawing Number']}-`, '');\n      const stringTreeInit = treeFromCurrentInit.reduce((acc, current) => acc + `${current.id}-${current.parentId}-${current['Drawing Number']}-`, '');\n      if (stringTreeCurrent === stringTreeInit) {\n         return {\n            needToSaveTree: false,\n            treeDBModifiedToSave: treeFromDB,\n            nodesToAddToDB: [],\n            nodesToRemoveFromDB: [],\n         };\n      };\n   };\n\n   let treeCurrentModified = removeNodesDeletedByOtherUsersFromTreeCurrent(treeFromCurrent, treeDeletedFromDB);\n\n   let { nodesToRemoveFromDB, treeFromDB: treeFromDBModified, nodesIdNoNeedToAddNew } = removeNodesDeletedByCurrentUserFromTreeDB(treeFromDB, treeDeletedFromCurrent, treeCurrentModified);\n  \n   let { nodesToAddToDB, treeDBModifiedToSave: treeDBModified } = haveChangedNodesInDBAndNewNodesInCurrentBackToDB(treeFromDBModified, treeCurrentModified, treeFromCurrentInit, nodesIdNoNeedToAddNew);\n\n\n\n   // reorder item follow new order...\n   let treeDBModifiedToSave = [];\n   treeFromCurrentInput.forEach(item => {\n      const found = treeDBModified.find(x => x.id === item.id);\n      if (found) {\n         treeDBModifiedToSave.push(found);\n         treeDBModified = treeDBModified.filter(x => x.id !== found.id);\n      };\n   });\n   treeDBModifiedToSave = [...treeDBModifiedToSave, ...treeDBModified].sort((a, b) => { return a.treeLevel - b.treeLevel });\n\n   return {\n      needToSaveTree: true,\n      treeDBModifiedToSave,\n      nodesToAddToDB,\n      nodesToRemoveFromDB,\n   };\n};\nconst removeNodesDeletedByOtherUsersFromTreeCurrent = (treeCurrent, treeDeletedFromDB) => {\n   let idsToCheckCurrent = [];\n   treeDeletedFromDB.forEach(item => {\n      const found = treeCurrent.find(x => x.id === item.id);\n      if (found) {\n         idsToCheckCurrent = [\n            ...idsToCheckCurrent,\n            ...getTreeFlattenOfNodeInArray(treeCurrent, found).map(x => x.id)\n         ];\n      };\n   });\n   idsToCheckCurrent = [...new Set(idsToCheckCurrent)];\n\n   const nodesArray = treeCurrent.filter(x => idsToCheckCurrent.indexOf(x.id) !== -1);\n\n   const branchTrees = getListOfBranchesTree(nodesArray);\n\n   const newIdObj = {};\n   treeDeletedFromDB.forEach(item => {\n      newIdObj[item.id] = mongoObjectId();\n   });\n\n   branchTrees.forEach(tree => {\n      let flattenArray = flattenAllTreeChildNode1([tree]);\n      let isAbleToDelete = true;\n\n      flattenArray.forEach(item => {\n         if (!treeDeletedFromDB.find(x => x.id === item.id)) isAbleToDelete = false;\n      });\n\n      if (isAbleToDelete) {\n         treeCurrent = treeCurrent.filter(x => !flattenArray.find(item => item.id === x.id));\n      } else {\n         const arrayToModify = treeCurrent.filter(item => flattenArray.find(x => x.id === item.id));\n         treeDeletedFromDB.forEach(item => {\n            const found = arrayToModify.find(x => x.id === item.id);\n            if (found) {\n               found.id = newIdObj[item.id];\n            };\n            const childrenFound = arrayToModify.filter(x => x.parentId === item.id);\n            if (childrenFound.length > 0) {\n               childrenFound.forEach(child => {\n                  child.parentId = newIdObj[item.id];\n               });\n            };\n         });\n      };\n   });\n   return treeCurrent;\n};\nconst removeNodesDeletedByCurrentUserFromTreeDB = (treeFromDB, treeDeletedFromCurrent, treeCurrent) => {\n   let listIdToRemoveFromDB = [];\n   treeDeletedFromCurrent.forEach(item => {\n      const found = treeFromDB.find(x => x.id === item.id);\n      if (found) {\n         listIdToRemoveFromDB = [\n            ...listIdToRemoveFromDB,\n            ...getTreeFlattenOfNodeInArray(treeFromDB, found).map(x => x.id)\n         ];\n      };\n   });\n\n   const nodesToRemoveFromDB = treeFromDB.filter(x => {\n      return listIdToRemoveFromDB.indexOf(x.id) !== -1 && !treeCurrent.find(item => item.id === x.id);\n   });\n   const nodesIdNoNeedToAddNew = listIdToRemoveFromDB.filter(id => treeCurrent.find(item => item.id === id))\n\n   treeFromDB = treeFromDB.filter(x => listIdToRemoveFromDB.indexOf(x.id) === -1);\n\n   return {\n      nodesToRemoveFromDB,\n      nodesIdNoNeedToAddNew,\n      treeFromDB\n   };\n};\nconst haveChangedNodesInDBAndNewNodesInCurrentBackToDB = (treeFromDB, treeCurrent, treeCurrentInit, nodesIdNoNeedToAddNew) => {\n   let nodesToAddToDB = [];\n   treeCurrent.forEach(item => {\n      if (!treeFromDB.find(x => x.id === item.id)) {\n         nodesToAddToDB.push(item);\n      };\n   });\n\n   let dwgTypeExistedInDBButLevelOrParentChangesArr = [];\n   let childrenIdsToWithdrawFromDB = [];\n   treeFromDB.forEach(item => {\n      const found = treeCurrent.find(r => r.id === item.id);\n      const foundInit = treeCurrentInit.find(r => r.id === item.id);\n      if (found && foundInit) {\n         if (found['Drawing Number'] !== foundInit['Drawing Number']) item['Drawing Number'] = found['Drawing Number'];\n\n         if (found.parentId !== item.parentId && found.parentId !== foundInit.parentId) {\n            dwgTypeExistedInDBButLevelOrParentChangesArr.push({ ...found, ['Drawing Number']: item['Drawing Number'] });\n\n            const arrIdsChildrenInDB = getTreeFlattenOfNodeInArray(treeFromDB, item).filter((x, i) => i !== 0).map(x => x.id);\n\n            childrenIdsToWithdrawFromDB = [...childrenIdsToWithdrawFromDB, ...arrIdsChildrenInDB];\n         };\n      };\n   });\n   childrenIdsToWithdrawFromDB = [...new Set(childrenIdsToWithdrawFromDB)];\n\n   const dwgTypeToWithdrawFromDB = treeFromDB.filter(x => childrenIdsToWithdrawFromDB.indexOf(x.id) !== -1);\n\n   treeFromDB = treeFromDB.filter(item => {\n      return childrenIdsToWithdrawFromDB.indexOf(item.id) === -1 && !dwgTypeExistedInDBButLevelOrParentChangesArr.find(x => x.id === item.id)\n   });\n\n\n   const listBranchesTreeToPushToDB = getListOfBranchesTree([\n      ...nodesToAddToDB,\n      ...dwgTypeExistedInDBButLevelOrParentChangesArr,\n      ...dwgTypeToWithdrawFromDB\n   ]);\n\n   listBranchesTreeToPushToDB.forEach(itemTree => {\n      treeFromDB = [...treeFromDB, ...flattenAllTreeChildNode1([itemTree])];\n   });\n\n   const treeDBModifiedToSave = convertFlattenArraytoTree1(treeFromDB);\n   updateChildrenNodeTreeLevel(treeDBModifiedToSave);\n\n   return {\n      nodesToAddToDB: nodesToAddToDB.filter(item => nodesIdNoNeedToAddNew.indexOf(item.id) === -1),\n      treeDBModifiedToSave: flattenAllTreeChildNode1(treeDBModifiedToSave)\n   };\n};\n\n\n\n\n\n\n\n","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\pageSpreadsheet\\ExcelExport.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\pageSpreadsheet\\PanelSetting.js",["364","365","366","367","368","369","370","371","372","373","374","375"],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\pageSpreadsheet\\PanelFunction.js",["376"],"import React, { useContext } from 'react';\nimport styled from 'styled-components';\nimport { colorType } from '../../constants';\nimport { Context as ProjectContext } from '../../contexts/projectContext';\nimport { Context as RowContext } from '../../contexts/rowContext';\nimport { columnLocked, getCompanyNameTextFnc, getTradeNameTextFnc, rowLocked } from './Cell';\n\n\n\nconst PanelFunction = (props) => {\n\n   const { buttonPanelFunction, panelType } = props;\n\n   const { state: stateRow } = useContext(RowContext);\n   const { state: stateProject } = useContext(ProjectContext);\n\n   const { roleTradeCompany } = stateProject.allDataOneSheet;\n\n   const { rowsSelectedToMove, rowsSelected, drawingTypeTree, modeGroup } = stateRow;\n\n   const { rowData, column } = panelType.cellProps;\n\n   const isLockedColumn = columnLocked(roleTradeCompany, rowData, modeGroup, column.key);\n   const isLockedRow = rowLocked(roleTradeCompany, rowData, modeGroup, drawingTypeTree);\n\n   const dwgType = drawingTypeTree.find(x => x.id === rowData.id);\n\n   let company, trade;\n   if (rowData.treeLevel >= 1) {\n      company = getCompanyNameTextFnc(dwgType, drawingTypeTree);\n   };\n   if (rowData.treeLevel >= 2) {\n      trade = getTradeNameTextFnc(dwgType, drawingTypeTree);\n   };\n\n   const isLockedByCompanyOrTrade =\n      roleTradeCompany.role === 'Document Controller' && roleTradeCompany.company === 'Woh Hup Private Ltd'\n         ? false\n         : roleTradeCompany.company === 'Woh Hup Private Ltd'\n            ? (company !== roleTradeCompany.company || trade !== roleTradeCompany.trade)\n            : company !== roleTradeCompany.company;\n\n\n   const listButton = (rowData._rowLevel && rowData._rowLevel === 1 && !isLockedColumn && !isLockedRow) ? [\n      'View Drawing Revision',\n      'Create New Drawing Revision',\n      'Date Automation',\n      'View Cell History',\n      'Duplicate Drawings',\n      'Insert Drawings Below',\n      'Insert Drawings Above',\n      'Move Drawings',\n      'Paste Drawings',\n      'Delete Drawing'\n\n   ] : (rowData._rowLevel && rowData._rowLevel === 1 && (isLockedColumn || isLockedRow)) ? [\n      'View Drawing Revision',\n      'View Cell History',\n\n   ] : (rowData.treeLevel) ? [\n      'Paste Drawings',\n      'Insert Drawings By Type'\n\n   ] : [];\n\n\n   const onClickBtn = (btn) => {\n      buttonPanelFunction(btn);\n   };\n\n\n   return (\n      <div\n         style={{\n            border: `1px solid ${colorType.grey1}`,\n            background: 'white',\n         }}\n      >\n         {listButton.map(btn => (\n            <Container\n               key={btn}\n               onMouseDown={() => onClickBtn(btn)}\n               style={disabledBtn(\n                  props,\n                  btn,\n                  rowsSelectedToMove,\n                  roleTradeCompany,\n                  isLockedByCompanyOrTrade,\n                  rowsSelected,\n                  drawingTypeTree\n               )}\n            >\n               {btn}\n            </Container>\n\n         ))}\n      </div>\n   );\n};\n\nexport default PanelFunction;\n\nconst Container = styled.div`\n    padding: 7px;\n    padding-left: 25px;\n    \n    cursor: pointer;\n    color: black;\n    &:hover {\n        background: ${colorType.grey0};\n    };\n\n`;\n\n\nconst disabledBtn = ({ panelType }, btn, rowsSelectedToMove, roleTradeCompany, isLockedByCompanyOrTrade, rowsSelected, drawingTypeTree) => {\n   const { rowData } = panelType.cellProps;\n   const { _rowLevel, children, treeLevel, id } = rowData;\n\n\n   if (\n      (rowsSelectedToMove.length === 0 && btn === 'Paste Drawings') ||\n      (_rowLevel === 1 && roleTradeCompany.role === 'Modeller' && btnLocked_1.indexOf(btn) !== -1) ||\n\n      (_rowLevel === 1 && rowsSelected.length > 0 && rowsSelectedToMove.length === 0 && btn !== 'Move Drawings') ||\n      (_rowLevel === 1 && rowsSelected.length > 0 && rowsSelectedToMove.length > 0 && btn !== 'Paste Drawings') ||\n      (_rowLevel === 1 && (roleTradeCompany.role === 'View-Only User' || roleTradeCompany.role === 'Production') && btnLocked_2.indexOf(btn) !== -1) ||\n\n      (treeLevel === 1 && rowData['Drawing Number'] === 'Woh Hup Private Ltd' && (btn === 'Paste Drawings' || btn === 'Insert Drawings By Type')) ||\n      (treeLevel > 1 && drawingTypeTree.find(x => x.parentId === id) && (btn === 'Paste Drawings' || btn === 'Insert Drawings By Type')) ||\n      (treeLevel > 1 && !drawingTypeTree.find(x => x.parentId === id) && rowsSelectedToMove.length === 0 && btn === 'Paste Drawings')\n      ||\n      (treeLevel >= 1 && isLockedByCompanyOrTrade)\n\n   ) return {\n      pointerEvents: 'none',\n      color: 'grey'\n   };\n};\n\n\nconst btnLocked_1 = [\n   'Create New Drawing Revision',\n   'Date Automation',\n];\n\nconst btnLocked_2 = [\n   'Create New Drawing Revision',\n   'Date Automation',\n   'Duplicate Drawings',\n   'Insert Drawings Below',\n   'Insert Drawings Above',\n   'Move Drawings',\n   'Paste Drawings',\n   'Delete Drawing',\n   'Insert Drawings By Type'\n];\n\n\nexport const getPanelPosition = ({ x: clickX, y: clickY }) => {\n   const screenW = window.innerWidth;\n   const screenH = window.innerHeight;\n\n   const right = (screenW - clickX) < 200;\n   const left = clickX < 200;\n   const top = clickY < 200;\n   const bottom = (screenH - clickY) < 200;\n\n   return { \n      x: right && top ? clickX - 250 :\n         right && bottom ? clickX - 250 :\n         left && bottom ? clickX :\n         left && top ? clickX :\n         right ? clickX - 250 : clickX,\n      y: right && top ? clickY :\n         right && bottom ? clickY - 300 :\n         left && bottom ? clickY - 300 :\n         left && top ? clickY :\n         bottom ? clickY - 300 : clickY\n   };\n};","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\pageSpreadsheet\\CellIndex.js",["377"],"import React, { useContext } from 'react';\nimport styled from 'styled-components';\nimport { Context as CellContext } from '../../contexts/cellContext';\nimport { Context as ProjectContext } from '../../contexts/projectContext';\nimport { Context as RowContext } from '../../contexts/rowContext';\nimport { addZero } from '../../utils';\nimport { rowLocked } from './Cell';\n\n\nconst CellIndex = ({ rowData }) => {\n\n   const { state: stateRow, getSheetRows } = useContext(RowContext);\n   const { state: stateCell, setCellActive } = useContext(CellContext);\n   const { state: stateProject } = useContext(ProjectContext);\n\n   const { drawingTypeTree, rowsAll, modeGroup, rowsSelected } = stateRow;\n   const { roleTradeCompany } = stateProject.allDataOneSheet;\n\n   const isLockedRow = rowLocked(roleTradeCompany, rowData, modeGroup, drawingTypeTree);\n\n\n   const onClickCellIndex = () => {\n      setCellActive(null);\n      if (isLockedRow) return;\n      const row = rowsAll.find(x => x.id === rowData.id);\n      if (!rowsSelected.find(x => x.id === rowData.id) && rowData._rowLevel === 1) {\n         getSheetRows({\n            ...stateRow,\n            rowsSelected: [...rowsSelected, row],\n            rowsSelectedToMove: []\n         });\n      };\n   };\n\n   return (\n      <Styled onClick={onClickCellIndex}>\n         {rowData._rowLevel === 1 ? addZero(rowsAll.indexOf(rowsAll.find(r => r.id === rowData.id)) + 1) : ''}\n      </Styled>\n   );\n};\n\nexport default CellIndex;\n\n\n\nconst Styled = styled.div`\n    color: grey;\n    font-size: 12px;\n\n    width: 100%;\n    height: 100%;\n    padding: 5px;\n    padding-right: 8px;\n    text-align: right\n\n`;\n\n","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\constants\\index.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\utils\\index.js",["378","379","380","381"],"export const colorTypeStatus = {\n   yellow: '#fff200',\n   dark: '#1e272e',\n   grey0: '#ecf0f1',\n   grey1: '#bdc3c7',\n   grey2: '#636e72',\n   grey3: '#dfe4ea',\n   grey4: '#f1f2f6',\n   red: '#FA8072',\n   green: '#009432',\n   blue: '#0984e3',\n   orange: '#cc8e35',\n   purple: '#303952',\n   rose: '#e84118',\n   black: 'black',\n   orange2: '#f1c40f',\n   pp: '#9b59b6',\n   pp2: '#10ac84',\n};\n\nexport const randomColorRangeStatus = {\n   'Approved with comments, to Resubmit': colorTypeStatus.purple,\n   'Approved with Comment, no submission Required': colorTypeStatus.blue,\n   'Approved for Construction': colorTypeStatus.green,\n   'Consultant reviewing': colorTypeStatus.grey2,\n   'Not Started': colorTypeStatus.orange,\n   'Revise In-Progress': colorTypeStatus.yellow,\n   '1st cut of drawing in-progress': colorTypeStatus.pp2,\n   '1st cut of model in-progress': colorTypeStatus.pp,\n   'Pending design': colorTypeStatus.orange2,\n   'Reject and resubmit': colorTypeStatus.red,\n   'Consultant review and reply': colorTypeStatus.blue,\n   'Create update drawing': colorTypeStatus.orange,\n   'Create update model': colorTypeStatus.green,\n};\n\n\n\n\n\n\nexport const processRowsFromDB = (sheetHeaders, rows) => {\n   let rowsProcessed = [];\n   const _formalRowData = (row, sheetHeaders) => {\n      let { _id, data, level, parentRow, preRow } = row;\n      let rowFormal = {\n         id: _id,\n         _rowLevel: level,\n         _parentRow: parentRow,\n         _preRow: preRow\n      };\n      if (data instanceof Object) {\n         for (let header of sheetHeaders) {\n            let { key, text } = header;\n            if (header.type === 'checkbox') {\n               if (key && text && data[key] !== undefined) rowFormal[text] = data[key];\n            } else {\n               if (key && text && data[key]) rowFormal[text] = data[key];\n            };\n         };\n      };\n      return rowFormal;\n   };\n   let firstRowIndex = rows.findIndex((row) => row.preRow === null);\n   while (firstRowIndex >= 0) {\n      let preRow = rows.splice(firstRowIndex, 1)[0];\n      while (preRow) {\n         const rowFormal = _formalRowData(preRow, sheetHeaders);\n         rowsProcessed.push(rowFormal);\n         let nextRowIndex = rows.findIndex(row => String(row.preRow) == String(preRow._id));\n         if (nextRowIndex >= 0) {\n            preRow = rows.splice(nextRowIndex, 1)[0];\n         } else {\n            preRow = null;\n         };\n      };\n      firstRowIndex = rows.findIndex((row) => row.preRow === null);\n   };\n   return rowsProcessed;\n};\n\n\n\n\n\nexport const getRandomColor = () => {\n   let letters = '0123456789ABCDEF';\n   let color = '#';\n   for (var i = 0; i < 6; i++) {\n      color += letters[Math.floor(Math.random() * 16)];\n   };\n   return color;\n};\n\n\nexport const randomColorRange = [\n   '#FFDEAD',\n   '#98FB98',\n   '#e74c3c',\n   '#9b59b6',\n   '#1abc9c',\n   '#95a5a6'\n];\n\nexport const genId = (xxx) => {\n   let arr = [];\n   for (let i = 0; i < xxx; i++) {\n      arr.push(mongoObjectId());\n   };\n   return arr;\n};\n\nexport const debounceFnc = (func, delay) => {\n   let timeout;\n   return function (...args) {\n      const context = this;\n      if (timeout) clearTimeout(timeout);\n      timeout = setTimeout(() => {\n         timeout = null;\n         func.apply(context, args);\n      }, delay);\n   };\n};\n\n\n\n\nexport const mongoObjectId = () => {\n   var timestamp = (new Date().getTime() / 1000 | 0).toString(16);\n   return timestamp + 'xxxxxxxxxxxxxxxx'.replace(/[x]/g, function () {\n      return (Math.random() * 16 | 0).toString(16);\n   }).toLowerCase();\n};\n\n\n\nconst getHeaderKey = (headers, headerText) => {\n   if (!headers) return;\n   return headers.find(hd => hd.text === headerText).key;\n};\n\n\n\n\nconst _newParent = (level, iddd) => {\n   return {\n      id: iddd,\n      _rowLevel: level,\n      count: 0,\n      children: []\n   };\n};\nexport const groupByHeaders = (data, headers, isDataEntry) => {\n   let res = [];\n   let _map = {};\n   // push all rowIds have children in here\n   let parentIdsArr = [];\n   let _mapParentIds = {};\n   for (let item of data) {\n      let _prevLevelKey = '';\n      let _prevLevelParent = null;\n      for (let i = 0, level = headers.length * (-1) + 1; i < headers.length; i++, level++) {\n         let arrayParent = i == 0 ? res : _prevLevelParent.children;\n\n         let header = headers[i];\n         let value = (item[header] || '').trim();\n\n         let levelKey = `${_prevLevelKey}_._${value}`;\n         let levelParentIndex = _map[levelKey];\n         let levelParent = arrayParent[levelParentIndex];\n\n         if (!levelParent) {\n\n            let iddd = levelKey + value;\n            levelParent = _newParent(level, iddd);\n\n            _map[levelKey] = arrayParent.length;\n            arrayParent.push(levelParent);\n         };\n\n         levelParent.count++;\n\n         if (isDataEntry) {\n            levelParent.title = `${item[header] || 'No data'}: (${levelParent.count} nos)`;\n         } else {\n            levelParent['Drawing Number'] = `${item[header] || 'No data'}: (${levelParent.count} nos)`;\n         };\n\n         if (!_mapParentIds[levelParent.id]) { // levelParent id not yet been push to parentIdsArr\n            parentIdsArr.push(levelParent.id);\n            _mapParentIds[levelParent.id] = true;\n         };\n\n         if (i == headers.length - 1) {\n            levelParent.children.push(item);\n         } else {\n            _prevLevelKey = levelKey;\n            _prevLevelParent = levelParent;\n         };\n      };\n   };\n   return {\n      rows: res,\n      expandedRows: parentIdsArr\n   };\n};\n\n\n\nexport const extractCellInfo = (key) => {\n   const idexOfSplitDigit = key.indexOf('~#&&#~');\n   return {\n      rowId: key.slice(0, idexOfSplitDigit),\n      headerName: key.slice(idexOfSplitDigit + 6, key.length)\n   }\n};\nexport const convertCellTempToHistory = (\n   cellsModifiedTemp,\n   stateProject\n) => {\n   const { email, publicSettings } = stateProject.allDataOneSheet;\n   const cellsHistoryData = Object.keys(cellsModifiedTemp).map(key => {\n      const { rowId, headerName } = extractCellInfo(key);\n      const dataOut = {\n         rowId,\n         headerKey: getHeaderKey(publicSettings.headers, headerName),\n         history: {\n            text: cellsModifiedTemp[key],\n            email,\n            createdAt: new Date(),\n         }\n      };\n      return dataOut;\n   });\n   return cellsHistoryData;\n};\n\n\n\nexport const convertHistoryData = (data) => {\n   let arr = [];\n   data.forEach(ch => {\n      const { histories, headerKey, row } = ch;\n      histories.forEach(dt => {\n         arr.push({\n            ...dt,\n            headerKey, row\n         });\n      });\n   });\n   return arr\n};\n\nexport const convertDrawingVersionToHistory = (\n   rowsHistory,\n   stateProject\n) => {\n   const { publicSettings } = stateProject.allDataOneSheet;\n\n   const rowsHistoryOutput = rowsHistory.map(rowsH => {\n      let obj = {};\n      publicSettings.headers.forEach(hd => {\n         if (rowsH[hd.text]) obj = { ...obj || {}, [hd.key]: rowsH[hd.text] };\n      });\n      return {\n         row: rowsH.id,\n         history: obj,\n      };\n   });\n   return rowsHistoryOutput;\n};\n\nexport const getHeaderWidth = (header) => {\n\n   if (header === 'RFA Ref') return 200;\n   else if (\n      header === 'Block/Zone' ||\n      header === 'Level' || header === 'Unit/CJ' ||\n      header === 'Use For' ||\n      header === 'Coordinator In Charge' || header === 'Modeller' ||\n      header === 'Construction Start'\n   ) return 120;\n   else if (header === 'Model Progress' || header === 'Drawing Progress') return 70;\n   else if (header === 'Drg Type') return 180;\n   else if (header === 'Construction Issuance Date') return 120;\n   else if (header === 'Drawing') return 300;\n\n   else if (\n      header === 'Drg To Consultant (A)' ||\n      header === 'Drg To Consultant (T)' ||\n      header === 'Get Approval (A)' ||\n      header === 'Get Approval (T)'\n   ) return 120;\n\n   else if (header.includes('(A)') || header.includes('(T)')) return 90;\n\n   else if (header === 'Rev') return 60;\n   else if (header === 'Status') return 280;\n   else if (header === 'Remark') return 700;\n   else if (header === 'Drawing Number') return 400;\n   else if (header === 'Drawing Name') return 450;\n\n   else return 300;\n\n};\n\nexport const addZero = (num) => {\n   if (num < 10) return '0' + num;\n   return num;\n};\n\n\n\n\nexport const getActionName = (type) => {\n   if (type === 'filter-ICON') return 'Create New Filter';\n   if (type === 'reorderColumn-ICON') return 'Columns Layout';\n   if (type === 'group-ICON') return 'Group Data';\n   if (type === 'sort-ICON') return 'Sort Data';\n   if (type === 'swap-ICON-1') return 'Quit Grouping Mode';\n   if (type === 'swap-ICON-2') return 'Clear Filter/Sort/Search';\n   if (type === 'addDrawingType-ICON') return 'Drawing Type Organization';\n   if (type === 'color-cell-history-ICON') return 'Check Data Changed';\n   if (type === 'View Cell History') return 'Cell History';\n   if (type === 'Delete Drawing') return 'Delete Drawing';\n   if (type === 'colorized-ICON') return 'Drawing Colorization';\n   if (type === 'viewTemplate-ICON') return 'View Template';\n   if (type === 'addNewRFA-ICON') return 'Add New RFA';\n   if (type && (type.includes('Insert Drawings') || type === 'Duplicate Drawings')) return 'Nos Of Drawings';\n\n   else return '';\n};\n\n\n\n\nexport const ExcelDateToJSDate = (serial) => {\n   let utc_days = Math.floor(serial - 25569);\n   let utc_value = utc_days * 86400;\n   let date_info = new Date(utc_value * 1000);\n\n   let fractional_day = serial - Math.floor(serial) + 0.0000001;\n\n   let total_seconds = Math.floor(86400 * fractional_day);\n\n   let seconds = total_seconds % 60;\n\n   total_seconds -= seconds;\n\n   let hours = Math.floor(total_seconds / (60 * 60));\n   let minutes = Math.floor(total_seconds / 60) % 60;\n\n   return new Date(date_info.getFullYear(), date_info.getMonth(), date_info.getDate(), hours, minutes, seconds);\n};","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\DashboardLayout\\componentsDashboard\\CardPanel.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\DashboardLayout\\componentsDashboard\\ChartBarRecordPanel.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\DashboardLayout\\componentsDashboard\\PanelSettingDashboard.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\contexts\\createDataContext.js",["382"],"import React, { createContext, useReducer } from 'react';\n\n\nexport default (reducer, actions, initValue) => {\n\n    const Context = createContext();\n\n    const Provider = ({ children }) => {\n        const [state, dispatch] = useReducer(reducer, initValue);\n\n        const boundActions = {};\n        for (let key in actions) {\n            boundActions[key] = actions[key](dispatch);\n        };\n\n        return (\n            <Context.Provider value={{ state, ...boundActions }}>\n                {children}\n            </Context.Provider>\n        );\n    };\n    return { Context, Provider };\n};\n","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\generalComponents\\ButtonGroupComp.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\generalComponents\\PanelCalendar.js",["383","384"],"import { Calendar, Radio } from 'antd';\nimport React from 'react';\n\n\nconst { Group, Button } = Radio;\n\n\nconst PanelCalendar = ({ pickDate }) => {\n\n    return (\n        <div style={{ width: 300 }}>\n            <Calendar\n                fullscreen={false}\n                onSelect={pickDate}\n            />\n        </div>\n    );\n};\n\nexport default PanelCalendar;\n","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\generalComponents\\ButtonColumnTag.js",["385"],"\nimport React, { useEffect, useState } from 'react';\nimport { colorType } from '../../constants';\n\n\nconst ButtonColumnTag = ({ tag, setMode, actionType }) => {\n\n   const styleShown = { background: '#f1a99f', color: 'black' };\n   const styleFrozen = { background: colorType.primary, color: 'white' };\n   const styleHidden = { background: colorType.grey4, color: 'grey' };\n\n   const [btnStyle, setBtnStyle] = useState(\n      tag.mode === 'hidden' ? styleHidden :\n         tag.mode === 'frozen' ? styleFrozen :\n            styleShown\n   );\n\n   const [type, setType] = useState(tag.mode);\n\n   useEffect(() => {\n      if (actionType === 'reset-mode-action') {\n         setType(tag.mode);\n         setBtnStyle(\n            tag.mode === 'hidden' ? styleHidden :\n               tag.mode === 'frozen' ? styleFrozen :\n                  styleShown\n         );\n      };\n   }, [tag.mode]);\n\n\n   const onClick = () => {\n      if (actionType === 'reorder-columns-action') {\n         if (type === 'shown') {\n            setBtnStyle(styleFrozen);\n            setMode({ header: tag.header, id: tag.id, mode: 'frozen' });\n            setType('frozen');\n         } else if (type === 'frozen') {\n            setBtnStyle(styleHidden);\n            setMode({ header: tag.header, id: tag.id, mode: 'hidden' });\n            setType('hidden');\n         } else if (type === 'hidden') {\n            setBtnStyle(styleShown);\n            setMode({ header: tag.header, id: tag.id, mode: 'shown' });\n            setType('shown');\n         };\n      } else if (actionType === 'rearrange-drawing-type-tree-action') {\n         if (type === 'shown') {\n            setBtnStyle(styleHidden);\n            setMode({ header: tag.header, id: tag.id, mode: 'hidden' });\n            setType('hidden');\n         } else if (type === 'hidden') {\n            setBtnStyle(styleShown);\n            setMode({ header: tag.header, id: tag.id, mode: 'shown' });\n            setType('shown');\n         };\n      } else if (actionType === 'reset-mode-action') {\n         setMode({ id: tag.id });\n      };\n   };\n\n   return (\n      <div\n         style={{\n            ...btnStyle,\n            padding: 9,\n            cursor: actionType === 'reset-mode-action' && 'pointer',\n            textAlign: 'center',\n            fontWeight: 'bold',\n            width: '70%',\n            margin: 'auto',\n            marginBottom: 10\n         }}\n         onClick={onClick}\n      >\n         {tag.header}\n      </div>\n   );\n};\n\nexport default ButtonColumnTag;","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\pageSpreadsheet\\TableDrawingDetail.js",["386"],"\nimport Axios from 'axios';\nimport React, { useContext, useEffect, useState } from 'react';\nimport BaseTable, { AutoResizer } from 'react-base-table';\nimport styled from 'styled-components';\nimport { colorType, imgLink, SERVER_URL } from '../../constants';\nimport { Context as ProjectContext } from '../../contexts/projectContext';\nimport { Context as RowContext } from '../../contexts/rowContext';\nimport { getHeaderWidth, mongoObjectId } from '../../utils';\n\n\nconst Table = (props) => {\n   return (\n      <AutoResizer>\n         {({ width, height }) => {\n            return (\n               <BaseTable\n                  {...props}\n                  width={width}\n                  height={height}\n               />\n            );\n         }}\n      </AutoResizer>\n   );\n};\n\n\nconst TableDrawingDetail = (props) => {\n\n\n   const { rowData } = props;\n   const { id: rowId } = rowData;\n   const { state: stateProject } = useContext(ProjectContext);\n   const { state: stateRow } = useContext(RowContext);\n   const { headers } = stateProject.allDataOneSheet.publicSettings;\n   const { _id: projectId, token } = stateProject.allDataOneSheet;\n\n   const [rowsHistoryDatabase, setRowsHistoryDatabase] = useState(null);\n   const [rowsHistoryPrevious, setRowsHistoryPrevious] = useState([]);\n   const [rowCurrent, setRowCurrent] = useState(null);\n\n\n   useEffect(() => {\n      const fetchRowsHistory = async () => {\n         try {\n            const res = await Axios.get(`${SERVER_URL}/row/history/one-row/`, { params: { token, projectId, rowId } });\n\n            let rowsHistory = [];\n            res.data.forEach((r, i) => {\n               const { history } = r;\n               if (history) {\n                  let data = { id: mongoObjectId() };\n                  Object.keys(history).forEach(key => {\n                     const hdText = headers.find(hd => hd.key === key).text;\n                     data[hdText] = history[key];\n                  });\n                  rowsHistory.push(data);\n               };\n            });\n            setRowsHistoryDatabase(rowsHistory);\n\n\n            let rowsHistoryPrevious = [];\n            if (stateRow.rowsVersionsToSave) {\n               rowsHistoryPrevious = stateRow.rowsVersionsToSave.filter(r => r.id === rowId);\n               rowsHistoryPrevious.forEach((r, i) => {\n                  r.id = mongoObjectId();\n               });\n               setRowsHistoryPrevious(rowsHistoryPrevious);\n            };\n\n            setRowCurrent({\n               ...rowData,\n               key: rowsHistory.length + rowsHistoryPrevious.length + 1\n            });\n\n\n         } catch (err) {\n            console.log(err);\n         };\n      };\n      fetchRowsHistory();\n   }, []);\n\n   let data;\n   if (rowsHistoryDatabase && rowCurrent) {\n      data = [\n         ...rowsHistoryDatabase,\n         ...rowsHistoryPrevious,\n         rowCurrent\n      ];\n   };\n\n   const panelWidth = window.innerWidth * 0.8;\n   const panelHeight = window.innerHeight * 0.8;\n\n\n   return (\n      <div style={{\n         height: panelHeight,\n         background: 'white',\n         padding: 10,\n         display: 'flex',\n         justifyContent: 'center',\n         flexDirection: 'column',\n      }}>\n\n         {rowsHistoryDatabase && rowCurrent && (\n            <>\n               <div style={{\n                  width: panelWidth,\n                  height: 100 + data.length * 30,\n                  margin: '0 auto',\n                  textAlign: 'center'\n               }}>\n                  <div style={{ fontSize: 20, fontWeight: 'bold' }}>DRAWING HISTORY</div>\n                  <TableStyled\n                     fixed\n                     columns={generateColumns(getHeadersText(stateProject.allDataOneSheet.publicSettings.headers))}\n                     data={data}\n                     rowHeight={28}\n                  />\n\n               </div>\n\n               <div style={{\n                  margin: '0 auto',\n                  textAlign: 'center',\n                  marginTop: 100\n               }}>\n                  <img src={imgLink.timeline} alt='visualize' height={panelHeight - (100 + data.length * 30) - 100} />\n               </div>\n            </>\n         )}\n\n\n\n      </div>\n\n   );\n};\n\nexport default TableDrawingDetail;\n\n\nconst generateColumns = (headers) => headers.map((column, columnIndex) => ({\n\n   key: column,\n   dataKey: column,\n   title: column,\n   resizable: true,\n   width: getHeaderWidth(column),\n}));\n\nconst getHeadersText = (headersData) => {\n   return headersData.map(hd => {\n      return hd.text;\n   });\n};\n\n\n\n\nconst TableStyled = styled(Table)`\n\n\n   .BaseTable__row-cell-text {\n      color: black\n   }\n\n   .BaseTable__table .BaseTable__body {\n      /* -webkit-touch-callout: none;\n      -webkit-user-select: none;\n      -khtml-user-select: none;\n      -moz-user-select: none;\n      -ms-user-select: none;\n      user-select: none; */\n   }\n   .BaseTable__header-cell {\n      padding: 10px;\n      border-right: 1px solid #DCDCDC;\n\n      background: ${colorType.grey1};\n      color: black\n   }\n\n   .BaseTable__row-cell {\n      padding: 10px;\n      border-right: 1px solid #DCDCDC;\n\n      overflow: visible !important;\n   }\n`;\n\n","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\pageSpreadsheet\\FormDateAutomation.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\pageSpreadsheet\\TableCellHistory.js",["387","388"],"import { List } from 'antd';\nimport Axios from 'axios';\nimport moment from 'moment';\nimport React, { useContext, useEffect, useState } from 'react';\nimport { SERVER_URL } from '../../constants';\nimport { Context as ProjectContext } from '../../contexts/projectContext';\nimport { Context as RowContext } from '../../contexts/rowContext';\n\n\n\nconst TableCellHistory = (props) => {\n\n    const { rowData: { id: rowId }, column } = props;\n\n    const {\n        state: stateProject\n    } = useContext(ProjectContext);\n\n    const {\n        state: stateRow\n    } = useContext(RowContext);\n\n    const { projectId, token } = stateProject.allDataOneSheet;\n    const headers = stateProject.allDataOneSheet.publicSettings.headers;\n    const headerKey = headers.find(hd => hd.text === column.key).key;\n\n\n    const [history, setHistory] = useState()\n\n    useEffect(() => {\n        const fetchCellHistory = async () => {\n            try {\n\n                const res = await Axios.get(`${SERVER_URL}/cell/history/one-cell/`, { params: { token, projectId, rowId, headerKey } });\n\n                setHistory(res.data.histories.reverse());\n\n            } catch (err) {\n                console.log(err);\n            };\n        };\n        fetchCellHistory();\n    }, [])\n\n\n    return (\n        <div style={{ width: '100%', padding: 15, maxHeight: window.innerHeight * 0.7, overflowY: 'scroll' }}>\n            <List\n                size='small'\n                header={null}\n                footer={null}\n                bordered\n                dataSource={history}\n                renderItem={item => (\n                    <List.Item>\n                        <div>\n                            <div>{`${item.email}`}</div>\n                            <div style={{ fontSize: 12, color: 'grey' }}>{moment(item.createdAt).format('DD/MM/YY - HH:mm')}</div>\n                            <div style={{ fontWeight: 'bold' }}>{item.text}</div>\n                        </div>\n                    </List.Item>\n                )}\n            />\n        </div>\n    );\n};\n\nexport default TableCellHistory;\n","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\pageSpreadsheet\\ColorizedForm.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\pageSpreadsheet\\FormCellColorizedCheck.js",["389","390"],"import Axios from 'axios';\nimport moment from 'moment';\nimport React, { useContext, useEffect, useState } from 'react';\nimport { SERVER_URL } from '../../constants';\nimport { Context as ProjectContext } from '../../contexts/projectContext';\nimport { convertHistoryData } from '../../utils';\nimport ButtonStyle from '../generalComponents/ButtonStyle';\nimport PanelCalendarDuration from '../generalComponents/PanelCalendarDuration';\n\n\n\n\nconst FormCellColorizedCheck = ({ setCellHistoryArr }) => {\n\n   const { state: stateProject } = useContext(ProjectContext);\n\n   const { projectId, token } = stateProject.allDataOneSheet;\n   const headersArr = stateProject.allDataOneSheet.publicSettings.headers;\n\n   useEffect(() => {\n      const fetchProjectHistory = async () => {\n         try {\n            const res = await Axios.get(`${SERVER_URL}/cell/history/`, { params: { token, projectId } });\n            setHistoryData(res.data);\n         } catch (err) {\n            console.log(err);\n         };\n      };\n      fetchProjectHistory();\n   }, []);\n\n   const [historyData, setHistoryData] = useState([]);\n\n   const [dateRange, setDateRange] = useState(null);\n   const onClickCheck = ({ start, end }) => {\n      let filterCells = convertHistoryData(historyData).filter(cell => {\n         let createdAt = moment(cell.createdAt).toDate();\n         return createdAt >= start && createdAt <= end;\n      });\n      const cellArr = filterCells.map(ch => {\n         const { row: rowId, headerKey } = ch;\n         let headerText = headersArr.find(hd => hd.key === headerKey).text;\n         return {\n            rowId,\n            header: headerText\n         }\n      });\n      let unique = cellArr.reduce((res, itm) => {\n         let result = res.find(item => JSON.stringify(item) == JSON.stringify(itm));\n         if (!result) return res.concat(itm);\n         return res;\n      }, []);\n\n      setCellHistoryArr(unique);\n   };\n   const checkCellWithinDates = (nos) => {\n      const addDays = (date, days) => {\n         let result = new Date(date);\n         result.setDate(result.getDate() + days);\n         return result;\n      };\n      let today = new Date();\n      let dateBefore = addDays(today, nos);\n      return {\n         start: dateBefore,\n         end: today\n      };\n   };\n\n\n   return (\n      <div style={{\n         padding: 15\n      }}>\n         <div style={{ display: 'flex', marginBottom: 10 }}>\n            <PanelCalendarDuration pickRangeDate={(e) => setDateRange(e)} />\n            <ButtonStyle\n               onClick={() => dateRange && onClickCheck({ start: dateRange[0], end: dateRange[1] })}\n               marginLeft={5}\n               name='Check Data Changed'\n            />\n         </div>\n         <div style={{ display: 'flex', marginBottom: 20, width: '100%' }}>\n            <ButtonStyle marginRight={5} name='Today'\n               onClick={() => onClickCheck(checkCellWithinDates(-1))}\n            />\n            <ButtonStyle marginRight={5} name='Last 3 Days'\n               onClick={() => onClickCheck(checkCellWithinDates(-3))}\n            />\n            <ButtonStyle marginRight={5} name='Last 7 Days'\n               onClick={() => onClickCheck(checkCellWithinDates(-7))}\n            />\n            <ButtonStyle marginRight={5} name='Last 14 Days'\n               onClick={() => onClickCheck(checkCellWithinDates(-14))}\n            />\n            <ButtonStyle marginRight={5} name='This Month'\n               onClick={() => onClickCheck(checkCellWithinDates(-31))}\n            />\n         </div>\n      </div>\n   );\n};\n\nexport default FormCellColorizedCheck;\n\n","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\pageSpreadsheet\\TableActivityHistory.js",["391","392","393","394","395","396"],"import { Modal } from 'antd';\nimport Axios from 'axios';\nimport moment from 'moment';\nimport React, { useContext, useEffect, useState } from 'react';\nimport BaseTable, { AutoResizer } from 'react-base-table';\nimport styled from 'styled-components';\nimport { colorType, SERVER_URL } from '../../constants';\nimport { Context as ProjectContext } from '../../contexts/projectContext';\nimport { Context as RowContext } from '../../contexts/rowContext';\nimport { convertHistoryData, mongoObjectId } from '../../utils';\nimport ButtonStyle from '../generalComponents/ButtonStyle';\nimport FormFilterActivityHistory from '../generalComponents/FormFilterActivityHistory';\nimport IconTable from '../generalComponents/IconTable';\nimport PanelCalendarDuration from '../generalComponents/PanelCalendarDuration';\n\n\n\nconst Table = (props) => {\n   return (\n      <AutoResizer>\n         {({ width, height }) => {\n            return (\n               <BaseTable\n                  {...props}\n                  width={width}\n                  height={height}\n               />\n            );\n         }}\n      </AutoResizer>\n   );\n};\n\nconst panelWidth = window.innerWidth * 0.8;\nconst panelHeight = window.innerHeight * 0.8;\n\nconst TableActivityHistory = (props) => {\n\n   const { state: stateProject } = useContext(ProjectContext);\n   const { state: stateRow } = useContext(RowContext);\n   const { allDataOneSheet: { publicSettings: { activityRecorded } } } = stateProject;\n\n\n\n   const { projectId, token } = stateProject.allDataOneSheet;\n   const { headers } = stateProject.allDataOneSheet.publicSettings;\n\n   const [historyAll, setHistoryAll] = useState(null);\n   const [historyAllInit, setHistoryAllInit] = useState(null);\n\n\n   const headersShown = [\n      'Drawing Number',\n      'Drawing Name',\n      'Column',\n      'Value',\n      'User',\n      'Created At',\n      'Action'\n   ];\n\n   const revKey = headers.find(hd => hd.text === 'Rev').key;\n   const statusKey = headers.find(hd => hd.text === 'Status').key;\n   const dwgNumber = headers.find(hd => hd.text === 'Drawing Number').key;\n   const dwgName = headers.find(hd => hd.text === 'Drawing Name').key;\n\n   useEffect(() => {\n      const fetchRowsAndCellHistory = async () => {\n         try {\n            const resRows = await Axios.get(`${SERVER_URL}/row/history/`, { params: { token, projectId } });\n            const resCells = await Axios.get(`${SERVER_URL}/cell/history/`, { params: { token, projectId } });\n\n            let rowsOutput = [];\n            resRows.data.forEach(row => {\n               const { history } = row;\n               if (history) rowsOutput.push({\n                  'Drawing Number': history[dwgNumber],\n                  'Drawing Name': history[dwgName],\n                  'Column': 'Rev & Status',\n                  'Value': `${history[revKey] || ''} - ${history[statusKey] || ''}`,\n                  'User': row.userId || 'n/a',\n                  'Created At': moment(row.createdAt).format('DD/MM/YY - HH:mm'),\n                  'Action': 'Save Drawing Version',\n                  id: mongoObjectId()\n               });\n            });\n\n            let cellsOutput = [];\n            convertHistoryData(resCells.data).forEach(cell => {\n               const row = stateRow.rowsAll.find(r => r.id === cell.row);\n               if (row) cellsOutput.push({\n                  'Drawing Number': row['Drawing Number'],\n                  'Drawing Name': row['Drawing Name'],\n                  'Column': headers.find(hd => hd.key === cell.headerKey).text,\n                  'Value': cell.text || '',\n                  'User': cell.email || 'n/a',\n                  'Created At': moment(cell.createdAt).format('DD/MM/YY - HH:mm'),\n                  'Action': 'Edit Cell',\n                  id: mongoObjectId()\n               });\n            });\n\n            const activityRecordedData = activityRecorded.map(r => {\n               return {\n                  'Drawing Number': r[dwgNumber],\n                  'Drawing Name': r[dwgName],\n                  'Column': undefined,\n                  'Value': undefined,\n                  'User': r.email || 'n/a',\n                  'Created At': moment(r.createdAt).format('DD/MM/YY - HH:mm'),\n                  'Action': r.action,\n                  id: mongoObjectId()\n               };\n            });\n            let outputArr = [...rowsOutput, ...cellsOutput, ...activityRecordedData];\n\n            setHistoryAll(sortDataBeforePrint(outputArr));\n            setHistoryAllInit(sortDataBeforePrint(outputArr));\n\n         } catch (err) {\n            console.log(err);\n         };\n      };\n      fetchRowsAndCellHistory();\n   }, []);\n\n   const [modalFilter, setModalFilter] = useState(false);\n\n   const applyFilter = (data) => {\n      setHistoryAll(data);\n      setModalFilter(false);\n   };\n\n   const sortDataBeforePrint = (data) => {\n      data.sort((b, a) => {\n         let aa = moment(a['Created At'], 'DD/MM/YY - HH:mm').toDate();\n         let bb = moment(b['Created At'], 'DD/MM/YY - HH:mm').toDate();\n         return aa > bb ? 1 : bb > aa ? -1 : 0\n      });\n\n      data.forEach((dt, i) => {\n         dt.index = i + 1;\n      });\n\n      return data;\n   };\n\n\n   const [dateRange, setDateRange] = useState(null);\n   const onClick = () => {\n      if (!dateRange) return;\n      let newData = historyAll.filter(r => {\n         let xxx = moment(r['Created At'], 'DD/MM/YY - HH:mm').toDate();\n         return xxx <= dateRange[1] && xxx >= dateRange[0];\n      });\n      setHistoryAll(sortDataBeforePrint(newData));\n   };\n   const resetDataFilter = () => {\n      setHistoryAll(sortDataBeforePrint(historyAllInit));\n   };\n\n   const checkDataWithinDays = (nos) => {\n      const addDays = (date, days) => {\n         let result = new Date(date);\n         result.setDate(result.getDate() + days);\n         return result;\n      };\n\n      let today = new Date();\n      let dateBefore = addDays(today, nos);\n      let newData = historyAllInit.filter(r => {\n         let xxx = moment(r['Created At'], 'DD/MM/YY - HH:mm').toDate();\n         return xxx <= today && xxx >= dateBefore;\n      });\n      setHistoryAll(sortDataBeforePrint(newData));\n   };\n\n\n   return (\n      <>\n         {historyAll && (\n            <div style={{\n               height: panelHeight,\n               background: 'white',\n               padding: 10,\n               display: 'flex',\n               justifyContent: 'center',\n               flexDirection: 'column',\n            }}>\n               <div style={{ paddingBottom: 10, fontSize: 20, fontWeight: 'bold', textAlign: 'center' }}>ACTIVITY HISTORY</div>\n               <div style={{ display: 'flex', marginBottom: 10 }}>\n                  <PanelCalendarDuration pickRangeDate={(e) => setDateRange(e)} />\n                  <ButtonStyle\n                     onClick={onClick}\n                     marginLeft={5}\n                     name='Check History'\n                  />\n               </div>\n               <div style={{ display: 'flex', marginBottom: 10 }}>\n                  <div style={{ marginRight: 10, display: 'flex' }}>\n                     <IconTable type='filter' onClick={() => setModalFilter(true)} isActivityTable={true} />\n                     <IconTable type='swap' onClick={resetDataFilter} />\n                  </div>\n\n                  <ButtonStyle\n                     onClick={() => { }}\n                     marginRight={5}\n                     name='Today'\n                     onClick={() => checkDataWithinDays(-1)}\n                  />\n                  <ButtonStyle\n                     onClick={() => { }}\n                     marginRight={5}\n                     name='Last 3 Days'\n                     onClick={() => checkDataWithinDays(-3)}\n                  />\n\n                  <ButtonStyle\n                     onClick={() => { }}\n                     marginRight={5}\n                     name='Last 7 Days'\n                     onClick={() => checkDataWithinDays(-7)}\n                  />\n                  <ButtonStyle\n                     onClick={() => { }}\n                     marginRight={5}\n                     name='Last 14 Days'\n                     onClick={() => checkDataWithinDays(-14)}\n                  />\n                  <ButtonStyle\n                     onClick={() => { }}\n                     marginRight={5}\n                     name='This Month'\n                     onClick={() => checkDataWithinDays(-31)}\n                  />\n               </div>\n\n               <div style={{\n                  width: panelWidth,\n                  height: '100%',\n                  margin: '0 auto',\n                  textAlign: 'center'\n               }}>\n                  <TableStyled\n                     fixed\n                     columns={generateColumns(headersShown)}\n                     data={historyAll}\n                     rowHeight={28}\n                  />\n               </div>\n            </div>\n         )}\n\n         {modalFilter && (\n            <ModalStyledSetting\n               title='Filter Data Activity History'\n               visible={modalFilter}\n               footer={null}\n               onCancel={() => {\n                  setModalFilter(false);\n               }}\n               destroyOnClose={true}\n               centered={true}\n            >\n               <FormFilterActivityHistory\n                  applyFilter={applyFilter}\n                  onClickCancelModal={() => setModalFilter(false)}\n                  rowsAll={historyAll}\n                  headers={headersShown}\n               />\n            </ModalStyledSetting>\n         )}\n      </>\n   );\n};\n\nexport default TableActivityHistory;\n\n\nconst generateColumns = (headers) => {\n\n   return [\n      {\n         key: 'index',\n         dataKey: 'index',\n         title: '',\n         width: 70,\n      },\n      ...headers.map((column, columnIndex) => ({\n         key: column,\n         dataKey: column,\n         title: column,\n         resizable: true,\n         width: getHeaderWidth2(column),\n      }))\n   ];\n};\nconst getHeaderWidth2 = (header) => {\n   if (header === 'Drawing Number') return 300;\n   if (header === 'Drawing Name') return 300;\n   if (header === 'Column') return 200;\n   if (header === 'Value') return 300;\n   if (header === 'User') return 200;\n   if (header === 'Created At') return 200;\n   if (header === 'Action') return 200;\n};\n\nconst ModalStyledSetting = styled(Modal)`\n    .ant-modal-content {\n        border-radius: 0;\n    }\n   .ant-modal-close {\n      display: none;\n   }\n   .ant-modal-header {\n      padding: 10px;\n   }\n   .ant-modal-title {\n        padding-left: 10px;\n        font-size: 20px;\n        font-weight: bold;\n   }\n   .ant-modal-body {\n      padding: 0;\n      display: flex;\n      justify-content: center;\n   }\n`;\nconst TableStyled = styled(Table)`\n\n\n    .BaseTable__row-cell-text {\n        color: black\n    }\n\n    .BaseTable__table .BaseTable__body {\n      /* -webkit-touch-callout: none;\n      -webkit-user-select: none;\n      -khtml-user-select: none;\n      -moz-user-select: none;\n      -ms-user-select: none;\n      user-select: none; */\n   }\n\n    .BaseTable__header-cell {\n        padding: 10px;\n        border-right: 1px solid #DCDCDC;\n        background: ${colorType.grey1};\n        color: black\n    }\n\n    .BaseTable__row-cell {\n        padding: 10px;\n        border-right: 1px solid #DCDCDC;\n        overflow: visible !important;\n    }\n`;\n\n\n\n\n","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\generalComponents\\ReorderColumnForm.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\generalComponents\\PanelConfirmResetMode.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\generalComponents\\PanelConfirm.js",["397"],"import { Input } from 'antd';\nimport React, { useState } from 'react';\nimport ButtonGroupComp from './ButtonGroupComp';\n\n\n\nconst PanelConfirm = ({ onClickCancel, onClickApply, content }) => {\n\n    const [value, setValue] = useState('');\n\n\n    return (\n        <div style={{\n            width: '100%',\n            height: '100%'\n        }}>\n            <div style={{ padding: 20 }}>\n                {(content === 'Do you want to save a new view template ?' ? (\n                    <div>\n                        <div>Do you want to save a new view template ?</div>\n                        <Input\n                            placeholder='Enter view template name...'\n                            style={{ width: '100%' }}\n                            value={value}\n                            onChange={(e) => setValue(e.target.value)}\n                            style={{\n                                marginBottom: 20,\n                                borderRadius: 0\n                             }}\n                        />\n                    </div>\n\n                ) : content) || 'Are you sure ?'}\n            </div>\n            <div style={{ padding: 20, paddingTop: 0, display: 'flex', flexDirection: 'row-reverse' }}>\n                <ButtonGroupComp\n                    onClickCancel={onClickCancel}\n                    onClickApply={() => onClickApply(value)}\n                />\n            </div>\n\n        </div>\n    );\n};\n\nexport default PanelConfirm;\n","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\generalComponents\\PanelPickNumber.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\generalComponents\\FormFilter.js",["398"],"import { Checkbox, Icon, Select, Tooltip } from 'antd';\nimport React, { useEffect, useState } from 'react';\nimport styled from 'styled-components';\nimport { colorType } from '../../constants';\nimport { mongoObjectId } from '../../utils/index';\nimport ButtonGroupComp from './ButtonGroupComp';\nimport ButtonStyle from './ButtonStyle';\n\n\nconst { Option } = Select;\n\n\nconst FormFilter = ({ applyFilter, onClickCancelModal, headers, rowsAll, modeFilter }) => {\n\n\n   const [filterColumn, setFilterColumn] = useState(\n      modeFilter.length > 1 ?\n         modeFilter : [\n            {\n               id: mongoObjectId(),\n               header: 'Status',\n               value: 'Select Value...'\n            },\n            {\n               isIncludedParent: 'included'\n            }\n         ]);\n\n   const setFilterSelect = (dataFilter) => {\n      let found = filterColumn.find(x => x.id === dataFilter.id);\n      found.header = dataFilter.header;\n      found.value = dataFilter.value;\n      setFilterColumn([...filterColumn]);\n   };\n\n\n   const onClickAddField = () => {\n      setFilterColumn([\n         ...filterColumn,\n         { id: mongoObjectId(), header: 'Select Field...', value: 'Select Value...' }\n      ]);\n   };\n\n   const removeFilterTag = (id) => {\n      const arr = filterColumn.filter(x => x.id !== id);\n      setFilterColumn([...arr]);\n   };\n\n   const filterObj = modeFilter.find(x => x.isIncludedParent);\n\n   const [isChecked, setIsChecked] = useState(\n      filterObj && filterObj.isIncludedParent === 'included' ? true :\n         filterObj && filterObj.isIncludedParent === 'not included' ? false :\n            true);\n   const onChangeBox = () => {\n\n      setIsChecked(!isChecked);\n      const found = filterColumn.find(x => x.isIncludedParent);\n\n      if (found) {\n         found.isIncludedParent = isChecked ? 'not included' : 'included';\n         setFilterColumn(filterColumn);\n      } else {\n         let xxx = [...filterColumn, { isIncludedParent: isChecked ? 'not included' : 'included' }];\n         setFilterColumn(xxx);\n      };\n   };\n\n   const onClickApply = () => {\n      const output = filterColumn.filter(x => {\n         return (x.header !== 'Select Field...' && x.value !== 'Select Value...') || x.isIncludedParent;\n      });\n      if (!filterColumn.find(item => item.isIncludedParent)) {\n         output.push({ isIncludedParent: 'not included' });\n      };\n\n      if (output.length === 1 && output[0].isIncludedParent === 'included') {\n         applyFilter([]);\n      } else {\n         applyFilter(output);\n      };\n\n   };\n\n   return (\n      <div style={{\n         width: '100%',\n         height: '100%'\n      }}>\n         <div style={{ padding: 20, borderBottom: `1px solid ${colorType.grey4}` }}>\n\n            <ButtonStyle\n               colorText='black'\n               marginRight={10}\n               borderColor={colorType.grey1}\n               background={colorType.grey4}\n               onClick={onClickAddField}\n               name='Add Field'\n               marginBottom={10}\n            />\n\n            {filterColumn.filter(x => x.id).map(item => (\n               <SelectComp\n                  key={item.id}\n                  id={item.id}\n                  data={item}\n                  setFilterSelect={setFilterSelect}\n                  removeFilterTag={removeFilterTag}\n                  headers={headers}\n                  rowsAll={rowsAll}\n               />\n            ))}\n            <div>\n               <CheckboxStyled\n                  onChange={onChangeBox}\n                  checked={isChecked}\n               >\n                  Include Parent Rows\n               </CheckboxStyled>\n            </div>\n         </div>\n\n         <div style={{ padding: 20, display: 'flex', flexDirection: 'row-reverse' }}>\n            <ButtonGroupComp\n               onClickCancel={onClickCancelModal}\n               onClickApply={onClickApply}\n            />\n         </div>\n      </div>\n   );\n};\nexport default FormFilter;\n\n\nconst CheckboxStyled = styled(Checkbox)`\n   .ant-checkbox-inner {\n      border-radius: 0;\n      border: none;\n      background: ${colorType.primary}\n   }\n`;\n\n\nconst IconStyled = styled.div`\n    margin-left: 7px;\n    width: 18px; \n    height: 18px; \n    border: 1px solid ${colorType.grey1};\n    text-align: center;\n    &:hover {\n        background-color: ${colorType.grey4};\n        cursor: pointer;\n    };\n`;\n\n\n\nconst SelectComp = ({ setFilterSelect, data, id, removeFilterTag, headers, rowsAll }) => {\n\n   const columnsValueArr = getColumnsValue(rowsAll, headers);\n\n   const [column, setColumn] = useState(data.header);\n\n   const [value, setValue] = useState(null);\n\n   useEffect(() => {\n      if (column) {\n         setValue(data.value || 'Select Value...');\n         setFilterSelect({ id, header: column, value: data.value || 'Select Value...' });\n      };\n   }, [column]);\n\n   return (\n      <div style={{ display: 'flex', paddingBottom: 10, width: '100%' }}>\n\n         <SelectStyled\n            defaultValue='Select Field...'\n            value={column}\n            style={{ marginRight: 13, width: '47%' }}\n            onChange={(column) => setColumn(column)}\n         >\n            {headers.filter(hd => columnsValueArr[hd]).map(hd => (\n               <Option key={hd} value={hd}>{hd}</Option>\n            ))}\n         </SelectStyled>\n\n\n         <SelectStyled\n            showSearch\n            optionFilterProp='children'\n            filterOption={(input, option) => {\n               let stringArray = input.split(/(\\s+)/).filter(str => str !== ' ');\n               let isFound = true;\n               stringArray.forEach(str => {\n                  if (option.props.children.toLowerCase().indexOf(str.toLowerCase()) === -1) {\n                     isFound = false;\n                  };\n               });\n               return isFound;\n            }}\n\n            style={{ width: '47%' }}\n            onChange={(value) => {\n               setFilterSelect({ id, header: column, value });\n               setValue(value);\n            }}\n            disabled={!column ? true : false}\n            value={value}\n         >\n            {column && columnsValueArr[column] && columnsValueArr[column].map(hd => (\n               <Option key={hd} value={hd}>{hd}</Option>\n            ))}\n         </SelectStyled>\n\n\n         <Tooltip title='Remove Field'>\n            <IconStyled>\n               <Icon\n                  type='delete'\n                  style={{ transform: 'translate(0, -3px)', color: colorType.grey2, fontSize: 12 }}\n                  onClick={() => removeFilterTag(id)}\n               />\n            </IconStyled>\n         </Tooltip>\n\n      </div>\n   );\n};\n\n\nconst SelectStyled = styled(Select)`\n    .ant-select-selection {\n        border-radius: 0;\n    }\n`;\n\n\nconst getColumnsValue = (rows, headers) => {\n   let valueObj = {};\n   headers.forEach(hd => {\n      let valueArr = [];\n      rows.filter(r => r._rowLevel === 1).forEach(row => {\n         valueArr.push(row[hd] || '');\n      });\n      valueArr = [...new Set(valueArr)].filter(e => e);\n      valueArr.sort((a, b) => a > b ? 1 : (b > a ? -1 : 0));\n      if (valueArr.length > 0) valueObj[hd] = valueArr;\n   });\n\n   return valueObj;\n};\n","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\pageDataEntrySheet\\TableActivityHistory2.js",["399","400","401","402","403","404","405","406"],"import { Modal } from 'antd';\nimport moment from 'moment';\nimport React, { useContext, useEffect, useState } from 'react';\nimport BaseTable, { AutoResizer } from 'react-base-table';\nimport styled from 'styled-components';\nimport { colorType } from '../../constants';\nimport { Context as ProjectContext } from '../../contexts/projectContext';\nimport { Context as RowContext } from '../../contexts/rowContext';\nimport { convertHistoryData, mongoObjectId } from '../../utils';\nimport ButtonStyle from '../generalComponents/ButtonStyle';\nimport FormFilterActivityHistory from '../generalComponents/FormFilterActivityHistory';\nimport IconTable from '../generalComponents/IconTable';\nimport PanelCalendarDuration from '../generalComponents/PanelCalendarDuration';\n\n\n\n\n\nconst Table = (props) => {\n    return (\n        <AutoResizer>\n            {({ width, height }) => {\n                return (\n                    <BaseTable\n                        {...props}\n                        width={width}\n                        height={height}\n                    />\n                );\n            }}\n        </AutoResizer>\n    );\n};\n\nconst panelWidth = window.innerWidth * 0.8;\nconst panelHeight = window.innerHeight * 0.8;\n\nconst TableActivityHistory2 = ({ cellsHistoryInCurrentSheet }) => {\n\n    const { state: stateProject } = useContext(ProjectContext);\n    const { state: stateRow } = useContext(RowContext);\n    const { allDataOneSheet: { publicSettings: { activityRecorded } } } = stateProject;\n\n\n    const { projectId, token } = stateProject.allDataOneSheet;\n    const { headers } = stateProject.allDataOneSheet.publicSettings;\n\n    const [historyAll, setHistoryAll] = useState(null);\n    const [historyAllInit, setHistoryAllInit] = useState(null);\n\n    const headersShown = [\n        'Column',\n        'Value',\n        'User',\n        'Created At',\n        'Action'\n    ];\n\n\n    // useEffect(() => {\n    //    const fetchRowsAndCellHistory = async () => {\n    //       try {\n    //          const res = await Axios.get(`${SERVER_URL}/cell/history/`, { params: { token, projectId } });\n\n    //          let cellsOutput = [];\n    //          convertHistoryData(res.data).forEach(cell => {\n    //             const row = stateRow.rowsAll.find(r => r.id === cell.row);\n    //             if (row) cellsOutput.push({\n    //                'Column': headers.find(hd => hd.key === cell.headerKey).text,\n    //                'Value': cell.text || '',\n    //                'User': cell.email || 'n/a',\n    //                'Created At': moment(cell.createdAt).format('DD/MM/YY - HH:mm'),\n    //                'Action': 'Edit Cell',\n    //                id: mongoObjectId()\n    //             });\n    //          });\n    //          const activityRecordedData = activityRecorded.map(r => {\n    //             return {\n    //                'Column': undefined,\n    //                'Value': undefined,\n    //                'User': r.email || 'n/a',\n    //                'Created At': moment(r.createdAt).format('DD/MM/YY - HH:mm'),\n    //                'Action': r.action,\n    //                id: mongoObjectId()\n    //             };\n    //          });\n    //          let outputArr = [...cellsOutput, ...activityRecordedData];\n\n    //          setHistoryAll(sortDataBeforePrint(outputArr));\n    //          setHistoryAllInit(sortDataBeforePrint(outputArr));\n\n    //       } catch (err) {\n    //          console.log(err);\n    //       };\n    //    };\n    //    fetchRowsAndCellHistory();\n    // }, []);\n\n\n\n    useEffect(() => {\n        let cellsOutput = [];\n        convertHistoryData(cellsHistoryInCurrentSheet).forEach(cell => {\n            const row = stateRow.rowsAll.find(r => r.id === cell.row);\n            if (row) cellsOutput.push({\n                'Column': headers.find(hd => hd.key === cell.headerKey).text,\n                'Value': cell.text || '',\n                'User': cell.email || 'n/a',\n                'Created At': moment(cell.createdAt).format('DD/MM/YY - HH:mm'),\n                'Action': 'Edit Cell',\n                id: mongoObjectId()\n            });\n        });\n        const activityRecordedData = activityRecorded.map(r => {\n            return {\n                'Column': undefined,\n                'Value': undefined,\n                'User': r.email || 'n/a',\n                'Created At': moment(r.createdAt).format('DD/MM/YY - HH:mm'),\n                'Action': r.action,\n                id: mongoObjectId()\n            };\n        });\n        let outputArr = [...cellsOutput, ...activityRecordedData];\n\n        setHistoryAll(sortDataBeforePrint(outputArr));\n        setHistoryAllInit(sortDataBeforePrint(outputArr));\n    }, []);\n\n\n\n\n\n    const [modalFilter, setModalFilter] = useState(false);\n\n    const applyFilter = (data) => {\n        setHistoryAll(data);\n        setModalFilter(false);\n    };\n\n    const sortDataBeforePrint = (data) => {\n        data.sort((b, a) => {\n            let aa = moment(a['Created At'], 'DD/MM/YY - HH:mm').toDate();\n            let bb = moment(b['Created At'], 'DD/MM/YY - HH:mm').toDate();\n            return aa > bb ? 1 : bb > aa ? -1 : 0\n        });\n\n        data.forEach((dt, i) => {\n            dt.index = i + 1;\n        });\n\n        return data;\n    };\n\n\n    const [dateRange, setDateRange] = useState(null);\n    const onClick = () => {\n        if (!dateRange) return;\n        let newData = historyAll.filter(r => {\n            let xxx = moment(r['Created At'], 'DD/MM/YY - HH:mm').toDate();\n            return xxx <= dateRange[1] && xxx >= dateRange[0];\n        });\n        setHistoryAll(sortDataBeforePrint(newData));\n    };\n    const resetDataFilter = () => {\n        setHistoryAll(sortDataBeforePrint(historyAllInit));\n    };\n\n    const checkDataWithinDays = (nos) => {\n        const addDays = (date, days) => {\n            let result = new Date(date);\n            result.setDate(result.getDate() + days);\n            return result;\n        };\n\n        let today = new Date();\n        let dateBefore = addDays(today, nos);\n        let newData = historyAllInit.filter(r => {\n            let xxx = moment(r['Created At'], 'DD/MM/YY - HH:mm').toDate();\n            return xxx <= today && xxx >= dateBefore;\n        });\n        setHistoryAll(sortDataBeforePrint(newData));\n    };\n\n\n    return (\n        <>\n            {historyAll && (\n                <div style={{\n                    height: panelHeight,\n                    background: 'white',\n                    padding: 10,\n                    display: 'flex',\n                    justifyContent: 'center',\n                    flexDirection: 'column',\n                }}>\n                    <div style={{ paddingBottom: 10, fontSize: 20, fontWeight: 'bold', textAlign: 'center' }}>ACTIVITY HISTORY</div>\n                    <div style={{ display: 'flex', marginBottom: 10 }}>\n                        <PanelCalendarDuration pickRangeDate={(e) => setDateRange(e)} />\n                        <ButtonStyle\n                            onClick={onClick}\n                            marginLeft={5}\n                            name='Check History'\n                        />\n                    </div>\n                    <div style={{ display: 'flex', marginBottom: 10 }}>\n                        <div style={{ marginRight: 10, display: 'flex' }}>\n                            <IconTable type='filter' onClick={() => setModalFilter(true)} />\n                            <IconTable type='swap' onClick={resetDataFilter} />\n                        </div>\n\n                        <ButtonStyle\n                            onClick={() => { }}\n                            marginRight={5}\n                            name='Today'\n                            onClick={() => checkDataWithinDays(-1)}\n                        />\n                        <ButtonStyle\n                            onClick={() => { }}\n                            marginRight={5}\n                            name='Last 3 Days'\n                            onClick={() => checkDataWithinDays(-3)}\n                        />\n\n                        <ButtonStyle\n                            onClick={() => { }}\n                            marginRight={5}\n                            name='Last 7 Days'\n                            onClick={() => checkDataWithinDays(-7)}\n                        />\n                        <ButtonStyle\n                            onClick={() => { }}\n                            marginRight={5}\n                            name='Last 14 Days'\n                            onClick={() => checkDataWithinDays(-14)}\n                        />\n                        <ButtonStyle\n                            onClick={() => { }}\n                            marginRight={5}\n                            name='This Month'\n                            onClick={() => checkDataWithinDays(-31)}\n                        />\n                    </div>\n\n                    <div style={{\n                        width: panelWidth,\n                        height: '100%',\n                        margin: '0 auto',\n                        textAlign: 'center'\n                    }}>\n                        <TableStyled\n                            fixed\n                            columns={generateColumns(headersShown)}\n                            data={historyAll}\n                            rowHeight={28}\n                        />\n                    </div>\n                </div>\n            )}\n\n            {modalFilter && (\n                <ModalStyledSetting\n                    title='Filter Data Activity History'\n                    visible={modalFilter}\n                    footer={null}\n                    onCancel={() => {\n                        setModalFilter(false);\n                    }}\n                    destroyOnClose={true}\n                    centered={true}\n                >\n                    <FormFilterActivityHistory\n                        applyFilter={applyFilter}\n                        onClickCancelModal={() => setModalFilter(false)}\n                        rowsAll={historyAll}\n                        headers={headersShown}\n                    />\n                </ModalStyledSetting>\n            )}\n        </>\n    );\n};\n\nexport default TableActivityHistory2;\n\n\nconst generateColumns = (headers) => {\n\n    return [\n        {\n            key: 'index',\n            dataKey: 'index',\n            title: '',\n            width: 70,\n        },\n        ...headers.map((column) => ({\n            key: column,\n            dataKey: column,\n            title: column,\n            resizable: true,\n            width: 300,\n        }))\n    ];\n};\n\n\nconst ModalStyledSetting = styled(Modal)`\n    .ant-modal-content {\n        border-radius: 0;\n    }\n   .ant-modal-close {\n      display: none;\n   }\n   .ant-modal-header {\n      padding: 10px;\n   }\n   .ant-modal-title {\n        padding-left: 10px;\n        font-size: 20px;\n        font-weight: bold;\n   }\n   .ant-modal-body {\n      padding: 0;\n      display: flex;\n      justify-content: center;\n   }\n`;\nconst TableStyled = styled(Table)`\n\n\n   .BaseTable__row-cell-text {\n      color: black\n   }\n\n   .BaseTable__table .BaseTable__body {\n      /* -webkit-touch-callout: none;\n      -webkit-user-select: none;\n      -khtml-user-select: none;\n      -moz-user-select: none;\n      -ms-user-select: none;\n      user-select: none; */\n   }\n\n   .BaseTable__header-cell {\n      padding: 10px;\n      border-right: 1px solid #DCDCDC;\n      background: ${colorType.grey1};\n      color: black\n   }\n\n   .BaseTable__row-cell {\n      padding: 10px;\n      border-right: 1px solid #DCDCDC;\n      overflow: visible !important;\n   }\n`;\n\n\n\n\n","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\generalComponents\\FormGroup.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\pageDataEntrySheet\\TableCellHistory2.js",["407","408","409","410","411","412"],"import { List } from 'antd';\nimport moment from 'moment';\nimport React, { useContext, useState } from 'react';\nimport { Context as ProjectContext } from '../../contexts/projectContext';\nimport { Context as RowContext } from '../../contexts/rowContext';\n\n\n\nconst TableCellHistory2 = (props) => {\n\n    const { rowData: { id: rowId }, column, cellOneHistory } = props;\n\n    const {\n        state: stateProject\n    } = useContext(ProjectContext);\n\n    const { state: stateRow } = useContext(RowContext);\n\n    const { projectId, token } = stateProject.allDataOneSheet;\n    const headers = stateProject.allDataOneSheet.publicSettings.headers;\n    const headerKey = headers.find(hd => hd.text === column.key).key;\n\n\n    const [history, setHistory] = useState(cellOneHistory);\n\n    // useEffect(() => {\n    //    const fetchCellHistory = async () => {\n    //       try {\n    //          const res = await Axios.get(`${SERVER_URL}/cell/history/one-cell/`, { params: { token, projectId, rowId, headerKey } });\n    //          setHistory(res.data.histories.reverse());\n    //       } catch (err) {\n    //          console.log(err);\n    //       };\n    //    };\n    //    fetchCellHistory();\n    // }, [])\n\n\n    return (\n        <div style={{ width: '100%', padding: 15, maxHeight: window.innerHeight * 0.7, overflowY: 'scroll' }}>\n            <List\n                size='small'\n                header={null}\n                footer={null}\n                bordered\n                dataSource={history}\n                renderItem={item => (\n                    <List.Item>\n                        <div>\n                            <div>{`${item.email}`}</div>\n                            <div style={{ fontSize: 12, color: 'grey' }}>{moment(item.createdAt).format('DD/MM/YY - HH:mm')}</div>\n                            <div style={{ fontWeight: 'bold' }}>{item.text}</div>\n                        </div>\n                    </List.Item>\n                )}\n            />\n        </div>\n    );\n};\n\nexport default TableCellHistory2;\n","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\pageDataEntrySheet\\ColorizedForm2.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\pageDataEntrySheet\\FormCellColorizedCheck2.js",["413","414","415","416"],"import moment from 'moment';\nimport React, { useContext, useState } from 'react';\nimport { Context as ProjectContext } from '../../contexts/projectContext';\nimport { convertHistoryData } from '../../utils';\nimport ButtonStyle from '../generalComponents/ButtonStyle';\nimport PanelCalendarDuration from '../generalComponents/PanelCalendarDuration';\n\n\n\n\n\n\nconst FormCellColorizedCheck2 = ({ setCellHistoryArr, cellsHistoryInCurrentSheet }) => {\n\n    const { state: stateProject } = useContext(ProjectContext);\n\n    const { projectId, token, publicSettings } = stateProject.allDataOneSheet;\n\n    const { headers: headersArr } = publicSettings;\n\n\n    // useEffect(() => {\n    //    const fetchProjectHistory = async () => {\n    //       try {\n    //          const res = await Axios.get(`${SERVER_URL}/cell/history/`, { params: { token, projectId } });\n    //          setHistoryData(res.data);\n    //       } catch (err) {\n    //          console.log(err);\n    //       };\n    //    };\n    //    fetchProjectHistory();\n    // }, []);\n\n\n    const [historyData, setHistoryData] = useState(cellsHistoryInCurrentSheet);\n\n    const [dateRange, setDateRange] = useState(null);\n    const onClickCheck = ({ start, end }) => {\n        let filterCells = convertHistoryData(historyData).filter(cell => {\n            let createdAt = moment(cell.createdAt).toDate();\n            return createdAt >= start && createdAt <= end;\n        });\n        const cellArr = filterCells.map(ch => {\n            const { row: rowId, headerKey } = ch;\n            let headerText = headersArr.find(hd => hd.key === headerKey).text;\n            return {\n                rowId,\n                header: headerText\n            };\n        });\n        let unique = cellArr.reduce((res, itm) => {\n            let result = res.find(item => JSON.stringify(item) == JSON.stringify(itm));\n            if (!result) return res.concat(itm);\n            return res;\n        }, []);\n\n        setCellHistoryArr(unique);\n    };\n    const checkCellWithinDates = (nos) => {\n        const addDays = (date, days) => {\n            let result = new Date(date);\n            result.setDate(result.getDate() + days);\n            return result;\n        };\n        let today = new Date();\n        let dateBefore = addDays(today, nos);\n        return {\n            start: dateBefore,\n            end: today\n        };\n    };\n\n\n    return (\n        <div style={{\n            padding: 15\n        }}>\n            <div style={{ display: 'flex', marginBottom: 10 }}>\n                <PanelCalendarDuration pickRangeDate={(e) => setDateRange(e)} />\n                <ButtonStyle\n                    onClick={() => dateRange && onClickCheck({ start: dateRange[0], end: dateRange[1] })}\n                    marginLeft={5}\n                    name='Check Data Changed'\n                />\n            </div>\n            <div style={{ display: 'flex', marginBottom: 20, width: '100%' }}>\n                <ButtonStyle marginRight={5} name='Today'\n                    onClick={() => onClickCheck(checkCellWithinDates(-1))}\n                />\n                <ButtonStyle marginRight={5} name='Last 3 Days'\n                    onClick={() => onClickCheck(checkCellWithinDates(-3))}\n                />\n                <ButtonStyle marginRight={5} name='Last 7 Days'\n                    onClick={() => onClickCheck(checkCellWithinDates(-7))}\n                />\n                <ButtonStyle marginRight={5} name='Last 14 Days'\n                    onClick={() => onClickCheck(checkCellWithinDates(-14))}\n                />\n                <ButtonStyle marginRight={5} name='This Month'\n                    onClick={() => onClickCheck(checkCellWithinDates(-31))}\n                />\n            </div>\n        </div>\n    );\n};\n\nexport default FormCellColorizedCheck2;\n\n","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\DashboardLayout\\componentsDashboard\\ChartBarRecord.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\generalComponents\\ButtonStyle.js",["417"],"import { Button } from 'antd';\nimport React from 'react';\n\n\n\nconst ButtonStyle = ({\n   colorText,\n   marginRight,\n   marginLeft,\n   borderColor,\n   borderOverwritten,\n   marginBottom,\n   background,\n   name,\n   onClick,\n   disabled\n}) => {\n\n   return (\n      <Button\n         style={{\n            borderRadius: 0,\n            background: background,\n            color: colorText,\n            border: 'none',\n            marginRight,\n            marginBottom,\n            marginLeft,\n            border: `1px solid ${borderOverwritten ? borderColor : (borderColor || background)}`,\n         }}\n         onClick={onClick}\n         disabled={disabled}\n      >\n         {name}\n      </Button>\n   );\n};\n\nexport default ButtonStyle;\n\n\n","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\generalComponents\\PanelCalendarDuration.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\generalComponents\\FormFilterActivityHistory.js",[],{"ruleId":"418","replacedBy":"419"},{"ruleId":"420","replacedBy":"421"},{"ruleId":"422","severity":1,"message":"423","line":47,"column":7,"nodeType":"424","endLine":47,"endColumn":9,"suggestions":"425"},{"ruleId":"426","severity":1,"message":"427","line":317,"column":10,"nodeType":"428","messageId":"429","endLine":317,"endColumn":12},{"ruleId":"422","severity":1,"message":"430","line":89,"column":7,"nodeType":"424","endLine":89,"endColumn":9,"suggestions":"431"},{"ruleId":"426","severity":1,"message":"432","line":209,"column":45,"nodeType":"428","messageId":"429","endLine":209,"endColumn":67},{"ruleId":"422","severity":1,"message":"433","line":418,"column":7,"nodeType":"424","endLine":418,"endColumn":23,"suggestions":"434"},{"ruleId":"435","severity":1,"message":"436","line":791,"column":19,"nodeType":"437","messageId":"438","endLine":791,"endColumn":21},{"ruleId":"426","severity":1,"message":"439","line":877,"column":7,"nodeType":"428","messageId":"429","endLine":877,"endColumn":17},{"ruleId":"435","severity":1,"message":"436","line":1120,"column":24,"nodeType":"437","messageId":"438","endLine":1120,"endColumn":26},{"ruleId":"426","severity":1,"message":"440","line":1151,"column":32,"nodeType":"428","messageId":"429","endLine":1151,"endColumn":44},{"ruleId":"422","severity":1,"message":"430","line":93,"column":7,"nodeType":"424","endLine":93,"endColumn":9,"suggestions":"441"},{"ruleId":"422","severity":1,"message":"442","line":460,"column":7,"nodeType":"424","endLine":460,"endColumn":9,"suggestions":"443"},{"ruleId":"426","severity":1,"message":"444","line":478,"column":28,"nodeType":"428","messageId":"429","endLine":478,"endColumn":46},{"ruleId":"435","severity":1,"message":"436","line":806,"column":19,"nodeType":"437","messageId":"438","endLine":806,"endColumn":21},{"ruleId":"435","severity":1,"message":"436","line":1136,"column":24,"nodeType":"437","messageId":"438","endLine":1136,"endColumn":26},{"ruleId":"426","severity":1,"message":"445","line":1231,"column":7,"nodeType":"428","messageId":"429","endLine":1231,"endColumn":27},{"ruleId":"426","severity":1,"message":"446","line":66,"column":21,"nodeType":"428","messageId":"429","endLine":66,"endColumn":26},{"ruleId":"447","severity":1,"message":"448","line":149,"column":23,"nodeType":"449","messageId":"450","endLine":149,"endColumn":25},{"ruleId":"447","severity":1,"message":"448","line":159,"column":23,"nodeType":"449","messageId":"450","endLine":159,"endColumn":25},{"ruleId":"447","severity":1,"message":"448","line":169,"column":23,"nodeType":"449","messageId":"450","endLine":169,"endColumn":25},{"ruleId":"447","severity":1,"message":"448","line":195,"column":28,"nodeType":"449","messageId":"450","endLine":195,"endColumn":30},{"ruleId":"447","severity":1,"message":"448","line":196,"column":18,"nodeType":"449","messageId":"450","endLine":196,"endColumn":20},{"ruleId":"447","severity":1,"message":"448","line":197,"column":21,"nodeType":"449","messageId":"450","endLine":197,"endColumn":23},{"ruleId":"447","severity":1,"message":"448","line":214,"column":28,"nodeType":"449","messageId":"450","endLine":214,"endColumn":30},{"ruleId":"447","severity":1,"message":"448","line":215,"column":18,"nodeType":"449","messageId":"450","endLine":215,"endColumn":20},{"ruleId":"447","severity":1,"message":"448","line":216,"column":21,"nodeType":"449","messageId":"450","endLine":216,"endColumn":23},{"ruleId":"426","severity":1,"message":"451","line":255,"column":13,"nodeType":"428","messageId":"429","endLine":255,"endColumn":19},{"ruleId":"447","severity":1,"message":"448","line":255,"column":28,"nodeType":"449","messageId":"450","endLine":255,"endColumn":30},{"ruleId":"447","severity":1,"message":"448","line":256,"column":18,"nodeType":"449","messageId":"450","endLine":256,"endColumn":20},{"ruleId":"447","severity":1,"message":"448","line":257,"column":21,"nodeType":"449","messageId":"450","endLine":257,"endColumn":23},{"ruleId":"426","severity":1,"message":"452","line":10,"column":46,"nodeType":"428","messageId":"429","endLine":10,"endColumn":53},{"ruleId":"426","severity":1,"message":"444","line":81,"column":28,"nodeType":"428","messageId":"429","endLine":81,"endColumn":46},{"ruleId":"426","severity":1,"message":"453","line":313,"column":7,"nodeType":"428","messageId":"429","endLine":313,"endColumn":22},{"ruleId":"426","severity":1,"message":"454","line":99,"column":7,"nodeType":"428","messageId":"429","endLine":99,"endColumn":14},{"ruleId":"422","severity":1,"message":"455","line":163,"column":7,"nodeType":"424","endLine":163,"endColumn":29,"suggestions":"456"},{"ruleId":"422","severity":1,"message":"457","line":180,"column":7,"nodeType":"424","endLine":180,"endColumn":36,"suggestions":"458"},{"ruleId":"426","severity":1,"message":"459","line":11,"column":20,"nodeType":"428","messageId":"429","endLine":11,"endColumn":29},{"ruleId":"460","severity":1,"message":"461","line":231,"column":44,"nodeType":"449","messageId":"462","endLine":231,"endColumn":45},{"ruleId":"426","severity":1,"message":"463","line":29,"column":71,"nodeType":"428","messageId":"429","endLine":29,"endColumn":81},{"ruleId":"464","severity":1,"message":"465","line":328,"column":58,"nodeType":"437","messageId":"466","endLine":328,"endColumn":141},{"ruleId":"464","severity":1,"message":"465","line":373,"column":67,"nodeType":"437","messageId":"466","endLine":373,"endColumn":150},{"ruleId":"464","severity":1,"message":"467","line":918,"column":44,"nodeType":"437","messageId":"466","endLine":918,"endColumn":93},{"ruleId":"447","severity":1,"message":"448","line":918,"column":73,"nodeType":"449","messageId":"450","endLine":918,"endColumn":75},{"ruleId":"464","severity":1,"message":"467","line":936,"column":44,"nodeType":"437","messageId":"466","endLine":936,"endColumn":93},{"ruleId":"447","severity":1,"message":"448","line":936,"column":73,"nodeType":"449","messageId":"450","endLine":936,"endColumn":75},{"ruleId":"426","severity":1,"message":"468","line":943,"column":7,"nodeType":"428","messageId":"429","endLine":943,"endColumn":38},{"ruleId":"464","severity":1,"message":"467","line":954,"column":44,"nodeType":"437","messageId":"466","endLine":954,"endColumn":93},{"ruleId":"447","severity":1,"message":"448","line":954,"column":73,"nodeType":"449","messageId":"450","endLine":954,"endColumn":75},{"ruleId":"464","severity":1,"message":"467","line":975,"column":44,"nodeType":"437","messageId":"466","endLine":975,"endColumn":93},{"ruleId":"447","severity":1,"message":"448","line":975,"column":73,"nodeType":"449","messageId":"450","endLine":975,"endColumn":75},{"ruleId":"447","severity":1,"message":"469","line":984,"column":47,"nodeType":"449","messageId":"450","endLine":984,"endColumn":49},{"ruleId":"422","severity":1,"message":"455","line":215,"column":7,"nodeType":"424","endLine":215,"endColumn":29,"suggestions":"470"},{"ruleId":"422","severity":1,"message":"457","line":233,"column":7,"nodeType":"424","endLine":233,"endColumn":36,"suggestions":"471"},{"ruleId":"460","severity":1,"message":"461","line":382,"column":44,"nodeType":"449","messageId":"462","endLine":382,"endColumn":45},{"ruleId":"472","severity":1,"message":"473","line":798,"column":75,"nodeType":"474","messageId":"475","endLine":798,"endColumn":117,"fix":"476"},{"ruleId":"464","severity":1,"message":"465","line":351,"column":64,"nodeType":"437","messageId":"466","endLine":351,"endColumn":147},{"ruleId":"435","severity":1,"message":"436","line":587,"column":40,"nodeType":"437","messageId":"438","endLine":587,"endColumn":42},{"ruleId":"435","severity":1,"message":"436","line":707,"column":29,"nodeType":"437","messageId":"438","endLine":707,"endColumn":31},{"ruleId":"464","severity":1,"message":"467","line":922,"column":44,"nodeType":"437","messageId":"466","endLine":922,"endColumn":93},{"ruleId":"447","severity":1,"message":"448","line":922,"column":73,"nodeType":"449","messageId":"450","endLine":922,"endColumn":75},{"ruleId":"464","severity":1,"message":"467","line":940,"column":44,"nodeType":"437","messageId":"466","endLine":940,"endColumn":93},{"ruleId":"447","severity":1,"message":"448","line":940,"column":73,"nodeType":"449","messageId":"450","endLine":940,"endColumn":75},{"ruleId":"464","severity":1,"message":"467","line":958,"column":44,"nodeType":"437","messageId":"466","endLine":958,"endColumn":93},{"ruleId":"447","severity":1,"message":"448","line":958,"column":73,"nodeType":"449","messageId":"450","endLine":958,"endColumn":75},{"ruleId":"464","severity":1,"message":"467","line":979,"column":44,"nodeType":"437","messageId":"466","endLine":979,"endColumn":93},{"ruleId":"447","severity":1,"message":"448","line":979,"column":73,"nodeType":"449","messageId":"450","endLine":979,"endColumn":75},{"ruleId":"447","severity":1,"message":"469","line":988,"column":47,"nodeType":"449","messageId":"450","endLine":988,"endColumn":49},{"ruleId":"426","severity":1,"message":"477","line":118,"column":23,"nodeType":"428","messageId":"429","endLine":118,"endColumn":31},{"ruleId":"426","severity":1,"message":"459","line":13,"column":19,"nodeType":"428","messageId":"429","endLine":13,"endColumn":28},{"ruleId":"464","severity":1,"message":"467","line":70,"column":44,"nodeType":"437","messageId":"466","endLine":70,"endColumn":91},{"ruleId":"447","severity":1,"message":"448","line":70,"column":70,"nodeType":"449","messageId":"450","endLine":70,"endColumn":72},{"ruleId":"447","severity":1,"message":"448","line":163,"column":30,"nodeType":"449","messageId":"450","endLine":163,"endColumn":32},{"ruleId":"447","severity":1,"message":"448","line":194,"column":16,"nodeType":"449","messageId":"450","endLine":194,"endColumn":18},{"ruleId":"478","severity":1,"message":"479","line":4,"column":1,"nodeType":"480","endLine":23,"endColumn":3},{"ruleId":"426","severity":1,"message":"481","line":5,"column":9,"nodeType":"428","messageId":"429","endLine":5,"endColumn":14},{"ruleId":"426","severity":1,"message":"482","line":5,"column":16,"nodeType":"428","messageId":"429","endLine":5,"endColumn":22},{"ruleId":"422","severity":1,"message":"483","line":29,"column":7,"nodeType":"424","endLine":29,"endColumn":17,"suggestions":"484"},{"ruleId":"422","severity":1,"message":"485","line":84,"column":7,"nodeType":"424","endLine":84,"endColumn":9,"suggestions":"486"},{"ruleId":"426","severity":1,"message":"487","line":20,"column":16,"nodeType":"428","messageId":"429","endLine":20,"endColumn":24},{"ruleId":"422","severity":1,"message":"488","line":43,"column":8,"nodeType":"424","endLine":43,"endColumn":10,"suggestions":"489"},{"ruleId":"422","severity":1,"message":"490","line":30,"column":7,"nodeType":"424","endLine":30,"endColumn":9,"suggestions":"491"},{"ruleId":"447","severity":1,"message":"448","line":49,"column":61,"nodeType":"449","messageId":"450","endLine":49,"endColumn":63},{"ruleId":"422","severity":1,"message":"492","line":125,"column":7,"nodeType":"424","endLine":125,"endColumn":9,"suggestions":"493"},{"ruleId":"494","severity":1,"message":"495","line":209,"column":22,"nodeType":"496","endLine":209,"endColumn":61},{"ruleId":"494","severity":1,"message":"495","line":215,"column":22,"nodeType":"496","endLine":215,"endColumn":61},{"ruleId":"494","severity":1,"message":"495","line":222,"column":22,"nodeType":"496","endLine":222,"endColumn":61},{"ruleId":"494","severity":1,"message":"495","line":228,"column":22,"nodeType":"496","endLine":228,"endColumn":62},{"ruleId":"494","severity":1,"message":"495","line":234,"column":22,"nodeType":"496","endLine":234,"endColumn":62},{"ruleId":"494","severity":1,"message":"495","line":26,"column":29,"nodeType":"496","endLine":29,"endColumn":32},{"ruleId":"422","severity":1,"message":"497","line":171,"column":7,"nodeType":"424","endLine":171,"endColumn":15,"suggestions":"498"},{"ruleId":"426","severity":1,"message":"499","line":45,"column":13,"nodeType":"428","messageId":"429","endLine":45,"endColumn":22},{"ruleId":"426","severity":1,"message":"500","line":45,"column":24,"nodeType":"428","messageId":"429","endLine":45,"endColumn":29},{"ruleId":"422","severity":1,"message":"501","line":128,"column":8,"nodeType":"424","endLine":128,"endColumn":10,"suggestions":"502"},{"ruleId":"494","severity":1,"message":"495","line":216,"column":29,"nodeType":"496","endLine":216,"endColumn":68},{"ruleId":"494","severity":1,"message":"495","line":222,"column":29,"nodeType":"496","endLine":222,"endColumn":68},{"ruleId":"494","severity":1,"message":"495","line":229,"column":29,"nodeType":"496","endLine":229,"endColumn":68},{"ruleId":"494","severity":1,"message":"495","line":235,"column":29,"nodeType":"496","endLine":235,"endColumn":69},{"ruleId":"494","severity":1,"message":"495","line":241,"column":29,"nodeType":"496","endLine":241,"endColumn":69},{"ruleId":"426","severity":1,"message":"503","line":11,"column":28,"nodeType":"428","messageId":"429","endLine":11,"endColumn":33},{"ruleId":"426","severity":1,"message":"487","line":17,"column":20,"nodeType":"428","messageId":"429","endLine":17,"endColumn":28},{"ruleId":"426","severity":1,"message":"499","line":19,"column":13,"nodeType":"428","messageId":"429","endLine":19,"endColumn":22},{"ruleId":"426","severity":1,"message":"500","line":19,"column":24,"nodeType":"428","messageId":"429","endLine":19,"endColumn":29},{"ruleId":"426","severity":1,"message":"504","line":21,"column":11,"nodeType":"428","messageId":"429","endLine":21,"endColumn":20},{"ruleId":"426","severity":1,"message":"505","line":24,"column":21,"nodeType":"428","messageId":"429","endLine":24,"endColumn":31},{"ruleId":"426","severity":1,"message":"499","line":17,"column":13,"nodeType":"428","messageId":"429","endLine":17,"endColumn":22},{"ruleId":"426","severity":1,"message":"500","line":17,"column":24,"nodeType":"428","messageId":"429","endLine":17,"endColumn":29},{"ruleId":"426","severity":1,"message":"506","line":35,"column":25,"nodeType":"428","messageId":"429","endLine":35,"endColumn":39},{"ruleId":"447","severity":1,"message":"448","line":52,"column":64,"nodeType":"449","messageId":"450","endLine":52,"endColumn":66},{"ruleId":"507","severity":1,"message":"508","line":29,"column":13,"nodeType":"509","messageId":"450","endLine":29,"endColumn":19},"no-native-reassign",["510"],"no-negated-in-lhs",["511"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'projectsArray' and 'token'. Either include them or remove the dependency array. If 'setDataDB' needs the current value of 'projectsArray', you can also switch to useReducer instead of useState and read 'projectsArray' in the reducer.","ArrayExpression",["512"],"no-unused-vars","'md' is assigned a value but never used.","Identifier","unusedVar","React Hook useEffect has a missing dependency: 'EventKeyDown'. Either include it or remove the dependency array.",["513"],"'OverwriteCellsModified' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'email', 'fetchDataOneSheet', 'getSheetRows', 'projectId', 'projectName', 'role', 'setUserData', and 'token'. Either include them or remove the dependency array.",["514"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'SpinStyled' is assigned a value but never used.","'userSettings' is assigned a value but never used.",["515"],"React Hook useEffect has missing dependencies: 'companies', 'company', 'email', 'fetchDataOneSheet', 'getSheetRows', 'projectId', 'projectName', 'role', 'roleTradeCompany', 'setUserData', and 'token'. Either include them or remove the dependency array.",["516"],"'setExpandColumnKey' is assigned a value but never used.","'compareDataExcelVsDB' is assigned a value but never used.","'value' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'addNos' is assigned a value but never used.","'rowsAll' is assigned a value but never used.","'generateColumns' is assigned a value but never used.","'IconRFA' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'columnIndex', 'inputRender', 'isLockedColumn', 'isLockedRow', and 'rowIndex'. Either include them or remove the dependency array.",["517"],"React Hook useEffect has missing dependencies: 'cellEditDone', 'columnIndex', 'inputRender', 'isLockedColumn', 'isLockedRow', 'rowIndex', and 'stateCell.tempCopiedText'. Either include them or remove the dependency array.",["518"],"'stateCell' is assigned a value but never used.","no-useless-concat","Unexpected string concatenation of literals.","unexpectedConcat","'setLoading' is assigned a value but never used.","no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'arrayNodes'.","unsafeRefs","Function declared in a loop contains unsafe references to variable(s) 'preRow'.","'_processChainRowsSplitGroupFnc2' is assigned a value but never used.","Expected '!==' and instead saw '!='.",["519"],["520"],"no-useless-computed-key","Unnecessarily computed property ['Drawing Number'] found.","Property","unnecessarilyComputedProperty",{"range":"521","text":"522"},"'children' is assigned a value but never used.","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","'Group' is assigned a value but never used.","'Button' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'actionType', 'styleFrozen', 'styleHidden', and 'styleShown'. Either include them or remove the dependency array.",["523"],"React Hook useEffect has missing dependencies: 'headers', 'projectId', 'rowData', 'rowId', 'stateRow.rowsVersionsToSave', and 'token'. Either include them or remove the dependency array.",["524"],"'stateRow' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'headerKey', 'projectId', 'rowId', and 'token'. Either include them or remove the dependency array.",["525"],"React Hook useEffect has missing dependencies: 'projectId' and 'token'. Either include them or remove the dependency array.",["526"],"React Hook useEffect has missing dependencies: 'activityRecorded', 'dwgName', 'dwgNumber', 'headers', 'projectId', 'revKey', 'stateRow.rowsAll', 'statusKey', and 'token'. Either include them or remove the dependency array.",["527"],"react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","React Hook useEffect has missing dependencies: 'data.value', 'id', and 'setFilterSelect'. Either include them or remove the dependency array. If 'setFilterSelect' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["528"],"'projectId' is assigned a value but never used.","'token' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'activityRecorded', 'cellsHistoryInCurrentSheet', 'headers', and 'stateRow.rowsAll'. Either include them or remove the dependency array.",["529"],"'rowId' is assigned a value but never used.","'headerKey' is assigned a value but never used.","'setHistory' is assigned a value but never used.","'setHistoryData' is assigned a value but never used.","no-dupe-keys","Duplicate key 'border'.","ObjectExpression","no-global-assign","no-unsafe-negation",{"desc":"530","fix":"531"},{"desc":"532","fix":"533"},{"desc":"534","fix":"535"},{"desc":"532","fix":"536"},{"desc":"537","fix":"538"},{"desc":"539","fix":"540"},{"desc":"541","fix":"542"},{"desc":"539","fix":"543"},{"desc":"541","fix":"544"},[32078,32096],"'Drawing Number'",{"desc":"545","fix":"546"},{"desc":"547","fix":"548"},{"desc":"549","fix":"550"},{"desc":"551","fix":"552"},{"desc":"553","fix":"554"},{"desc":"555","fix":"556"},{"desc":"557","fix":"558"},"Update the dependencies array to be: [projectsArray, token]",{"range":"559","text":"560"},"Update the dependencies array to be: [EventKeyDown]",{"range":"561","text":"562"},"Update the dependencies array to be: [email, fetchDataOneSheet, getSheetRows, projectId, projectName, role, setUserData, sheetDataInput, token]",{"range":"563","text":"564"},{"range":"565","text":"562"},"Update the dependencies array to be: [companies, company, email, fetchDataOneSheet, getSheetRows, projectId, projectName, role, roleTradeCompany, setUserData, token]",{"range":"566","text":"567"},"Update the dependencies array to be: [columnIndex, inputRender, isLockedColumn, isLockedRow, rowIndex, stateCell.cellActive]",{"range":"568","text":"569"},"Update the dependencies array to be: [cellEditDone, columnIndex, inputRender, isLockedColumn, isLockedRow, rowIndex, stateCell.cellAppliedAction, stateCell.tempCopiedText]",{"range":"570","text":"571"},{"range":"572","text":"569"},{"range":"573","text":"571"},"Update the dependencies array to be: [actionType, styleFrozen, styleHidden, styleShown, tag.mode]",{"range":"574","text":"575"},"Update the dependencies array to be: [headers, projectId, rowData, rowId, stateRow.rowsVersionsToSave, token]",{"range":"576","text":"577"},"Update the dependencies array to be: [headerKey, projectId, rowId, token]",{"range":"578","text":"579"},"Update the dependencies array to be: [projectId, token]",{"range":"580","text":"581"},"Update the dependencies array to be: [activityRecorded, dwgName, dwgNumber, headers, projectId, revKey, stateRow.rowsAll, statusKey, token]",{"range":"582","text":"583"},"Update the dependencies array to be: [column, data.value, id, setFilterSelect]",{"range":"584","text":"585"},"Update the dependencies array to be: [activityRecorded, cellsHistoryInCurrentSheet, headers, stateRow.rowsAll]",{"range":"586","text":"587"},[1721,1723],"[projectsArray, token]",[3261,3263],"[EventKeyDown]",[17237,17253],"[email, fetchDataOneSheet, getSheetRows, projectId, projectName, role, setUserData, sheetDataInput, token]",[3538,3540],[18861,18863],"[companies, company, email, fetchDataOneSheet, getSheetRows, projectId, projectName, role, roleTradeCompany, setUserData, token]",[5419,5441],"[columnIndex, inputRender, isLockedColumn, isLockedRow, rowIndex, stateCell.cellActive]",[5999,6028],"[cellEditDone, columnIndex, inputRender, isLockedColumn, isLockedRow, rowIndex, stateCell.cellAppliedAction, stateCell.tempCopiedText]",[7646,7668],[8227,8256],[864,874],"[actionType, styleFrozen, styleHidden, styleShown, tag.mode]",[2695,2697],"[headers, projectId, rowData, rowId, stateRow.rowsVersionsToSave, token]",[1242,1244],"[headerKey, projectId, rowId, token]",[1037,1039],"[projectId, token]",[4624,4626],"[activityRecorded, dwgName, dwgNumber, headers, projectId, revKey, stateRow.rowsAll, statusKey, token]",[4823,4831],"[column, data.value, id, setFilterSelect]",[4660,4662],"[activityRecorded, cellsHistoryInCurrentSheet, headers, stateRow.rowsAll]"]
[{"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\index.js":"1","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\App.js":"2","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\reportWebVitals.js":"3","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\contexts\\cellContext.js":"4","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\contexts\\rowContext.js":"5","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\contexts\\projectContext.js":"6","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\PageSpreadsheet.jsx":"7","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\contexts\\_createDataContext.js":"8","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\PanelSetting.jsx":"9","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\CellHeader.jsx":"10","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\Cell.jsx":"11","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\PanelFunction.jsx":"12","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\utils\\index.js":"13","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\constants\\index.js":"14","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\PanelCalendar.jsx":"15","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\ReorderColumnForm.jsx":"16","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\ColorizedForm.jsx":"17","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\TableDrawingDetail.jsx":"18","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\TableCellHistory.jsx":"19","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\InputSearch.jsx":"20","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\IconTable.jsx":"21","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\CellIndex.jsx":"22","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\FormSort.jsx":"23","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\FormFilter.jsx":"24","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\FormGroup.jsx":"25","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\TableActivityHistory.jsx":"26","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\FormDateAutomation.jsx":"27","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\ButtonStyle.jsx":"28","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\ButtonGroupComp.jsx":"29","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\PanelConfirm.jsx":"30","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\FormDrawingTypeOrder.jsx":"31","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\FormCellColorizedCheck.jsx":"32"},{"size":507,"mtime":1607175136833,"results":"33","hashOfConfig":"34"},{"size":966,"mtime":1609165627395,"results":"35","hashOfConfig":"34"},{"size":362,"mtime":1606274463595,"results":"36","hashOfConfig":"34"},{"size":1087,"mtime":1609148537496,"results":"37","hashOfConfig":"34"},{"size":582,"mtime":1609148593298,"results":"38","hashOfConfig":"34"},{"size":964,"mtime":1609149456727,"results":"39","hashOfConfig":"34"},{"size":31027,"mtime":1609165567631,"results":"40","hashOfConfig":"34"},{"size":613,"mtime":1604905406752,"results":"41","hashOfConfig":"34"},{"size":24682,"mtime":1609165270745,"results":"42","hashOfConfig":"34"},{"size":529,"mtime":1609149533797,"results":"43","hashOfConfig":"34"},{"size":13996,"mtime":1609149511863,"results":"44","hashOfConfig":"34"},{"size":1897,"mtime":1609166050136,"results":"45","hashOfConfig":"34"},{"size":30918,"mtime":1609153330412,"results":"46","hashOfConfig":"34"},{"size":786,"mtime":1609148777304,"results":"47","hashOfConfig":"34"},{"size":381,"mtime":1608382149906,"results":"48","hashOfConfig":"34"},{"size":6483,"mtime":1609149796724,"results":"49","hashOfConfig":"34"},{"size":1099,"mtime":1607490395942,"results":"50","hashOfConfig":"34"},{"size":6210,"mtime":1609148970984,"results":"51","hashOfConfig":"34"},{"size":2055,"mtime":1609148964064,"results":"52","hashOfConfig":"34"},{"size":4119,"mtime":1609150990266,"results":"53","hashOfConfig":"34"},{"size":1821,"mtime":1609152820726,"results":"54","hashOfConfig":"34"},{"size":704,"mtime":1608544241999,"results":"55","hashOfConfig":"34"},{"size":6412,"mtime":1609149890249,"results":"56","hashOfConfig":"34"},{"size":5676,"mtime":1609149615987,"results":"57","hashOfConfig":"34"},{"size":3553,"mtime":1609149653797,"results":"58","hashOfConfig":"34"},{"size":10670,"mtime":1609148936793,"results":"59","hashOfConfig":"34"},{"size":4215,"mtime":1609133191349,"results":"60","hashOfConfig":"34"},{"size":640,"mtime":1608563010577,"results":"61","hashOfConfig":"34"},{"size":751,"mtime":1608563473295,"results":"62","hashOfConfig":"34"},{"size":687,"mtime":1609052515513,"results":"63","hashOfConfig":"34"},{"size":5641,"mtime":1609035830430,"results":"64","hashOfConfig":"34"},{"size":3190,"mtime":1609148862662,"results":"65","hashOfConfig":"34"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},"utwymk",{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"81","messages":"82","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"68"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"86","messages":"87","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"68"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"68"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"94","messages":"95","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"68"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"68"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"68"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"68"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"122","usedDeprecatedRules":"68"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127","usedDeprecatedRules":"68"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132","usedDeprecatedRules":"68"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"139","usedDeprecatedRules":"68"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"142","usedDeprecatedRules":"68"},"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\index.js",[],["143","144"],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\App.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\reportWebVitals.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\contexts\\cellContext.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\contexts\\rowContext.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\contexts\\projectContext.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\PageSpreadsheet.jsx",["145","146","147"],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\contexts\\_createDataContext.js",["148"],"import React, { createContext, useReducer } from 'react';\r\n\r\n\r\nexport default (reducer, actions, initValue) => {\r\n\r\n    const Context = createContext();\r\n\r\n    const Provider = ({ children }) => {\r\n        const [state, dispatch] = useReducer(reducer, initValue);\r\n\r\n        const boundActions = {};\r\n        for (let key in actions) {\r\n            boundActions[key] = actions[key](dispatch);\r\n        };\r\n\r\n        return (\r\n            <Context.Provider value={{ state, ...boundActions }}>\r\n                {children}\r\n            </Context.Provider>\r\n        );\r\n    };\r\n    return { Context, Provider };\r\n};\r\n","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\PanelSetting.jsx",["149","150","151"],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\CellHeader.jsx",["152","153","154","155","156"],"import React from 'react';\r\n\r\n\r\nconst CellHeader = (props) => {\r\n\r\n    const { className, column, columns, columnIndex, onMouseDownColumnHeader, headerIndex, container } = props;\r\n\r\n\r\n    return (\r\n        <div\r\n            style={{\r\n                height: '100%',\r\n                width: '100%',\r\n                verticalAlign: 'middle',\r\n            }}\r\n            onMouseDown={(e) => onMouseDownColumnHeader(e, column.title)}\r\n        >\r\n            {column.title}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CellHeader;\r\n","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\Cell.jsx",["157","158","159","160","161","162"],"import moment from 'moment';\r\nimport React, { useContext, useEffect, useRef, useState } from 'react';\r\nimport styled from 'styled-components';\r\nimport { colorType } from '../../constants';\r\nimport { Context as CellContext } from '../../contexts/cellContext';\r\nimport { Context as ProjectContext } from '../../contexts/projectContext';\r\nimport { Context as RowContext } from '../../contexts/rowContext';\r\nimport PanelCalendar from './PanelCalendar';\r\n\r\n\r\n\r\nconst Cell = (props) => {\r\n\r\n    const {\r\n        cellData, rowData, column, rowIndex, columnIndex,\r\n        container, onRightClickCell, colorized,\r\n        setPosition,\r\n        cellsSearchFound, cellsHistoryCheck\r\n    } = props;\r\n\r\n\r\n\r\n\r\n    const { state: stateCell, getCellModifiedTemp, setCellActive } = useContext(CellContext);\r\n    const { state: stateProject } = useContext(ProjectContext);\r\n    const { state: stateRow, getSheetRows } = useContext(RowContext);\r\n\r\n    const inputRef = useRef();\r\n    const cellRef = useRef();\r\n    const panelRef = useRef();\r\n    const buttonRef = useRef();\r\n\r\n    const [inputRender, setInputRender] = useState(false);\r\n    const [initValue, setInitValue] = useState(cellData || '');\r\n    const [value, setValue] = useState(cellData || '');\r\n\r\n\r\n\r\n\r\n\r\n    // after keydown ENTER to show input ...\r\n    useEffect(() => {\r\n        if (\r\n            !inputRender &&\r\n            stateCell.cellActive &&\r\n            stateCell.cellActive.rowIndex === rowIndex &&\r\n            stateCell.cellActive.columnIndex === columnIndex\r\n        ) {\r\n            setInputRender(true);\r\n        };\r\n    }, [stateCell.cellActive]);\r\n\r\n\r\n    const getCellTempId = () => {\r\n        return `${rowData['id']}-${column.key}`;\r\n    };\r\n\r\n    const cellEditDone = (value) => {\r\n        getCellModifiedTemp({ [getCellTempId()]: value });\r\n\r\n        if (stateRow.rowsUpdateAndNews) {\r\n            let rowsUpdateAndNews = [...stateRow.rowsUpdateAndNews];\r\n            let rowsUpdate = rowsUpdateAndNews.find(r => r.id === rowData.id);\r\n\r\n            if (rowsUpdate) {\r\n                rowsUpdate[column.key] = value;\r\n                getSheetRows({\r\n                    ...stateRow,\r\n                    rowsUpdateAndNews\r\n                });\r\n            } else {\r\n                getSheetRows({\r\n                    ...stateRow,\r\n                    rowsUpdateAndNews: [...stateRow.rowsUpdateAndNews, { ...rowData, [column.key]: value }]\r\n                });\r\n            }\r\n        } else {\r\n            getSheetRows({\r\n                ...stateRow,\r\n                rowsUpdateAndNews: [{ ...rowData, [column.key]: value }]\r\n            });\r\n        };\r\n    };\r\n\r\n\r\n    const onDoubleClick = () => {\r\n        setInputRender(true);\r\n    };\r\n    const onClick = () => {\r\n        setBtnShown(true);\r\n        if (!inputRender) {\r\n            setPosition({\r\n                cell: cellRef.current.parentElement,\r\n                rowIndex,\r\n                columnIndex\r\n            });\r\n        };\r\n    };\r\n    useEffect(() => {\r\n        // FOCUS right after press ENTER...\r\n        if (inputRender) {\r\n            inputRef.current.focus();\r\n        };\r\n    }, [inputRender]);\r\n\r\n\r\n    useEffect(() => {\r\n        document.addEventListener('click', EventClickToHidePanelAndInput);\r\n        return () => document.removeEventListener('click', EventClickToHidePanelAndInput);\r\n    }, []);\r\n    const EventClickToHidePanelAndInput = (e) => {\r\n        if (e.target !== cellRef.current && inputRef.current && e.target !== inputRef.current) {\r\n            setInputRender(false);\r\n        } else if (e.target !== cellRef.current && e.target !== panelRef.current && e.target !== buttonRef.current) {\r\n            setPanelData(false);\r\n        };\r\n    };\r\n\r\n    const [btnShown, setBtnShown] = useState(false);\r\n\r\n    const [panelData, setPanelData] = useState(false);\r\n\r\n    const onMouseLeave = () => {\r\n        setBtnShown(false);\r\n    };\r\n    const onMouseDown = (e) => {\r\n        if (e.button === 2) { // check mouse RIGHT CLICK ...\r\n            onRightClickCell(e, props);\r\n        } else {\r\n            if (!inputRender) {\r\n                // MULTI SELECT CELL RANGES\r\n            };\r\n        };\r\n    };\r\n    const onMouseUp = (e) => {\r\n        if (e.button !== 2) {\r\n            // MULTI END CELL RANGES\r\n        };\r\n    };\r\n    const pickDataSelect = (value) => {\r\n        setValue(value);\r\n        setPanelData(false);\r\n        setBtnShown(false);\r\n        if (initValue !== value) {\r\n            cellEditDone(value);\r\n        } else {\r\n            setInputRender(false);\r\n        };\r\n    };\r\n    const pickDate = (value) => {\r\n        setValue(moment(value).format('DD/MM/YY'));\r\n        setPanelData(false);\r\n        setBtnShown(false);\r\n        if (initValue !== value) {\r\n            cellEditDone(moment(value).format('DD/MM/YY'));\r\n        } else {\r\n            setInputRender(false);\r\n        };\r\n    };\r\n\r\n\r\n\r\n    const onChange = (e) => {\r\n        setValue(e.target.value);\r\n    };\r\n    const onBlur = () => {\r\n        if (initValue !== value) {\r\n            cellEditDone(value);\r\n        };\r\n        setInputRender(false);\r\n    };\r\n    // ENTER to hide input after finishing typing ...\r\n    const onKeyPress = (e) => {\r\n        if (\r\n            e.key === 'Enter' &&\r\n            inputRender &&\r\n            stateCell.cellActive &&\r\n            stateCell.cellActive.rowIndex === rowIndex &&\r\n            stateCell.cellActive.columnIndex === columnIndex\r\n        ) {\r\n            inputRef.current.blur();\r\n            setCellActive(null);\r\n        };\r\n    };\r\n\r\n    const cellBackground =\r\n        // (\r\n        //     stateCell.cellsRangeStart &&\r\n        //     stateCell.cellsRangeEnd &&\r\n        //     checkIfCellsRangeContainsCell(stateCell.cellsRangeStart, stateCell.cellsRangeEnd, rowIndex, columnIndex)\r\n        // )\r\n        //     ? colorType.cellHighlighted :\r\n        (cellsSearchFound && rowData.id in cellsSearchFound && cellsSearchFound[rowData.id].indexOf(column.key) !== -1)\r\n            ? '#badc58'\r\n            : (cellsHistoryCheck && cellsHistoryCheck.find(dt => dt.rowId === rowData.id && column.key === dt.header))\r\n                ? '#f6e58d'\r\n                : null;\r\n\r\n    // const cellFontWeight = (rowData._rowLevel === 0 || rowData._rowLevel === - 1) && 'bold';\r\n\r\n    return (\r\n        <>\r\n            <div\r\n                ref={cellRef}\r\n                onDoubleClick={onDoubleClick}\r\n                onClick={onClick}\r\n                onMouseLeave={onMouseLeave}\r\n                onMouseDown={onMouseDown}\r\n                onMouseUp={onMouseUp}\r\n                style={{\r\n                    width: '100%',\r\n                    height: '100%',\r\n                    color: cellLocked(stateProject.userData.role, column) ? '#8FBC8F' : 'black',\r\n                    // color: cellLocked('modeller', column) ? '#8FBC8F' : 'black',\r\n                    background: cellBackground,\r\n                    // fontWeight: cellFontWeight,\r\n                    padding: 5,\r\n                    position: 'relative',\r\n                    pointerEvents: cellLocked(stateProject.userData.role, column) && 'none'\r\n                    // pointerEvents: cellLocked('modeller', column) && 'none'\r\n                }}\r\n            >\r\n                {inputRender ? (\r\n                    <input\r\n                        value={value}\r\n                        onChange={onChange}\r\n                        onBlur={onBlur}\r\n                        onKeyPress={onKeyPress}\r\n                        ref={inputRef}\r\n                        style={{\r\n                            outline: 'none',\r\n                            border: 'none',\r\n                            background: 'transparent',\r\n                            width: column.width - 20\r\n                        }}\r\n                    />\r\n\r\n                ) : (\r\n                        <span>\r\n                            {\r\n                                stateCell.cellsModifiedTemp[getCellTempId()] ||  // there is modified data\r\n                                (getCellTempId() in stateCell.cellsModifiedTemp && ' ') || // there is modified data === empty\r\n                                cellData // there is no modification\r\n                            }\r\n                        </span>\r\n                    )\r\n                }\r\n\r\n\r\n                {btnShown && !cellBtnDisabled(column.key) && (\r\n                    <div\r\n                        style={{\r\n                            cursor: 'pointer',\r\n                            position: 'absolute',\r\n                            right: 5,\r\n                            top: 5,\r\n                            height: 17,\r\n                            width: 17,\r\n                            backgroundImage: `url('./img/btn-${checkIconBtn(column.key) ? 'calendar2' : 'down2'}.png')`,\r\n                            backgroundSize: 17\r\n                        }}\r\n                        onMouseDown={(e) => {\r\n                            e.stopPropagation();\r\n                            setPanelData(!panelData);\r\n                        }}\r\n                        ref={buttonRef}\r\n                    />\r\n                )}\r\n\r\n\r\n                {panelData && (\r\n                    <div\r\n                        style={{\r\n                            position: 'absolute',\r\n                            background: 'white',\r\n                            top: 30,\r\n                            left: 0,\r\n                            minWidth: column.width,\r\n                            zIndex: 999,\r\n                            padding: '3px 5px 3px 7px',\r\n                            boxShadow: 'rgba(0, 0, 0, 0.09) 0px 2px 1px, rgba(0, 0, 0, 0.09) 0px 4px 2px, rgba(0, 0, 0, 0.09) 0px 8px 4px, rgba(0, 0, 0, 0.09) 0px 16px 8px, rgba(0, 0, 0, 0.09) 0px 32px 16px'\r\n                        }}\r\n                        ref={panelRef}\r\n                    >\r\n                        {checkIconBtn(column.key) ? (\r\n                            <PanelCalendar pickDate={pickDate} />\r\n                        ) : textArr(column.key).map(item => {\r\n                            return (\r\n                                <SelectStyled\r\n                                    key={item}\r\n                                    onMouseDown={(e) => {\r\n                                        e.stopPropagation();\r\n                                        pickDataSelect(item);\r\n                                    }}\r\n                                >{item}</SelectStyled>\r\n                            )\r\n                        })}\r\n                    </div>\r\n                )}\r\n\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Cell;\r\n\r\nconst SelectStyled = styled.div`\r\n    padding: 4px;\r\n\r\n    &:hover {\r\n        background-color: ${colorType.grey4};\r\n        cursor: pointer\r\n    };\r\n    transition: 0.2s;\r\n\r\n`;\r\n\r\nconst checkIconBtn = (header) => {\r\n    return header.includes('(A)') || header.includes('(T)');\r\n};\r\n\r\nconst cellBtnDisabled = (headerId) => {\r\n    if (headerId === 'Index' || headerId === 'Drawing Number' || headerId === 'Drawing Name') return true;\r\n};\r\n\r\n\r\nconst textArr = (header) => {\r\n    const arr = header === 'Status' ? [\r\n        'Reject And Resubmit',\r\n        'Approved for Construction',\r\n        'Not Started',\r\n        'Consultant reviewing',\r\n        'Approved with comments, to Resubmit',\r\n        'Approved with Comment, no submission Required',\r\n        'Revise In-Progress',\r\n        '1st cut of drawing in-progress',\r\n    ] : header === 'Rev' ? [\r\n        '0', 'A', 'B', 'C'\r\n    ] : header === 'RFA Ref' ? [\r\n        'RFA/HAN/ARC/067', 'RFA/HAN/ARC/056', 'RFA/HAN/ARC/055', 'RFA/HAN/ARC/040', 'RFA/HAN/ARC/042', 'RFA/HAN/ARC/045',\r\n    ] : [];\r\n    return arr;\r\n};\r\n\r\n\r\nconst colors = {\r\n    red: '#FFDAB9',\r\n    blue: '#AFEEEE',\r\n    brown: '#F0E68C',\r\n    green: '#98FB98',\r\n    white: 'white'\r\n};\r\n\r\n\r\nconst colorizedRows = (colorized, rowData) => {\r\n    if (colorized === 'Rev') {\r\n        return rowData[colorized] === '0' ? colors.red :\r\n            rowData[colorized] === 'A' ? colors.blue :\r\n                rowData[colorized] === 'B' ? colors.brown : colors.white\r\n    } else if (colorized === 'Status') {\r\n        return rowData[colorized] === 'Reject And Resubmit' ? colors.red :\r\n            rowData[colorized] === 'Approved for Construction' ? colors.blue :\r\n                rowData[colorized] === 'Not Started' ? colors.white : colors.green\r\n    } else if (colorized === 'Modeller') {\r\n        return rowData[colorized] === 'Anne' ? colors.red :\r\n            rowData[colorized] === 'Judy' ? colors.blue :\r\n                rowData[colorized] === 'Thomas' ? colors.white : colors.green\r\n    } else if (colorized === 'Coordinator In Charge') {\r\n        return rowData[colorized] === 'Hannah' ? colors.red : colors.white\r\n    };\r\n};\r\n\r\n\r\nconst cellLocked = (title, column) => {\r\n    const ColumnsLocked = [\r\n        'Model Start (T)',\r\n        'Model Start (A)',\r\n        'Model Finish (T)',\r\n        'Model Finish (A)',\r\n        'Model Progress',\r\n        'Drawing Start (T)',\r\n        'Drawing Start (A)',\r\n        'Drawing Finish (T)',\r\n        'Drawing Finish (A)',\r\n    ];\r\n    if (title === 'modeller' && ColumnsLocked.includes(column.key)) return true;\r\n};\r\n\r\n\r\nconst checkIfCellsRangeContainsCell = (cellsRangeStart, cellsRangeEnd, rowIndex, columnIndex) => {\r\n\r\n    let rowMin = cellsRangeStart.rowIndex <= cellsRangeEnd.rowIndex ? cellsRangeStart.rowIndex : cellsRangeEnd.rowIndex;\r\n    let rowMax = cellsRangeStart.rowIndex > cellsRangeEnd.rowIndex ? cellsRangeStart.rowIndex : cellsRangeEnd.rowIndex;\r\n\r\n    let columnMin = cellsRangeStart.columnIndex <= cellsRangeEnd.columnIndex ? cellsRangeStart.columnIndex : cellsRangeEnd.columnIndex;\r\n    let columnMax = cellsRangeStart.columnIndex > cellsRangeEnd.columnIndex ? cellsRangeStart.columnIndex : cellsRangeEnd.columnIndex;\r\n\r\n    return (\r\n        rowIndex >= rowMin &&\r\n        rowIndex <= rowMax &&\r\n        columnIndex >= columnMin &&\r\n        columnIndex <= columnMax\r\n    );\r\n};","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\PanelFunction.jsx",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\utils\\index.js",["163","164","165","166","167","168","169","170","171","172","173","174","175","176"],"import Axios from 'axios';\r\nimport _ from 'lodash';\r\nimport namor from 'namor';\r\n\r\n\r\n\r\n\r\nexport const formatStringNameToId = (str) => {\r\n    let mystring = str\r\n        .replace(/ /g, '')\r\n        .replace(/\\(|\\)/g, '')\r\n        .replace(/\\//g, '');\r\n\r\n    return mystring.charAt(0).toLowerCase() + mystring.slice(1);\r\n};\r\n\r\n\r\n\r\nexport const extractCellInfo = (key) => {\r\n    // return {\r\n    //     rowId: key.slice(0, 24),\r\n    //     rowLevel: parseInt(key.slice(key.search('rowLevel:') + 9, key.length)),\r\n    //     headerName: key.slice(25, key.search('rowLevel:') - 1)\r\n    // }\r\n    return {\r\n        rowId: key.slice(0, 24),\r\n        headerName: key.slice(25, key.length)\r\n    }\r\n};\r\n\r\n\r\nexport const mongoObjectId = () => {\r\n    var timestamp = (new Date().getTime() / 1000 | 0).toString(16);\r\n    return timestamp + 'xxxxxxxxxxxxxxxx'.replace(/[x]/g, function () {\r\n        return (Math.random() * 16 | 0).toString(16);\r\n    }).toLowerCase();\r\n};\r\n\r\n\r\nexport const getHeadersText = (headers) => {\r\n    if (!headers) return [];\r\n    let arr = [];\r\n    headers.forEach(hd => {\r\n        arr.push(hd.text);\r\n    });\r\n    return arr;\r\n};\r\n\r\nexport const getHeaderKey = (headers, headerText) => {\r\n    if (!headers) return;\r\n\r\n    return headers.find(hd => hd.text === headerText).key;\r\n};\r\n\r\n\r\n\r\nexport const groupRowsBy = (array, key) => {\r\n\r\n    return array.reduce((result, currentValue) => {\r\n        (result[currentValue[key]] = result[currentValue[key]] || []).push(\r\n            currentValue\r\n        );\r\n\r\n        return result;\r\n    }, {});\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport const mapSubRows = (rows) => {\r\n\r\n    if (!rows) return;\r\n\r\n    let rowsArr = rows.filter(r => r._rowLevel === 0);\r\n\r\n    if (rowsArr.length < 1) return rows;\r\n\r\n    let rowsSubArr = rows.filter(r => r._rowLevel === 1);\r\n    if (rowsSubArr.length < 1) return rows;\r\n\r\n    const rowsDataOutput = rowsArr.map(r => {\r\n        let subR = rowsSubArr.filter(rSub => rSub._parentRow === r.id);\r\n        return {\r\n            ...r, children: subR\r\n        }\r\n    });\r\n    return rowsDataOutput;\r\n};\r\n\r\n\r\n\r\n\r\nexport const groupByHeaders = (data, headers) => {\r\n    let res = [];\r\n    let _map = {};\r\n    // push all rowIds have children in here\r\n    let parentIdsArr = [];\r\n    let _mapParentIds = {};\r\n\r\n    for (let item of data) {\r\n        let _prevLevelKey = '';\r\n        let _prevLevelParent = null;\r\n        for (let i = 0; i < headers.length; i++) {\r\n            let arrayParent = i == 0 ? res : _prevLevelParent.children;\r\n\r\n            let header = headers[i];\r\n            let value = String(item[header]).trim() || '';\r\n\r\n            let levelKey = `${_prevLevelKey}_._${value}`;\r\n            let levelParentIndex = _map[levelKey];\r\n            let levelParent = arrayParent[levelParentIndex];\r\n\r\n            if (!levelParent) {\r\n                let iddd = mongoObjectId();\r\n                levelParent = _newParent(item, header, i, iddd);\r\n\r\n                _map[levelKey] = arrayParent.length;\r\n                arrayParent.push(levelParent);\r\n            };\r\n\r\n            levelParent.count++;\r\n            // levelParent[header] = `${item[header]}: (${levelParent.count} nos)`;\r\n            levelParent['Drawing Number'] = `${String(item[header]).toUpperCase()}: (${levelParent.count} nos)`;\r\n\r\n            if (!_mapParentIds[levelParent.id]) { // levelParent id not yet been push to parentIdsArr\r\n                parentIdsArr.push(levelParent.id);\r\n                _mapParentIds[levelParent.id] = true;\r\n            }\r\n\r\n            if (i == headers.length - 1) {\r\n                levelParent.children.push(item);\r\n            } else {\r\n                _prevLevelKey = levelKey;\r\n                _prevLevelParent = levelParent;\r\n            };\r\n        };\r\n    };\r\n\r\n    return {\r\n        rows: res,\r\n        expandedRows: parentIdsArr\r\n    };\r\n};\r\nfunction _newParent(item, header, level, iddd) {\r\n\r\n    return {\r\n        id: iddd,\r\n        _rowLevel: level,\r\n        [header]: `${item[header]}: (0 nos)`,\r\n        _src_header: item[header],\r\n        count: 0,\r\n        children: []\r\n    };\r\n};\r\n\r\nconst returnDate = (num) => {\r\n    let date = new Date();\r\n    date.setDate(date.getDate() + num);\r\n    return date;\r\n};\r\n\r\n\r\nexport const convertCellTempToHistory = (\r\n    cellsModifiedTemp,\r\n    stateProject\r\n) => {\r\n    const { username, publicSettings } = stateProject.allDataOneSheet;\r\n\r\n    const cellsHistoryData = Object.keys(cellsModifiedTemp).map(key => {\r\n        const { rowId, headerName, email } = extractCellInfo(key);\r\n\r\n        const dataOut = {\r\n            rowId,\r\n            headerKey: getHeaderKey(publicSettings.headers, headerName),\r\n            history: {\r\n                text: cellsModifiedTemp[key],\r\n                user: email,\r\n                username,\r\n                createdAt: new Date(),\r\n            }\r\n        };\r\n        return dataOut;\r\n    });\r\n    return cellsHistoryData;\r\n};\r\n\r\nexport const convertDrawingVersionToHistory = (\r\n    rowsHistory,\r\n    stateProject\r\n) => {\r\n    const { username, publicSettings } = stateProject.allDataOneSheet;\r\n\r\n    const rowsHistoryOutput = rowsHistory.map(rowsH => {\r\n        let obj = {};\r\n        publicSettings.headers.forEach(hd => {\r\n            if (rowsH[hd.text]) obj = { ...obj || {}, [hd.key]: rowsH[hd.text] };\r\n        });\r\n        return {\r\n            row: rowsH.id,\r\n            history: obj,\r\n            username\r\n        };\r\n    });\r\n    return rowsHistoryOutput;\r\n};\r\n\r\n\r\n\r\n\r\nexport const convertHistoryData = (data) => {\r\n    let arr = [];\r\n    data.forEach(ch => {\r\n        const { histories, headerKey, row } = ch;\r\n        histories.forEach(dt => {\r\n            arr.push({\r\n                ...dt,\r\n                headerKey, row\r\n            });\r\n        });\r\n    });\r\n    return arr\r\n};\r\n\r\n\r\n\r\nconst getSubData = (data) => {\r\n    for (let i = 0; i < 15; i++) {\r\n        data.push({\r\n            ...data[0],\r\n            ...newObj(),\r\n            id: mongoObjectId(),\r\n            _rowLevel: 1,\r\n            parentId: data[0].id,\r\n        })\r\n        data.push({\r\n            ...data[1],\r\n            ...newObj(),\r\n            id: mongoObjectId(),\r\n            _rowLevel: 1,\r\n            parentId: data[1].id,\r\n        })\r\n        data.push({\r\n            ...data[2],\r\n            ...newObj(),\r\n            id: mongoObjectId(),\r\n            _rowLevel: 1,\r\n            parentId: data[2].id,\r\n        })\r\n        data.push({\r\n            ...data[3],\r\n            ...newObj(),\r\n            id: mongoObjectId(),\r\n            _rowLevel: 1,\r\n            parentId: data[3].id,\r\n        })\r\n        data.push({\r\n            ...data[4],\r\n            ...newObj(),\r\n            id: mongoObjectId(),\r\n            _rowLevel: 1,\r\n            parentId: data[4].id,\r\n        })\r\n        data.push({\r\n            ...data[5],\r\n            ...newObj(),\r\n            id: mongoObjectId(),\r\n            _rowLevel: 1,\r\n            parentId: data[5].id,\r\n\r\n        })\r\n        data.push({\r\n            ...data[6],\r\n            ...newObj(),\r\n            id: mongoObjectId(),\r\n            _rowLevel: 1,\r\n            parentId: data[6].id,\r\n\r\n        })\r\n        data.push({\r\n            ...data[7],\r\n            ...newObj(),\r\n            id: mongoObjectId(),\r\n            _rowLevel: 1,\r\n            parentId: data[7].id,\r\n        })\r\n        data.push({\r\n            ...data[8],\r\n            ...newObj(),\r\n            id: mongoObjectId(),\r\n            _rowLevel: 1,\r\n            parentId: data[8].id,\r\n        })\r\n        data.push({\r\n            ...data[9],\r\n            ...newObj(),\r\n            id: mongoObjectId(),\r\n            _rowLevel: 1,\r\n            parentId: data[9].id,\r\n\r\n        })\r\n        // data.push({\r\n        //     ...data[2],\r\n        //     id: `${data[2].id}-sub-sub-${i}`,\r\n        //     parentId: `${data[2].id}-sub-${i}`,\r\n        //     [expandColumnKey]: `Sub-Sub ${i}`,\r\n        // })\r\n\r\n    }\r\n    return data;\r\n};\r\nconst getSubData2 = (data, headers) => {\r\n    for (let i = 0; i < 15; i++) {\r\n        data.push({\r\n            ...newObj2(headers),\r\n            // _id: mongoObjectId(),\r\n            // level: 1,\r\n            // parentId: '5fd8c7c9257fd9a1f4b7f68a',\r\n\r\n        })\r\n        // data.push({\r\n        //     ...data[1],\r\n        //     ...newObj(),\r\n        //     _id: mongoObjectId(),\r\n        //     _rowLevel: 1,\r\n        //     _parentId: data[1]._id,\r\n\r\n        // })\r\n        // data.push({\r\n        //     ...data[2],\r\n        //     ...newObj(),\r\n        //     _id: mongoObjectId(),\r\n        //     _rowLevel: 1,\r\n        //     _parentId: data[2]._id,\r\n\r\n        // })\r\n        // data.push({\r\n        //     ...data[3],\r\n        //     ...newObj(),\r\n        //     _id: mongoObjectId(),\r\n        //     _rowLevel: 1,\r\n        //     _parentId: data[3]._id,\r\n\r\n        // })\r\n        // data.push({\r\n        //     ...data[4],\r\n        //     ...newObj(),\r\n        //     _id: mongoObjectId(),\r\n        //     _rowLevel: 1,\r\n        //     _parentId: data[4]._id,\r\n\r\n        // })\r\n        // data.push({\r\n        //     ...data[5],\r\n        //     ...newObj(),\r\n        //     _id: mongoObjectId(),\r\n        //     _rowLevel: 1,\r\n        //     _parentId: data[5]._id,\r\n\r\n        // })\r\n        // data.push({\r\n        //     ...data[6],\r\n        //     ...newObj(),\r\n        //     _id: mongoObjectId(),\r\n        //     _rowLevel: 1,\r\n        //     _parentId: data[6]._id,\r\n\r\n        // })\r\n        // data.push({\r\n        //     ...data[7],\r\n        //     ...newObj(),\r\n        //     _id: mongoObjectId(),\r\n        //     _rowLevel: 1,\r\n        //     _parentId: data[7]._id,\r\n\r\n        // })\r\n        // data.push({\r\n        //     ...data[8],\r\n        //     ...newObj(),\r\n        //     _id: mongoObjectId(),\r\n        //     _rowLevel: 1,\r\n        //     _parentId: data[8]._id,\r\n\r\n        // })\r\n        // data.push({\r\n        //     ...data[9],\r\n        //     ...newObj(),\r\n        //     _id: mongoObjectId(),\r\n        //     _rowLevel: 1,\r\n        //     _parentId: data[9]._id,\r\n\r\n        // });\r\n    }\r\n    return data;\r\n};\r\n\r\nconst newObj = () => {\r\n    let xxx = getRndInteger(0, 4);\r\n    let yyy = getRndInteger(0, 4);\r\n    let modeller = getRndInteger(0, 4);\r\n    let coord = getRndInteger(0, 2);\r\n\r\n    let used = getRndInteger(0, 3);\r\n\r\n    let drgType = getRndInteger(0, 2);\r\n\r\n\r\n    let d1 = addZero(getRndInteger(3, 25));\r\n    let d2 = addZero(getRndInteger(7, 20));\r\n    let d3 = addZero(getRndInteger(1, 16));\r\n    let d4 = addZero(getRndInteger(3, 25));\r\n    let d5 = addZero(getRndInteger(4, 28));\r\n\r\n\r\n    let m1 = addZero(getRndInteger(1, 11));\r\n    let m2 = addZero(getRndInteger(1, 11));\r\n    let m3 = addZero(getRndInteger(1, 12));\r\n    let m4 = addZero(getRndInteger(1, 12));\r\n    let m5 = addZero(getRndInteger(1, 12));\r\n\r\n\r\n    return {\r\n        'Level': '',\r\n        'RFA Ref': `RFA/SUM/ARC/00${addZero(getRndInteger(1, 6))}`,\r\n        'Drawing Number': `HAN_WH_A_CS_KP_${namor.generate({ words: 0, numbers: 0 })}`,\r\n\r\n        'Use For': used === 0 ? 'For RFA'\r\n            : used === 1 ? 'For Coor' : 'For Ref',\r\n\r\n\r\n        'Unit/CJ': '',\r\n        'Drawing Name': `Column and Wall Setting_${namor.generate({ words: 0, numbers: 0 })}`,\r\n        'Block/Zone': addZero(getRndInteger(1, 4)),\r\n        'Drg Type': drgType === 0 ? 'Floor Plan' : 'Section',\r\n\r\n        'Coordinator In Charge': coord === 0 ? 'Juan' : 'Hannah',\r\n\r\n        'Modeller': modeller === 0 ? 'Anne'\r\n            : modeller === 1 ? 'Judy'\r\n                : modeller === 2 ? 'Thomas' : 'Chris',\r\n\r\n\r\n        'Model Start (T)': `${d1}/${m1}/20`,\r\n        'Model Start (A)': `${d2}/${m2}/20`,\r\n        'Model Finish (T)': `${d3}/${m3}/20`,\r\n        'Model Finish (A)': `${d4}/${m4}/20`,\r\n        'Model Progress': '',\r\n        'Drawing Start (T)': `${d1}/${m5}/20`,\r\n        'Drawing Start (A)': `${d2}/${m1}/20`,\r\n        'Drawing Finish (T)': `${d3}/${m1}/20`,\r\n        'Drawing Finish (A)': `${d1}/${m4}/20`,\r\n        'Drawing Progress': '',\r\n        'Drg To Consultant (T)': `${d4}/${m1}/20`,\r\n        'Drg To Consultant (A)': `${d5}/${m2}/20`,\r\n        'Consultant Reply (T)': `${d3}/${m2}/20`,\r\n        'Consultant Reply (A)': `${d4}/${m2}/20`,\r\n        'Get Approval (T)': `${d4}/${m5}/20`,\r\n        'Get Approval (A)': `${d4}/${m3}/20`,\r\n        'Construction Issuance Date': '',\r\n        'Construction Start': '',\r\n\r\n        'Rev': xxx === 0 ? '0'\r\n            : xxx === 1 ? 'A'\r\n                : xxx === 2 ? 'B' : 'C',\r\n\r\n        'Status': yyy === 0 ? 'Approved for Construction'\r\n            : yyy === 1 ? 'Not Started'\r\n                : yyy === 2 ? 'Consultant Reviewing' : 'Reject And Resubmit',\r\n\r\n        'Remark': '',\r\n    }\r\n};\r\n\r\nexport const newObj2 = (headers) => {\r\n    let xxx = getRndInteger(0, 4);\r\n    let yyy = getRndInteger(0, 4);\r\n    let modeller = getRndInteger(0, 4);\r\n    let coord = getRndInteger(0, 2);\r\n\r\n    let used = getRndInteger(0, 3);\r\n\r\n    let drgType = getRndInteger(0, 2);\r\n\r\n\r\n    let d1 = addZero(getRndInteger(3, 25));\r\n    let d2 = addZero(getRndInteger(7, 20));\r\n    let d3 = addZero(getRndInteger(1, 16));\r\n    let d4 = addZero(getRndInteger(3, 25));\r\n    let d5 = addZero(getRndInteger(4, 28));\r\n\r\n\r\n    let m1 = addZero(getRndInteger(1, 11));\r\n    let m2 = addZero(getRndInteger(1, 11));\r\n    let m3 = addZero(getRndInteger(1, 12));\r\n    let m4 = addZero(getRndInteger(1, 12));\r\n    let m5 = addZero(getRndInteger(1, 12));\r\n\r\n\r\n\r\n\r\n    return {\r\n        [findHeaderId(headers, 'Level')]: '',\r\n        [findHeaderId(headers, 'RFA Ref')]: `RFA/SUM/ARC/00${addZero(getRndInteger(1, 6))}`,\r\n        [findHeaderId(headers, 'Drawing Number')]: `HAN_WH_A_CS_KP_${namor.generate({ words: 0, numbers: 0 })}`,\r\n\r\n        [findHeaderId(headers, 'Use For')]: used === 0 ? 'For RFA'\r\n            : used === 1 ? 'For Coor' : 'For Ref',\r\n\r\n\r\n        [findHeaderId(headers, 'Unit/CJ')]: '',\r\n        [findHeaderId(headers, 'Drawing Name')]: `Column and Wall Setting_${namor.generate({ words: 0, numbers: 0 })}`,\r\n        [findHeaderId(headers, 'Block/Zone')]: addZero(getRndInteger(1, 4)),\r\n        [findHeaderId(headers, 'Drg Type')]: drgType === 0 ? 'Floor Plan' : 'Section',\r\n\r\n        [findHeaderId(headers, 'Coordinator In Charge')]: coord === 0 ? 'Juan' : 'Hannah',\r\n\r\n        [findHeaderId(headers, 'Modeller')]: modeller === 0 ? 'Anne'\r\n            : modeller === 1 ? 'Judy'\r\n                : modeller === 2 ? 'Thomas' : 'Chris',\r\n\r\n\r\n        [findHeaderId(headers, 'Model Start (T)')]: `${d1}/${m1}/20`,\r\n        [findHeaderId(headers, 'Model Start (A)')]: `${d2}/${m2}/20`,\r\n        [findHeaderId(headers, 'Model Finish (T)')]: `${d3}/${m3}/20`,\r\n        [findHeaderId(headers, 'Model Finish (A)')]: `${d4}/${m4}/20`,\r\n        [findHeaderId(headers, 'Model Progress')]: '',\r\n        [findHeaderId(headers, 'Drawing Start (T)')]: `${d1}/${m5}/20`,\r\n        [findHeaderId(headers, 'Drawing Start (A)')]: `${d2}/${m1}/20`,\r\n        [findHeaderId(headers, 'Drawing Finish (T)')]: `${d3}/${m1}/20`,\r\n        [findHeaderId(headers, 'Drawing Finish (A)')]: `${d1}/${m4}/20`,\r\n        [findHeaderId(headers, 'Drawing Progress')]: '',\r\n        [findHeaderId(headers, 'Drg To Consultant (T)')]: `${d4}/${m1}/20`,\r\n        [findHeaderId(headers, 'Drg To Consultant (A)')]: `${d5}/${m2}/20`,\r\n        [findHeaderId(headers, 'Consultant Reply (T)')]: `${d3}/${m2}/20`,\r\n        [findHeaderId(headers, 'Consultant Reply (A)')]: `${d4}/${m2}/20`,\r\n        [findHeaderId(headers, 'Get Approval (T)')]: `${d4}/${m5}/20`,\r\n        [findHeaderId(headers, 'Get Approval (A)')]: `${d4}/${m3}/20`,\r\n        [findHeaderId(headers, 'Construction Issuance Date')]: '',\r\n        [findHeaderId(headers, 'Construction Start')]: '',\r\n\r\n        [findHeaderId(headers, 'Rev')]: xxx === 0 ? '0'\r\n            : xxx === 1 ? 'A'\r\n                : xxx === 2 ? 'B' : 'C',\r\n\r\n        [findHeaderId(headers, 'Status')]: yyy === 0 ? 'Approved for Construction'\r\n            : yyy === 1 ? 'Not Started'\r\n                : yyy === 2 ? 'Consultant Reviewing' : 'Reject And Resubmit',\r\n\r\n        [findHeaderId(headers, 'Remark')]: '',\r\n\r\n\r\n    }\r\n};\r\n\r\n\r\nexport const addZero = (num) => {\r\n    if (num < 10) return '0' + num;\r\n    return num;\r\n};\r\n\r\nconst getRndInteger = (min, max) => {\r\n    return Math.floor(Math.random() * (max - min)) + min;\r\n};\r\n\r\n\r\nconst findHeaderId = (headers, headerName) => {\r\n    let header = headers.find(hd => hd.text === headerName);\r\n    return header.key;\r\n};\r\n\r\n\r\n\r\nexport const convertHeadersTextToKeyArray = (headersText, headers) => {\r\n\r\n    return headersText.map(hdText => {\r\n        let hdObj = headers.find(hd => hd.text === hdText);\r\n\r\n        return hdObj.key\r\n    });\r\n};\r\n\r\n\r\n\r\n\r\nconst _groupSubRowsByParentId = (subRows) => {\r\n    let groups = {};\r\n    for (let subRow of subRows) {\r\n        let parentId = subRow._parentRow;\r\n        let group = groups[parentId] || [];\r\n        groups[parentId] = group;\r\n        group.push(subRow);\r\n    };\r\n    return groups;\r\n};\r\nconst _filterRows = (rowsData) => {\r\n    let rows = [];\r\n    let subRowsLv1 = [];\r\n    let subRowsLv2 = [];\r\n\r\n    for (let rowData of rowsData) {\r\n        let level = rowData._rowLevel;\r\n        if (level === 0) {\r\n            rows.push(rowData);\r\n        } else if (level == 1) {\r\n            subRowsLv1.push(rowData);\r\n        } else if (level == 2) {\r\n            subRowsLv2.push(rowData);\r\n        };\r\n    };\r\n    return [rows, subRowsLv1, subRowsLv2];\r\n};\r\nexport const sortRowsReorder = (rowsData) => {\r\n    let [rows, subRowsLv1, subRowsLv2] = _filterRows(rowsData);\r\n    let rowsProcessed = [];\r\n    let groupSubRowsLv1 = _groupSubRowsByParentId(subRowsLv1);\r\n    let groupSubRowsLv2 = _groupSubRowsByParentId(subRowsLv2);\r\n\r\n    let firstRowIndex = rows.findIndex((row) => row._preRow === null);\r\n    if (firstRowIndex >= 0) {\r\n        let preRow = rows.splice(firstRowIndex, 1)[0];\r\n        while (preRow) {\r\n            rowsProcessed.push(preRow);\r\n\r\n            // sort & format subRowsLv1\r\n            let subRowsLv1 = groupSubRowsLv1[preRow.id] || [];\r\n            let firstSubRowLv1Index = subRowsLv1.findIndex(\r\n                (sr1) => sr1._preRow == null\r\n            );\r\n            if (firstSubRowLv1Index >= 0) {\r\n                let preSubRowLv1 = subRowsLv1.splice(firstSubRowLv1Index, 1)[0];\r\n                while (preSubRowLv1) {\r\n                    rowsProcessed.push(preSubRowLv1);\r\n\r\n                    // sort & format subRowsLv2\r\n                    let subRowsLv2 = groupSubRowsLv2[preSubRowLv1.id] || [];\r\n                    let firstSubRowLv2Index = subRowsLv2.findIndex(\r\n                        (sr2) => sr2._preRow == null\r\n                    );\r\n                    if (firstSubRowLv2Index >= 0) {\r\n                        let preSubRowLv2 = subRowsLv2.splice(firstSubRowLv2Index, 1)[0];\r\n                        while (preSubRowLv2) {\r\n                            rowsProcessed.push(preSubRowLv2);\r\n\r\n                            let nextSubRowLv2Index = subRowsLv2.findIndex(\r\n                                (sr2) => String(sr2._preRow) == String(preSubRowLv2.id)\r\n                            );\r\n                            if (nextSubRowLv2Index >= 0) {\r\n                                preSubRowLv2 = subRowsLv2.splice(nextSubRowLv2Index, 1)[0];\r\n                            } else {\r\n                                preSubRowLv2 = null;\r\n                            };\r\n                        };\r\n                    };\r\n\r\n                    let nextSubRowLv1Index = subRowsLv1.findIndex(\r\n                        (sr1) => String(sr1._preRow) == String(preSubRowLv1.id)\r\n                    );\r\n                    if (nextSubRowLv1Index >= 0) {\r\n                        preSubRowLv1 = subRowsLv1.splice(nextSubRowLv1Index, 1)[0];\r\n                    } else {\r\n                        preSubRowLv1 = null;\r\n                    };\r\n                };\r\n            };\r\n\r\n            let nextRowIndex = rows.findIndex(\r\n                (row) => String(row._preRow) == String(preRow.id)\r\n            );\r\n            if (nextRowIndex >= 0) {\r\n                preRow = rows.splice(nextRowIndex, 1)[0];\r\n            } else {\r\n                preRow = null;\r\n            };\r\n        };\r\n    };\r\n\r\n    return rowsProcessed;\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst saveRandomRows = async () => {\r\n    try {\r\n        let arrrows = [];\r\n        for (let i = 0; i < 1; i++) {\r\n            // const data = newObj2(stateProject.allDataOneSheet.publicSettings.headers);\r\n            const row = {\r\n                // data,\r\n                parentRow: '5fe979ed94100ae8c49c4afc',\r\n                preRow: null,\r\n                level: 1\r\n            };\r\n            arrrows.push(row);\r\n        };\r\n        await Axios.post(\r\n            // `${SERVER_URL}/sheet/update-rows/${projectId}`,\r\n            { rows: arrrows }\r\n        );\r\n    } catch (err) {\r\n        console.log(err);\r\n    };\r\n};\r\n\r\n\r\n// WORKING WITH SMARTHSHEET ..................................................................\r\n\r\nexport const getDataConvertedSmartsheet = (projectArray) => {\r\n\r\n    let dataOutput = {};\r\n    for (let i = 0; i < projectArray.length; i++) {\r\n\r\n        // get the column header\r\n        const project = projectArray[i];\r\n        const categoryArray = _.map(project.columns, 'title');\r\n        let columnsIndexArray = {};\r\n        categoryArray.forEach(cate => {\r\n            project.columns.forEach(cl => {\r\n                if (cl.title === cate) columnsIndexArray[cate] = cl.index;\r\n            });\r\n        });\r\n\r\n        const indexDrawingName = columnsIndexArray['Drawing Name'];\r\n        const indexRev = columnsIndexArray['Rev'];\r\n\r\n        let allDrawings = [];\r\n        let allDrawingsLatestRevision = [];\r\n\r\n        for (let i = 0; i < project.rows.length; i++) {\r\n            const dwg = project.rows[i];\r\n            if (dwg.cells[indexDrawingName].value === undefined) continue; // make sure all drawing name is keyed in\r\n            allDrawings.push([...dwg.cells]);\r\n\r\n            if (dwg.cells[indexRev].value === undefined) {\r\n                allDrawingsLatestRevision.push([...dwg.cells]);\r\n                continue;\r\n            };\r\n\r\n            let found = false;\r\n            for (let j = 0; j < allDrawingsLatestRevision.length; j++) {\r\n\r\n                if (allDrawingsLatestRevision[j][indexDrawingName].value === dwg.cells[indexDrawingName].value) {\r\n\r\n                    found = true;\r\n                    if (String(allDrawingsLatestRevision[j][indexRev].value) < String(dwg.cells[indexRev].value)) {\r\n                        allDrawingsLatestRevision.splice(j, 1);\r\n                        allDrawingsLatestRevision.push([...dwg.cells]);\r\n                    };\r\n                    break;\r\n                };\r\n            };\r\n            if (!found) allDrawingsLatestRevision.push([...dwg.cells]);\r\n        };\r\n\r\n\r\n        dataOutput[project.name.slice(0, project.name.length - 17)] = {\r\n            columnsIndexArray: columnsIndexArray,\r\n            allDrawings,\r\n            allDrawingsLatestRevision,\r\n            allDrawingsSorted: pickDataToTable(allDrawings, columnsIndexArray)\r\n        };\r\n    };\r\n    return dataOutput;\r\n};\r\n\r\nconst pickDataToTable = (drawings, columnsIndexArray) => {\r\n    let arrayDrw = [];\r\n    drawings.forEach(dwg => {\r\n        let objDwg = {};\r\n        Object.keys(columnsIndexArray).forEach(header => {\r\n\r\n            if (header === 'Rev') {\r\n                objDwg[checkSpelling(header)] = dwg[columnsIndexArray[header]].displayValue;\r\n            } else {\r\n                if (dwg[columnsIndexArray[header]].value) {\r\n                    objDwg[checkSpelling(header)] = dwg[columnsIndexArray[header]].value;\r\n                };\r\n            };\r\n\r\n        });\r\n        arrayDrw.push(objDwg);\r\n    });\r\n    return arrayDrw;\r\n};\r\n\r\n\r\nconst checkSpelling = (header) => {\r\n    if (header === 'Construction issuance date') return 'Construction Issuance Date';\r\n    if (header === 'Drg to Consultant (T)') return 'Drg To Consultant (T)';\r\n    if (header === 'Drg to Consultant (A)') return 'Drg To Consultant (A)';\r\n    if (header === 'get Approval (A)') return 'Get Approval (A)';\r\n    if (header === 'get Approval (T)') return 'Get Approval (T)';\r\n    return header;\r\n};\r\n\r\n\r\n\r\nexport const getHeaderWidth = (header) => {\r\n\r\n    if (header === 'RFA Ref') return 170;\r\n    else if (\r\n        header === 'Block/Zone' ||\r\n        header === 'Level' || header === 'Unit/CJ' ||\r\n        header === 'Drg Type' || header === 'Use For' ||\r\n        header === 'Coordinator In Charge' || header === 'Modeller' ||\r\n        header === 'Model Progress' || header === 'Drawing Progress' ||\r\n        header === 'Construction Start'\r\n    ) return 100;\r\n    else if (header === 'Construction Issuance Date') return 120;\r\n    else if (header === 'Drawing') return 100;\r\n\r\n    else if (\r\n        header === 'Drg To Consultant (A)' ||\r\n        header === 'Drg To Consultant (T)' ||\r\n        header === 'Get Approval (A)' ||\r\n        header === 'Get Approval (T)'\r\n    ) return 120;\r\n\r\n    else if (header.includes('(A)') || header.includes('(T)')) return 90;\r\n\r\n\r\n\r\n\r\n    else if (header === 'Rev') return 50;\r\n    else if (header === 'Status') return 280;\r\n    else if (header === 'Remark') return 120;\r\n    else if (header === 'Drawing Number') return 270;\r\n    else if (header === 'Drawing Name') return 450;\r\n    else return 300;\r\n\r\n};\r\n\r\n\r\nexport const getActionName = (type) => {\r\n    if (type === 'filter-ICON') return 'Create New Filter';\r\n    if (type === 'reorderColumn-ICON') return 'Columns Layout';\r\n    if (type === 'group-ICON') return 'Group Data';\r\n    if (type === 'sort-ICON') return 'Sort Data';\r\n    if (type === 'rollback-ICON') return 'Clear Filter/Sort/Group/Search';\r\n    if (type === 'addDrawingType-ICON') return 'Drawing Type Organization';\r\n    if (type === 'color-cell-history-ICON') return 'Check Data Changed';\r\n    if (type === 'View Cell History') return 'Cell History';\r\n    else return '';\r\n};\r\n\r\n\r\n\r\n\r\n\r\nconst createParentRows = (arr) => {\r\n    let newRows = [];\r\n    arr.forEach((title, i) => {\r\n        newRows.push({\r\n            _id: mongoObjectId(),\r\n            _rowLevel: 0,\r\n            _parentRow: null,\r\n            _preRow: i === 0 ? null : newRows[i - 1]._id,\r\n            'Drawing Number': title\r\n        });\r\n    });\r\n    return newRows;\r\n};\r\nconst getParentRowsHandy = () => {\r\n\r\n    let arrParentTitle = [\r\n        'COLUMN AND WALL SETTING OUT Keyplan',\r\n        'UNIT TYPE LAYOUT TSO Plan',\r\n        'STAIRCASES and LIFT LOBBIES',\r\n        'ANCILLARY STRUCTURES',\r\n        'No Name 1',\r\n        'No Name 2',\r\n        'PBU Tile layout',\r\n        'Tile layout',\r\n        'Clubhouse',\r\n        'RCP',\r\n        'RCP Unit type',\r\n        'RCP Clubhouse',\r\n        'Swimming Pool',\r\n        'External Sections/ Elevations',\r\n        'Driveway/ Pavement',\r\n        'No Name 3',\r\n        'No Name 4',\r\n        'Carpark Details',\r\n        'M&E Details',\r\n        'FAÇADE Maintenance',\r\n        'No Name 5',\r\n        'TOILETS Details',\r\n    ];\r\n\r\n    let rows = createParentRows(arrParentTitle);\r\n    return rows;\r\n};\r\nexport const getCurrentAndHistoryDrawings = (rows, headers) => {\r\n\r\n    let obj = {};\r\n    rows.forEach(r => {\r\n        const key = `${r['Drawing Number'] || ''}-${r['Drawing Name'] || ''}`;\r\n        obj[key] = [...obj[key] || [], r];\r\n    });\r\n\r\n\r\n    let parentRows = getParentRowsHandy();\r\n    let historyOutput = [];\r\n    let objOutput = [];\r\n\r\n    Object.keys(obj).forEach((key, i) => {\r\n\r\n        const arr = obj[key];\r\n        arr.sort((a, b) => (a['Rev'].toLowerCase() > b['Rev'].toLowerCase()) ? 1 : ((b['Rev'].toLowerCase() > a['Rev'].toLowerCase()) ? -1 : 0));\r\n\r\n        let rowsHistory = arr.filter((r, index) => index < arr.length - 1);\r\n\r\n        let rowId = mongoObjectId();\r\n\r\n        if (rowsHistory.length > 0) {\r\n            let rowsHistoryOutput = rowsHistory.map(r => {\r\n                let rowDataObj = { row: rowId };\r\n\r\n                headers.forEach(hd => {\r\n                    if (r[hd.text]) rowDataObj.history = { ...rowDataObj.history || {}, [hd.key]: r[hd.text] };\r\n                });\r\n                return rowDataObj;\r\n            });\r\n            historyOutput = [...historyOutput, ...rowsHistoryOutput];\r\n        };\r\n\r\n\r\n        let rowCurrent = arr[arr.length - 1];\r\n        let rowCurrentOutput = {};\r\n\r\n        headers.forEach(hd => {\r\n            if (rowCurrent[hd.text]) rowCurrentOutput.data = { ...rowCurrentOutput.data || {}, [hd.key]: rowCurrent[hd.text] };\r\n        });\r\n\r\n        rowCurrentOutput._id = rowId;\r\n        rowCurrentOutput.parentRow = i === 0 ? null : parentRows[getParentId(i)]._id;\r\n        rowCurrentOutput.preRow = returnPreRowNull(i) ? null : objOutput[i - 1]._id;\r\n        rowCurrentOutput.level = 1;\r\n\r\n        objOutput.push(rowCurrentOutput);\r\n    });\r\n\r\n    objOutput.splice(0, 1);\r\n\r\n\r\n    const parentRowsOutput = parentRows.map(r => {\r\n        const { _id, _rowLevel, _parentRow, _preRow } = r;\r\n\r\n        let rowDTObj = {};\r\n        headers.forEach(hd => {\r\n            if (r[hd.text]) rowDTObj = { ...rowDTObj || {}, [hd.key]: r[hd.text] };\r\n        });\r\n        return {\r\n            _id,\r\n            level: _rowLevel,\r\n            parentRow: _parentRow,\r\n            preRow: _preRow,\r\n            data: rowDTObj\r\n        };\r\n    });\r\n\r\n\r\n\r\n    return {\r\n        rows: [...parentRowsOutput, ...objOutput],\r\n        historyRows: historyOutput\r\n    };\r\n};\r\nconst getParentId = (i) => {\r\n    if (i >= 1 && i < 20) return 0;\r\n    if (i >= 20 && i < 42) return 1;\r\n    if (i >= 42 && i < 60) return 2;\r\n    if (i >= 60 && i < 76) return 3;\r\n    if (i >= 76 && i < 81) return 4;\r\n    if (i >= 81 && i < 87) return 5;\r\n    if (i >= 87 && i < 99) return 6;\r\n    if (i >= 99 && i < 109) return 7;\r\n    if (i >= 109 && i < 112) return 8;\r\n    if (i >= 112 && i < 126) return 9;\r\n    if (i >= 126 && i < 147) return 10;\r\n    if (i >= 147 && i < 150) return 11;\r\n    if (i >= 150 && i < 155) return 12;\r\n    if (i >= 155 && i < 159) return 13;\r\n    if (i >= 159 && i < 163) return 14;\r\n    if (i >= 163 && i < 167) return 15;\r\n    if (i >= 167 && i < 171) return 16;\r\n    if (i >= 171 && i < 174) return 17;\r\n    if (i >= 174 && i < 179) return 18;\r\n    if (i >= 179 && i < 181) return 19;\r\n    if (i >= 181 && i < 184) return 20;\r\n    if (i >= 184 && i < 193) return 21;\r\n};\r\nconst returnPreRowNull = (i) => {\r\n    if (\r\n        i === 0 ||\r\n        i === 1 ||\r\n        i === 20 ||\r\n        i === 42 ||\r\n        i === 60 ||\r\n        i === 76 ||\r\n        i === 81 ||\r\n        i === 87 ||\r\n        i === 99 ||\r\n        i === 109 ||\r\n        i === 112 ||\r\n        i === 126 ||\r\n        i === 147 ||\r\n        i === 150 ||\r\n        i === 155 ||\r\n        i === 159 ||\r\n        i === 163 ||\r\n        i === 167 ||\r\n        i === 171 ||\r\n        i === 174 ||\r\n        i === 179 ||\r\n\r\n        i === 181 ||\r\n        i === 184\r\n    ) {\r\n        return true;\r\n    } else return false;\r\n};","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\constants\\index.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\PanelCalendar.jsx",["177","178"],"import { Calendar, Radio } from 'antd';\r\nimport React from 'react';\r\n\r\n\r\nconst { Group, Button } = Radio;\r\n\r\n\r\nconst PanelCalendar = ({ pickDate }) => {\r\n\r\n    return (\r\n        <div style={{ width: 300 }}>\r\n            <Calendar\r\n                fullscreen={false}\r\n                onSelect={pickDate}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default PanelCalendar;\r\n","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\ReorderColumnForm.jsx",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\ColorizedForm.jsx",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\TableDrawingDetail.jsx",["179","180","181"],"\r\nimport Axios from 'axios';\r\nimport React, { useContext, useEffect, useState } from 'react';\r\nimport BaseTable, { AutoResizer } from 'react-base-table';\r\nimport styled from 'styled-components';\r\nimport { colorType, SERVER_URL } from '../../constants';\r\nimport { Context as ProjectContext } from '../../contexts/projectContext';\r\nimport { Context as RowContext } from '../../contexts/rowContext';\r\nimport { getHeaderWidth, mongoObjectId } from '../../utils';\r\n\r\n\r\nconst Table = (props) => {\r\n    return (\r\n        <AutoResizer>\r\n            {({ width, height }) => {\r\n                return (\r\n                    <BaseTable\r\n                        {...props}\r\n                        width={width}\r\n                        height={height}\r\n                    />\r\n                );\r\n            }}\r\n        </AutoResizer>\r\n    );\r\n};\r\n\r\n\r\nconst TableDrawingDetail = (props) => {\r\n\r\n\r\n    const { rowData } = props;\r\n    const { state: stateProject } = useContext(ProjectContext);\r\n    const { state: stateRow } = useContext(RowContext);\r\n\r\n    const [rowsHistoryDatabase, setRowsHistoryDatabase] = useState(null);\r\n    const [rowsHistoryPrevious, setRowsHistoryPrevious] = useState([]);\r\n    const [rowCurrent, setRowCurrent] = useState(null);\r\n\r\n\r\n    useEffect(() => {\r\n        const fetchRowsHistory = async () => {\r\n            try {\r\n                const res = await Axios.get(`${SERVER_URL}/row/history/${stateProject.allDataOneSheet._id}/${rowData.id}`);\r\n                let rowsHistory = [];\r\n                res.data.map((r, i) => {\r\n                    const { history } = r;\r\n                    const { headers } = stateProject.allDataOneSheet.publicSettings;\r\n                    let data = { id: mongoObjectId() };\r\n                    Object.keys(history).map(key => {\r\n                        const hdText = headers.find(hd => hd.key === key).text;\r\n                        data[hdText] = history[key];\r\n                    });\r\n                    rowsHistory.push(data);\r\n                });\r\n                setRowsHistoryDatabase(rowsHistory);\r\n\r\n\r\n                let rowsHistoryPrevious = [];\r\n                if (stateRow.rowsVersionsToSave) {\r\n                    rowsHistoryPrevious = stateRow.rowsVersionsToSave.filter(r => r.id === rowData.id);\r\n                    rowsHistoryPrevious.forEach((r, i) => {\r\n                        r.id = mongoObjectId();\r\n                    });\r\n                    setRowsHistoryPrevious(rowsHistoryPrevious);\r\n                };\r\n\r\n\r\n                setRowCurrent({\r\n                    ...rowData,\r\n                    key: rowsHistory.length + rowsHistoryPrevious.length + 1\r\n                });\r\n\r\n\r\n\r\n            } catch (err) {\r\n                console.log(err);\r\n            };\r\n        };\r\n        fetchRowsHistory();\r\n    }, []);\r\n\r\n    let data;\r\n    if (rowsHistoryDatabase && rowCurrent) {\r\n        data = [\r\n            ...rowsHistoryDatabase,\r\n            ...rowsHistoryPrevious,\r\n            rowCurrent\r\n        ];\r\n    };\r\n\r\n    const panelWidth = window.innerWidth * 0.8;\r\n    const panelHeight = window.innerHeight * 0.8;\r\n\r\n\r\n    return (\r\n        <div style={{\r\n            height: panelHeight,\r\n            background: 'white',\r\n            padding: 10,\r\n            display: 'flex',\r\n            justifyContent: 'center',\r\n            flexDirection: 'column',\r\n        }}>\r\n\r\n            {rowsHistoryDatabase && rowCurrent && (\r\n                <>\r\n                    <div style={{\r\n                        width: panelWidth,\r\n                        height: 100 + data.length * 30,\r\n                        margin: '0 auto',\r\n                        textAlign: 'center'\r\n                    }}>\r\n                        <div style={{ fontSize: 20, fontWeight: 'bold' }}>DRAWING HISTORY</div>\r\n                        <TableStyled\r\n                            fixed\r\n                            columns={generateColumns(getHeadersText(stateProject.allDataOneSheet.publicSettings.headers))}\r\n                            data={data}\r\n                            rowHeight={28}\r\n                        />\r\n\r\n                    </div>\r\n\r\n                    <div style={{\r\n                        margin: '0 auto',\r\n                        textAlign: 'center',\r\n                        marginTop: 100\r\n                    }}>\r\n                        <img src='./img/timeline.JPG' alt='visualize' height={panelHeight - (100 + data.length * 30) - 100} />\r\n                    </div>\r\n                </>\r\n            )}\r\n\r\n\r\n\r\n        </div>\r\n\r\n    );\r\n};\r\n\r\nexport default TableDrawingDetail;\r\n\r\n\r\nconst generateColumns = (headers) => headers.map((column, columnIndex) => ({\r\n\r\n    key: column,\r\n    dataKey: column,\r\n    title: column,\r\n    resizable: true,\r\n    width: getHeaderWidth(column),\r\n}));\r\n\r\nconst getHeadersText = (headersData) => {\r\n    return headersData.map(hd => {\r\n        return hd.text;\r\n    });\r\n};\r\n\r\n\r\n\r\n\r\nconst TableStyled = styled(Table)`\r\n\r\n    .BaseTable__table .BaseTable__body {\r\n\r\n        -webkit-touch-callout: none;\r\n        -webkit-user-select: none;\r\n        -khtml-user-select: none;\r\n        -moz-user-select: none;\r\n        -ms-user-select: none;\r\n        user-select: none;\r\n\r\n        ::-webkit-scrollbar {\r\n            -webkit-appearance: none;\r\n            background-color: #e3e3e3;\r\n        }\r\n\r\n        ::-webkit-scrollbar:vertical {\r\n            width: 15px;\r\n        }\r\n\r\n        ::-webkit-scrollbar:horizontal {\r\n            height: 15px;\r\n        }\r\n\r\n        ::-webkit-scrollbar-thumb {\r\n            border-radius: 10px;\r\n            border: 2px solid #e3e3e3;\r\n            background-color: #999;\r\n\r\n            &:hover {\r\n                background-color: #666;\r\n            }\r\n        }\r\n\r\n        ::-webkit-resizer {\r\n            display: none;\r\n        }\r\n\r\n        .BaseTable__row-cell-text {\r\n            color: black\r\n        }\r\n    }\r\n\r\n    .BaseTable__header-cell {\r\n        padding: 10px;\r\n        border-right: 1px solid #DCDCDC;\r\n\r\n        background: ${colorType.grey1};\r\n        color: black\r\n    }\r\n\r\n    .BaseTable__row-cell {\r\n        padding: 10px;\r\n        border-right: 1px solid #DCDCDC;\r\n\r\n        overflow: visible !important;\r\n    }\r\n\r\n\r\n\r\n\r\n`;\r\n\r\n","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\TableCellHistory.jsx",["182","183"],"import { List } from 'antd';\r\nimport Axios from 'axios';\r\nimport React, { useContext, useEffect, useState } from 'react';\r\nimport { SERVER_URL } from '../../constants';\r\nimport { Context as ProjectContext } from '../../contexts/projectContext';\r\nimport { Context as RowContext } from '../../contexts/rowContext';\r\n\r\n\r\nconst TableCellHistory = (props) => {\r\n    console.log(props);\r\n    const { rowData, column } = props;\r\n\r\n    const {\r\n        state: stateProject\r\n    } = useContext(ProjectContext);\r\n\r\n    const {\r\n        state: stateRow\r\n    } = useContext(RowContext);\r\n\r\n    const projectId = stateProject.allDataOneSheet.projectId;\r\n    const headers = stateProject.allDataOneSheet.publicSettings.headers;\r\n    const headerKey = headers.find(hd => hd.text === column.key).key;\r\n\r\n\r\n    const [history, setHistory] = useState()\r\n\r\n    useEffect(() => {\r\n        const fetchCellHistory = async () => {\r\n            try {\r\n\r\n                const res = await Axios.get(`${SERVER_URL}/cell/history/${projectId}/${rowData.id}/${headerKey}`);\r\n\r\n                console.log('HISTORY...', res.data);\r\n                setHistory(res.data.histories.reverse());\r\n\r\n\r\n            } catch (err) {\r\n                console.log(err);\r\n            };\r\n        };\r\n        fetchCellHistory();\r\n    }, [])\r\n\r\n\r\n    return (\r\n        <div style={{ width: '100%', padding: 15 }}>\r\n            <List\r\n                size='small'\r\n                header={null}\r\n                footer={null}\r\n                bordered\r\n                dataSource={history}\r\n                renderItem={item => (\r\n                    <List.Item>\r\n                        <div>\r\n                            <div>{`${item.username}`}</div>\r\n                            <div style={{ fontSize: 12, color: 'grey' }}>{item.createdAt}</div>\r\n                            <div style={{ fontWeight: 'bold' }}>{item.text}</div>\r\n                        </div>\r\n                    </List.Item>\r\n                )}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default TableCellHistory;\r\n","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\InputSearch.jsx",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\IconTable.jsx",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\CellIndex.jsx",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\FormSort.jsx",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\FormFilter.jsx",["184","185"],"import { Icon, Select } from 'antd';\r\nimport React, { useContext, useState } from 'react';\r\nimport styled from 'styled-components';\r\nimport { colorType } from '../../constants';\r\nimport { Context as ProjectContext } from '../../contexts/projectContext';\r\nimport { Context as RowContext } from '../../contexts/rowContext';\r\nimport { mongoObjectId } from '../../utils';\r\nimport ButtonGroupComp from './ButtonGroupComp';\r\n\r\nconst { Option } = Select;\r\n\r\n\r\n\r\nconst FormFilter = ({ applyFilter, onClickCancelModal }) => {\r\n\r\n\r\n    const [filterColumn, setFilterColumn] = useState({});\r\n    const { state: stateRow } = useContext(RowContext);\r\n\r\n    const setFilterSelect = (dataFilter) => {\r\n        setFilterColumn({ ...filterColumn, ...dataFilter });\r\n    };\r\n    const removeFilterTag = (column) => {\r\n        let xxx = { ...filterColumn };\r\n        delete xxx[column];\r\n        setFilterColumn(xxx);\r\n    };\r\n\r\n    const [tags, setTags] = useState([mongoObjectId()]);\r\n\r\n    const onClickApply = () => {\r\n\r\n        let rowArr = stateRow.rowsAll;\r\n\r\n        Object.keys(filterColumn).forEach(cl => {\r\n            rowArr = rowArr.filter(r => r[cl] === filterColumn[cl]);\r\n        });\r\n\r\n        applyFilter(rowArr);\r\n    };\r\n\r\n    return (\r\n        <div style={{\r\n            width: '100%',\r\n            height: '100%'\r\n        }}>\r\n            <div style={{ padding: 20, borderBottom: `1px solid ${colorType.grey4}` }}>\r\n                {Object.keys(filterColumn).map(key => (\r\n                    <div key={key} style={{ display: 'flex' }}>\r\n                        <SelectComp\r\n                            setFilterSelect={setFilterSelect}\r\n                            removeFilterTag={removeFilterTag}\r\n                            filterColumn={filterColumn}\r\n                            headerKey={key}\r\n\r\n                        />\r\n                        <IconStyled>\r\n                            <Icon\r\n                                type='close'\r\n                                style={{\r\n                                    transform: 'translate(0, -3px)',\r\n                                    color: colorType.grey2,\r\n                                    fontSize: 11\r\n                                }}\r\n                                onClick={() => removeFilterTag(key)}\r\n                            />\r\n                        </IconStyled>\r\n\r\n                    </div>\r\n                ))}\r\n\r\n                <SelectComp\r\n                    setFilterSelect={setFilterSelect}\r\n                    removeFilterTag={removeFilterTag}\r\n                    filterColumn={filterColumn}\r\n                />\r\n\r\n            </div>\r\n            <div style={{ padding: 20, display: 'flex', flexDirection: 'row-reverse' }}>\r\n                <ButtonGroupComp\r\n                    onClickCancel={onClickCancelModal}\r\n                    onClickApply={onClickApply}\r\n                />\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\nexport default FormFilter;\r\n\r\n\r\nconst IconStyled = styled.div`\r\n        margin-left: 7px;\r\n        width: 18px; \r\n        height: 18px; \r\n        border: 1px solid ${colorType.grey1};\r\n        text-align: center;\r\n        &:hover {\r\n            background-color: ${colorType.grey4};\r\n            cursor: pointer;\r\n        };\r\n\r\n`;\r\n\r\n\r\n\r\nconst SelectComp = ({ setFilterSelect, removeFilterTag, filterColumn, headerKey }) => {\r\n\r\n    const { state: stateProject } = useContext(ProjectContext);\r\n    const { state: stateRow } = useContext(RowContext);\r\n\r\n    let columnsValueArr = getColumnsValue(stateRow.rowsAll, stateProject.userData.headersAll);\r\n\r\n    const [column, setColumn] = useState(headerKey);\r\n\r\n\r\n    return (\r\n        <div style={{ display: 'flex', paddingBottom: 25, width: '100%' }}>\r\n\r\n            <SelectStyled\r\n                defaultValue={headerKey === undefined ? 'Select Field...' : headerKey}\r\n                style={{\r\n                    marginRight: 13,\r\n                    width: '47%',\r\n                }}\r\n                onChange={(column) => setColumn(column)}\r\n\r\n            >\r\n                {getHeadersFilterArr(stateProject.userData.headersAll, columnsValueArr, Object.keys(filterColumn)).map(hd => (\r\n                    <Option key={hd} value={hd}>{hd}</Option>\r\n                ))}\r\n            </SelectStyled>\r\n\r\n\r\n            <SelectStyled\r\n                defaultValue={filterColumn[headerKey] === undefined ? 'Select Value...' : filterColumn[headerKey]}\r\n                style={{\r\n                    // background: headerKey === undefined && 'red',\r\n                    width: '47%'\r\n                }}\r\n                onChange={(value) => setFilterSelect({ [column]: value })}\r\n                disabled={!column ? true : false}\r\n            >\r\n                {column && columnsValueArr[column].map(hd => (\r\n                    <Option key={hd} value={hd}>{hd}</Option>\r\n                ))}\r\n            </SelectStyled>\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\nconst SelectStyled = styled(Select)`\r\n    .ant-select-selection {\r\n        border-radius: 0;\r\n    }\r\n`;\r\n\r\n\r\nconst getColumnsValue = (rows, headers) => {\r\n    let valueObj = {};\r\n    headers.forEach(hd => {\r\n        let valueArr = [];\r\n        rows.filter(r => r._rowLevel === 1).forEach(row => {\r\n            valueArr.push(row[hd] || '');\r\n        });\r\n        valueArr = [...new Set(valueArr)].filter(e => e);\r\n\r\n        if (valueArr.length > 0) valueObj[hd] = valueArr;\r\n    });\r\n    return valueObj;\r\n};\r\n\r\n\r\nconst getHeadersFilterArr = (headers, columnsValueArr, filtered) => {\r\n    let arr = [];\r\n    headers.forEach(hd => {\r\n        if (columnsValueArr[hd] && filtered.indexOf(hd) === -1) arr.push(hd);\r\n    });\r\n    return arr;\r\n};","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\FormGroup.jsx",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\TableActivityHistory.jsx",["186","187","188","189","190","191","192","193"],"import { Button, Input } from 'antd';\r\nimport Axios from 'axios';\r\nimport React, { useContext, useEffect, useState } from 'react';\r\nimport BaseTable, { AutoResizer } from 'react-base-table';\r\nimport styled from 'styled-components';\r\nimport { colorType, SERVER_URL } from '../../constants';\r\nimport { Context as ProjectContext } from '../../contexts/projectContext';\r\nimport { Context as RowContext } from '../../contexts/rowContext';\r\nimport { convertHistoryData, mongoObjectId } from '../../utils';\r\n\r\n\r\n\r\nconst Table = (props) => {\r\n    return (\r\n        <AutoResizer>\r\n            {({ width, height }) => {\r\n                return (\r\n                    <BaseTable\r\n                        {...props}\r\n                        width={width}\r\n                        height={height}\r\n                    />\r\n                );\r\n            }}\r\n        </AutoResizer>\r\n    );\r\n};\r\n\r\nconst panelWidth = window.innerWidth * 0.8;\r\nconst panelHeight = window.innerHeight * 0.8;\r\n\r\nconst TableActivityHistory = (props) => {\r\n\r\n    const { rowData } = props;\r\n    const { state: stateProject } = useContext(ProjectContext);\r\n    const { state: stateRow } = useContext(RowContext);\r\n\r\n    const projectId = stateProject.allDataOneSheet.projectId;\r\n    const headers = stateProject.allDataOneSheet.publicSettings.headers;\r\n\r\n    const [historyAll, setHistoryAll] = useState(null);\r\n\r\n\r\n    const headersShown = [\r\n        'Drawing Number',\r\n        'Drawing Name',\r\n        'Column',\r\n        'Value',\r\n        'User',\r\n        'Created At',\r\n        'Action'\r\n    ];\r\n\r\n    useEffect(() => {\r\n        const fetchRowsAndCellHistory = async () => {\r\n            try {\r\n                const resRows = await Axios.get(`${SERVER_URL}/row/history/${projectId}`);\r\n                const resCells = await Axios.get(`${SERVER_URL}/cell/history/${projectId}`);\r\n                // console.log(resRows.data, resCells.data);\r\n\r\n                const rowsOutput = resRows.data.map(row => {\r\n                    const { history } = row;\r\n                    const revKey = headers.find(hd => hd.text === 'Rev').key;\r\n                    const statusKey = headers.find(hd => hd.text === 'Status').key;\r\n                    const dwgNumber = headers.find(hd => hd.text === 'Drawing Number').key;\r\n                    const dwgName = headers.find(hd => hd.text === 'Drawing Name').key;\r\n\r\n                    return {\r\n                        'Drawing Number': history[dwgNumber],\r\n                        'Drawing Name': history[dwgName],\r\n                        'Column': 'Rev & Status',\r\n                        'Value': `${history[revKey]} - ${history[statusKey]}`,\r\n                        'User': row.username || 'n/a',\r\n                        'Created At': row.createdAt,\r\n                        'Action': 'Save Drawing Version',\r\n                        id: mongoObjectId()\r\n                    }\r\n                });\r\n\r\n                const cellsOutput = convertHistoryData(resCells.data).map(cell => {\r\n\r\n                    const row = stateRow.rowsAll.find(r => r.id === cell.row);\r\n\r\n                    return {\r\n                        'Drawing Number': row['Drawing Number'],\r\n                        'Drawing Name': row['Drawing Name'],\r\n                        'Column': headers.find(hd => hd.key === cell.headerKey).text,\r\n                        'Value': cell.text,\r\n                        'User': cell.username || 'n/a',\r\n                        'Created At': cell.createdAt,\r\n                        'Action': 'Edit Cell',\r\n                        id: mongoObjectId()\r\n                    };\r\n                });\r\n\r\n                const dummy = [\r\n                    {\r\n                        'Drawing Number': 'HAN_WH_A_CS_KP_01S_01',\r\n                        'Drawing Name': 'Level 2 Column and Wall Setting Out Keyplan',\r\n                        'User': 'user...',\r\n                        'Created At': '12/11/2020',\r\n                        'Action': 'Delete Drawing',\r\n                        id: mongoObjectId()\r\n                    },\r\n                    {\r\n                        'Drawing Number': 'HAN_WH_A_CS_KP_01S_34',\r\n                        'Drawing Name': 'Level 8 Column and Wall',\r\n                        'User': 'user...',\r\n                        'Created At': '13/10/2020',\r\n                        'Action': 'Delete Drawing',\r\n                        id: mongoObjectId()\r\n                    },\r\n                ];\r\n\r\n\r\n                let outputArr = [...rowsOutput, ...dummy, ...cellsOutput].sort((b, a) => a['Created At'] > b['Created At'] ? 1 : b['Created At'] > a['Created At'] ? -1 : 0);\r\n\r\n                setHistoryAll(outputArr);\r\n\r\n            } catch (err) {\r\n                console.log(err);\r\n            };\r\n        };\r\n        fetchRowsAndCellHistory();\r\n    }, []);\r\n\r\n\r\n    const [historyData, setHistoryData] = useState([]);\r\n\r\n    const [data, setData] = useState([]);\r\n\r\n    const [valueStart, setValueStart] = useState('12/01/20');\r\n    const [valueEnd, setValueEnd] = useState('22/05/21');\r\n\r\n    const onClick = () => {\r\n        // let start = moment(moment(valueStart,'DD/MM/YY').format('MM/DD/YY')).toDate();\r\n        // let end = moment(moment(valueEnd,'DD/MM/YY').format('MM/DD/YY')).toDate();\r\n\r\n        // if (start > end) return;\r\n\r\n        // let filterCells = convertHistoryData(historyData).filter(cell => {\r\n        //     let createdAt = moment(cell.createdAt).toDate()\r\n        //     return createdAt >= start && createdAt <= end;\r\n        // });\r\n\r\n        // setData(filterCells.map(cell => {\r\n        //     let drawingData = getDrawingName(\r\n        //         stateProject.allDataOneSheet.publicSettings.headers,\r\n        //         stateRow.rowsAll,\r\n        //         cell.row,\r\n        //         cell.headerKey\r\n        //     );\r\n        //     let obj = {\r\n        //         id: mongoObjectId(),\r\n        //         'Drawing Name': drawingData.drawingName,\r\n        //         'Drawing Number': drawingData.drawingNumber,\r\n        //         Column: drawingData.headerText,\r\n        //         Value: cell.text,\r\n        //         'Created At': moment(cell.createdAt).format('DD/MM/YY HH:mm:ss'),\r\n        //         User: cell.username\r\n        //     };\r\n        //     return obj;\r\n        // }));\r\n\r\n    };\r\n\r\n\r\n\r\n    return (\r\n        <>\r\n            {historyAll && (\r\n                <div style={{\r\n                    height: panelHeight,\r\n                    background: 'white',\r\n                    padding: 10,\r\n                    display: 'flex',\r\n                    justifyContent: 'center',\r\n                    flexDirection: 'column',\r\n                }}>\r\n                    <div style={{ display: 'flex', marginBottom: 10 }}>\r\n                        <Input\r\n                            placeholder='From Date...'\r\n                            onChange={(e) => setValueStart(e.target.value)}\r\n                            value={valueStart}\r\n                            style={{}}\r\n                        />\r\n                        <Input\r\n                            placeholder='To Date...'\r\n                            onChange={(e) => setValueEnd(e.target.value)}\r\n                            value={valueEnd}\r\n                            style={{}}\r\n                        />\r\n                        <Button type='primary' onClick={onClick}>Check</Button>\r\n                    </div>\r\n                    <div style={{ display: 'flex', justifyContent: 'space-between', marginBottom: 20, width: '35%' }}>\r\n                        <Button>Last 7 Days</Button>\r\n                        <Button>Last 14 Days</Button>\r\n                        <Button>This Month</Button>\r\n                    </div>\r\n\r\n                    <div style={{\r\n                        width: panelWidth,\r\n                        height: '100%',\r\n                        margin: '0 auto',\r\n                        textAlign: 'center'\r\n                    }}>\r\n                        <TableStyled\r\n                            fixed\r\n                            columns={generateColumns(headersShown)}\r\n                            data={historyAll}\r\n                            rowHeight={28}\r\n                        />\r\n                    </div>\r\n                </div>\r\n            )}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default TableActivityHistory;\r\n\r\n\r\nconst generateColumns = (headers) => headers.map((column, columnIndex) => ({\r\n\r\n    key: column,\r\n    dataKey: column,\r\n    title: column,\r\n    resizable: true,\r\n    width: getHeaderWidth2(column),\r\n}));\r\nconst getHeaderWidth2 = (header) => {\r\n    console.log(header);\r\n    if (header === 'Drawing Number') return 300;\r\n    if (header === 'Drawing Name') return 300;\r\n    if (header === 'Column') return 200;\r\n    if (header === 'Value') return 300;\r\n    if (header === 'User') return 200;\r\n    if (header === 'Created At') return 200;\r\n    if (header === 'Action') return 200;\r\n};\r\nconst getHeadersText = (headersData) => {\r\n    return headersData.map(hd => {\r\n        return hd.text;\r\n    });\r\n};\r\n\r\nconst getDrawingName = (headers, rowsAll, rowId, headerId) => {\r\n\r\n    let row = rowsAll.find(r => r.id === rowId);\r\n    let headerText = headers.find(hd => hd.key === headerId)['text'];\r\n\r\n    return {\r\n        headerText,\r\n        drawingName: row['Drawing Name'],\r\n        drawingNumber: row['Drawing Number'],\r\n    }\r\n};\r\n\r\n\r\nconst TableStyled = styled(Table)`\r\n\r\n    .BaseTable__table .BaseTable__body {\r\n\r\n        -webkit-touch-callout: none;\r\n        -webkit-user-select: none;\r\n        -khtml-user-select: none;\r\n        -moz-user-select: none;\r\n        -ms-user-select: none;\r\n        user-select: none;\r\n\r\n        ::-webkit-scrollbar {\r\n            -webkit-appearance: none;\r\n            background-color: #e3e3e3;\r\n        }\r\n\r\n        ::-webkit-scrollbar:vertical {\r\n            width: 15px;\r\n        }\r\n\r\n        ::-webkit-scrollbar:horizontal {\r\n            height: 15px;\r\n        }\r\n\r\n        ::-webkit-scrollbar-thumb {\r\n            border-radius: 10px;\r\n            border: 2px solid #e3e3e3;\r\n            background-color: #999;\r\n\r\n            &:hover {\r\n                background-color: #666;\r\n            }\r\n        }\r\n\r\n        ::-webkit-resizer {\r\n            display: none;\r\n        }\r\n\r\n        .BaseTable__row-cell-text {\r\n            color: black\r\n        }\r\n    }\r\n\r\n    .BaseTable__header-cell {\r\n        padding: 10px;\r\n        border-right: 1px solid #DCDCDC;\r\n\r\n        background: ${colorType.grey1};\r\n        color: black\r\n    }\r\n\r\n    .BaseTable__row-cell {\r\n        padding: 10px;\r\n        border-right: 1px solid #DCDCDC;\r\n\r\n        overflow: visible !important;\r\n    }\r\n\r\n\r\n\r\n\r\n`;\r\n\r\n\r\n\r\n\r\n","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\FormDateAutomation.jsx",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\ButtonStyle.jsx",["194"],"import { Button } from 'antd';\r\nimport React from 'react';\r\n\r\nconst ButtonStyle = ({\r\n    colorText,\r\n    marginRight,\r\n    borderColor,\r\n    background,\r\n    name,\r\n    onClick\r\n}) => {\r\n\r\n    return (\r\n        <Button \r\n            style={{\r\n                borderRadius: 0,\r\n                background: background,\r\n                color: colorText,\r\n                border: 'none',\r\n                marginRight: marginRight,\r\n                border: `1px solid ${borderColor || background}`\r\n            }}\r\n            onClick={onClick}\r\n        >\r\n            {name}\r\n        </Button>\r\n    );\r\n};\r\n\r\nexport default ButtonStyle;\r\n\r\n\r\n","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\ButtonGroupComp.jsx",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\PanelConfirm.jsx",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\FormDrawingTypeOrder.jsx",["195","196"],"import { Icon } from 'antd';\r\nimport React, { useContext, useEffect, useRef, useState } from 'react';\r\nimport { DraggableArea } from 'react-draggable-tags';\r\nimport styled from 'styled-components';\r\nimport { colorType } from '../../constants';\r\nimport { Context as ProjectContext } from '../../contexts/projectContext';\r\nimport { Context as RowContext } from '../../contexts/rowContext';\r\nimport { mongoObjectId } from '../../utils';\r\nimport ButtonGroupComp from './ButtonGroupComp';\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst FormDrawingTypeOrder = ({ onClickCancelModal, applyFolderOrganize }) => {\r\n\r\n   const { state: stateProject } = useContext(ProjectContext);\r\n   const { state: stateRow } = useContext(RowContext);\r\n\r\n   const folders = stateRow.rowsAll\r\n      .filter(r => r._rowLevel === 0);\r\n\r\n\r\n   const getTags = () => {\r\n      let arr = [];\r\n      folders.forEach((row) => {\r\n         arr.push({\r\n            id: row.id,\r\n            header: row['Drawing Number'],\r\n         });\r\n      });\r\n      return arr;\r\n   };\r\n\r\n   const [tags, setTags] = useState(getTags());\r\n\r\n   const addNewFolder = ({ index }) => {\r\n      let newTags = [...tags];\r\n      newTags.splice(index + 1, 0, {\r\n         id: mongoObjectId(),\r\n         header: 'New Drawing Type',\r\n      });\r\n      setTags(newTags);\r\n   };\r\n\r\n\r\n   const updateFolderName = (tag, index, value) => {\r\n      tags[index].header = value;\r\n      setTags(tags);\r\n   };\r\n\r\n\r\n   const onClickApply = () => {\r\n      applyFolderOrganize(tags);\r\n   };\r\n\r\n\r\n   return (\r\n      <Container>\r\n\r\n         <PanelStyled>\r\n\r\n            <ButtonFolder>\r\n               <Icon type='folder' style={{ transform: 'translate(0, 3px)', marginRight: 5, color: 'grey' }} />\r\n               <div>{stateProject.allDataOneSheet.projectName.toUpperCase()}</div>\r\n            </ButtonFolder>\r\n\r\n            <DraggableArea\r\n               isList\r\n               tags={tags}\r\n               render={(props) => {\r\n                  const { tag, index } = props;\r\n                  return (\r\n                     <ButtonFolder style={{\r\n                        float: 'right'\r\n                     }}>\r\n                        <Icon type='folder' style={{ fontSize: 15, transform: 'translate(0, 2px)', marginRight: 5, color: 'grey' }} />\r\n\r\n                        <InputComp tag={tag} index={index} updateFolderName={updateFolderName} />\r\n\r\n                        <div style={{ float: 'right' }}>\r\n                           <Icon type='plus-circle' style={{ fontSize: 15, marginRight: 5, color: 'grey' }} onClick={() => addNewFolder(props)} />\r\n                           <Icon type='delete' style={{ fontSize: 15, marginRight: 5, color: 'grey' }} />\r\n                        </div>\r\n                     </ButtonFolder>\r\n                  );\r\n               }}\r\n               style={{\r\n                  padding: 0,\r\n                  width: '100%',\r\n               }}\r\n               onChange={(tags) => setTags(tags)}\r\n            />\r\n\r\n         </PanelStyled>\r\n\r\n         <div style={{ padding: 20, display: 'flex', flexDirection: 'row-reverse' }}>\r\n            <ButtonGroupComp\r\n               onClickCancel={onClickCancelModal}\r\n               onClickApply={onClickApply}\r\n            />\r\n         </div>\r\n      </Container>\r\n   );\r\n};\r\n\r\nexport default FormDrawingTypeOrder;\r\n\r\n\r\nconst InputComp = ({ tag, updateFolderName, index }) => {\r\n\r\n   const [value, setValue] = useState(tag.header);\r\n   const [isDoubleClick, setIsDoubleClick] = useState(false);\r\n\r\n   const inputReff = useRef();\r\n\r\n\r\n   useEffect(() => {\r\n      if (isDoubleClick) {\r\n         inputReff.current.focus();\r\n      };\r\n\r\n   }, [isDoubleClick]);\r\n\r\n   return (\r\n      <div\r\n         onDoubleClick={() => setIsDoubleClick(true)}\r\n         onBlur={() => {\r\n            setIsDoubleClick(false);\r\n            updateFolderName(tag, index, value);\r\n         }}\r\n         style={{\r\n            width: '75%',\r\n            overflow: 'hidden',\r\n            textOverflow: 'ellipsis',\r\n            whiteSpace: 'nowrap'\r\n         }}\r\n      >\r\n         {isDoubleClick ? (\r\n            <input \r\n               ref={inputReff}\r\n               value={value} \r\n               onChange={(e) => setValue(e.target.value)} \r\n               style={{ \r\n                  width: '100%',\r\n                  border: 'none'\r\n                }}\r\n            />\r\n         ) : (\r\n               <div>{tag.header}</div>\r\n            )\r\n         }\r\n\r\n      </div>\r\n\r\n   );\r\n\r\n};\r\n\r\nconst addZero = (num) => {\r\n   if (num < 10) return '0' + num;\r\n   return num;\r\n};\r\n\r\nconst Container = styled.div`\r\n   height: ${`${window.innerHeight * 0.8}` + 'px'};\r\n   width: 100%;\r\n   \r\n   display: flex;\r\n   flex-direction: column;\r\n`;\r\n\r\n\r\nconst ButtonFolder = styled.div`\r\n   background: white;\r\n   padding: 4px;\r\n   margin: 4px;\r\n   color: black;\r\n   font-size: 13px;\r\n   border: 1px solid ${colorType.grey1};\r\n   width: 70%;\r\n   display: flex;\r\n   cursor: pointer;\r\n   \r\n   -webkit-box-shadow: 0px 6px 19px 5px rgba(0,0,0,0.04); \r\n   box-shadow: 0px 6px 19px 5px rgba(0,0,0,0.04);\r\n\r\n`;\r\n\r\n\r\nconst PanelStyled = styled.div`\r\n\r\n    width: 100%;\r\n    float: right;\r\n    overflow-x: hidden;\r\n    border-bottom: 1px solid ${colorType.grey4};\r\n\r\n    ::-webkit-scrollbar {\r\n        -webkit-appearance: none;\r\n        background-color: #e3e3e3;\r\n    }\r\n\r\n    ::-webkit-scrollbar:vertical {\r\n        width: 15px;\r\n    }\r\n\r\n    ::-webkit-scrollbar:horizontal {\r\n        height: 15px;\r\n    }\r\n\r\n    ::-webkit-scrollbar-thumb {\r\n        border-radius: 10px;\r\n        border: 2px solid #e3e3e3;\r\n        background-color: #999;\r\n\r\n        &:hover {\r\n            background-color: #666;\r\n        }\r\n    }\r\n`;","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\FormCellColorizedCheck.jsx",["197","198","199"],"import { Button, DatePicker } from 'antd';\r\nimport Axios from 'axios';\r\nimport moment from 'moment';\r\nimport React, { useContext, useEffect, useState } from 'react';\r\nimport { SERVER_URL } from '../../constants';\r\nimport { Context as ProjectContext } from '../../contexts/projectContext';\r\nimport { Context as RowContext } from '../../contexts/rowContext';\r\nimport { convertHistoryData } from '../../utils';\r\n\r\n\r\n\r\n\r\nconst FormCellColorizedCheck = ({ setCellHistoryArr }) => {\r\n\r\n    const {\r\n        state: stateProject\r\n    } = useContext(ProjectContext);\r\n\r\n    const {\r\n        state: stateRow\r\n    } = useContext(RowContext);\r\n\r\n    const projectId = stateProject.allDataOneSheet.projectId;\r\n    const headersArr = stateProject.allDataOneSheet.publicSettings.headers;\r\n\r\n    useEffect(() => {\r\n\r\n        const fetchProjectHistory = async () => {\r\n            try {\r\n                const res = await Axios.get(`${SERVER_URL}/cell/history/${projectId}`);\r\n\r\n                console.log('HISTORY...', res.data);\r\n                console.log(convertHistoryData(res.data));\r\n                setHistoryData(res.data);\r\n\r\n\r\n            } catch (err) {\r\n                console.log(err);\r\n            };\r\n        };\r\n        fetchProjectHistory();\r\n    }, []);\r\n\r\n    const [historyData, setHistoryData] = useState([]);\r\n    const [start, setStart] = useState(null);\r\n    const [end, setEnd] = useState(null);\r\n\r\n\r\n    const onClick = () => {\r\n        let startDate = start.toDate();\r\n        let endDate = end.toDate();\r\n\r\n        if (startDate > endDate) return;\r\n\r\n        let filterCells = convertHistoryData(historyData).filter(cell => {\r\n\r\n            let createdAt = moment(cell.createdAt).toDate();\r\n            return createdAt >= startDate && createdAt <= endDate;\r\n        });\r\n\r\n        const cellArr = filterCells.map(ch => {\r\n            const { row: rowId, headerKey } = ch;\r\n            let headerText = headersArr.find(hd => hd.key === headerKey).text;\r\n            return {\r\n                rowId,\r\n                header: headerText\r\n            }\r\n        });\r\n\r\n        let unique = cellArr.reduce((res, itm) => {\r\n            let result = res.find(item => JSON.stringify(item) == JSON.stringify(itm));\r\n            if (!result) return res.concat(itm);\r\n            return res;\r\n        }, []);\r\n\r\n        setCellHistoryArr(unique);\r\n    };\r\n\r\n    return (\r\n        <div style={{\r\n            width: '30vw',\r\n            height: '20vh',\r\n            padding: 15\r\n        }}>\r\n            <div style={{ display: 'flex', marginBottom: 20, marginTop: 20, width: '100%' }}>\r\n                <DatePicker onChange={e => setStart(e)} style={{ width: '100%' }} />\r\n                <DatePicker onChange={e => setEnd(e)} style={{ width: '100%' }} />\r\n            </div>\r\n            <div style={{ display: 'flex', justifyContent: 'space-between', marginBottom: 20, width: '100%' }}>\r\n                <Button>Last 7 Days</Button>\r\n                <Button>Last 14 Days</Button>\r\n                <Button>This Month</Button>\r\n            </div>\r\n            <Button type='primary' onClick={onClick}>Check</Button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default FormCellColorizedCheck;\r\n",{"ruleId":"200","replacedBy":"201"},{"ruleId":"202","replacedBy":"203"},{"ruleId":"204","severity":1,"message":"205","line":63,"column":8,"nodeType":"206","endLine":63,"endColumn":10,"suggestions":"207"},{"ruleId":"204","severity":1,"message":"208","line":430,"column":8,"nodeType":"206","endLine":430,"endColumn":10,"suggestions":"209"},{"ruleId":"210","severity":1,"message":"211","line":472,"column":29,"nodeType":"212","messageId":"213","endLine":472,"endColumn":47},{"ruleId":"214","severity":1,"message":"215","line":4,"column":1,"nodeType":"216","endLine":23,"endColumn":3},{"ruleId":"210","severity":1,"message":"217","line":612,"column":7,"nodeType":"212","messageId":"213","endLine":612,"endColumn":19},{"ruleId":"210","severity":1,"message":"218","line":651,"column":7,"nodeType":"212","messageId":"213","endLine":651,"endColumn":19},{"ruleId":"210","severity":1,"message":"219","line":692,"column":7,"nodeType":"212","messageId":"213","endLine":692,"endColumn":29},{"ruleId":"210","severity":1,"message":"220","line":6,"column":13,"nodeType":"212","messageId":"213","endLine":6,"endColumn":22},{"ruleId":"210","severity":1,"message":"221","line":6,"column":32,"nodeType":"212","messageId":"213","endLine":6,"endColumn":39},{"ruleId":"210","severity":1,"message":"222","line":6,"column":41,"nodeType":"212","messageId":"213","endLine":6,"endColumn":52},{"ruleId":"210","severity":1,"message":"223","line":6,"column":79,"nodeType":"212","messageId":"213","endLine":6,"endColumn":90},{"ruleId":"210","severity":1,"message":"224","line":6,"column":92,"nodeType":"212","messageId":"213","endLine":6,"endColumn":101},{"ruleId":"210","severity":1,"message":"224","line":16,"column":9,"nodeType":"212","messageId":"213","endLine":16,"endColumn":18},{"ruleId":"210","severity":1,"message":"225","line":16,"column":38,"nodeType":"212","messageId":"213","endLine":16,"endColumn":47},{"ruleId":"210","severity":1,"message":"226","line":34,"column":23,"nodeType":"212","messageId":"213","endLine":34,"endColumn":35},{"ruleId":"204","severity":1,"message":"227","line":51,"column":8,"nodeType":"206","endLine":51,"endColumn":30,"suggestions":"228"},{"ruleId":"210","severity":1,"message":"229","line":356,"column":7,"nodeType":"212","messageId":"213","endLine":356,"endColumn":20},{"ruleId":"210","severity":1,"message":"230","line":391,"column":7,"nodeType":"212","messageId":"213","endLine":391,"endColumn":36},{"ruleId":"231","severity":1,"message":"232","line":109,"column":33,"nodeType":"233","messageId":"234","endLine":109,"endColumn":35},{"ruleId":"231","severity":1,"message":"232","line":135,"column":19,"nodeType":"233","messageId":"234","endLine":135,"endColumn":21},{"ruleId":"210","severity":1,"message":"235","line":161,"column":7,"nodeType":"212","messageId":"213","endLine":161,"endColumn":17},{"ruleId":"210","severity":1,"message":"236","line":231,"column":7,"nodeType":"212","messageId":"213","endLine":231,"endColumn":17},{"ruleId":"210","severity":1,"message":"237","line":316,"column":7,"nodeType":"212","messageId":"213","endLine":316,"endColumn":18},{"ruleId":"231","severity":1,"message":"232","line":608,"column":26,"nodeType":"233","messageId":"234","endLine":608,"endColumn":28},{"ruleId":"231","severity":1,"message":"232","line":610,"column":26,"nodeType":"233","messageId":"234","endLine":610,"endColumn":28},{"ruleId":"238","severity":1,"message":"239","line":649,"column":33,"nodeType":"240","messageId":"241","endLine":649,"endColumn":88},{"ruleId":"231","severity":1,"message":"232","line":649,"column":62,"nodeType":"233","messageId":"234","endLine":649,"endColumn":64},{"ruleId":"238","severity":1,"message":"242","line":660,"column":25,"nodeType":"240","messageId":"241","endLine":660,"endColumn":80},{"ruleId":"231","severity":1,"message":"232","line":660,"column":54,"nodeType":"233","messageId":"234","endLine":660,"endColumn":56},{"ruleId":"238","severity":1,"message":"243","line":671,"column":17,"nodeType":"240","messageId":"241","endLine":671,"endColumn":66},{"ruleId":"231","severity":1,"message":"232","line":671,"column":46,"nodeType":"233","messageId":"234","endLine":671,"endColumn":48},{"ruleId":"210","severity":1,"message":"244","line":696,"column":7,"nodeType":"212","messageId":"213","endLine":696,"endColumn":21},{"ruleId":"210","severity":1,"message":"245","line":5,"column":9,"nodeType":"212","messageId":"213","endLine":5,"endColumn":14},{"ruleId":"210","severity":1,"message":"246","line":5,"column":16,"nodeType":"212","messageId":"213","endLine":5,"endColumn":22},{"ruleId":"247","severity":1,"message":"248","line":46,"column":37,"nodeType":"240","messageId":"249","endLine":46,"endColumn":39},{"ruleId":"247","severity":1,"message":"248","line":50,"column":50,"nodeType":"240","messageId":"249","endLine":50,"endColumn":52},{"ruleId":"204","severity":1,"message":"250","line":81,"column":8,"nodeType":"206","endLine":81,"endColumn":10,"suggestions":"251"},{"ruleId":"210","severity":1,"message":"252","line":18,"column":16,"nodeType":"212","messageId":"213","endLine":18,"endColumn":24},{"ruleId":"204","severity":1,"message":"253","line":43,"column":8,"nodeType":"206","endLine":43,"endColumn":10,"suggestions":"254"},{"ruleId":"210","severity":1,"message":"255","line":29,"column":12,"nodeType":"212","messageId":"213","endLine":29,"endColumn":16},{"ruleId":"210","severity":1,"message":"256","line":29,"column":18,"nodeType":"212","messageId":"213","endLine":29,"endColumn":25},{"ruleId":"210","severity":1,"message":"257","line":34,"column":13,"nodeType":"212","messageId":"213","endLine":34,"endColumn":20},{"ruleId":"204","severity":1,"message":"258","line":125,"column":8,"nodeType":"206","endLine":125,"endColumn":10,"suggestions":"259"},{"ruleId":"210","severity":1,"message":"260","line":128,"column":12,"nodeType":"212","messageId":"213","endLine":128,"endColumn":23},{"ruleId":"210","severity":1,"message":"261","line":128,"column":25,"nodeType":"212","messageId":"213","endLine":128,"endColumn":39},{"ruleId":"210","severity":1,"message":"262","line":130,"column":12,"nodeType":"212","messageId":"213","endLine":130,"endColumn":16},{"ruleId":"210","severity":1,"message":"263","line":130,"column":18,"nodeType":"212","messageId":"213","endLine":130,"endColumn":25},{"ruleId":"210","severity":1,"message":"264","line":241,"column":7,"nodeType":"212","messageId":"213","endLine":241,"endColumn":21},{"ruleId":"210","severity":1,"message":"265","line":247,"column":7,"nodeType":"212","messageId":"213","endLine":247,"endColumn":21},{"ruleId":"266","severity":1,"message":"267","line":21,"column":17,"nodeType":"268","messageId":"234","endLine":21,"endColumn":23},{"ruleId":"210","severity":1,"message":"269","line":161,"column":7,"nodeType":"212","messageId":"213","endLine":161,"endColumn":14},{"ruleId":"270","severity":1,"message":"271","line":167,"column":44,"nodeType":"233","messageId":"272","endLine":167,"endColumn":45},{"ruleId":"210","severity":1,"message":"252","line":20,"column":16,"nodeType":"212","messageId":"213","endLine":20,"endColumn":24},{"ruleId":"204","severity":1,"message":"273","line":42,"column":8,"nodeType":"206","endLine":42,"endColumn":10,"suggestions":"274"},{"ruleId":"231","severity":1,"message":"232","line":71,"column":64,"nodeType":"233","messageId":"234","endLine":71,"endColumn":66},"no-native-reassign",["275"],"no-negated-in-lhs",["276"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'EventKeyDown'. Either include it or remove the dependency array.","ArrayExpression",["277"],"React Hook useEffect has missing dependencies: 'email', 'fetchDataOneSheet', 'getSheetRows', 'projectId', 'projectName', 'renderColumns', 'role', 'setUserData', and 'username'. Either include them or remove the dependency array.",["278"],"no-unused-vars","'setExpandColumnKey' is assigned a value but never used.","Identifier","unusedVar","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","'columnSet_01' is assigned a value but never used.","'columnSet_02' is assigned a value but never used.","'newRevisionDrawingData' is assigned a value but never used.","'className' is assigned a value but never used.","'columns' is assigned a value but never used.","'columnIndex' is assigned a value but never used.","'headerIndex' is assigned a value but never used.","'container' is assigned a value but never used.","'colorized' is assigned a value but never used.","'setInitValue' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'columnIndex', 'inputRender', and 'rowIndex'. Either include them or remove the dependency array.",["279"],"'colorizedRows' is assigned a value but never used.","'checkIfCellsRangeContainsCell' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'returnDate' is assigned a value but never used.","'getSubData' is assigned a value but never used.","'getSubData2' is assigned a value but never used.","no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'preSubRowLv2'.","ArrowFunctionExpression","unsafeRefs","Function declared in a loop contains unsafe references to variable(s) 'preSubRowLv1'.","Function declared in a loop contains unsafe references to variable(s) 'preRow'.","'saveRandomRows' is assigned a value but never used.","'Group' is assigned a value but never used.","'Button' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","expectedInside","React Hook useEffect has missing dependencies: 'rowData', 'stateProject.allDataOneSheet._id', 'stateProject.allDataOneSheet.publicSettings', and 'stateRow.rowsVersionsToSave'. Either include them or remove the dependency array.",["280"],"'stateRow' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'headerKey', 'projectId', and 'rowData.id'. Either include them or remove the dependency array.",["281"],"'tags' is assigned a value but never used.","'setTags' is assigned a value but never used.","'rowData' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'headers', 'projectId', and 'stateRow.rowsAll'. Either include them or remove the dependency array.",["282"],"'historyData' is assigned a value but never used.","'setHistoryData' is assigned a value but never used.","'data' is assigned a value but never used.","'setData' is assigned a value but never used.","'getHeadersText' is assigned a value but never used.","'getDrawingName' is assigned a value but never used.","no-dupe-keys","Duplicate key 'border'.","ObjectExpression","'addZero' is assigned a value but never used.","no-useless-concat","Unexpected string concatenation of literals.","unexpectedConcat","React Hook useEffect has a missing dependency: 'projectId'. Either include it or remove the dependency array.",["283"],"no-global-assign","no-unsafe-negation",{"desc":"284","fix":"285"},{"desc":"286","fix":"287"},{"desc":"288","fix":"289"},{"desc":"290","fix":"291"},{"desc":"292","fix":"293"},{"desc":"294","fix":"295"},{"desc":"296","fix":"297"},"Update the dependencies array to be: [EventKeyDown]",{"range":"298","text":"299"},"Update the dependencies array to be: [email, fetchDataOneSheet, getSheetRows, projectId, projectName, renderColumns, role, setUserData, username]",{"range":"300","text":"301"},"Update the dependencies array to be: [columnIndex, inputRender, rowIndex, stateCell.cellActive]",{"range":"302","text":"303"},"Update the dependencies array to be: [rowData, stateProject.allDataOneSheet._id, stateProject.allDataOneSheet.publicSettings, stateRow.rowsVersionsToSave]",{"range":"304","text":"305"},"Update the dependencies array to be: [headerKey, projectId, rowData.id]",{"range":"306","text":"307"},"Update the dependencies array to be: [headers, projectId, stateRow.rowsAll]",{"range":"308","text":"309"},"Update the dependencies array to be: [projectId]",{"range":"310","text":"311"},[2243,2245],"[EventKeyDown]",[17310,17312],"[email, fetchDataOneSheet, getSheetRows, projectId, projectName, renderColumns, role, setUserData, username]",[1589,1611],"[columnIndex, inputRender, rowIndex, stateCell.cellActive]",[2802,2804],"[rowData, stateProject.allDataOneSheet._id, stateProject.allDataOneSheet.publicSettings, stateRow.rowsVersionsToSave]",[1293,1295],"[headerKey, projectId, rowData.id]",[4810,4812],"[headers, projectId, stateRow.rowsAll]",[1254,1256],"[projectId]"]
[{"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\index.js":"1","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\App.js":"2","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\reportWebVitals.js":"3","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\DashboardLayout\\PageDashboard.js":"4","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\PageSpreadsheet.js":"5","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\DashboardLayout\\assets\\constantDashboard.js":"6","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\DashboardLayout\\componentsDashboard\\CardPanelProject.js":"7","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\DashboardLayout\\componentsDashboard\\ChartBarStack.js":"8","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\DashboardLayout\\componentsDashboard\\ChartBarDrawingLate.js":"9","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\DashboardLayout\\componentsDashboard\\ChartPieDrawing.js":"10","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\DashboardLayout\\componentsDashboard\\ChartBarDrawing.js":"11","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\DashboardLayout\\componentsDashboard\\ChartProgress.js":"12","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\DashboardLayout\\utils\\functionDashboard.js":"13","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\DashboardLayout\\componentsDashboard\\FormPivot.js":"14","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\DashboardLayout\\componentsDashboard\\TableDrawingList.js":"15","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\contexts\\cellContext.js":"16","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\contexts\\projectContext.js":"17","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\contexts\\rowContext.js":"18","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\generalComponents\\CellHeader.js":"19","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\generalComponents\\InputSearch.js":"20","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\generalComponents\\ViewTemplateSelect.js":"21","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\generalComponents\\IconTable.js":"22","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\generalComponents\\FormSort.js":"23","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\pageSpreadsheet\\ButtonAdminCreateAndUpdateRows.js":"24","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\pageSpreadsheet\\ButtonAdminCreateAndUpdateRowsHistory.js":"25","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\pageSpreadsheet\\ButtonAdminDeleteRowsHistory.js":"26","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\pageSpreadsheet\\ButtonAdminUploadData.js":"27","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\pageSpreadsheet\\Cell.js":"28","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\pageSpreadsheet\\ButtonAdminUploadDataPDD.js":"29","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\pageSpreadsheet\\FormDrawingTypeOrder.js":"30","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\pageSpreadsheet\\ExcelExport.js":"31","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\pageSpreadsheet\\PanelSetting.js":"32","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\pageSpreadsheet\\PanelFunction.js":"33","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\pageSpreadsheet\\CellIndex.js":"34","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\constants\\index.js":"35","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\utils\\index.js":"36","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\DashboardLayout\\componentsDashboard\\CardPanel.js":"37","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\DashboardLayout\\componentsDashboard\\ChartBarRecordPanel.js":"38","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\DashboardLayout\\componentsDashboard\\PanelSettingDashboard.js":"39","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\contexts\\createDataContext.js":"40","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\generalComponents\\ButtonGroupComp.js":"41","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\generalComponents\\PanelCalendar.js":"42","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\generalComponents\\ButtonColumnTag.js":"43","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\pageSpreadsheet\\TableDrawingDetail.js":"44","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\pageSpreadsheet\\FormDateAutomation.js":"45","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\pageSpreadsheet\\TableCellHistory.js":"46","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\pageSpreadsheet\\ColorizedForm.js":"47","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\pageSpreadsheet\\FormCellColorizedCheck.js":"48","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\pageSpreadsheet\\TableActivityHistory.js":"49","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\generalComponents\\ReorderColumnForm.js":"50","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\generalComponents\\PanelConfirmResetMode.js":"51","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\generalComponents\\PanelConfirm.js":"52","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\generalComponents\\PanelPickNumber.js":"53","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\generalComponents\\FormFilter.js":"54","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\generalComponents\\FormGroup.js":"55","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\DashboardLayout\\componentsDashboard\\ChartBarRecord.js":"56","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\generalComponents\\ButtonStyle.js":"57","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\generalComponents\\PanelCalendarDuration.js":"58","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\generalComponents\\FormFilterActivityHistory.js":"59","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\pageSpreadsheet\\ButtonAdminUpdateProjectSettings.js":"60","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\contexts\\sheetContextProvider.js":"61","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\pageSpreadsheet\\CellRFA.js":"62","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\pageSpreadsheet\\PanelAddNewRFA.js":"63","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\pageSpreadsheet\\TableDrawingRFA.js":"64","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\generalComponents\\LoadingIcon.js":"65","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\generalComponents\\OverallComponentDMS.js":"66","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\PageRFA.js":"67","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\PageRFAM.js":"68","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\pageSpreadsheet\\CellForm.js":"69","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\generalComponents\\PanelAddNewMultiForm.js":"70","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\generalComponents\\TableDrawingRfaForMultiForm.js":"71","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\PageCVI.js":"72","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\generalComponents\\IconSidePanel.js":"73","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\PageRFI.js":"74","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\PageDT.js":"75","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\generalComponents\\ExportPdf.js":"76","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\PageMM.js":"77","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\pageSpreadsheet\\FormDrawingTypeOrderDataEntry.js":"78","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\PageDataEntrySheet.js":"79"},{"size":507,"mtime":1622516776194,"results":"80","hashOfConfig":"81"},{"size":15975,"mtime":1625500113127,"results":"82","hashOfConfig":"81"},{"size":362,"mtime":1622516776196,"results":"83","hashOfConfig":"81"},{"size":16182,"mtime":1622516775835,"results":"84","hashOfConfig":"81"},{"size":338,"mtime":1622516775958,"results":"85","hashOfConfig":"81"},{"size":3211,"mtime":1623115471814,"results":"86","hashOfConfig":"81"},{"size":1068,"mtime":1622516775857,"results":"87","hashOfConfig":"81"},{"size":5971,"mtime":1622516775879,"results":"88","hashOfConfig":"81"},{"size":3396,"mtime":1622516775865,"results":"89","hashOfConfig":"81"},{"size":2815,"mtime":1622516775883,"results":"90","hashOfConfig":"81"},{"size":8640,"mtime":1622516775861,"results":"91","hashOfConfig":"81"},{"size":4845,"mtime":1622516775887,"results":"92","hashOfConfig":"81"},{"size":28120,"mtime":1622516775903,"results":"93","hashOfConfig":"81"},{"size":5094,"mtime":1622516775892,"results":"94","hashOfConfig":"81"},{"size":15544,"mtime":1622516775899,"results":"95","hashOfConfig":"81"},{"size":1858,"mtime":1622516775912,"results":"96","hashOfConfig":"81"},{"size":916,"mtime":1622516775919,"results":"97","hashOfConfig":"81"},{"size":588,"mtime":1622516775924,"results":"98","hashOfConfig":"81"},{"size":451,"mtime":1622516775976,"results":"99","hashOfConfig":"81"},{"size":3223,"mtime":1625496047400,"results":"100","hashOfConfig":"81"},{"size":4192,"mtime":1625046496872,"results":"101","hashOfConfig":"81"},{"size":5959,"mtime":1623375161546,"results":"102","hashOfConfig":"81"},{"size":3559,"mtime":1622516776021,"results":"103","hashOfConfig":"81"},{"size":1936,"mtime":1622516776097,"results":"104","hashOfConfig":"81"},{"size":1971,"mtime":1616043237000,"results":"105","hashOfConfig":"81"},{"size":1956,"mtime":1622516776107,"results":"106","hashOfConfig":"81"},{"size":3160,"mtime":1625371909907,"results":"107","hashOfConfig":"81"},{"size":24009,"mtime":1625072155785,"results":"108","hashOfConfig":"81"},{"size":2216,"mtime":1616043237000,"results":"109","hashOfConfig":"81"},{"size":33310,"mtime":1624939618084,"results":"110","hashOfConfig":"81"},{"size":2944,"mtime":1625041687817,"results":"111","hashOfConfig":"81"},{"size":112854,"mtime":1625499619125,"results":"112","hashOfConfig":"81"},{"size":7269,"mtime":1625072155787,"results":"113","hashOfConfig":"81"},{"size":2958,"mtime":1625072155920,"results":"114","hashOfConfig":"81"},{"size":4243,"mtime":1625480196712,"results":"115","hashOfConfig":"81"},{"size":15393,"mtime":1625123882484,"results":"116","hashOfConfig":"81"},{"size":1185,"mtime":1622516775852,"results":"117","hashOfConfig":"81"},{"size":3117,"mtime":1622516775875,"results":"118","hashOfConfig":"81"},{"size":3520,"mtime":1622516775896,"results":"119","hashOfConfig":"81"},{"size":592,"mtime":1622516775916,"results":"120","hashOfConfig":"81"},{"size":1274,"mtime":1625056822217,"results":"121","hashOfConfig":"81"},{"size":361,"mtime":1622516776019,"results":"122","hashOfConfig":"81"},{"size":2638,"mtime":1622516775963,"results":"123","hashOfConfig":"81"},{"size":10941,"mtime":1623919220620,"results":"124","hashOfConfig":"81"},{"size":5965,"mtime":1622516776156,"results":"125","hashOfConfig":"81"},{"size":2263,"mtime":1622516776179,"results":"126","hashOfConfig":"81"},{"size":3529,"mtime":1625041133760,"results":"127","hashOfConfig":"81"},{"size":3572,"mtime":1622516776197,"results":"128","hashOfConfig":"81"},{"size":11230,"mtime":1622516776175,"results":"129","hashOfConfig":"81"},{"size":3909,"mtime":1622516776040,"results":"130","hashOfConfig":"81"},{"size":2472,"mtime":1622516776032,"results":"131","hashOfConfig":"81"},{"size":1843,"mtime":1624424089757,"results":"132","hashOfConfig":"81"},{"size":904,"mtime":1622516776036,"results":"133","hashOfConfig":"81"},{"size":9261,"mtime":1625072155785,"results":"134","hashOfConfig":"81"},{"size":3901,"mtime":1622516775991,"results":"135","hashOfConfig":"81"},{"size":3191,"mtime":1622516775870,"results":"136","hashOfConfig":"81"},{"size":1804,"mtime":1625469535808,"results":"137","hashOfConfig":"81"},{"size":753,"mtime":1622516776025,"results":"138","hashOfConfig":"81"},{"size":5267,"mtime":1622516775986,"results":"139","hashOfConfig":"81"},{"size":2324,"mtime":1616690193667,"results":"140","hashOfConfig":"81"},{"size":491,"mtime":1622516775928,"results":"141","hashOfConfig":"81"},{"size":37026,"mtime":1625364932179,"results":"142","hashOfConfig":"81"},{"size":69451,"mtime":1625385276017,"results":"143","hashOfConfig":"81"},{"size":7407,"mtime":1625304614499,"results":"144","hashOfConfig":"81"},{"size":615,"mtime":1622516776009,"results":"145","hashOfConfig":"81"},{"size":97031,"mtime":1625500071163,"results":"146","hashOfConfig":"81"},{"size":311,"mtime":1622516775946,"results":"147","hashOfConfig":"81"},{"size":314,"mtime":1622516775950,"results":"148","hashOfConfig":"81"},{"size":42146,"mtime":1625494643884,"results":"149","hashOfConfig":"81"},{"size":70108,"mtime":1625471472405,"results":"150","hashOfConfig":"81"},{"size":4821,"mtime":1625304613954,"results":"151","hashOfConfig":"81"},{"size":328,"mtime":1622598078778,"results":"152","hashOfConfig":"81"},{"size":1682,"mtime":1624442413307,"results":"153","hashOfConfig":"81"},{"size":328,"mtime":1623821259329,"results":"154","hashOfConfig":"81"},{"size":345,"mtime":1623821247880,"results":"155","hashOfConfig":"81"},{"size":20463,"mtime":1625478093603,"results":"156","hashOfConfig":"81"},{"size":345,"mtime":1624497858909,"results":"157","hashOfConfig":"81"},{"size":21209,"mtime":1624962810774,"results":"158","hashOfConfig":"81"},{"size":363,"mtime":1625072155795,"results":"159","hashOfConfig":"81"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},"utwymk",{"filePath":"163","messages":"164","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"169","usedDeprecatedRules":"162"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"184","usedDeprecatedRules":"162"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"189","usedDeprecatedRules":"162"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"192","usedDeprecatedRules":"162"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"203","messages":"204","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"205","messages":"206","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"207","messages":"208","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"209","messages":"210","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"213","messages":"214","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"215"},{"filePath":"216","messages":"217","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"218","messages":"219","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"220","messages":"221","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"222","usedDeprecatedRules":"162"},{"filePath":"223","messages":"224","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"215"},{"filePath":"225","messages":"226","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"227","usedDeprecatedRules":"162"},{"filePath":"228","messages":"229","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"230","messages":"231","errorCount":0,"warningCount":44,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"232","messages":"233","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"234","messages":"235","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"236","usedDeprecatedRules":"162"},{"filePath":"237","messages":"238","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"239","messages":"240","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"241","usedDeprecatedRules":"162"},{"filePath":"242","messages":"243","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"244","messages":"245","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"246","messages":"247","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"248","messages":"249","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"250","usedDeprecatedRules":"162"},{"filePath":"251","messages":"252","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"253","messages":"254","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"255","usedDeprecatedRules":"162"},{"filePath":"256","messages":"257","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"258","usedDeprecatedRules":"162"},{"filePath":"259","messages":"260","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"261","usedDeprecatedRules":"162"},{"filePath":"262","messages":"263","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"264","messages":"265","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"266","usedDeprecatedRules":"162"},{"filePath":"267","messages":"268","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"269","messages":"270","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"271","usedDeprecatedRules":"162"},{"filePath":"272","messages":"273","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"274","usedDeprecatedRules":"162"},{"filePath":"275","messages":"276","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"277","messages":"278","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"279","messages":"280","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"281","usedDeprecatedRules":"162"},{"filePath":"282","messages":"283","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"284","messages":"285","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"286","usedDeprecatedRules":"162"},{"filePath":"287","messages":"288","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"289","messages":"290","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"291","messages":"292","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"293","usedDeprecatedRules":"162"},{"filePath":"294","messages":"295","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"296","messages":"297","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"298","messages":"299","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"300","usedDeprecatedRules":"215"},{"filePath":"301","messages":"302","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"303","messages":"304","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"305","usedDeprecatedRules":"162"},{"filePath":"306","messages":"307","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"308","usedDeprecatedRules":"162"},{"filePath":"309","messages":"310","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"311","usedDeprecatedRules":"162"},{"filePath":"312","messages":"313","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"314","messages":"315","errorCount":0,"warningCount":20,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"316","messages":"317","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"318","messages":"319","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"320","messages":"321","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"322","usedDeprecatedRules":"162"},{"filePath":"323","messages":"324","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":1,"source":"325","usedDeprecatedRules":"162"},{"filePath":"326","messages":"327","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"328","usedDeprecatedRules":"162"},{"filePath":"329","messages":"330","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"331","messages":"332","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"333","messages":"334","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"335","messages":"336","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"337","messages":"338","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"339","usedDeprecatedRules":"162"},{"filePath":"340","messages":"341","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"342","messages":"343","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"344","usedDeprecatedRules":"162"},{"filePath":"345","messages":"346","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\index.js",[],["347","348"],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\App.js",["349","350","351","352","353","354","355"],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\reportWebVitals.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\DashboardLayout\\PageDashboard.js",["356"],"import { Badge, Col, Modal, Row, Skeleton, Tabs } from 'antd';\nimport Axios from 'axios';\nimport React, { useEffect, useState } from 'react';\nimport styled from 'styled-components';\nimport { pieChartColors2, SERVER_URL } from './assets/constantDashboard';\nimport CardPanelProject from './componentsDashboard/CardPanelProject';\nimport ChartBarDrawing from './componentsDashboard/ChartBarDrawing';\nimport ChartBarDrawingLate from './componentsDashboard/ChartBarDrawingLate';\nimport ChartBarStack from './componentsDashboard/ChartBarStack';\nimport ChartPieDrawing from './componentsDashboard/ChartPieDrawing';\nimport ChartProgress from './componentsDashboard/ChartProgress';\nimport FormPivot from './componentsDashboard/FormPivot';\nimport TableDrawingList from './componentsDashboard/TableDrawingList';\nimport { convertDataFromDB, createDummyRecords, getRandomIntInclusive, getUserRoleTradeCompany, inputStackData } from './utils/functionDashboard';\n\n\nconst { TabPane } = Tabs;\n\n\n\nconst createDummyProductivity = () => {\n   const arr = Array.from(Array(20).keys());\n   let obj = {};\n   arr.forEach((item, i) => {\n      obj[i] = {\n         'Consultant review and reply': getRandomIntInclusive(3, 7),\n         'Create update drawing': getRandomIntInclusive(3, 5),\n         'Create update model': getRandomIntInclusive(2, 5),\n      };\n   });\n   return obj;\n};\n\nconst PageDashboard = ({ projectsArray, token, role, company }) => {\n\n   const roleTradeCompany = getUserRoleTradeCompany(role, company);\n\n\n   const [dataDB, setDataDB] = useState(null);\n   const [loading, setLoading] = useState(false);\n\n\n   const dummyProductivity = createDummyProductivity();\n\n\n   useEffect(() => {\n      const loadData = async () => {\n         setLoading(true);\n         try {\n\n            const resRows = await Axios.post(`${SERVER_URL}/row/history/find-row-histories-many-project`, { token, sheetIds: projectsArray.map(x => x.id) });\n            const resDB = await Axios.post(`${SERVER_URL}/sheet/find-many`, { token, sheetIds: projectsArray.map(x => x.id) });\n\n\n            setDataDB(convertDataFromDB(resDB.data, resRows.data, projectsArray));\n\n\n            setLoading(false);\n         } catch (err) {\n            console.log(err);\n            setLoading(false);\n         };\n      };\n      loadData();\n   }, []);\n\n\n   const [drawingTableData, setDrawingTableData] = useState(null);\n   const openDrawingTable = ({\n      projectId,\n      panel,\n      type,\n      category,\n      categorySub1,\n      isShowSelectedOnly,\n      headersGroup,\n      progressRows\n   }) => {\n\n\n      const project = dataDB.projectSplit.find(x => x.projectId === projectId);\n      const { dataProject } = project;\n\n      const { dataInfo } = dataProject.find(x => x.panel === panel);\n      const { headers } = dataInfo;\n\n      let dataTable;\n      if (\n         type === 'Bar Drawing Rev' ||\n         type === 'Bar Drawing Modeller' ||\n         type === 'Bar Drawing Coordinator' ||\n         type === 'Bar Drawing Resubmit' ||\n         type === 'Bar Drawing Trade'\n      ) {\n         if (categorySub1) {\n            dataTable = dataInfo[type][category][categorySub1];\n         } else {\n            const allDrawingsInCategory = dataInfo[type][category];\n            let arr = [];\n            Object.keys(allDrawingsInCategory).forEach(stt => {\n               arr = [...arr, ...allDrawingsInCategory[stt]];\n            });\n            dataTable = arr;\n         };\n      } else if (type === 'Pie Drawing Status') {\n         dataTable = dataInfo[type][category];\n      } else if (type === 'Pivot Table All') {\n         dataTable = dataInfo.rows;\n      } else if (type === 'Pivot Table Group') {\n         dataTable = dataInfo.rows;\n      } else if (type === 'Progress Late') {\n         dataTable = progressRows;\n      };\n\n\n      setDrawingTableData({\n         dataTable,\n         headers,\n         headersGroup: headersGroup || [],\n         isShowSelectedOnly,\n         tableInfo: {\n            panel,\n            type,\n            category,\n            categorySub1\n         }\n      });\n   };\n\n   const arrBreak = Array.from(Array(17).keys());\n\n\n   return (\n      // <div style={{ display: 'flex' }}>\n      //    <div style={{ width: 180, background: 'red', height: 800 }}></div>\n      <div style={{ marginTop: 10 }}>\n         <Row justify='space-around' style={{ margin: '10px 0 5px 0' }}>\n            {dataDB && dataDB.projectSplit.length > 1 && (\n               <div style={{\n                  padding: 15,\n                  margin: 12,\n                  boxShadow: '5px 15px 24px 5px #d2dae2',\n                  border: 'none',\n                  marginBottom: 15,\n                  borderRadius: 20, overflow: 'hidden',\n               }}>\n                  <Tabs onChange={() => { }} type='card'>\n                     {dataDB.projectComparison.map((item, i) => {\n                        return (\n                           <TabPane tab={item.name} key={item.name}>\n                              <ChartBarDrawingLate data={item.data} title='No Of Drawing Late Construction' />\n                              <ChartBarDrawingLate data={item.data} title='No Of Drawing Late Approval' />\n                              <ChartBarStack data={item.data} title='Drawing Status' />\n                              <ChartBarStack data={item.data} title='Productivity - (days per drawing)' dummyProductivity={dummyProductivity} />\n                           </TabPane>\n                        );\n                     })}\n                  </Tabs>\n               </div>\n            )}\n         </Row>\n\n         {!loading && dataDB ? (\n            <div style={{ padding: '0 12px' }}>\n               {dataDB.projectSplit.map(project => {\n                  const { dataProject, projectName, projectId } = project;\n\n                  let isProjectEmpty = false;\n                  const overallFound = dataProject.find(x => x.panel === 'OVERALL');\n                  const { dataInfo } = overallFound;\n                  const rows = dataInfo && dataInfo.rows;\n                  if (rows && rows.length === 0) isProjectEmpty = true;\n\n                  return !isProjectEmpty && (\n\n                     <CardPanelProject\n                        title={projectName.toUpperCase()}\n                        key={projectName}\n                        projectsCount={dataDB.projectSplit.length}\n                     >\n                        <TabsStyled type='card'>\n                           {dataProject.map(item => {\n                              let tradeForView;\n                              if (item.panel !== 'OVERALL' && item.panel !== 'SUBCON') {\n                                 tradeForView = item.panel.slice(5, item.panel.length);\n                              };\n                              let canViewPanelModellerAndCoordinator = false;\n\n                              if (\n                                 (roleTradeCompany.trade && roleTradeCompany.trade === tradeForView) ||\n                                 (role && tradeForView && role.includes('Manager') && role.toLowerCase().includes(tradeForView.toLowerCase())) ||\n                                 role === 'Project Manager'\n                              ) {\n                                 canViewPanelModellerAndCoordinator = true;\n                              };\n\n                              return (\n                                 <TabPane tab={item.panel} key={item.panel}>\n\n                                    <ChartProgress\n                                       title='Summary of submissions'\n                                       data={item}\n                                       openDrawingTable={openDrawingTable}\n                                       projectId={projectId}\n                                    />\n\n                                    <ChartBarDrawing\n                                       title='No of drawing to resubmit'\n                                       type='resubmit'\n                                       data={item}\n                                       openDrawingTable={openDrawingTable}\n                                       projectId={projectId}\n                                    />\n\n                                    <ChartPanel title='Sorted table by category' panel={item.panel}>\n                                       <FormPivot\n                                          data={item}\n                                          openDrawingTable={openDrawingTable}\n                                          projectName={projectName}\n                                          projectId={projectId}\n                                          dataRecordedDummy={createDummyRecords()}\n                                       />\n                                    </ChartPanel>\n\n\n                                    {(window.innerWidth >= 1600 && item.panel === 'OVERALL') && arrBreak.map((n, i) => <br key={i} />)}\n\n                                    <ChartPieDrawing\n                                       title='Drawing Status'\n                                       data={item}\n                                       openDrawingTable={openDrawingTable}\n                                       projectId={projectId}\n                                    />\n\n\n                                    <ChartPanel title='Status Legend' panel={item.panel}>\n                                       <div style={{ paddingTop: 25 }}>\n                                          {inputStackData.map(item => (\n                                             <div key={item} style={{ display: 'flex' }}>\n                                                <StyledBadge\n                                                   size='small'\n                                                   color={pieChartColors2[item]}\n                                                   text={item}\n                                                />\n                                             </div>\n                                          ))}\n                                       </div>\n                                    </ChartPanel>\n\n\n                                    {item.panel === 'OVERALL' ? (\n                                       <ChartBarDrawing\n                                          title='Status of drawing per trade'\n                                          type='trade'\n                                          data={item}\n                                          openDrawingTable={openDrawingTable}\n                                          projectId={projectId}\n                                       />\n                                    ) : (\n                                       <>\n                                          {(window.innerWidth >= 1600 && item.panel !== 'OVERALL') && arrBreak.map((n, i) => <br key={i} />)}\n\n                                          <ChartBarDrawing\n                                             title='Status of drawing per revision'\n                                             type='rev'\n                                             data={item}\n                                             openDrawingTable={openDrawingTable}\n                                             projectId={projectId}\n                                          />\n\n                                          {canViewPanelModellerAndCoordinator && (\n                                             <>\n                                                <ChartBarDrawing\n                                                   title='Drawing by coordinator'\n                                                   type='coordinator'\n                                                   data={item}\n                                                   openDrawingTable={openDrawingTable}\n                                                   projectId={projectId}\n                                                />\n                                                <ChartBarDrawing\n                                                   title='Drawing by modeller'\n                                                   type='modeller'\n                                                   data={item}\n                                                   openDrawingTable={openDrawingTable}\n                                                   projectId={projectId}\n                                                />\n                                             </>\n                                          )}\n\n                                       </>\n                                    )}\n                                 </TabPane>\n                              )\n                           })}\n                        </TabsStyled>\n                     </CardPanelProject>\n\n                  );\n               })}\n            </div>\n\n         ) : <SkeletonCard />}\n\n\n         {drawingTableData && (\n            <Modal\n               title={'Drawing List'}\n               visible={drawingTableData ? true : false}\n               footer={false}\n               onCancel={() => setDrawingTableData(null)}\n               width={0.9 * window.innerWidth}\n               // height={0.7 * window.innerHeight}\n               bodyStyle={{ paddingTop: 0 }}\n               style={{ paddingTop: 0, top: 30 }}\n            >\n               <TableDrawingList\n                  data={drawingTableData}\n               />\n            </Modal>\n         )}\n      </div>\n\n      // </div>\n   );\n};\n\nexport default PageDashboard;\n\n\nconst TabsStyled = styled(Tabs)`\n   .ant-tabs-top-bar {\n      margin-bottom: 5px;\n   }\n`;\n\n\nexport const ChartPanel = ({ title, children, panel }) => {\n\n   const xxl = panel !== 'OVERALL' ? (\n      title === 'Summary of submissions'\n         ? 4\n         : title === 'No of drawing to resubmit'\n            ? 6\n            : title === 'Drawing Status'\n               ? 5\n               : title === 'Status Legend'\n                  ? 5\n                  : title === 'Status of drawing per revision'\n                     ? 6\n                     : title === 'Drawing by coordinator'\n                        ? 7\n                        : title === 'Drawing by modeller'\n                           ? 11\n                           : 4\n   ) : (\n      title === 'Summary of submissions'\n         ? 7\n         : title === 'No of drawing to resubmit'\n            ? 9\n            : title === 'Drawing Status'\n               ? 7\n               : title === 'Status of drawing per trade'\n                  ? 7\n                  : title === 'Status Legend'\n                     ? 7\n                     : 6\n   );\n\n\n   const xl = panel !== 'OVERALL' ? (\n      title === 'Summary of submissions'\n         ? 8\n         : title === 'No of drawing to resubmit'\n            ? 10\n            : title === 'Drawing Status'\n               ? 8\n               : title === 'Status Legend'\n                  ? 7\n                  : title === 'Status of drawing per revision'\n                     ? 9\n                     : title === 'Drawing by coordinator'\n                        ? 9\n                        : title === 'Drawing by modeller'\n                           ? 15\n                           : 6\n   ) : (\n      title === 'Summary of submissions'\n         ? 8\n         : title === 'No of drawing to resubmit'\n            ? 10\n            : title === 'Drawing Status'\n               ? 8\n               : title === 'Status of drawing per trade'\n                  ? 9\n                  : title === 'Status Legend'\n                     ? 7\n                     : 6\n   );\n\n\n\n\n\n   return (\n      <Col style={{ marginBottom: 10, padding: 5 }} xs={24} md={12} xl={xl} xxl={xxl}>\n         <div style={{ fontSize: '18px', textAlign: 'center', fontWeight: 'bold' }}>{title}</div>\n         {children}\n      </Col>\n   );\n};\n\nconst SkeletonCard = () => {\n   return (\n      <div style={{ padding: '0 12px' }}>\n         <CardPanelProject title='Project loading ...'>\n            <div style={{ padding: '0 3px' }}>\n               <Skeleton paragraph={{ rows: 14 }} active />\n            </div>\n         </CardPanelProject>\n      </div>\n   );\n};\nconst StyledBadge = styled(Badge)`\n   .ant-badge-status-dot {\n      width: 15px;\n      height: 15px;\n      border-radius: 0;\n   }\n`;\n\n\n\n\n\n\n\n\n","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\PageSpreadsheet.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\DashboardLayout\\assets\\constantDashboard.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\DashboardLayout\\componentsDashboard\\CardPanelProject.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\DashboardLayout\\componentsDashboard\\ChartBarStack.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\DashboardLayout\\componentsDashboard\\ChartBarDrawingLate.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\DashboardLayout\\componentsDashboard\\ChartPieDrawing.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\DashboardLayout\\componentsDashboard\\ChartBarDrawing.js",["357","358"],"import { Badge } from 'antd';\nimport React, { useState } from 'react';\nimport { Bar, BarChart, CartesianGrid, LabelList, Tooltip, XAxis, YAxis } from 'recharts';\nimport styled from 'styled-components';\nimport { pieChartColors2 } from '../assets/constantDashboard';\nimport { ChartPanel } from '../PageDashboard';\nimport { converToInputStack, sortStatusOrder } from '../utils/functionDashboard';\n\n\n\n\nconst ChartBarDrawing = ({ type, data, openDrawingTable, projectId, title }) => {\n\n   const { panel, dataInfo } = data;\n\n   const {\n      barDrawingRevCount,\n      barDrawingModellerCount,\n      barDrawingCoordinatorCount,\n      barDrawingResubmitCount,\n      barDrawingTradeCount\n   } = dataInfo;\n\n\n\n   const barDrawingCount = type === 'rev' ? barDrawingRevCount :\n      type === 'modeller' ? barDrawingModellerCount :\n         type === 'coordinator' ? barDrawingCoordinatorCount :\n            type === 'resubmit' ? barDrawingResubmitCount :\n               type === 'trade' ? barDrawingTradeCount :\n                  [];\n\n\n   const inputStack = converToInputStack(barDrawingCount);\n\n   const onClick = (portion, status) => {\n      openDrawingTable({\n         projectId,\n         panel,\n         type: type === 'rev' ? 'Bar Drawing Rev' :\n            type === 'modeller' ? 'Bar Drawing Modeller' :\n               type === 'coordinator' ? 'Bar Drawing Coordinator' :\n                  type === 'resubmit' ? 'Bar Drawing Resubmit' :\n                     type === 'trade' ? 'Bar Drawing Trade' : null,\n         category: portion.name,\n         categorySub1: status\n      });\n   };\n\n\n   const onClickXAxis = ({ value }) => {\n      openDrawingTable({\n         projectId,\n         panel,\n         type: type === 'rev' ? 'Bar Drawing Rev' :\n            type === 'modeller' ? 'Bar Drawing Modeller' :\n               type === 'coordinator' ? 'Bar Drawing Coordinator' :\n                  type === 'resubmit' ? 'Bar Drawing Resubmit' :\n                     type === 'trade' ? 'Bar Drawing Trade' : null,\n         category: value,\n      });\n   };\n\n\n   const LabelCustomStacked = (props) => {\n      const { x, y, value, height } = props;\n      const fontSize = 13;\n      return (\n         <text\n            style={{ fontSize: fontSize, boxShadow: '5px 15px 24px 5px black' }}\n            x={x + 24}\n            y={y + height / 2}\n            fill='#2c3e50'\n            dominantBaseline='central'\n         >\n            {/* {height + 3 < fontSize ? null : value} */}\n            {null}\n         </text>\n      );\n   };\n\n   const LabelCustomStackedTotal = (props) => {\n      const { x, y, value, topBar } = props;\n      return (\n         <>\n            <text\n               style={{ fontSize: 13, fontWeight: 'bold' }}\n               x={x - 2}\n               y={y - 10}\n               fill='black'\n               dominantBaseline='central'\n            >\n               {topBar ? value : null}\n            </text>\n         </>\n      );\n   };\n\n\n   const [tooltip, setTooltip] = useState(false);\n   const TooltipCustom = (props) => {\n      const { active, payload, label } = props;\n      if (!active || !tooltip) return null;\n      for (const bar of payload)\n         if (bar.dataKey === tooltip) {\n            return (\n               <div style={{\n                  backgroundColor: 'white',\n                  color: bar.fill,\n                  fontSize: 14,\n                  border: `1px solid ${bar.fill}`,\n                  padding: '3px',\n                  maxWidth: '170px'\n               }}>\n                  {bar.name} - ({label})\n                  <br />\n                  <mark style={{ backgroundColor: bar.fill }}>({bar.value})</mark>\n               </div>\n            );\n         };\n      return null;\n   };\n\n   const windowSize = window.innerWidth >= 1200 && window.innerWidth < 1600\n      ? 'xl'\n      : window.innerWidth >= 1600\n         ? 'xxl'\n         : null;\n\n   const chartWidth = windowSize === 'xl' && (type === 'trade' || type === 'rev')\n      ? 350\n      : windowSize === 'xxl' && (type === 'trade' || type === 'rev')\n         ? 320\n         : windowSize === 'xl' && type === 'resubmit'\n            ? 350\n            : windowSize === 'xxl' && type === 'resubmit'\n               ? 270\n               : windowSize === 'xl' && type === 'coordinator'\n                  ? 340\n                  : windowSize === 'xxl' && type === 'coordinator'\n                     ? 390\n                     : windowSize === 'xl' && type === 'modeller'\n                        ? 600\n                        : windowSize === 'xxl' && type === 'modeller'\n                           ? 600\n                           : 500\n\n   return (\n      <>\n         {inputStack.length > 0 && (\n            <ChartPanel title={title} panel={panel}>\n               <div style={{\n                  margin: '0 auto', overflow: 'auto',\n                  // display: 'table', \n               }}>\n                  <BarChart\n                     width={type === 'resubmit'\n                        ? 300\n                        : type === 'modeller'\n                           ? 520\n                           : type === 'rev'\n                              ? 350\n                              : type === 'coordinator'\n                                 ? 420\n                                 : 500\n                     }\n                     width={chartWidth}\n\n                     height={type === 'resubmit' ? 230 : 290}\n                     data={barDrawingCount}\n                     margin={{ top: 15, right: 0, left: 0, bottom: type === 'resubmit' ? 20 : 70 }}\n                     padding={{ top: 5 }}\n                     barSize={15}\n                  >\n                     <CartesianGrid strokeDasharray='3 3' />\n                     {type === 'rev' || type === 'resubmit' ? (\n                        <XAxis\n                           style={{ cursor: 'pointer' }}\n                           onClick={onClickXAxis}\n                           tickSize={3} dataKey='name' textAnchor='middle' interval={0} scale='point'\n                           padding={{ left: 20, right: 20 }}\n                        />\n                     ) : (\n                        <XAxis\n                           style={{ cursor: 'pointer' }}\n                           onClick={onClickXAxis}\n                           fontSize={11} tickSize={3} dataKey='name' textAnchor='end' angle={-90} interval={0} scale='point'\n                           padding={{ left: 20, right: 20 }}\n                        />\n                     )}\n\n                     <YAxis />\n                     <Tooltip content={<TooltipCustom />} />\n\n                     {sortStatusOrder(inputStack).reverse().map((item, i) => {\n                        return (\n                           <Bar\n                              style={{ cursor: 'pointer' }}\n                              key={item}\n                              dataKey={item}\n                              stackId='a'\n                              fill={pieChartColors2[item]}\n                              isAnimationActive={false}\n                              onClick={(e) => onClick(e, item)}\n                              onMouseOver={() => setTooltip(item)}\n                              label={<LabelCustomStackedTotal topBar={i === inputStack.length - 1} />}\n                           >\n                              <LabelList dataKey={item} position='left' content={<LabelCustomStacked item={item} />} />\n                           </Bar>\n                        );\n                     })}\n\n                  </BarChart>\n\n                  {type === 'resubmit' && (\n                     <div style={{ transform: 'translateY(-20px)', paddingLeft: 10 }}>\n                        <div style={{ marginRight: 10 }}>\n                           <StyledBadge\n                              size='small'\n                              color={pieChartColors2['Rejected, to resubmit']}\n                              text={'Rejected, to resubmit'}\n                           />\n                        </div>\n                        <StyledBadge\n                           size='small'\n                           color={pieChartColors2['Approved in previous version but need resubmit']}\n                           text={'Approved in previous version but need resubmit'}\n                        />\n                     </div>\n                  )}\n               </div>\n            </ChartPanel>\n         )}\n      </>\n   );\n};\n\nexport default ChartBarDrawing;\n\nconst StyledBadge = styled(Badge)`\n    .ant-badge-status-dot {\n        width: 15px;\n        height: 15px;\n        border-radius: 0;\n    }\n    .ant-badge-status-text {\n       width: 100%;\n    }\n`;\n\n\n","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\DashboardLayout\\componentsDashboard\\ChartProgress.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\DashboardLayout\\utils\\functionDashboard.js",["359","360","361","362","363","364","365","366","367","368","369","370","371"],"import moment from 'moment';\n\n\nexport const inputStackData = [\n   'Approved, no resubmission required',\n   'Approved with comments, no resubmission required',\n   'Approved with comments, resubmission required',\n   'Rejected, to resubmit',\n   'Consultant reviewing',\n   'Pending design',\n   'Revision in progress',\n   '1st cut of drawing in-progress',\n   '1st cut of model in-progress',\n   'Not Started',\n];\nconst inputStackResubmit = [\n   'Approved in previous version but need resubmit',\n   'Rejected, to resubmit',\n];\n\nexport const converToInputStack = (data) => {\n   let output = [];\n   data.forEach(item => {\n      let arr = { ...item };\n      delete arr.name;\n      Object.keys(arr).forEach(stt => {\n         if (inputStackData.indexOf(stt) !== -1 || inputStackResubmit.indexOf(stt) !== -1) {\n            output = [...output, stt];\n         };\n      });\n   });\n   return [...new Set(output)];\n};\nexport const sortStatusOrder = (data) => {\n   const statusArr = [...data];\n   let arr = [];\n   inputStackData.forEach(element => {\n      statusArr.forEach(e => {\n         if (element === e) arr.push(element);\n      });\n   });\n   if (arr.length === 0) return statusArr;\n   return arr;\n};\nexport const checkDiffDates = (dateInput1, dateInput2) => {\n   let date1 = dateInput1;\n   let date2 = dateInput2;\n   if (dateInput1 && dateInput1.length === 8 && dateInput1.includes('/')) date1 = moment(dateInput1, 'DD/MM/YY').format('YYYY-MM-DD');\n   if (dateInput2 && dateInput2.length === 8 && dateInput2.includes('/')) date2 = moment(dateInput2, 'DD/MM/YY').format('YYYY-MM-DD');\n\n   if (date1 && date2) {\n      return moment(date1).diff(moment(date2), 'days');\n   } else if (date1 && !date2) {\n      return moment(date1).diff(moment(), 'days');\n   };\n};\nexport const formatStringNameToId = (str) => {\n   let mystring = str.replace(/ /g, '').replace(/\\(|\\)/g, '');\n   return mystring.charAt(0).toLowerCase() + mystring.slice(1);\n};\nconst randomInteger = (min, max) => {\n   return Math.floor(Math.random() * (max - min + 1)) + min;\n};\nexport const createDummyRecords = () => {\n   let categoryArr = [\n      'Drawing Approved For Construction',\n      'Drawing Approved With Comments To Resubmit',\n      'Drawing Late For Approval',\n      'Drawing Late For Submission',\n      'Drawing Late For Construction',\n   ];\n\n   let recordArray = {};\n\n   categoryArr.forEach(cate => {\n      let arr = {};\n      if (cate === 'Drawing Late For Approval' || cate === 'Drawing Late For Submission') {\n         for (let i = 0; i < 100; i++) {\n            if (i % 3 == 0) {\n               arr[moment(new Date(2020, 6, 21)).add(i, 'day')._d] = 0;\n            } else {\n               arr[moment(new Date(2020, 6, 21)).add(i, 'day')._d] = randomInteger(0, 1);\n            };\n         };\n\n      } else if (cate === 'Drawing Late For Construction') {\n\n         for (let i = 0; i < 100; i++) {\n            if (i % 3 == 0) {\n               arr[moment(new Date(2020, 6, 21)).add(i, 'day')._d] = 0;\n            } else {\n               arr[moment(new Date(2020, 6, 21)).add(i, 'day')._d] = randomInteger(0, 2);\n            };\n         };\n\n      } else {\n\n         for (let i = 0; i < 100; i++) {\n            if (i % 3 == 0) {\n               arr[moment(new Date(2020, 6, 21)).add(i, 'day')._d] = 1;\n            } else {\n               arr[moment(new Date(2020, 6, 21)).add(i, 'day')._d] = randomInteger(1, 4);\n            };\n         };\n      };\n      recordArray[cate] = arr;\n   });\n   return recordArray;\n};\nconst getRandomInt = (min, max) => {\n   min = Math.ceil(min);\n   max = Math.floor(max);\n   return Math.floor(Math.random() * (max - min) + min); //The maximum is exclusive and the minimum is inclusive\n};\nexport const recordDataToChartDaily = (data, category, month) => {\n   let arr = [];\n   Object.keys(data[category]).forEach((item, i) => {\n\n      const addNos = i % 3 == 0 ? -1\n         : i % 2 == 0 ? 1\n            : i % 5 == 0 ? 2 : 0;\n\n      const date = moment(item).add(-1, 'day');\n      if (date.format('MM/YY') === month) {\n         arr.push({\n            date: date.format('DD'),\n            value: data[category][item],\n            target: data[category][item] + addNos\n         });\n      };\n   });\n   return arr;\n};\nexport const recordDataToChartWeekly = (data, category) => {\n   let arr = [];\n   Object.keys(data[category]).forEach((item, i) => {\n\n      const addNos = i % 3 == 0 ? -1\n         : i % 5 == 0 ? 1\n            : i % 7 == 0 ? 2 : 0;\n\n      const date = moment(item).add(-1, 'day');\n      arr.push({\n         week: date.format('W'),\n         month: date.format('MM'),\n         year: date.format('YY'),\n         value: data[category][item],\n         target: data[category][item] + addNos\n      });\n   });\n\n   let groups = {};\n   for (let i = 0; i < arr.length; i++) {\n      let weekName = `W${arr[i].week} ${arr[i].month}/${arr[i].year}`;\n      groups[weekName] = {};\n   };\n\n\n   for (let i = 0; i < arr.length; i++) {\n      let weekName = `W${arr[i].week} ${arr[i].month}/${arr[i].year}`;\n      groups[weekName].value = [...groups[weekName].value || [], arr[i].value];\n      groups[weekName].target = [...groups[weekName].target || [], arr[i].target];\n   };\n\n   let arrOutput = [];\n   for (let week in groups) {\n      arrOutput.push({\n         week,\n         value: groups[week].value.reduce((a, b) => a + b, 0),\n         target: groups[week].target.reduce((a, b) => a + b, 0),\n      });\n   };\n   return arrOutput;\n};\nexport const recordDataToChartMonthly = (data, category) => {\n   let arr = [];\n   Object.keys(data[category]).forEach((item, i) => {\n\n      const addNos = i % 4 == 0 ? -4\n         : i % 3 == 0 ? 3\n            : i % 2 == 0 ? 2 : 0;\n\n      const date = moment(item).add(-1, 'day');\n      arr.push({\n         week: date.format('W'),\n         month: date.format('MM'),\n         year: date.format('YY'),\n         value: data[category][item],\n         target: data[category][item] + getRandomInt(-3, 3)\n      });\n   });\n   let groups = {};\n   for (let i = 0; i < arr.length; i++) {\n      let monthName = `${arr[i].month}/${arr[i].year}`;\n      groups[monthName] = {};\n   };\n\n   for (let i = 0; i < arr.length; i++) {\n      let monthName = `${arr[i].month}/${arr[i].year}`;\n      groups[monthName].value = [...groups[monthName].value || [], arr[i].value];\n      groups[monthName].target = [...groups[monthName].target || [], arr[i].target];\n   };\n\n   let arrOutput = [];\n   for (let month in groups) {\n      arrOutput.push({\n         month,\n         value: groups[month].value.reduce((a, b) => a + b, 0),\n         target: groups[month].target.reduce((a, b) => a + b, 0),\n      });\n   };\n   return arrOutput;\n};\n\n\n\n\n\n\n\n\n\n\n\nconst flattenAllTreeChildNode1 = (root) => {\n   let temp = [];\n   let queue = [...root];\n   while (queue.length > 0) {\n      let node = queue.shift();\n      if (node.children) {\n         let childNode = [];\n         node.children.forEach(nd => {\n            childNode.push({ ...nd, parentId: node.id });\n         });\n         queue = [...queue, ...childNode];\n         let nodeObj = { ...node };\n         delete nodeObj.children;\n         temp.push(nodeObj);\n      } else {\n         let nodeObj = { ...node };\n         delete nodeObj.children;\n         temp.push(nodeObj);\n      };\n   };\n   return temp;\n};\nconst getListOfBranchesTree = (inputArr) => {\n   const arr = inputArr.map(x => ({ ...x }));\n   arr.sort((a, b) => { return b.treeLevel - a.treeLevel });\n\n   const parentArrIds = [];\n   arr.forEach(x => {\n      let item = arr.find(fld => fld.id === x.parentId);\n      if (item) {\n         item.children = [...item.children || [], x];\n      } else {\n         parentArrIds.push(x.id);\n      };\n   });\n   return arr.filter(x => parentArrIds.indexOf(x.id) !== -1);\n};\nconst getTreeFlattenOfNodeInArray = (treeArray, node) => {\n   let obj = { ...node };\n   let arrayTree = treeArray.map(x => ({ ...x })).filter(x => x.treeLevel > obj.treeLevel);\n   arrayTree = [...arrayTree, obj];\n   const treeOfFound = getListOfBranchesTree(arrayTree).find(x => x.id === obj.id);\n   return flattenAllTreeChildNode1([treeOfFound]);\n};\nconst getUniqueValueByColumns = (rows, header) => {\n   let valueArr = [];\n   rows.forEach(row => valueArr.push(row[header]));\n   return [...new Set(valueArr)];\n};\nconst countDrawingsByColumnAndStatus = (rows, column) => {\n   let valueArray = getUniqueValueByColumns(rows, column).sort();\n\n   let arrCount = [];\n   let objDrawings = {};\n   valueArray.forEach(columnValue => {\n      if (columnValue !== 'NOT ASSIGNED') {\n         let rowsFilter = rows.filter(r => r[column] === columnValue);\n         let obj = {};\n         let objDwgs = {};\n         rowsFilter.forEach(r => {\n            obj[r.Status] = (obj[r.Status] || 0) + 1;\n            objDwgs[r.Status] = [...objDwgs[r.Status] || [], r];\n         });\n         obj.name = columnValue;\n         arrCount.push(obj);\n         objDrawings[columnValue] = objDwgs;\n      };\n   });\n\n   let rowsFilterNA = rows.filter(r => r[column] === 'NOT ASSIGNED');\n   let objNA = {};\n   let objDwgsNA = {};\n   rowsFilterNA.forEach(r => {\n      objNA[r.Status] = (objNA[r.Status] || 0) + 1;\n      objDwgsNA[r.Status] = [...objDwgsNA[r.Status] || [], r];\n   });\n   objNA.name = 'NOT ASSIGNED';\n\n   arrCount.unshift(objNA);\n   objDrawings['NOT ASSIGNED'] = objDwgsNA;\n\n\n   return { arrCount, objDrawings };\n};\n\n\n\n\n\n\n\nexport const convertDataFromDB = (data, dataRowHistories, projectsArray) => {\n\n   let output = {\n      projectSplit: [],\n   };\n\n   const arrComparison = ['OVERALL', 'WH - ARCHI', 'WH - C&S', 'WH - M&E', 'WH - PRECAST', 'SUBCON'].map(item => ({\n      name: item,\n      data: []\n   }));\n\n\n   data.forEach(projectData => {\n\n      let { publicSettings: { headers, drawingTypeTree }, rows: rowsAllInProject, _id } = projectData;\n\n      rowsAllInProject = rowsAllInProject.filter(x => x['Drawing Number'] || x['Drawing Name']);\n\n      rowsAllInProject.forEach(r => {\n         if (!r.Rev) r.Rev = '0';\n         r.Rev = r.Rev.toUpperCase();\n\n         if (!r.Status) r.Status = 'Not Started';\n\n         if (r.Status === 'Revise In-Progress') {\n            r.Status = 'Revision in progress';\n         } else if (r.Status === 'Reject and resubmit') {\n            r.Status = 'Rejected, to resubmit';\n         } else if (r.Status === 'Approved with comments, to Resubmit') {\n            r.Status = 'Approved with comments, resubmission required';\n         } else if (r.Status === 'Approved with Comment, no submission Required') {\n            r.Status = 'Approved with comments, no resubmission required';\n         } else if (r.Status === 'Approved for Construction') {\n            r.Status = 'Approved, no resubmission required';\n         };\n\n\n         if (!r['Modeller']) r['Modeller'] = 'Not assigned';\n         r['Modeller'] = r['Modeller'].toUpperCase();\n\n         if (!r['Coordinator In Charge']) r['Coordinator In Charge'] = 'Not assigned';\n         r['Coordinator In Charge'] = r['Coordinator In Charge'].toUpperCase();\n      });\n\n      const headersArrayText = headers.map(x => x.text);\n      const projectName = projectsArray.find(dt => dt.id === _id).name;\n\n\n      const historiesThisProject = dataRowHistories.find(x => x.projectId === _id).histories || [];\n\n      const dataRowHistoriesThisProject = converHistoryData(historiesThisProject, headers);\n      const dataInfoOverAll = convertToInputDataForChart(rowsAllInProject, dataRowHistoriesThisProject, headersArrayText);\n      let projectOutput = [{ panel: 'OVERALL', dataInfo: dataInfoOverAll }];\n\n      const found = arrComparison.find(x => x.name === 'OVERALL');\n\n      if (rowsAllInProject.length > 0) {\n         found.data.push({\n            projectName,\n            projectId: _id,\n            compareDrawingStatus: dataInfoOverAll.pieDrawingStatusCount,\n\n            compareDrawingsLateSubmission: dataInfoOverAll.drawingsLateSubmission.length,\n            compareDrawingsLateApproval: dataInfoOverAll.drawingsLateApproval.length,\n            compareDrawingsLateStart: dataInfoOverAll.drawingsLateStart.length,\n            compareDrawingsLateConstruction: dataInfoOverAll.drawingsLateConstruction.length,\n         });\n      };\n\n\n      let objTradeStatus = {};\n      let arrTradeCount = [];\n      const wohhupNode = drawingTypeTree.find(x => x.treeLevel === 1 && x.title === 'Woh Hup Private Ltd');\n      if (wohhupNode) {\n         const arrWHTrade = ['ARCHI', 'C&S', 'M&E', 'PRECAST'];\n         arrWHTrade.forEach(trade => {\n            const tradeNode = drawingTypeTree.find(x => {\n               return x.treeLevel === 2 && x.title === trade && x.parentId === wohhupNode.id;\n            });\n            if (tradeNode) {\n               const allNodesUnderThisTrade = getTreeFlattenOfNodeInArray(drawingTypeTree, tradeNode);\n               const allIdsNode = [...new Set(allNodesUnderThisTrade.map(x => x.id))];\n               const rowsInThisTrade = rowsAllInProject.filter(x => allIdsNode.find(id => id === x._parentRow));\n\n\n               const rowsHistoriesThisTrade = dataRowHistoriesThisProject.filter(r => rowsInThisTrade.find(x => x._id === r.row));\n\n               const dataInfoThisTrade = convertToInputDataForChart(rowsInThisTrade, rowsHistoriesThisTrade, headersArrayText);\n\n               projectOutput.push({\n                  panel: 'WH - ' + trade,\n                  dataInfo: dataInfoThisTrade\n               });\n\n               const foundTrade = arrComparison.find(x => x.name === 'WH - ' + trade);\n\n               if (foundTrade && rowsAllInProject.length > 0) {\n                  foundTrade.data.push({\n                     projectName,\n                     projectId: _id,\n                     compareDrawingStatus: dataInfoThisTrade.pieDrawingStatusCount,\n\n                     compareDrawingsLateSubmission: dataInfoThisTrade.drawingsLateSubmission.length,\n                     compareDrawingsLateApproval: dataInfoThisTrade.drawingsLateApproval.length,\n                     compareDrawingsLateStart: dataInfoThisTrade.drawingsLateStart.length,\n                     compareDrawingsLateConstruction: dataInfoThisTrade.drawingsLateConstruction.length,\n                  });\n               };\n\n               const { objCount: objCountTrade, objDrawings: rowsTradeSplitStatus } = splitRowsStatusByTrade(rowsInThisTrade, 'WH - ' + trade);\n               objTradeStatus['WH - ' + trade] = rowsTradeSplitStatus;\n               arrTradeCount.push(objCountTrade);\n            };\n         });\n      };\n\n\n      const subconGroup = drawingTypeTree.filter(x => x.treeLevel === 1 && x.title === 'SUBCON');\n      let allIsSubconAndUnder = [];\n      subconGroup.forEach(sb => {\n         const allNodesUnderThisSubcon = getTreeFlattenOfNodeInArray(drawingTypeTree, sb);\n         const allIdsNode = [...new Set(allNodesUnderThisSubcon.map(x => x.id))];\n         allIsSubconAndUnder = [...allIsSubconAndUnder, ...allIdsNode];\n      });\n      allIsSubconAndUnder = [...new Set(allIsSubconAndUnder)];\n      const rowsOfSubcon = rowsAllInProject.filter(x => allIsSubconAndUnder.find(id => id === x._parentRow));\n      const rowsHistoriesSubcon = dataRowHistoriesThisProject.filter(r => rowsOfSubcon.find(x => x._id === r.row));\n      const dataInfoSubcon = convertToInputDataForChart(rowsOfSubcon, rowsHistoriesSubcon, headersArrayText);\n      projectOutput.push({\n         panel: 'SUBCON',\n         dataInfo: dataInfoSubcon\n      });\n\n      const foundSubcon = arrComparison.find(x => x.name === 'SUBCON');\n\n      if (foundSubcon && rowsAllInProject.length > 0) {\n         foundSubcon.data.push({\n            projectName,\n            projectId: _id,\n            compareDrawingStatus: dataInfoSubcon.pieDrawingStatusCount,\n\n            compareDrawingsLateSubmission: dataInfoSubcon.drawingsLateSubmission.length,\n            compareDrawingsLateApproval: dataInfoSubcon.drawingsLateApproval.length,\n            compareDrawingsLateStart: dataInfoSubcon.drawingsLateStart.length,\n            compareDrawingsLateConstruction: dataInfoSubcon.drawingsLateConstruction.length,\n         });\n      };\n\n\n      const { objCount: objCountSubcon, objDrawings: rowsSubconSplitStatus } = splitRowsStatusByTrade(rowsOfSubcon, 'SUBCON');\n      objTradeStatus['SUBCON'] = rowsSubconSplitStatus;\n      arrTradeCount.push(objCountSubcon);\n\n      const overAllObj = projectOutput.find(x => x.panel === 'OVERALL');\n      overAllObj.dataInfo['Bar Drawing Trade'] = objTradeStatus;\n      overAllObj.dataInfo['barDrawingTradeCount'] = arrTradeCount;\n\n\n      output.projectSplit.push({\n         projectId: _id,\n         projectName,\n         dataProject: projectOutput\n      });\n   });\n\n   output.projectComparison = arrComparison;\n   return output;\n};\nconst convertToInputDataForChart = (rows, rowsHistory, headers) => {\n\n   let inputStack = getUniqueValueByColumns(rows, 'Status');\n\n   const { arrCount: barDrawingRevCount, objDrawings: barDrawingRevDrawings } = countDrawingsByRevAndStatus(rows);\n   let { arrCount: barDrawingModellerCount, objDrawings: barDrawingModellerDrawings } = countDrawingsByColumnAndStatus(rows, 'Modeller');\n   let { arrCount: barDrawingCoordinatorCount, objDrawings: barDrawingCoordinatorDrawings } = countDrawingsByColumnAndStatus(rows, 'Coordinator In Charge');\n\n   let itemNoData1 = barDrawingModellerCount.filter(x => x.name === 'Not assigned');\n   let itemRest1 = barDrawingModellerCount.filter(x => x.name !== 'Not assigned');\n   barDrawingModellerCount = [...itemNoData1, ...itemRest1];\n\n   let itemNoData2 = barDrawingCoordinatorCount.filter(x => x.name === 'Not assigned');\n   let itemRest2 = barDrawingCoordinatorCount.filter(x => x.name !== 'Not assigned');\n   barDrawingCoordinatorCount = [...itemNoData2, ...itemRest2];\n\n\n\n   let pieDrawingStatusCount = {};\n   let pieDrawingStatusDrawings = {};\n   inputStack.forEach(stt => {\n      let rowArr = rows.filter(r => r.Status === stt);\n      rowArr.forEach(r => {\n         pieDrawingStatusCount[stt] = (pieDrawingStatusCount[stt] || 0) + 1;\n      });\n      pieDrawingStatusDrawings[stt] = rowArr;\n   });\n\n\n   const drawingsLateSubmission = getDrawingLateNow1(rows, 'drawingsLateSubmission');\n   const drawingsLateApproval = getDrawingLateNow1(rows, 'drawingsLateApproval');\n   const drawingsLateStart = getDrawingLateNow1(rows, 'drawingsLateStart');\n   const drawingsLateConstruction = getDrawingLateNow1(rows, 'drawingsLateConstruction');\n\n   const { rowsToSubmitTarget: rowsToSubmitTargetWeek, rowsToSubmitActual: rowsToSubmitActualWeek } = getDrawingsToSubmitBy(rows, 'week');\n   const { rowsToSubmitTarget: rowsToSubmitTargetMonth, rowsToSubmitActual: rowsToSubmitActualMonth } = getDrawingsToSubmitBy(rows, 'month');\n\n\n\n   const revArray = ['0', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J'];\n   const allDwgsToResubmit = rows.filter(x => {\n      return x['Status'] === 'Approved with comments, resubmission required' || x['Status'] === 'Rejected, to resubmit';\n   });\n\n\n   let objData = {};\n   allDwgsToResubmit.forEach(r => {\n      const columnIndex = revArray.indexOf(r['Rev'] || '0') + 1;\n      objData[columnIndex] = [...objData[columnIndex] || [], r];\n   });\n\n\n   let barDrawingResubmitDrawings = {};\n   let barDrawingResubmitCount = [];\n\n   Object.keys(objData).forEach(cl => {\n      const rows = objData[cl];\n      let rejectToResubmit = [];\n      let approvedPreviousVersion = [];\n      rows.forEach(row => {\n         const histories = rowsHistory.filter(r => r.row === row.id);\n         const found = histories.find(x => x['Status'] === 'Approved, no resubmission required' || x['Status'] === 'Approved with comments, no resubmission required');\n         if (found) {\n            approvedPreviousVersion.push(row);\n         } else {\n            rejectToResubmit.push(row);\n         };\n      });\n      barDrawingResubmitCount.push({\n         'Approved in previous version but need resubmit': approvedPreviousVersion.length,\n         'Rejected, to resubmit': rejectToResubmit.length,\n         name: cl\n      });\n      barDrawingResubmitDrawings[cl] = {\n         'Approved in previous version but need resubmit': approvedPreviousVersion,\n         'Rejected, to resubmit': rejectToResubmit\n      };\n   });\n\n\n   return {\n      rows,\n      headers,\n\n      'Bar Drawing Rev': barDrawingRevDrawings,\n      barDrawingRevCount,\n      'Bar Drawing Modeller': barDrawingModellerDrawings,\n      barDrawingModellerCount,\n      'Bar Drawing Coordinator': barDrawingCoordinatorDrawings,\n      barDrawingCoordinatorCount,\n      'Bar Drawing Resubmit': barDrawingResubmitDrawings,\n      barDrawingResubmitCount,\n\n\n      'Pie Drawing Status': pieDrawingStatusDrawings,\n      pieDrawingStatusCount,\n\n\n      drawingsLateSubmission,\n      drawingsLateApproval,\n      drawingsLateStart,\n      drawingsLateConstruction,\n      rowsToSubmitTargetWeek,\n      rowsToSubmitActualWeek,\n      rowsToSubmitTargetMonth,\n      rowsToSubmitActualMonth,\n   };\n};\nconst countDrawingsByRevAndStatus = (rows) => {\n   let valueArray = getUniqueValueByColumns(rows, 'Rev').sort();\n   valueArray.unshift('NS');\n\n   let arrCount = [];\n   let objDrawings = {};\n   valueArray.forEach(columnValue => {\n      let obj = {};\n      let objDwgs = {};\n      let rowsFilter;\n      if (columnValue !== 'NS') {\n         rowsFilter = rows.filter(r => {\n            return r['Rev'] === columnValue &&\n               r.Status !== 'Not Started' &&\n               r.Status !== '1st cut of model in-progress' &&\n               r.Status !== '1st cut of drawing in-progress';\n         });\n      } else {\n         rowsFilter = rows.filter(r => {\n            return r.Status === 'Not Started' ||\n               r.Status === '1st cut of model in-progress' ||\n               r.Status === '1st cut of drawing in-progress';\n         });\n      };\n      rowsFilter.forEach(r => {\n         obj[r.Status] = (obj[r.Status] || 0) + 1;\n         objDwgs[r.Status] = [...objDwgs[r.Status] || [], r];\n      });\n      obj.name = columnValue;\n      arrCount.push(obj);\n      objDrawings[columnValue] = objDwgs;\n   });\n   return { arrCount, objDrawings };\n};\n\nconst converHistoryData = (rowsHistory, headers) => {\n   return rowsHistory.map(rowH => {\n      let obj = {\n         row: rowH.row\n      };\n      const { history } = rowH;\n      if (history) {\n         headers.forEach(hd => {\n            if (history[hd.key]) obj[hd.text] = history[hd.key];\n         });\n      };\n      return obj;\n   });\n};\n\nconst splitRowsStatusByTrade = (rows, title) => {\n   const statusArray = [...new Set(rows.map(x => x['Status']))];\n   let obj = {};\n   let objCount = {};\n   statusArray.forEach(stt => {\n      const rowsFound = rows.filter(r => r['Status'] === stt);\n      obj[stt] = rowsFound;\n      objCount[stt] = rowsFound.length;\n   });\n   return {\n      objDrawings: obj,\n      objCount: { ...objCount, name: title }\n   }\n};\n\n\n\n\nexport const getRandomIntInclusive = (min, max) => {\n   min = Math.ceil(min);\n   max = Math.floor(max);\n   return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\nconst getDrawingLateNow1 = (drawings, type) => {\n   const conditionArray1 = [\n      'Approved, no resubmission required',\n      'Approved with comments, no resubmission required',\n      'Consultant reviewing'\n   ];\n   const conditionArray2 = [\n      'Approved, no resubmission required',\n      'Approved with comments, no resubmission required',\n   ];\n\n   let rowsLateOutput;\n\n\n\n   if (type === 'drawingsLateStart') {\n      rowsLateOutput = drawings.filter(r => {\n         return conditionArray1.indexOf(r.Status) === -1 &&\n            r['Drawing Start (T)'] && checkDiffDates(r['Drawing Start (T)']) < 0 &&\n            (\n               !r['Drawing Start (A)'] ||\n               (r['Drawing Start (A)'] && r['Drawing Start (T)'] && checkDiffDates(r['Drawing Start (A)'], r['Drawing Start (T)']) > 0)\n            );\n      });\n   } else if (type === 'drawingsLateSubmission') {\n      rowsLateOutput = drawings.filter(r => {\n         return conditionArray1.indexOf(r.Status) === -1 &&\n            r['Drg To Consultant (T)'] &&\n            checkDiffDates(r['Drg To Consultant (T)']) < 0 &&\n            !r['Drg To Consultant (A)'];\n      });\n   } else if (type === 'drawingsLateApproval') {\n      rowsLateOutput = drawings.filter(r => {\n         return conditionArray2.indexOf(r.Status) === -1 &&\n            r['Get Approval (T)'] && checkDiffDates(r['Get Approval (T)']) < 0 &&\n            (\n               !r['Get Approval (A)'] ||\n               (r['Get Approval (A)'] && r['Get Approval (T)'] && checkDiffDates(r['Get Approval (A)'], r['Get Approval (T)']) > 0)\n            );\n      });\n   } else if (type === 'drawingsLateConstruction') {\n      rowsLateOutput = drawings.filter(r => {\n         return conditionArray2.indexOf(r.Status) === -1 &&\n            r['Construction Start'] &&\n            checkDiffDates(r['Construction Start']) < 0 &&\n            (\n               !r['Drg To Consultant (A)'] ||\n               !r['Get Approval (A)'] ||\n               (r['Get Approval (A)'] && r['Construction Start'] && checkDiffDates(r['Get Approval (A)'], r['Construction Start']) > 0)\n            );\n      });\n   };\n\n   return rowsLateOutput;\n};\n\nexport const getfirstAndLastDayOf = (duration) => {\n\n   const firstday = moment(moment().startOf(duration).toDate()).format('DD/MM/YY');\n   const lastday = moment(moment().endOf(duration).toDate()).format('DD/MM/YY');\n\n   return { firstday, lastday };\n};\n\nconst getDrawingsToSubmitBy = (rows, duration) => {\n   let firstday, lastday;\n   if (duration === 'week') {\n      const { firstday: first, lastday: last } = getfirstAndLastDayOf('week');\n      firstday = first;\n      lastday = last;\n   } else if (duration === 'month') {\n      const { firstday: first, lastday: last } = getfirstAndLastDayOf('month');\n      firstday = first;\n      lastday = last;\n   };\n\n   const rowsToSubmitTarget = rows.filter(r => {\n      return r['Drg To Consultant (T)'] &&\n         checkDiffDates(r['Drg To Consultant (T)'], firstday) >= 0 &&\n         checkDiffDates(r['Drg To Consultant (T)'], lastday) <= 0;\n   });\n\n   const rowsToSubmitActual = rowsToSubmitTarget.filter(r => {\n      return r['Drg To Consultant (A)'] &&\n         checkDiffDates(r['Drg To Consultant (A)'], firstday) >= 0 &&\n         checkDiffDates(r['Drg To Consultant (A)'], lastday) <= 0;\n   });\n\n   return {\n      rowsToSubmitTarget,\n      rowsToSubmitActual\n   };\n};\n\n\nexport const getUserRoleTradeCompany = (role, company) => {\n\n   const roleArray = [\n      'Document Controller',\n\n      'WH Archi Coordinator',\n      'WH C&S Design Engineer',\n      'WH M&E Coordinator',\n      'WH PRECAST Coordinator',\n\n      'WH Archi Modeller',\n      'WH C&S Modeller',\n      'WH M&E Modeller',\n      'WH PRECAST Modeller',\n\n      'Production',\n\n      'WH Archi Manager',\n      'WH C&S Manager',\n      'WH M&E Manager',\n      'WH PRECAST Manager',\n\n      'Planning Engineer',\n      'QS',\n      'Project Manager',\n      'Corporate Manager',\n      'QAQC',\n      'Safety',\n      'Client',\n\n      'Sub-Con',\n      'Consultant',\n   ];\n\n\n   if (\n      !role || !company || roleArray.indexOf(role) === -1 ||\n      role === 'WH Archi Manager' || role === 'WH C&S Manager' || role === 'WH M&E Manager' || role === 'WH PRECAST Manager' ||\n      role === 'Planning Engineer' || role === 'QS' || role === 'Project Manager' || role === 'Corporate Manager' ||\n      role === 'Client' || role === 'QAQC' || role === 'Safety'\n   ) {\n      return { role: 'View-Only User', trade: null, company: null };\n   };\n\n   if (role === 'WH Archi Coordinator') return { role: 'Coordinator', trade: 'ARCHI', company };\n   if (role === 'WH C&S Design Engineer') return { role: 'Coordinator', trade: 'C&S', company };\n   if (role === 'WH M&E Coordinator') return { role: 'Coordinator', trade: 'M&E', company };\n   if (role === 'WH PRECAST Coordinator') return { role: 'Coordinator', trade: 'PRECAST', company };\n\n   if (role === 'WH Archi Modeller') return { role: 'Modeller', trade: 'ARCHI', company };\n   if (role === 'WH C&S Modeller') return { role: 'Modeller', trade: 'C&S', company };\n   if (role === 'WH M&E Modeller') return { role: 'Modeller', trade: 'M&E', company };\n   if (role === 'WH PRECAST Modeller') return { role: 'Modeller', trade: 'PRECAST', company };\n\n   return { role, trade: null, company };\n};","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\DashboardLayout\\componentsDashboard\\FormPivot.js",["372"],"import { Button, Divider, Modal, Select } from 'antd';\nimport React, { useState } from 'react';\nimport { colorType } from '../assets/constantDashboard';\nimport ChartBarRecordPanel from './ChartBarRecordPanel';\n\n\n\nconst FormPivot = ({ projectName, data, openDrawingTable, dataRecordedDummy, projectId }) => {\n\n   const { panel, dataInfo: { headers, rows: rowsAll } } = data;\n\n\n   const [columnsHeaderSorted, setColumnsHeaderSorted] = useState(null);\n\n\n   const [titleLeft, setTitleLeft] = useState(headers.filter(x => {\n      return !x.includes('(A)') &&\n         !x.includes('(T)') &&\n         x !== 'Model Progress' &&\n         x !== 'Drawing' &&\n         x !== 'Drawing Progress';\n   }));\n\n\n   const [value, setValue] = useState('Select an option...');\n   const [chartRecord, setChartRecord] = useState(false);\n   const [modalConfirm, setModalConfirm] = useState(false);\n\n\n   const onChange = value => {\n      setValue('Select an option...');\n      setTitleLeft(titleLeft.filter(title => title !== value));\n      setColumnsHeaderSorted([...columnsHeaderSorted || [], value]);\n   };\n\n\n   const onResetHandle = () => {\n      setColumnsHeaderSorted(null);\n      setTitleLeft(headers);\n   };\n\n\n   const onRemoveCategory = (e) => {\n      const btnName = e.target.previousSibling.previousSibling.innerText;\n      setColumnsHeaderSorted(columnsHeaderSorted.filter(x => x !== btnName));\n      setTitleLeft([...titleLeft, btnName]);\n   };\n\n\n   const sortedTableOpen = () => {\n      if (!columnsHeaderSorted) {\n         openDrawingTable({\n            projectId,\n            panel,\n            type: 'Pivot Table All',\n         });\n      } else {\n         setModalConfirm(true);\n      }\n   };\n\n\n   const confirmShowSelected = (isShowSelectedOnly) => {\n      openDrawingTable({\n         projectId,\n         panel,\n         type: 'Pivot Table Group',\n         isShowSelectedOnly,\n         headersGroup: columnsHeaderSorted\n      });\n   };\n\n\n   return (\n      <div style={{ marginTop: '10px', padding: '20px' }}>\n         {columnsHeaderSorted && columnsHeaderSorted.map(cl => (\n            <div key={cl} style={{ display: 'flex', width: '100%', margin: '10px auto', padding: 5, border: `1px solid ${colorType.grey1}`, borderRadius: 3 }}>\n               <span style={{ marginRight: 5 }}>{cl}</span>\n               <Divider type='vertical' style={{ height: 21 }} />\n               <span\n                  style={{\n                     marginRight: 15,\n                     color: colorType.red,\n                     cursor: 'pointer',\n                     textAlign: 'center'\n                  }}\n                  onClick={onRemoveCategory}\n               >X</span>\n            </div>\n         ))}\n\n         <Select\n            value={value}\n            showSearch\n            style={{ width: '100%', margin: '0 auto', display: 'table' }}\n            placeholder='Select a title'\n            optionFilterProp='children'\n            onChange={onChange}\n            filterOption={(input, option) => option.props.children.toLowerCase().indexOf(input.toLowerCase()) >= 0}\n         >\n            {titleLeft.map(cl => (\n               <Select.Option value={cl} key={cl}>{cl}</Select.Option>\n            ))}\n         </Select>\n\n         <div style={{ display: 'flex', paddingBottom: '15px' }}>\n            <Button\n               style={{ background: colorType.grey0, width: '100%', margin: '10px auto' }}\n               onClick={sortedTableOpen}\n            >Sorted table</Button>\n\n            <Button\n               style={{ background: colorType.grey0, width: '100%', margin: '10px auto' }}\n               onClick={onResetHandle}\n            >Reset</Button>\n         </div>\n\n         <Divider type='horizontal' style={{ padding: '3px 0' }} />\n\n         <div style={{ fontSize: '18px', fontWeight: 'bold', width: '100%', textAlign: 'center', paddingBottom: '10px' }}>Chart report</div>\n         <Button\n            style={{ background: colorType.grey4, width: '100%' }}\n            onClick={() => setChartRecord(true)}\n            disabled={true}\n         >Chart Report (Experiment)</Button>\n\n\n         <Modal\n            title={`Record ${projectName}`}\n            visible={chartRecord}\n            onCancel={() => setChartRecord(false)}\n            width={0.9 * window.innerWidth}\n            footer={null}\n            bodyStyle={{ padding: 15 }}\n         >\n            <ChartBarRecordPanel\n               data={dataRecordedDummy}\n            />\n         </Modal>\n\n         <Modal\n            title='Do you want to show all columns or selected one?'\n            visible={modalConfirm}\n            onCancel={() => setModalConfirm(false)}\n            footer={null}\n         >\n            <Button onClick={() => {\n               confirmShowSelected(true);\n               setModalConfirm(false);\n            }}\n               style={{ margin: 15 }}\n            >Show selected only</Button>\n\n            <Button onClick={() => {\n               confirmShowSelected(false);\n               setModalConfirm(false);\n            }}>Show all</Button>\n\n         </Modal>\n\n      </div>\n   );\n};\n\nexport default FormPivot;\n\n\n\n","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\DashboardLayout\\componentsDashboard\\TableDrawingList.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\contexts\\cellContext.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\contexts\\projectContext.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\contexts\\rowContext.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\generalComponents\\CellHeader.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\generalComponents\\InputSearch.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\generalComponents\\ViewTemplateSelect.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\generalComponents\\IconTable.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\generalComponents\\FormSort.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\pageSpreadsheet\\ButtonAdminCreateAndUpdateRows.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\pageSpreadsheet\\ButtonAdminCreateAndUpdateRowsHistory.js",[],["373","374"],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\pageSpreadsheet\\ButtonAdminDeleteRowsHistory.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\pageSpreadsheet\\ButtonAdminUploadData.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\pageSpreadsheet\\Cell.js",["375","376","377","378"],"import { Checkbox, message } from 'antd';\nimport moment from 'moment';\nimport React, { useEffect, useRef, useState } from 'react';\nimport styled from 'styled-components';\nimport { colorTextRow, colorType, imgLink } from '../../constants';\nimport PanelCalendar from '../generalComponents/PanelCalendar';\nimport { isColumnWithReplyData } from './CellRFA';\nimport { getCompanyNameFnc, getTradeNameFnc, getTreeFlattenOfNodeInArray } from './FormDrawingTypeOrder';\n\n\n\nconst Cell = (props) => {\n\n   let {\n      cellData, rowData, column, columns, rowIndex, columnIndex,\n      onRightClickCell, setPosition, getCurrentDOMCell, contextInput\n   } = props;\n\n   const { contextCell, contextRow, contextProject } = contextInput;\n   const { stateCell, getCellModifiedTemp, setCellActive } = contextCell;\n   const { stateRow, getSheetRows } = contextRow;\n   const { stateProject } = contextProject;\n   const { drawingTypeTree, rowsAll, modeGroup, rowsSelected, rowsSelectedToMove, modeFilter } = stateRow;\n\n   let columnKeyToPutFolderName;\n   if (rowData.treeLevel || rowData._rowLevel < 1) {\n      columnKeyToPutFolderName = columns[1].key;\n   };\n\n\n\n   if ((column.key.includes('(A)') || column.key.includes('(T)') ||\n      column.key === 'Construction Issuance Date' || column.key === 'Construction Start') &&\n      cellData && cellData.length === 10 && cellData.includes('-')) {\n      cellData = moment(cellData, 'YYYY-MM-DD').format('DD/MM/YY');\n   };\n\n\n\n   const { roleTradeCompany, projectIsAppliedRfaView, company, pageSheetTypeName, publicSettings: { headers } } = stateProject.allDataOneSheet;\n\n   let headerDataEntry;\n   if (pageSheetTypeName === 'page-data-entry-new') {\n      headerDataEntry = headers.find(hd => hd.text === column.key);\n   };\n\n\n   let info = '';\n   if (rowData.treeLevel && column.key === columnKeyToPutFolderName) {\n      const node = drawingTypeTree.find(x => x.id === rowData.id);\n      const branches = getTreeFlattenOfNodeInArray(drawingTypeTree, node);\n\n      const branchesWithDrawing = branches.filter(x => !branches.find(y => y.parentId === x.id));\n\n      let rowsArr = [];\n      branchesWithDrawing.forEach(brch => {\n         rowsArr = [...rowsArr, ...rowsAll.filter(r => r._parentRow === brch.id)];\n      });\n      modeFilter.forEach(filter => {\n         if (filter.id) {\n            rowsArr = rowsArr.filter(r => r[filter.header] === filter.value);\n         };\n      });\n      let obj = {};\n      rowsArr.forEach(row => {\n         if (!row['Status'] || row['Status'] === 'INFO') {\n            obj['Not Started'] = (obj['Not Started'] || 0) + 1;\n         } else {\n            obj[row['Status']] = (obj[row['Status']] || 0) + 1;\n         }\n      });\n\n      let str = '';\n      Object.keys(obj).forEach((stt, i) => {\n         let code;\n         let init = i === 0 ? '' : ' + ';\n\n         if (stt === 'Not Started') code = 'NS';\n         if (stt === '1st cut of model in-progress') code = 'MIP';\n         if (stt === '1st cut of drawing in-progress') code = 'DIP';\n         if (stt === 'Pending design') code = 'PD';\n         if (stt === 'Consultant reviewing') code = 'CR';\n         if (stt === 'Reject and resubmit') code = 'RR';\n         if (stt === 'Approved with comments, to Resubmit') code = 'AR';\n         if (stt === 'Revise In-Progress') code = 'RP';\n         if (stt === 'Approved with Comment, no submission Required') code = 'AC';\n         if (stt === 'Approved for Construction') code = 'AP';\n         if (stt === 'INFO') code = 'NS';\n\n         str += `${init}${obj[stt]} ${code}`;\n\n      });\n      let end = rowsArr.length === 0 ? '' : ' : ';\n      info = ` - (${rowsArr.length} Drawings${end}${str})`;\n   };\n\n\n   const isLockedColumn = columnLocked(roleTradeCompany, rowData, modeGroup, column.key, projectIsAppliedRfaView, pageSheetTypeName);\n   const isLockedRow = rowLocked(roleTradeCompany, rowData, modeGroup, drawingTypeTree);\n\n\n   const inputRef = useRef();\n   const cellRef = useRef();\n   const panelRef = useRef();\n   const buttonRef = useRef();\n\n   const [inputRender, setInputRender] = useState(false);\n   const [valueInput, setValueInput] = useState({ current: cellData || '', init: cellData || '' });\n\n   const [btnShown, setBtnShown] = useState(false);\n   const [panelData, setPanelData] = useState(false);\n   const [btnDrawingShown, setBtnDrawingShown] = useState(false);\n\n   const cellDataTypeBtn = checkCellDataFormat(column.key, headerDataEntry, pageSheetTypeName);\n\n   const getCellTempId = () => `${rowData['id']}~#&&#~${column.key}`;\n\n   const cellEditDone = (value) => {\n      if (rowData._rowLevel === 1) {\n\n         let cellDrgTypeFormatArrText = [];\n         const parentNode = drawingTypeTree.find(x => x.id === rowData._parentRow);\n         if (parentNode && pageSheetTypeName === 'page-data-enrty-new') {\n            const tradeName = getTradeNameFnc(parentNode, drawingTypeTree);\n            if (tradeName.includes('(SUBCON)')) {\n               cellDrgTypeFormatArrText = ['Other'];\n            } else {\n               cellDrgTypeFormatArrText = cellDrgTypeFormat[tradeName];\n            };\n         };\n\n\n\n\n         if (\n            pageSheetTypeName === 'page-spreadsheet' && (\n               (cellDataTypeBtn === 'cell-type-date' && !(moment(value, 'DD/MM/YY').format('DD/MM/YY') === value) && value !== '') ||\n               (column.key === 'Status' && cellStatusFormat.indexOf(value) === -1 && value !== '') ||\n               (column.key === 'Use For' && cellUseForFormat.indexOf(value) === -1 && value !== '') ||\n               ((column.key === 'Model Progress' || column.key === 'Drawing Progress') && cellProgressFormatData.indexOf(value) === -1 && value !== '') ||\n               (column.key === 'Drg Type' && cellDrgTypeFormatArrText.indexOf(value) === -1 && value !== '')\n            )\n         ) {\n            setValueInput({ ...valueInput, current: valueInput.init });\n            message.info('Data input should be in correct format', 1);\n\n         } else if (\n            pageSheetTypeName === 'page-data-entry-new' && (\n               (headerDataEntry.type === 'date' && !(moment(value, 'DD/MM/YY').format('DD/MM/YY') === value) && value !== '') ||\n               (headerDataEntry.type === 'dropdown' && headerDataEntry.valueArray.indexOf(value) === -1 && value !== '')\n            )\n         ) {\n            setValueInput({ ...valueInput, current: valueInput.init });\n            message.info('Data input should be in correct format', 1);\n\n         } else if (pageSheetTypeName === 'page-data-entry-new' && headerDataEntry.type === 'checkbox') {\n            getCellModifiedTemp({ [getCellTempId()]: !value || value === 'unchecked' ? 'unchecked' : 'checked' });\n            \n            let row = rowsAll.find(r => r.id === rowData.id);\n\n            row[column.key] = value ? 'checked' : 'unchecked';\n            getSheetRows({ ...stateRow, rowsAll });\n\n         } else {\n\n            setValueInput({ ...valueInput, current: value });\n\n            getCellModifiedTemp({ [getCellTempId()]: value });\n            let row = rowsAll.find(r => r.id === rowData.id);\n            row[column.key] = value;\n\n            getSheetRows({ ...stateRow, rowsAll });\n         };\n      };\n   };\n\n\n   const onDoubleClick = () => {\n      if (pageSheetTypeName === 'page-data-entry-new' && headerDataEntry.type === 'checkbox') return;\n      if (isLockedColumn || isLockedRow) return;\n      setInputRender(true);\n      setBtnShown(false);\n      getCurrentDOMCell(); // double click to activate cell\n   };\n   const onClick = () => {\n      if (rowsSelected.length > 0 || rowsSelectedToMove.length > 0) {\n         getSheetRows({\n            ...stateRow, rowsSelected: [], rowsSelectedToMove: []\n         });\n      };\n      if (isLockedColumn || isLockedRow) return;\n\n\n      setBtnShown(true);\n      if (!inputRender) { // single click just highlight cell, not activate\n         setPosition({ cell: cellRef.current.parentElement, rowIndex, columnIndex });\n      };\n\n      if (rowsSelected.length > 0) {\n         getSheetRows({ ...stateRow, rowsSelected: [] });\n      };\n   };\n\n\n   useEffect(() => {\n      document.addEventListener('click', EventClickToHidePanelAndInput);\n      return () => document.removeEventListener('click', EventClickToHidePanelAndInput);\n   }, []);\n\n   const EventClickToHidePanelAndInput = (e) => {\n      if (!buttonRef.current && panelRef.current) {\n         setPanelData(false);\n      };\n   };\n\n\n   const onMouseLeave = () => {\n      if (btnShown) setBtnShown(false);\n      if (btnDrawingShown) setBtnDrawingShown(false);\n   };\n   const onMouseDown = (e) => {\n      if (e.button === 2) { // check mouse RIGHT CLICK ...\n         onRightClickCell(e, props);\n      } else {\n         if (isLockedColumn || isLockedRow) return;\n      };\n   };\n\n   const pickDataSelect = (type, value) => {\n      setBtnShown(false);\n      setPanelData(false);\n      setInputRender(false);\n      if (type === 'text') {\n         cellEditDone(value);\n      } else if (type === 'date') {\n         cellEditDone(moment(value).format('DD/MM/YY'));\n      } else if (type === 'div') {\n         cellEditDone(value.props.type);\n      };\n   };\n   const onBlur = () => {\n      cellEditDone(valueInput.current);\n      setBtnShown(false);\n      setPanelData(false);\n      setInputRender(false);\n   };\n   const onChange = (e) => {\n      setValueInput({ ...valueInput, current: e.target.value });\n   };\n\n   const [checkBoxValue, setCheckBoxValue] = useState(cellData);\n   const onChangeCheckBox = () => {\n      setCheckBoxValue(!checkBoxValue || checkBoxValue === 'unchecked' ? 'checked' : 'unchecked');\n      cellEditDone(!checkBoxValue || checkBoxValue === 'unchecked' ? 'checked' : 'unchecked');\n   };\n\n\n\n   useEffect(() => { // after keydown ENTER to show input ...\n      if (\n         !inputRender &&\n         stateCell.cellActive &&\n         stateCell.cellActive.rowIndex === rowIndex &&\n         stateCell.cellActive.columnIndex === columnIndex &&\n         !isLockedColumn && !isLockedRow\n      ) {\n         setInputRender(true);\n      };\n   }, [stateCell.cellActive]);\n\n   useEffect(() => {\n      if (\n         !inputRender &&\n         stateCell.cellAppliedAction &&\n         stateCell.cellAppliedAction.currentDOMCell.rowIndex === rowIndex &&\n         stateCell.cellAppliedAction.currentDOMCell.columnIndex === columnIndex &&\n         !isLockedColumn && !isLockedRow\n      ) {\n         const { e } = stateCell.cellAppliedAction;\n         if (e.key === 'Delete') {\n            cellEditDone('');\n         } else if (e.key === 'v' && e.ctrlKey) {\n            cellEditDone(stateCell.tempCopiedText);\n         };\n      };\n   }, [stateCell.cellAppliedAction]);\n\n   useEffect(() => { // FOCUS right after press ENTER...\n      if (inputRender) {\n         inputRef.current.focus();\n      };\n   }, [inputRender]);\n\n   useEffect(() => { // Hide Button after pick on PANEL (setBtnShown fasle in pickDataSelect doesn't work)\n      if (btnShown) {\n         setBtnShown(false);\n      };\n   }, [valueInput]);\n\n   const onKeyDown = (e) => { // ENTER to hide input after finishing typing ...\n      if (\n         e.key === 'Enter' &&\n         inputRender &&\n         stateCell.cellActive &&\n         stateCell.cellActive.rowIndex === rowIndex &&\n         stateCell.cellActive.columnIndex === columnIndex &&\n         !isLockedColumn && !isLockedRow\n      ) {\n         inputRef.current.blur();\n         setCellActive(null);\n      };\n   };\n\n\n\n\n   const cellStatusFormat = projectIsAppliedRfaView ? [\n      'Not Started',\n      '1st cut of model in-progress',\n      '1st cut of drawing in-progress',\n      'Pending design',\n   ] : [\n      'Not Started',\n      '1st cut of model in-progress',\n      '1st cut of drawing in-progress',\n      'Pending design',\n\n\n      'Consultant reviewing',\n      'Reject and resubmit',\n      'Approved with comments, to Resubmit',\n      'Revise In-Progress',\n      'Approved with Comment, no submission Required',\n      'Approved for Construction',\n   ];\n\n\n   return (\n      <>\n         <div\n            ref={cellRef}\n            onDoubleClick={onDoubleClick}\n            onClick={onClick}\n            onMouseLeave={onMouseLeave}\n            onMouseDown={onMouseDown}\n            onMouseEnter={() => setBtnDrawingShown(true)}\n            style={{\n               width: '100%', height: '100%', padding: 5, position: 'relative', color: 'black', background: 'transparent',\n               paddingLeft: 5,\n               overflow: !rowData.treeLevel && column.key === columnKeyToPutFolderName ? 'hidden' : 'visible' // fix bug frozen panel move to the left\n            }}\n         >\n            {rowData._rowLevel === 1 && cellDataTypeBtn === 'cell-type-checkbox' ? (\n               <CheckboxStyled\n                  onChange={onChangeCheckBox}\n                  checked={checkBoxValue === 'checked' ? true : false}\n               />\n            ) : (\n               <>\n                  {inputRender ? (\n                     <input\n                        value={valueInput.current}\n                        onChange={onChange}\n                        onBlur={onBlur}\n                        onKeyDown={onKeyDown}\n                        ref={inputRef}\n                        style={{\n                           outline: 'none',\n                           border: 'none',\n                           background: 'transparent',\n                           width: column.width - 30\n                        }}\n                     />\n\n                  ) : (\n                     <div style={{\n                        textOverflow: column.key === columnKeyToPutFolderName ? 'unset' : 'ellipsis',\n                        overflow: column.key === columnKeyToPutFolderName ? 'visible' : 'hidden',\n                        whiteSpace: 'nowrap',\n                        width: column.width - 30,\n                        color: (rowData['Status'] === 'Revise In-Progress' ? '#DAA520' : colorTextRow[rowData['Status']]) || 'black'\n                     }}>\n                        {\n                           ((column.key === 'Model Progress' || column.key === 'Drawing Progress') && <BtnProgress type={cellData} />) ||\n                           (\n                              columnKeyToPutFolderName && columnKeyToPutFolderName === column.key &&\n                              <><span style={{ fontWeight: 'bold' }}>{rowData.title}</span><span>{info}</span></>\n                           ) ||\n                           stateCell.cellsModifiedTemp[getCellTempId()] ||  // there is modified data\n                           (getCellTempId() in stateCell.cellsModifiedTemp && ' ') || // there is modified data === empty, MUST BE ' ', not ''\n                           cellData // there is no modification\n                        }\n                     </div>\n                  )}\n               </>\n            )}\n\n\n\n\n\n            {btnShown && !cellBtnDisabled(column.key, pageSheetTypeName, headerDataEntry) && (\n               <div\n                  style={{\n                     cursor: 'pointer', position: 'absolute',\n                     right: 4, top: 5, height: 17, width: 17,\n                     backgroundSize: 17,\n                     backgroundImage: cellDataTypeBtn === 'cell-type-date' ? `url(${imgLink.btnDate})`\n                        : cellDataTypeBtn === 'cell-type-text' ? `url(${imgLink.btnText})`\n                           : null\n                  }}\n                  onMouseDown={(e) => {\n                     e.stopPropagation();\n                     setPanelData(!panelData);\n                  }}\n                  ref={buttonRef}\n               />\n            )}\n\n\n            {panelData && (\n               <div style={{\n                  position: 'absolute', background: 'white', top: 30, left: 0, zIndex: 999,\n                  padding: '3px 5px 3px 7px',\n                  boxShadow: 'rgba(0, 0, 0, 0.09) 0px 2px 1px, rgba(0, 0, 0, 0.09) 0px 4px 2px, rgba(0, 0, 0, 0.09) 0px 8px 4px, rgba(0, 0, 0, 0.09) 0px 16px 8px, rgba(0, 0, 0, 0.09) 0px 32px 16px',\n                  minWidth: column.width,\n                  maxHeight: 400, overflowY: 'scroll',\n               }}\n                  ref={panelRef}\n               >\n                  {cellDataTypeBtn === 'cell-type-date' ? (\n                     <PanelCalendar pickDate={(item) => pickDataSelect('date', item)} />\n                  ) : getColumnsValue(rowsAll, column.key, { rowData, drawingTypeTree }, cellStatusFormat, headerDataEntry, pageSheetTypeName).map(item => {\n                     return (\n                        <SelectStyled\n                           key={(column.key === 'Drawing Progress' || column.key === 'Model Progress') ? item.key : item}\n                           onMouseDown={(e) => {\n                              e.stopPropagation();\n                              if (column.key === 'Drawing Progress' || column.key === 'Model Progress') {\n                                 pickDataSelect('div', item);\n                              } else {\n                                 pickDataSelect('text', item);\n                              };\n                           }}\n                        >{item}</SelectStyled>\n                     );\n                  })}\n               </div>\n            )}\n         </div>\n      </>\n   );\n};\n\nexport default Cell;\n\nconst SelectStyled = styled.div`\n   padding: 4px;\n   &:hover {\n      background-color: ${colorType.grey4};\n      cursor: pointer;\n   };\n   transition: 0.2s;\n`;\n\n\nconst BtnProgress = ({ type }) => {\n   const img = type === 'Empty' ? imgLink.btnProgress0 :\n      type === 'Quarter' ? imgLink.btnProgress1 :\n         type === 'Half' ? imgLink.btnProgress2 :\n            type === 'Third Quarter' ? imgLink.btnProgress3 :\n               type === 'Full' ? imgLink.btnProgress4 :\n                  null;\n\n   return (\n      <div style={{ display: 'flex', textAlign: 'center', width: '100%' }}>\n         <div style={{\n            cursor: 'pointer',\n            height: 20,\n            width: 20,\n            backgroundImage: `url(${img})`,\n            backgroundSize: 20,\n            padding: 0\n         }}\n         />\n      </div>\n   );\n};\nconst cellProgressFormat = [\n   <BtnProgress key='0' type='Empty' />,\n   <BtnProgress key='1' type='Quarter' />,\n   <BtnProgress key='2' type='Half' />,\n   <BtnProgress key='3' type='Third Quarter' />,\n   <BtnProgress key='4' type='Full' />,\n];\nconst cellProgressFormatData = [\n   'Empty', 'Quarter', 'Half', 'Third Quarter', 'Full'\n];\n\nconst checkCellDataFormat = (header, headerDataEntry, pageSheetTypeName) => {\n   if (pageSheetTypeName === 'page-data-entry-new') {\n      if (headerDataEntry.type === 'date') {\n         return 'cell-type-date';\n      } else if (headerDataEntry.type === 'dropdown') {\n         return 'cell-type-text';\n      } else if (headerDataEntry.type === 'checkbox') {\n         return 'cell-type-checkbox';\n      } else if (headerDataEntry.type === 'text') {\n         return 'cell-type-none';\n      };\n\n   } else {\n      if (\n         header.includes('(A)') ||\n         header.includes('(T)') ||\n         header === 'Construction Issuance Date' ||\n         header === 'Construction Start'\n      ) return 'cell-type-date';\n\n      else if (\n         header === 'Index' ||\n         header === 'Drawing Number' ||\n         header === 'Drawing Name'\n         // header === 'RFA Ref'\n      ) return 'cell-type-none';\n\n      else return 'cell-type-text';\n   };\n};\nconst cellBtnDisabled = (headerId, pageSheetTypeName, headerDataEntry) => {\n   if (pageSheetTypeName === 'page-data-entry-new') {\n      if (headerDataEntry.type === 'text' || headerDataEntry.type === 'checkbox') {\n         return true;\n      } else {\n         return false;\n      };\n   } else if (pageSheetTypeName === 'page-spreadsheet') {\n      if (headerId === 'Index' || headerId === 'Drawing Number' || headerId === 'Drawing Name') return true;\n   } else {\n      return true;\n   };\n};\nconst getColumnsValue = (rows, headerKey, drgTypeCheckData, cellStatusFormat, headerDataEntry, pageSheetTypeName) => {\n\n   if (pageSheetTypeName === 'page-data-entry-new' && headerDataEntry.type === 'dropdown') return headerDataEntry.valueArray;\n\n\n   if (headerKey === 'Status') return cellStatusFormat;\n   if (headerKey === 'Use For') return cellUseForFormat;\n   if (headerKey === 'Model Progress' || headerKey === 'Drawing Progress') return cellProgressFormat;\n\n\n   if (headerKey === 'Drg Type') {\n      const { rowData, drawingTypeTree } = drgTypeCheckData;\n      const parentNode = drawingTypeTree.find(x => x.id === rowData._parentRow);\n      const tradeName = getTradeNameFnc(parentNode, drawingTypeTree);\n\n      if (tradeName.includes('(SUBCON)')) {\n         return ['Other'];\n      } else {\n         return cellDrgTypeFormat[tradeName];\n      };\n   };\n\n\n   let valueArr = [];\n   rows.filter(r => r._rowLevel === 1).forEach(row => {\n      valueArr.push(row[headerKey]);\n   });\n   valueArr = [...new Set(valueArr)].filter(e => e);\n   valueArr.sort((a, b) => a > b ? 1 : (b > a ? -1 : 0));\n\n   return valueArr;\n};\n\n\n\n\nconst CheckboxStyled = styled(Checkbox)`\n   \n   .ant-checkbox-inner {\n      border-radius: 0;\n   };\n`;\n\nconst cellUseForFormat = [\n   'Coordination',\n   'Issue for Construction',\n   'Request for Approval',\n   'Request for Confirmation',\n];\n\nconst cellDrgTypeFormat = {\n   'ARCHI': [\n      'Key plan',\n      'Wall setting out',\n      'Column wall setting out',\n      'Tile layout & detail',\n      'Reflected celing plan',\n      'Finishing layout',\n      'Door layout',\n      'Core layout & detail',\n      'Toilet',\n      'Edeck layout & detail',\n      'Staircase layout & detail',\n      'Surface drain',\n      'Lift lobby/ corridor',\n      'Material schedule',\n      'Other'\n   ],\n   'C&S': [\n      'CBP',\n      'Piling layout',\n      'Rebar shop drawing',\n      'Temporary work'\n   ],\n   'M&E': [\n      'CSD',\n      'Penetration drawing',\n      'M&E trade shop drawing'\n   ],\n   'PRECAST': [\n      'Precast layout',\n      'Precast detail',\n      'Precast shop drawing'\n   ],\n};\n\nconst columnsLockedModeller = [\n   'Model Start (T)',\n   'Model Finish (T)',\n   'Drawing Start (T)',\n   'Drawing Finish (T)',\n   'Drg To Consultant (T)',\n   'Consultant Reply (T)',\n   'Get Approval (T)',\n   'Construction Issuance Date',\n   'Construction Start',\n];\n\nexport const columnLocked = (roleTradeCompany, rowData, modeGroup, column, projectIsAppliedRfaView, pageSheetTypeName) => {\n   if (\n      (projectIsAppliedRfaView && pageSheetTypeName === 'page-spreadsheet' && (\n         column === 'RFA Ref' ||\n         column === 'Drg To Consultant (A)' ||\n         column === 'Rev' ||\n         column === 'Consultant Reply (T)' ||\n         column === 'Consultant Reply (A)'\n      )) ||\n      (isColumnWithReplyData(column)) ||\n      (rowData && !rowData._rowLevel) || // lock drawing type ...\n      (modeGroup && modeGroup.length > 0) ||\n      (roleTradeCompany.role === 'Modeller' && columnsLockedModeller.includes(column)) ||\n      (roleTradeCompany.role === 'View-Only User') ||\n      (roleTradeCompany.role === 'Production' && column !== 'Construction Start')\n   ) {\n      return true;\n   } else {\n      return false;\n   };\n};\nexport const rowLocked = (roleTradeCompany, rowData, modeGroup, drawingTypeTree) => {\n   if (!rowData._rowLevel || rowData._rowLevel < 1) return true;\n\n   if (modeGroup.length > 0) return true;\n\n   if (roleTradeCompany.role === 'Document Controller') return false;\n\n\n   const drawingTypeTreeClone = drawingTypeTree.map(x => ({ ...x }));\n   const dwgType = drawingTypeTreeClone.find(x => x.id === rowData._parentRow);\n\n   let companyName;\n   if (dwgType.treeLevel >= 1) {\n      companyName = getCompanyNameFnc(dwgType, drawingTypeTreeClone);\n   };\n\n   if (roleTradeCompany.role === 'Production' && companyName === 'Woh Hup Private Ltd') return false;\n\n   let tradeName;\n   if (companyName === 'Woh Hup Private Ltd' && dwgType.treeLevel >= 2) {\n      tradeName = getTradeNameFnc(dwgType, drawingTypeTreeClone);\n      return companyName !== roleTradeCompany.company || tradeName !== roleTradeCompany.trade;\n   } else {\n      return companyName !== roleTradeCompany.company;\n   };\n};\n\n\n\n","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\pageSpreadsheet\\ButtonAdminUploadDataPDD.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\pageSpreadsheet\\FormDrawingTypeOrder.js",["379"],"import { Icon, Input, Modal, Tooltip } from 'antd';\nimport React, { useContext, useState } from 'react';\nimport { DraggableArea } from 'react-draggable-tags';\nimport SortableTree from 'react-sortable-tree';\nimport 'react-sortable-tree/style.css';\nimport styled from 'styled-components';\nimport { colorType } from '../../constants';\nimport { Context as ProjectContext } from '../../contexts/projectContext';\nimport { Context as RowContext } from '../../contexts/rowContext';\nimport { mongoObjectId } from '../../utils';\nimport ButtonColumnTag from '../generalComponents/ButtonColumnTag';\nimport ButtonGroupComp from '../generalComponents/ButtonGroupComp';\n\n\n\nconst FormDrawingTypeOrder = ({ onClickCancelModal, applyFolderOrganize }) => {\n\n   const { state: stateProject } = useContext(ProjectContext);\n   const { state: stateRow } = useContext(RowContext);\n\n   const { rowsAll } = stateRow;\n\n   const { companies, projectName, roleTradeCompany } = stateProject.allDataOneSheet;\n   const { drawingTypeTree, viewTemplateNodeId } = stateRow;\n\n   const [input, setInput] = useState(addProjectHeaderToTree(drawingTypeTree, projectName));\n\n   const [tradeAndCompanyAndType, setTradeAndCompanyAndType] = useState(null);\n   const [modalTitle, setModalTitle] = useState(null);\n   const [itemNode, setItemNode] = useState(null);\n   const [mergeList, setMergeList] = useState([]);\n\n\n   const onClickApplyTradeOrCompany = ({ node, itemsAdded }) => {\n      itemsAdded.forEach(item => {\n         node.children.push({\n            title: item,\n            id: mongoObjectId(),\n            parentId: node.id,\n            treeLevel: node.treeLevel + 1,\n            expanded: true,\n            children: [],\n         });\n      });\n      setInput(addProjectHeaderToTree(flattenAllTreeChildNode1(input[0].children), projectName));\n      setTradeAndCompanyAndType(null);\n   };\n   const addFolderBelow = (node) => {\n      const arrSubcon = ['ARCHI (SUBCON)', 'C&S (SUBCON)', 'M&E (SUBCON)', 'PRECAST (SUBCON)'];\n      if (node.treeLevel === 2 && arrSubcon.indexOf(node.title) !== -1) {\n         let nodeTitle = node.title;\n         const trade = nodeTitle.slice(0, nodeTitle.length - 9);\n         const listCompany = companies.filter(x => x.companyType === 'Sub-con' && x.trade === trade);\n         setTradeAndCompanyAndType({ node, dataTreeArray: listCompany.map(x => x.company) });\n\n      } else {\n         node.children.push({\n            title: 'New Drawing Type',\n            id: mongoObjectId(),\n            parentId: node.id,\n            treeLevel: node.treeLevel + 1,\n            expanded: true,\n            children: []\n         });\n         setInput(addProjectHeaderToTree(flattenAllTreeChildNode1(input[0].children), projectName));\n         setTradeAndCompanyAndType(null);\n      };\n   };\n   const deleteFolder = (node) => {\n      setItemNode(node);\n      setModalTitle('Delete Drawing Type');\n   };\n   const editFolderName = (node) => {\n      setItemNode(node);\n      setModalTitle('Edit Drawing Type Name');\n   };\n   const mergeChildDrawings = (node) => {\n      setItemNode(node);\n      setModalTitle('Merge All Child Drawings');\n   };\n   const confirmAction = (modalTitle, text) => {\n      if (modalTitle === 'Delete Drawing Type') {\n         let idsToDelete = flattenAllTreeChildNode1(itemNode.children).map(x => x.id);\n         idsToDelete.push(itemNode.id);\n\n         let currentNodeFlatten = flattenAllTreeChildNode1(input[0].children);\n         let outputArray = currentNodeFlatten.filter(x => idsToDelete.indexOf(x.id) === -1);\n         setInput(addProjectHeaderToTree(outputArray, projectName));\n\n      } else if (modalTitle === 'Merge All Child Drawings') {\n         let idsToMerge = flattenAllTreeChildNode1(itemNode.children).map(x => x.id);\n         let mergeListUpdate = [...mergeList];\n         idsToMerge.forEach(id => {\n            if (mergeList.indexOf(id) !== -1) {\n               mergeListUpdate = mergeListUpdate.filter(x => x !== id);\n            };\n         });\n         setMergeList([...mergeListUpdate, itemNode.id]);\n\n         let currentNodeFlatten = flattenAllTreeChildNode1(input[0].children);\n         let outputArray = currentNodeFlatten.filter(x => idsToMerge.indexOf(x.id) === -1);\n\n         setInput(addProjectHeaderToTree(outputArray, projectName));\n\n      } else if (modalTitle === 'Edit Drawing Type Name') {\n         itemNode.title = text;\n         setInput(addProjectHeaderToTree(flattenAllTreeChildNode1(input[0].children), projectName));\n      };\n      setTradeAndCompanyAndType(null);\n      setModalTitle(null);\n   };\n\n   const isDocumentController = roleTradeCompany.role === 'Document Controller' && roleTradeCompany.company === 'Woh Hup Private Ltd';\n   const treeFlatten = flattenAllTreeChildNode1(input);\n\n   let eyeShownInit;\n   if (viewTemplateNodeId) {\n      const nodeTreeFound = treeFlatten.find(x => x.id === viewTemplateNodeId);\n      if (nodeTreeFound) {\n         const br = getTreeFlattenOfNodeInArray(treeFlatten, nodeTreeFound);\n         eyeShownInit = br.map(x => x.id);\n      };\n   };\n   const [iconBtnEyeShownArr, setIconBtnEyeShownArr] = useState(eyeShownInit || []);\n   const [nodeIsolated, setNodeIsolated] = useState(viewTemplateNodeId || null);\n   const isolateView = (node) => {\n      setNodeIsolated(node.id);\n      const nodeFound = treeFlatten.find(x => x.id === node.id);\n      const branch = getTreeFlattenOfNodeInArray(treeFlatten, nodeFound);\n      setIconBtnEyeShownArr(branch.map(x => x.id));\n   };\n\n   return (\n      <Container>\n         <PanelStyled>\n            <SortableTreeStyled\n               treeData={input}\n               onChange={treeData => setInput(treeData)}\n               isVirtualized={false}\n               onMoveNode={({ nextParentNode, node }) => {\n                  updateChildrenNode([node], nextParentNode.treeLevel + 1 - node.treeLevel);\n               }}\n\n               canDrag={({ node }) => {\n                  const treeNode = treeFlatten.find(x => x.id === node.id);\n\n                  let companyNode;\n                  if (node.treeLevel >= 1) {\n                     companyNode = getCompanyNameFnc(treeNode, treeFlatten);\n                  };\n\n                  let tradeNode;\n                  if (node.treeLevel >= 2) {\n                     tradeNode = getTradeNameFnc(treeNode, treeFlatten);\n                  };\n\n                  let tradeSubconNode;\n                  if (node.treeLevel >= 3) {\n                     tradeSubconNode = getCompanySubconNameFnc(treeNode, treeFlatten);\n                  };\n\n                  if (\n                     (node.treeLevel >= 3 && isDocumentController) ||\n                     (\n                        node.treeLevel >= 3 &&\n                        roleTradeCompany.role === 'Coordinator' &&\n                        roleTradeCompany.company === 'Woh Hup Private Ltd' &&\n                        companyNode === roleTradeCompany.company &&\n                        tradeNode === roleTradeCompany.trade\n                     ) ||\n                     (\n                        node.treeLevel >= 4 &&\n                        companyNode === 'SUBCON' &&\n                        tradeSubconNode === roleTradeCompany.company\n                     )\n                  ) {\n                     return true;\n                  };\n                  return false;\n               }}\n               canDrop={(props) => {\n                  const { prevParent, nextParent } = props;\n\n                  if (\n                     !prevParent ||\n                     !nextParent ||\n                     (prevParent && nextParent && prevParent.treeLevel !== nextParent.treeLevel)\n                  ) {\n                     return false;\n                  };\n\n                  let companyNodePrevParent, companyNodeNextParent;\n\n                  const nodePrevParentInTree = treeFlatten.find(x => x.id === prevParent.id);\n                  const nodeNextParentInTree = treeFlatten.find(x => x.id === nextParent.id);\n\n                  if (nodePrevParentInTree && nodeNextParentInTree) {\n                     companyNodePrevParent = getCompanyNameFnc(nodePrevParentInTree, treeFlatten);\n                     companyNodeNextParent = getCompanyNameFnc(nodeNextParentInTree, treeFlatten);\n                  };\n\n                  if (\n                     (companyNodePrevParent === 'Woh Hup Private Ltd' && companyNodeNextParent !== 'Woh Hup Private Ltd') ||\n                     (companyNodePrevParent === 'SUBCON' && companyNodeNextParent !== 'SUBCON')\n                  ) {\n                     return false;\n                  } else if (companyNodePrevParent === 'SUBCON' && companyNodePrevParent === companyNodeNextParent) {\n                     const subconTradePrevText = nodePrevParentInTree.title.slice(0, nodePrevParentInTree.title.length - 9);\n                     const subconTradeNextText = nodeNextParentInTree.title.slice(0, nodeNextParentInTree.title.length - 9);\n                     if (subconTradePrevText !== subconTradeNextText) {\n                        return false;\n                     };\n                  };\n                  return true;\n               }}\n               generateNodeProps={(props) => {\n\n                  const { node } = props;\n                  const treeNode = treeFlatten.find(x => x.id === node.id);\n\n                  let companyNode;\n                  if (node.treeLevel >= 1) {\n                     companyNode = getCompanyNameFnc(treeNode, treeFlatten);\n                  };\n\n                  let tradeNode;\n                  if (node.treeLevel >= 2) {\n                     tradeNode = getTradeNameFnc(treeNode, treeFlatten);\n                  };\n                  let tradeSubconNode;\n                  if (node.treeLevel >= 3) {\n                     tradeSubconNode = getCompanySubconNameFnc(treeNode, treeFlatten);\n                  };\n\n                  const isEyeShownColor = iconBtnEyeShownArr.indexOf(node.id) !== -1 ? 'black' : '#DCDCDC';\n                  const isEyeShownType = iconBtnEyeShownArr.indexOf(node.id) !== -1 ? 'eye' : 'eye-invisible';\n\n                  return ({\n                     className: 'xxx-xxx-xxx',\n\n                     buttons:\n                        (isDocumentController && node.treeLevel === 2) ? [\n                           <IconBtn type='plus' onClick={() => addFolderBelow(node)} />,\n                           companyNode === 'Woh Hup Private Ltd' && node.children.length > 0 && <IconBtn type='shrink' onClick={() => mergeChildDrawings(node)} />,\n                           <IconBtn type={isEyeShownType} onClick={() => isolateView(node)} color={isEyeShownColor} />\n\n                        ] : (isDocumentController && node.treeLevel === 3) ? [\n                           <IconBtn type='plus' onClick={() => addFolderBelow(node)} />,\n                           companyNode === 'Woh Hup Private Ltd' && <IconBtn type='edit' onClick={() => editFolderName(node)} />,\n                           <IconBtn type='delete' onClick={() => deleteFolder(node)} />,\n                           node.children.length > 0 && <IconBtn type='shrink' onClick={() => mergeChildDrawings(node)} />,\n                           <IconBtn type={isEyeShownType} onClick={() => isolateView(node)} color={isEyeShownColor} />\n\n                        ] : (isDocumentController && node.treeLevel >= 4) ? [\n                           <IconBtn type='plus' onClick={() => addFolderBelow(node)} />,\n                           <IconBtn type='edit' onClick={() => editFolderName(node)} />,\n                           <IconBtn type='delete' onClick={() => deleteFolder(node)} />,\n                           node.children.length > 0 && <IconBtn type='shrink' onClick={() => mergeChildDrawings(node)} />,\n                           <IconBtn type={isEyeShownType} onClick={() => isolateView(node)} color={isEyeShownColor} />\n\n\n                        ] : (\n                           roleTradeCompany.role === 'Coordinator' &&\n                           node.treeLevel === 2 &&\n                           companyNode === 'Woh Hup Private Ltd' &&\n                           companyNode === roleTradeCompany.company &&\n                           tradeNode === roleTradeCompany.trade\n                        ) ? [\n                           <IconBtn type='plus' onClick={() => addFolderBelow(node)} />,\n                           node.children.length > 0 && <IconBtn type='shrink' onClick={() => mergeChildDrawings(node)} />,\n                           <IconBtn type={isEyeShownType} onClick={() => isolateView(node)} color={isEyeShownColor} />\n                        ] : (\n                           roleTradeCompany.role === 'Coordinator' &&\n                           node.treeLevel >= 3 &&\n                           companyNode === 'Woh Hup Private Ltd' &&\n                           companyNode === roleTradeCompany.company &&\n                           tradeNode === roleTradeCompany.trade\n                        ) ? [\n                           <IconBtn type='plus' onClick={() => addFolderBelow(node)} />,\n                           <IconBtn type='edit' onClick={() => editFolderName(node)} />,\n                           <IconBtn type='delete' onClick={() => deleteFolder(node)} />,\n                           node.children.length > 0 && <IconBtn type='shrink' onClick={() => mergeChildDrawings(node)} />,\n                           <IconBtn type={isEyeShownType} onClick={() => isolateView(node)} color={isEyeShownColor} />\n\n                        ] : (\n                           companyNode === 'SUBCON' &&\n                           tradeSubconNode === roleTradeCompany.company &&\n                           node.treeLevel >= 3\n                        ) ? [\n                           <IconBtn type='plus' onClick={() => addFolderBelow(node)} />,\n                           node.treeLevel > 3 && <IconBtn type='edit' onClick={() => editFolderName(node)} />,\n                           node.treeLevel > 3 && <IconBtn type='delete' onClick={() => deleteFolder(node)} />,\n                           node.children.length > 0 && <IconBtn type='shrink' onClick={() => mergeChildDrawings(node)} />,\n                           <IconBtn type={isEyeShownType} onClick={() => isolateView(node)} color={isEyeShownColor} />\n\n\n                        ] : [\n                           <IconBtn type='eye' onClick={() => isolateView(node)} color={isEyeShownColor} />\n                        ]\n                  });\n               }}\n            />\n         </PanelStyled>\n\n         <div style={{ padding: 20, display: 'flex', flexDirection: 'row-reverse' }}>\n            <ButtonGroupComp\n               onClickCancel={onClickCancelModal}\n               onClickApply={() => applyFolderOrganize(input[0].children, mergeList, nodeIsolated)} // remove projectName item before apply...\n            />\n         </div>\n\n\n\n         {modalTitle && (\n            <ModalStyledSetting\n               title={modalTitle}\n               visible={modalTitle !== null ? true : false}\n               footer={null}\n               onCancel={() => setModalTitle(null)}\n               destroyOnClose={true}\n               centered={true}\n               width={window.innerWidth * 0.6}\n            >\n               <ConfirmOrEditNameModal\n                  modalTitle={modalTitle}\n                  confirmAction={confirmAction}\n                  itemNode={itemNode}\n                  input={input}\n                  rowsAll={rowsAll}\n                  onClickCancel={() => setModalTitle(null)}\n               />\n            </ModalStyledSetting>\n         )}\n\n\n         {tradeAndCompanyAndType && (\n            <ModalStyledSetting\n               title={modalTitle}\n               visible={tradeAndCompanyAndType !== null ? true : false}\n               footer={null}\n               onCancel={() => setTradeAndCompanyAndType(null)}\n               destroyOnClose={true}\n               centered={true}\n               width={window.innerWidth * 0.6}\n            >\n               <RearrangeItemsForm\n                  tradeAndCompanyAndType={tradeAndCompanyAndType}\n                  onClickApplyTradeOrCompany={onClickApplyTradeOrCompany}\n                  onClickCancel={() => setTradeAndCompanyAndType(null)}\n               />\n            </ModalStyledSetting>\n         )}\n      </Container>\n   );\n};\n\nexport default FormDrawingTypeOrder;\n\n\nconst SortableTreeStyled = styled(SortableTree)`\n   .xxx-xxx-xxx {\n\n   }\n   .rst__node {\n      height: 45px !important;\n   }\n   .rst__rowContents {\n      min-width: fit-content;\n      background-color: transparent !important;\n   }\n`;\nconst IconStyle = styled(Icon)`\n   font-size: 14px;\n   margin: 2px;\n   padding: 4px;\n   &:hover {\n      background-color: ${colorType.grey0};\n   };\n`;\nconst ModalStyledSetting = styled(Modal)`\n    .ant-modal-content {\n        border-radius: 0;\n    }\n   .ant-modal-close {\n      display: none;\n   }\n   .ant-modal-header {\n      padding: 10px;\n   }\n   .ant-modal-title {\n        padding-left: 10px;\n        font-size: 20px;\n        font-weight: bold;\n   }\n   .ant-modal-body {\n      padding: 0;\n      display: flex;\n      justify-content: center;\n   }\n`;\nconst Container = styled.div`\n   max-height: ${`${window.innerHeight * 0.8}` + 'px'};\n   width: 100%;\n   display: flex;\n   flex-direction: column;\n`;\nconst PanelStyled = styled.div`\n   width: 100%;\n   float: right;\n   overflow-x: hidden;\n   border-bottom: 1px solid ${colorType.grey4};\n`;\n\nconst IconBtn = ({ type, onClick, color }) => {\n   const text = type === 'plus' ? 'Add Sub Drawing Type'\n      : type === 'delete' ? 'Delete Drawing Type'\n         : type === 'edit' ? 'Edit Name'\n            : type === 'eye' ? 'Isolate View'\n               : type === 'eye-invisible' ? 'Isolate View'\n                  : 'Merge All Sub Drawing Type'\n\n   return (\n      <Tooltip title={text}>\n         <IconStyle type={type} onClick={onClick} style={{ color: color || 'black' }} />\n      </Tooltip>\n   );\n};\nconst RearrangeItemsForm = ({ tradeAndCompanyAndType, onClickApplyTradeOrCompany, onClickCancel }) => {\n\n   const { dataTreeArray, node } = tradeAndCompanyAndType;\n   const onClickApply = () => {\n      let itemsAdded = tags.filter(x => x.mode === 'shown').map(x => x.header);\n      onClickApplyTradeOrCompany({ node, itemsAdded });\n   };\n\n   const setMode = (obj) => {\n      tags.forEach(tg => {\n         if (tg.header === obj.header) tg.mode = obj.mode;\n      });\n   };\n\n   const getTags = () => {\n      const arrItem = node.children.map(x => x.title);\n      const items = dataTreeArray.filter(x => arrItem.indexOf(x) === -1);\n\n      let arr = [];\n      items.forEach((header, index) => {\n         arr.push({ id: index, header, mode: 'hidden' });\n      });\n      return arr;\n   };\n\n   const [tags, setTags] = useState(getTags());\n\n   return (\n      <div style={{ width: '100%', height: '100%' }}>\n         <PanelItemsStyled>\n            <div style={{ fontSize: 11, paddingLeft: 20 }}>Click to add items</div>\n            <div style={{ width: '100%', paddingTop: 20 }}>\n               <DraggableArea\n                  isList\n                  tags={tags}\n                  render={({ tag }) => <ButtonColumnTag tag={tag} setMode={setMode} actionType='rearrange-drawing-type-tree-action' />}\n                  onChange={(tags) => setTags(tags)}\n               />\n            </div>\n         </PanelItemsStyled>\n         <div style={{ padding: 20, display: 'flex', flexDirection: 'row-reverse' }}>\n            <ButtonGroupComp\n               onClickCancel={onClickCancel}\n               onClickApply={onClickApply}\n            />\n         </div>\n      </div>\n   );\n};\nconst PanelItemsStyled = styled.div`\n   height: 60vh;\n   width: 100%;\n   overflow-y: scroll;\n   overflow-x: hidden;\n   border-bottom: 1px solid ${colorType.grey4};\n`;\nconst ConfirmOrEditNameModal = ({ modalTitle, confirmAction, itemNode, input, rowsAll, onClickCancel }) => {\n\n   let dwgsToWarn = [];\n   if (modalTitle === 'Delete Drawing Type') {\n      const currentTree = flattenAllTreeChildNode1(input[0].children);\n      const currentTreeNode = currentTree.find(x => x.id === itemNode.id);\n      const nodeArray = getTreeFlattenOfNodeInArray(currentTree, currentTreeNode);\n      nodeArray.forEach(nd => {\n         dwgsToWarn = [...dwgsToWarn, ...rowsAll.filter(x => x._parentRow === nd.id)];\n      });\n   };\n\n\n   const [value, setValue] = useState(null);\n   const onClickApplyModal = () => {\n      if (modalTitle === 'Delete Drawing Type') {\n         confirmAction(modalTitle);\n      } else if (modalTitle === 'Edit Drawing Type Name') {\n         confirmAction(modalTitle, value);\n      } else if (modalTitle === 'Merge All Child Drawings') {\n         confirmAction(modalTitle);\n      };\n   };\n\n   return (\n      <div style={{ padding: 20, width: '100%', maxHeight: window.innerHeight * 0.7 }}>\n         {modalTitle === 'Delete Drawing Type' ? (\n            <div>\n               <div>Are you sure to delete the drawing type <span style={{ fontWeight: 'bold' }}>{itemNode.title}</span>?</div>\n               <div>All the following <span style={{ fontWeight: 'bold' }}>{dwgsToWarn.length}</span> drawings will be deleted accordingly:</div>\n               <br />\n               <div style={{ maxHeight: 300, overflowY: 'scroll' }}>\n                  {dwgsToWarn.map((dr, i) => (\n                     <div key={i}>({i + 1}) - {dr['Drawing Number']} - {dr['Drawing Name']}</div>\n                  ))}\n               </div>\n            </div>\n         ) : modalTitle === 'Merge All Child Drawings' ? (\n            <div>Are you sure to delete all sub folders and retains all drawings</div>\n         ) : (\n            <Input\n               placeholder='Enter new name...'\n               style={{ width: '100%' }}\n               value={value || itemNode.title}\n               onChange={(e) => setValue(e.target.value)}\n            />\n         )}\n\n         <div style={{ padding: 20, display: 'flex', flexDirection: 'row-reverse' }}>\n            <ButtonGroupComp\n               onClickCancel={onClickCancel}\n               onClickApply={onClickApplyModal}\n            />\n         </div>\n      </div>\n   );\n};\n\n\n\n\nexport const getCompanyNameFnc = (dwgType, drawingTypeTreeClone) => {\n   if (dwgType.treeLevel === 1) return dwgType.title;\n   let result;\n   const getCompanyFnc = (dwgType, drawingTypeTreeClone) => {\n      const parent = drawingTypeTreeClone.find(x => x.id === dwgType.parentId);\n      if (parent.treeLevel === 1) {\n         result = parent.title;\n      } else {\n         getCompanyFnc(parent, drawingTypeTreeClone);\n      };\n      return result;\n   };\n   getCompanyFnc(dwgType, drawingTypeTreeClone);\n   return result;\n};\nexport const getCompanySubconNameFnc = (dwgType, drawingTypeTreeClone) => {\n   if (dwgType.treeLevel === 3) return dwgType.title;\n   let result;\n   const getCompanyFnc = (dwgType, drawingTypeTreeClone) => {\n      const parent = drawingTypeTreeClone.find(x => x.id === dwgType.parentId);\n      if (parent.treeLevel === 3) {\n         result = parent.title;\n      } else {\n         getCompanyFnc(parent, drawingTypeTreeClone);\n      };\n      return result;\n   };\n   getCompanyFnc(dwgType, drawingTypeTreeClone);\n   return result;\n};\nexport const getTradeNameFnc = (dwgType, drawingTypeTreeClone) => {\n   const tree = drawingTypeTreeClone.filter(x => x.treeLevel !== 1);\n   if (dwgType.treeLevel === 2) return dwgType.title;\n   let result;\n   const getTradeFnc = (dwgType, dwgTypeTree) => {\n      const parent = dwgTypeTree.find(x => x.id === dwgType.parentId);\n      if (parent.treeLevel === 2) {\n         result = parent.title;\n      } else {\n         getTradeFnc(parent, dwgTypeTree);\n      };\n      return result;\n   };\n   getTradeFnc(dwgType, tree);\n   return result;\n};\n\n\n\nexport const flattenAllTreeChildNode1 = (root) => {\n   let temp = [];\n   let queue = [...root];\n   while (queue.length > 0) {\n      let node = queue.shift();\n      if (node.children) {\n         let childNode = [];\n         node.children.forEach(nd => {\n            childNode.push({ ...nd, parentId: node.id });\n         });\n         queue = [...queue, ...childNode];\n         let nodeObj = { ...node };\n         delete nodeObj.children;\n         temp.push(nodeObj);\n      } else {\n         let nodeObj = { ...node };\n         delete nodeObj.children;\n         temp.push(nodeObj);\n      };\n   };\n   return temp;\n};\nexport const convertFlattenArraytoTree1 = (list) => {\n   let map = {}, node, roots = [], i;\n   for (i = 0; i < list.length; i += 1) {\n      map[list[i].id] = i;\n      if (list[i]._rowLevel !== 1) {\n         list[i].children = list[i].children || [];\n      };\n   };\n\n   let arrayOfTreeLevel = [];\n   list.forEach(tr => {\n      arrayOfTreeLevel.push(tr.treeLevel);\n   });\n   const treeLevelOfTopTree = Math.min(...arrayOfTreeLevel);\n\n   for (i = 0; i < list.length; i++) {\n      node = list[i];\n      if (node.treeLevel > treeLevelOfTopTree) {\n         list[map[node.parentId]].children.push(node);\n      } else {\n         roots.push(node);\n      };\n   };\n   return roots;\n};\nconst addProjectHeaderToTree = (tree, projectName) => {\n   return [{\n      title: projectName,\n      id: 'node-project-level-sheet-id',\n      treeLevel: 0,\n      expanded: true,\n      children: convertFlattenArraytoTree1(tree.map(x => ({ ...x })))\n   }];\n};\nconst updateChildrenNode = (arr, n) => {\n   arr.forEach(i => {\n      i.treeLevel = i.treeLevel + n;\n      if (i.children.length > 0) {\n         updateChildrenNode(i.children, n);\n      };\n   });\n};\nconst updateChildrenNodeTreeLevel = (arr) => {\n   arr.forEach(i => {\n      let childrenArr = i.children;\n      if (childrenArr && childrenArr.length > 0) {\n         childrenArr.forEach(ch => {\n            ch.treeLevel = i.treeLevel + 1;\n         });\n         updateChildrenNodeTreeLevel(childrenArr);\n      };\n   });\n};\nconst getListOfBranchesTree = (inputArr) => {\n   const arr = inputArr.map(x => ({ ...x }));\n   arr.sort((a, b) => { return b.treeLevel - a.treeLevel });\n\n   const parentArrIds = [];\n   arr.forEach(x => {\n      let item = arr.find(fld => fld.id === x.parentId);\n      if (item) {\n         item.children = [...item.children || [], x];\n      } else {\n         parentArrIds.push(x.id);\n      };\n   });\n   return arr.filter(x => parentArrIds.indexOf(x.id) !== -1);\n};\nexport const getTreeFlattenOfNodeInArray = (treeArray, node) => {\n   let obj = { ...node };\n   let arrayTree = treeArray.map(x => ({ ...x })).filter(x => x.treeLevel > obj.treeLevel);\n   arrayTree = [...arrayTree, obj];\n   const treeOfFound = getListOfBranchesTree(arrayTree).find(x => x.id === obj.id);\n   return flattenAllTreeChildNode1([treeOfFound]);\n};\nexport const compareCurrentTreeAndTreeFromDB = (treeFromCurrentInit, treeFromCurrentInput, treeDeletedFromCurrent, treeFromDBInput, treeDeletedFromDB) => {\n\n   let treeFromCurrent = treeFromCurrentInput.map(i => ({ ...i }));\n   let treeFromDB = treeFromDBInput.map(i => ({ ...i }));\n\n   // check if need to save tree or not\n   if (treeFromCurrent.length === treeFromCurrentInit.length) {\n      const stringTreeCurrent = treeFromCurrent.reduce((acc, current) => acc + `${current.id}-${current.parentId}-${current.title}-`, '');\n      const stringTreeInit = treeFromCurrentInit.reduce((acc, current) => acc + `${current.id}-${current.parentId}-${current.title}-`, '');\n      if (stringTreeCurrent === stringTreeInit) {\n         return {\n            needToSaveTree: false,\n            treeDBModifiedToSave: treeFromDB,\n            nodesToAddToDB: [],\n            nodesToRemoveFromDB: [],\n         };\n      };\n   };\n\n   let treeCurrentModified = removeNodesDeletedByOtherUsersFromTreeCurrent(treeFromCurrent, treeDeletedFromDB);\n\n   let { nodesToRemoveFromDB, treeFromDB: treeFromDBModified, nodesIdNoNeedToAddNew } = removeNodesDeletedByCurrentUserFromTreeDB(treeFromDB, treeDeletedFromCurrent, treeCurrentModified);\n\n   let { nodesToAddToDB, treeDBModifiedToSave: treeDBModified } = haveChangedNodesInDBAndNewNodesInCurrentBackToDB(treeFromDBModified, treeCurrentModified, treeFromCurrentInit, nodesIdNoNeedToAddNew);\n\n\n\n   // reorder item follow new order...\n   let treeDBModifiedToSave = [];\n   treeFromCurrentInput.forEach(item => {\n      const found = treeDBModified.find(x => x.id === item.id);\n      if (found) {\n         treeDBModifiedToSave.push(found);\n         treeDBModified = treeDBModified.filter(x => x.id !== found.id);\n      };\n   });\n   treeDBModifiedToSave = [...treeDBModifiedToSave, ...treeDBModified].sort((a, b) => { return a.treeLevel - b.treeLevel });\n\n   return {\n      needToSaveTree: true,\n      treeDBModifiedToSave,\n      nodesToAddToDB,\n      nodesToRemoveFromDB,\n   };\n};\nconst removeNodesDeletedByOtherUsersFromTreeCurrent = (treeCurrent, treeDeletedFromDB) => {\n   let idsToCheckCurrent = [];\n   treeDeletedFromDB.forEach(item => {\n      const found = treeCurrent.find(x => x.id === item.id);\n      if (found) {\n         idsToCheckCurrent = [\n            ...idsToCheckCurrent,\n            ...getTreeFlattenOfNodeInArray(treeCurrent, found).map(x => x.id)\n         ];\n      };\n   });\n   idsToCheckCurrent = [...new Set(idsToCheckCurrent)];\n\n   const nodesArray = treeCurrent.filter(x => idsToCheckCurrent.indexOf(x.id) !== -1);\n\n   const branchTrees = getListOfBranchesTree(nodesArray);\n\n   const newIdObj = {};\n   treeDeletedFromDB.forEach(item => {\n      newIdObj[item.id] = mongoObjectId();\n   });\n\n   branchTrees.forEach(tree => {\n      let flattenArray = flattenAllTreeChildNode1([tree]);\n      let isAbleToDelete = true;\n\n      flattenArray.forEach(item => {\n         if (!treeDeletedFromDB.find(x => x.id === item.id)) isAbleToDelete = false;\n      });\n\n      if (isAbleToDelete) {\n         treeCurrent = treeCurrent.filter(x => !flattenArray.find(item => item.id === x.id));\n      } else {\n         const arrayToModify = treeCurrent.filter(item => flattenArray.find(x => x.id === item.id));\n         treeDeletedFromDB.forEach(item => {\n            const found = arrayToModify.find(x => x.id === item.id);\n            if (found) {\n               found.id = newIdObj[item.id];\n            };\n            const childrenFound = arrayToModify.filter(x => x.parentId === item.id);\n            if (childrenFound.length > 0) {\n               childrenFound.forEach(child => {\n                  child.parentId = newIdObj[item.id];\n               });\n            };\n         });\n      };\n   });\n   return treeCurrent;\n};\nconst removeNodesDeletedByCurrentUserFromTreeDB = (treeFromDB, treeDeletedFromCurrent, treeCurrent) => {\n   let listIdToRemoveFromDB = [];\n   treeDeletedFromCurrent.forEach(item => {\n      const found = treeFromDB.find(x => x.id === item.id);\n      if (found) {\n         listIdToRemoveFromDB = [\n            ...listIdToRemoveFromDB,\n            ...getTreeFlattenOfNodeInArray(treeFromDB, found).map(x => x.id)\n         ];\n      };\n   });\n\n   const nodesToRemoveFromDB = treeFromDB.filter(x => {\n      return listIdToRemoveFromDB.indexOf(x.id) !== -1 && !treeCurrent.find(item => item.id === x.id);\n   });\n   const nodesIdNoNeedToAddNew = listIdToRemoveFromDB.filter(id => treeCurrent.find(item => item.id === id))\n\n   treeFromDB = treeFromDB.filter(x => listIdToRemoveFromDB.indexOf(x.id) === -1);\n\n   return {\n      nodesToRemoveFromDB,\n      nodesIdNoNeedToAddNew,\n      treeFromDB\n   };\n};\nconst haveChangedNodesInDBAndNewNodesInCurrentBackToDB = (treeFromDB, treeCurrent, treeCurrentInit, nodesIdNoNeedToAddNew) => {\n   let nodesToAddToDB = [];\n   treeCurrent.forEach(item => {\n      if (!treeFromDB.find(x => x.id === item.id)) {\n         nodesToAddToDB.push(item);\n      };\n   });\n\n   let dwgTypeExistedInDBButLevelOrParentChangesArr = [];\n   let childrenIdsToWithdrawFromDB = [];\n   treeFromDB.forEach(item => {\n      const found = treeCurrent.find(r => r.id === item.id);\n      const foundInit = treeCurrentInit.find(r => r.id === item.id);\n      if (found && foundInit) {\n         if (found.title !== foundInit.title) item.title = found.title;\n\n         if (found.parentId !== item.parentId && found.parentId !== foundInit.parentId) {\n            dwgTypeExistedInDBButLevelOrParentChangesArr.push({ ...found, title: item.title });\n\n            const arrIdsChildrenInDB = getTreeFlattenOfNodeInArray(treeFromDB, item).filter((x, i) => i !== 0).map(x => x.id);\n\n            childrenIdsToWithdrawFromDB = [...childrenIdsToWithdrawFromDB, ...arrIdsChildrenInDB];\n         };\n      };\n   });\n   childrenIdsToWithdrawFromDB = [...new Set(childrenIdsToWithdrawFromDB)];\n\n   const dwgTypeToWithdrawFromDB = treeFromDB.filter(x => childrenIdsToWithdrawFromDB.indexOf(x.id) !== -1);\n\n   treeFromDB = treeFromDB.filter(item => {\n      return childrenIdsToWithdrawFromDB.indexOf(item.id) === -1 && !dwgTypeExistedInDBButLevelOrParentChangesArr.find(x => x.id === item.id)\n   });\n\n\n   const listBranchesTreeToPushToDB = getListOfBranchesTree([\n      ...nodesToAddToDB,\n      ...dwgTypeExistedInDBButLevelOrParentChangesArr,\n      ...dwgTypeToWithdrawFromDB\n   ]);\n\n   listBranchesTreeToPushToDB.forEach(itemTree => {\n      treeFromDB = [...treeFromDB, ...flattenAllTreeChildNode1([itemTree])];\n   });\n\n   const treeDBModifiedToSave = convertFlattenArraytoTree1(treeFromDB);\n   updateChildrenNodeTreeLevel(treeDBModifiedToSave);\n\n   return {\n      nodesToAddToDB: nodesToAddToDB.filter(item => nodesIdNoNeedToAddNew.indexOf(item.id) === -1),\n      treeDBModifiedToSave: flattenAllTreeChildNode1(treeDBModifiedToSave)\n   };\n};\n\n\n\n\n\n\n\n","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\pageSpreadsheet\\ExcelExport.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\pageSpreadsheet\\PanelSetting.js",["380","381","382","383","384","385","386","387","388","389","390","391","392","393","394","395","396","397","398","399","400","401","402","403","404","405","406","407","408","409","410","411","412","413","414","415","416","417","418","419","420","421","422","423"],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\pageSpreadsheet\\PanelFunction.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\pageSpreadsheet\\CellIndex.js",["424"],"import React from 'react';\nimport styled from 'styled-components';\nimport { rowLocked } from './Cell';\nimport { convertTradeCodeInverted } from './PanelAddNewRFA';\n\nconst CellIndex = (props) => {\n\n   const { rowData, contextInput, rowIndex } = props;\n   const { contextCell, contextRow, contextProject } = contextInput;\n   const { setCellActive } = contextCell;\n   const { stateRow, getSheetRows } = contextRow;\n   const { stateProject } = contextProject;\n\n   const { drawingTypeTree, rowsAll, rowsRfaAll, modeGroup, rowsSelected } = stateRow;\n   const { roleTradeCompany, pageSheetTypeName } = stateProject.allDataOneSheet;\n\n\n\n   const onClickCellIndex = () => {\n      if (pageSheetTypeName !== 'page-spreadsheet' && pageSheetTypeName !== 'page-data-entry-new') return;\n\n      if (pageSheetTypeName === 'page-spreadsheet') {\n         const isLockedRow = rowLocked(roleTradeCompany, rowData, modeGroup, drawingTypeTree);\n         if (isLockedRow) return;\n      };\n\n      setCellActive(null);\n      const row = rowsAll.find(x => x.id === rowData.id);\n      if (!rowsSelected.find(x => x.id === rowData.id) && rowData._rowLevel === 1) {\n         getSheetRows({\n            ...stateRow,\n            rowsSelected: [...rowsSelected, row],\n            rowsSelectedToMove: []\n         });\n      } else if (rowsSelected.find(x => x.id === rowData.id) && rowData._rowLevel === 1) {\n         getSheetRows({\n            ...stateRow,\n            rowsSelected: rowsSelected.filter(r => r.id !== row.id),\n            rowsSelectedToMove: []\n         });\n      };\n   };\n\n\n\n\n   let indexRfa;\n   if (pageSheetTypeName === 'page-rfa' && !rowData.treeLevel) {\n      const listTrade = ['ARCHI', 'C&S', 'M&E', 'PRECAST'];\n      let outputArr = [];\n      listTrade.forEach(trade => {\n         const dwgsInThisTrade = rowsRfaAll.filter(x => {\n            const rfaRef = x['RFA Ref'];\n            return convertTradeCodeInverted(rfaRef.split('/')[2]) === trade\n         });\n         const listRef = [...new Set(dwgsInThisTrade.map(x => x['RFA Ref']))].sort();\n         listRef.forEach(ref => {\n            const dwgsOfThisRef = dwgsInThisTrade.filter(x => x['RFA Ref'] === ref);\n            outputArr = [...outputArr, ...dwgsOfThisRef];\n         });\n      });\n      indexRfa = outputArr.indexOf(outputArr.find(r => r.id === rowData.id)) + 1;\n   };\n\n   return (\n      <Styled onClick={onClickCellIndex}>\n         {((pageSheetTypeName === 'page-spreadsheet' || pageSheetTypeName === 'page-data-entry-new') && !rowData.treeLevel)\n            ? (rowData._rowLevel < 1 ? null : (rowsAll.indexOf(rowsAll.find(r => r.id === rowData.id)) + 1))\n            : (pageSheetTypeName === 'page-rfa' && !rowData.treeLevel)\n               ? indexRfa\n               : ''}\n\n      </Styled>\n   );\n};\n\nexport default CellIndex;\n\n\n\nconst Styled = styled.div`\n   color: grey;\n   font-size: 12px;\n   cursor: pointer;\n   width: 100%;\n   height: 100%;\n   padding: 5px;\n   padding-right: 8px;\n   text-align: right\n`;\n\n","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\constants\\index.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\utils\\index.js",["425","426","427","428"],"import moment from 'moment';\nimport { isColumnWithReplyData } from '../layouts/pageSpreadsheet/CellRFA';\n\n\nexport const colorTypeStatus = {\n   yellow: '#fff200',\n   dark: '#1e272e',\n   grey0: '#ecf0f1',\n   grey1: '#bdc3c7',\n   grey2: '#636e72',\n   grey3: '#dfe4ea',\n   grey4: '#f1f2f6',\n   red: '#FA8072',\n   green: '#009432',\n   blue: '#0984e3',\n   orange: '#cc8e35',\n   purple: '#303952',\n   rose: '#e84118',\n   black: 'black',\n   orange2: '#f1c40f',\n   pp: '#9b59b6',\n   pp2: '#10ac84',\n};\n\nexport const randomColorRangeStatus = {\n   'Approved with comments, to Resubmit': colorTypeStatus.purple,\n   'Approved with Comment, no submission Required': colorTypeStatus.blue,\n   'Approved for Construction': colorTypeStatus.green,\n   'Consultant reviewing': colorTypeStatus.grey2,\n   'Not Started': colorTypeStatus.orange,\n   'Revise In-Progress': colorTypeStatus.yellow,\n   '1st cut of drawing in-progress': colorTypeStatus.pp2,\n   '1st cut of model in-progress': colorTypeStatus.pp,\n   'Pending design': colorTypeStatus.orange2,\n   'Reject and resubmit': colorTypeStatus.red,\n   'Consultant review and reply': colorTypeStatus.blue,\n   'Create update drawing': colorTypeStatus.orange,\n   'Create update model': colorTypeStatus.green,\n};\n\n\n\n\n\n\nexport const processRowsFromDB = (sheetHeaders, rows) => {\n   let rowsProcessed = [];\n   const _formalRowData = (row, sheetHeaders) => {\n      let { _id, data, level, parentRow, preRow } = row;\n      let rowFormal = {\n         id: _id,\n         _rowLevel: level,\n         _parentRow: parentRow,\n         _preRow: preRow\n      };\n\n      for (const key in row) {\n         if (\n            key !== '_id' && \n            key !== 'data' &&\n            key !== 'level' &&\n            key !== 'parentRow' &&\n            key !== 'preRow'\n         ) {\n            rowFormal[key] = row[key];\n         };\n      };\n\n      if (data instanceof Object) {\n         for (let header of sheetHeaders) {\n            let { key, text } = header;\n            if (header.type === 'checkbox') {\n               if (key && text && data[key] !== undefined) rowFormal[text] = data[key];\n            } else {\n               if (key && text && data[key]) rowFormal[text] = data[key];\n            };\n         };\n      };\n      return rowFormal;\n   };\n   let firstRowIndex = rows.findIndex((row) => row.preRow === null);\n   while (firstRowIndex >= 0) {\n      let preRow = rows.splice(firstRowIndex, 1)[0];\n      while (preRow) {\n         const rowFormal = _formalRowData(preRow, sheetHeaders);\n         rowsProcessed.push(rowFormal);\n         let nextRowIndex = rows.findIndex(row => String(row.preRow) == String(preRow._id));\n         if (nextRowIndex >= 0) {\n            preRow = rows.splice(nextRowIndex, 1)[0];\n         } else {\n            preRow = null;\n         };\n      };\n      firstRowIndex = rows.findIndex((row) => row.preRow === null);\n   };\n   return rowsProcessed;\n};\n\n\n\n\n\nexport const getRandomColor = () => {\n   let letters = '0123456789ABCDEF';\n   let color = '#';\n   for (var i = 0; i < 6; i++) {\n      color += letters[Math.floor(Math.random() * 16)];\n   };\n   return color;\n};\n\n\nexport const randomColorRange = [\n   '#FFDEAD',\n   '#98FB98',\n   '#e74c3c',\n   '#9b59b6',\n   '#1abc9c',\n   '#95a5a6'\n];\n\nexport const genId = (xxx) => {\n   let arr = [];\n   for (let i = 0; i < xxx; i++) {\n      arr.push(mongoObjectId());\n   };\n   return arr;\n};\n\nexport const debounceFnc = (func, delay) => {\n   let timeout;\n   return function (...args) {\n      const context = this;\n      if (timeout) clearTimeout(timeout);\n      timeout = setTimeout(() => {\n         timeout = null;\n         func.apply(context, args);\n      }, delay);\n   };\n};\n\n\n\n\nexport const mongoObjectId = () => {\n   var timestamp = (new Date().getTime() / 1000 | 0).toString(16);\n   return timestamp + 'xxxxxxxxxxxxxxxx'.replace(/[x]/g, function () {\n      return (Math.random() * 16 | 0).toString(16);\n   }).toLowerCase();\n};\n\n\n\nconst getHeaderKey = (headers, headerText) => {\n   if (!headers) return;\n   return headers.find(hd => hd.text === headerText).key;\n};\n\n\n\n\nconst _newParent = (level, iddd) => {\n   return {\n      id: iddd,\n      _rowLevel: level,\n      count: 0,\n      children: []\n   };\n};\nexport const groupByHeaders = (data, headers) => {\n   let res = [];\n   let _map = {};\n   // push all rowIds have children in here\n   let parentIdsArr = [];\n   let _mapParentIds = {};\n   for (let item of data) {\n      let _prevLevelKey = '';\n      let _prevLevelParent = null;\n      for (let i = 0, level = headers.length * (-1) + 1; i < headers.length; i++, level++) {\n         let arrayParent = i == 0 ? res : _prevLevelParent.children;\n\n         let header = headers[i];\n         let value = (item[header] || '').trim();\n\n         let levelKey = `${_prevLevelKey}_._${value}`;\n         let levelParentIndex = _map[levelKey];\n         let levelParent = arrayParent[levelParentIndex];\n\n         if (!levelParent) {\n\n            let iddd = levelKey + value;\n            levelParent = _newParent(level, iddd);\n\n            _map[levelKey] = arrayParent.length;\n            arrayParent.push(levelParent);\n         };\n\n         levelParent.count++;\n\n\n         levelParent.title = `${item[header] || 'No data'}: (${levelParent.count} nos)`;\n\n\n         if (!_mapParentIds[levelParent.id]) { // levelParent id not yet been push to parentIdsArr\n            parentIdsArr.push(levelParent.id);\n            _mapParentIds[levelParent.id] = true;\n         };\n\n         if (i == headers.length - 1) {\n            levelParent.children.push(item);\n         } else {\n            _prevLevelKey = levelKey;\n            _prevLevelParent = levelParent;\n         };\n      };\n   };\n   return {\n      rows: res,\n      expandedRows: parentIdsArr\n   };\n};\n\n\n\nexport const extractCellInfo = (key) => {\n   const idexOfSplitDigit = key.indexOf('~#&&#~');\n   return {\n      rowId: key.slice(0, idexOfSplitDigit),\n      headerName: key.slice(idexOfSplitDigit + 6, key.length)\n   }\n};\nexport const convertCellTempToHistory = (\n   cellsModifiedTemp,\n   stateProject,\n   isOutputDataText\n) => {\n   const { email, publicSettings } = stateProject.allDataOneSheet;\n   const cellsHistoryData = Object.keys(cellsModifiedTemp).map(key => {\n      const { rowId, headerName } = extractCellInfo(key);\n      const dataOut = {\n         rowId,\n         headerKey: isOutputDataText ? headerName : getHeaderKey(publicSettings.headers, headerName),\n         history: {\n            text: cellsModifiedTemp[key],\n            email,\n            createdAt: new Date(),\n         }\n      };\n      return dataOut;\n   });\n   return cellsHistoryData;\n};\n\n\n\nexport const convertHistoryData = (data) => {\n   let arr = [];\n   data.forEach(ch => {\n      const { histories, headerKey, row } = ch;\n      histories.forEach(dt => {\n         arr.push({\n            ...dt,\n            headerKey, row\n         });\n      });\n   });\n   return arr\n};\n\nexport const convertDrawingVersionToHistory = (rowsHistory, stateProject) => {\n\n   const { publicSettings } = stateProject.allDataOneSheet;\n\n   const rowsHistoryOutput = rowsHistory.map(rowsH => {\n      let obj = {};\n\n      Object.keys(rowsH).forEach(key => {\n         if (key === 'rfaNumber' || key.includes('reply-$$$-') || key.includes('submission-$$$-')) {\n            obj[key] = rowsH[key];\n         };\n      });\n\n      publicSettings.headers.forEach(hd => {\n         if (rowsH[hd.text]) obj = { ...obj || {}, [hd.key]: rowsH[hd.text] };\n      });\n\n      return {\n         row: rowsH.id,\n         history: obj,\n      };\n   });\n\n   return rowsHistoryOutput;\n};\nexport const getHeaderWidthForRFAView = (header) => {\n   if (header === 'RFA Ref') return 380;\n   else if (header === 'Drawing Number') return 250;\n   else if (header === 'Drawing Name') return 400;\n   else if (header === 'Due Date') return 80;\n   else if (header === 'Submission Date') return 80;\n   else if (header === 'Rev') return 40;\n   else if (header === 'Requested By') return 150;\n\n   return getHeaderWidth(header);\n};\nexport const getHeaderWidth = (header) => {\n\n   if (header === 'RFA Ref') return 200;\n   else if (\n      header === 'Block/Zone' ||\n      header === 'Level' || header === 'Unit/CJ' ||\n      header === 'Use For' ||\n      header === 'Coordinator In Charge' || header === 'Modeller' ||\n      header === 'Construction Start'\n   ) return 120;\n   else if (header === 'Model Progress' || header === 'Drawing Progress') return 80;\n   else if (header === 'Drg Type') return 180;\n   else if (header === 'Construction Issuance Date') return 120;\n\n   else if (\n      header === 'Drg To Consultant (A)' ||\n      header === 'Drg To Consultant (T)' ||\n      header === 'Get Approval (A)' ||\n      header === 'Get Approval (T)'\n   ) return 120;\n\n   else if (header.includes('(A)') || header.includes('(T)')) return 90;\n\n   else if (header === 'Rev') return 60;\n   else if (header === 'Status') return 280;\n   else if (header === 'Remark') return 400;\n   else if (header === 'Drawing Number') return 400;\n   else if (header === 'Drawing Name') return 450;\n\n   else if (isColumnWithReplyData(header)) return 180;\n\n   else if (header === 'Cost Implication')return 80;\n   else if (header === 'Time Extension')return 70;\n   else if (header === 'Description') return 100;\n   else if (header === 'Signatured By') return 200;\n   else if (header === 'Conversation Among') return 180;\n   else if (header === 'Conversation Date') return 150;\n   else if (header === 'Received By') return 400;\n   else if (header === 'Contract Specification') return 100;\n   else if (header === 'Proposed Specification') return 100;\n   else if (header === 'Submission Type') return 100;\n   else if (header === 'Attachment Type') return 100;\n   else if (header === 'Transmitted For') return 130;\n\n\n   else if (header === 'RFAM Ref') return 400;\n\n\n   else return 300;\n\n};\n\nexport const addZero = (num) => {\n   if (num < 10) return '0' + num;\n   return num;\n};\n\n\n\n\nexport const getActionName = (type) => {\n   if (type === 'filter-ICON') return 'Create New Filter';\n   if (type === 'reorderColumn-ICON') return 'Columns Layout';\n   if (type === 'group-ICON') return 'Group Data';\n   if (type === 'sort-ICON') return 'Sort Data';\n   if (type === 'swap-ICON-1') return 'Quit Grouping Mode';\n   if (type === 'swap-ICON-2') return 'Clear Filter/Sort/Search';\n   if (type === 'addDrawingType-ICON') return 'Drawing Type Organization';\n   if (type === 'color-cell-history-ICON') return 'Check Data Changed';\n   if (type === 'View Cell History') return 'Cell History';\n   if (type === 'Delete Drawing') return 'Delete Drawing';\n   if (type === 'colorized-ICON') return 'Drawing Colorization';\n   if (type === 'viewTemplate-ICON') return 'View Template';\n   if (type === 'View Drawing Revision') return 'Drawing Revision';\n\n   if (type === 'form-submit-RFA') return 'Add New RFA';\n   if (type === 'form-resubmit-RFA') return 'Resubmit RFA';\n   if (type === 'form-reply-RFA') return 'Reply RFA';\n   if (type === 'form-RFA-submit-for-admin') return 'Choose Admin Action';\n\n   if (type === 'form-submit-multi-type') return 'Add New Form';\n   if (type === 'form-resubmit-multi-type') return 'Resubmit Form';\n   if (type === 'form-reply-multi-type') return 'Reply Form';\n\n\n   if (type === 'goToViewDMS-ICON') return 'Go To DMS View';\n   if (type === 'goToViewRFA-ICON') return 'Go To RFA View';\n   if (type === 'acknowledge-form') return 'Acknowledge Form';\n   if (type === 'acknowledge-or-reply-form') return 'Acknowledge Or Reply Form';\n\n\n   if (type === 'Date Automation') return 'Date Automation';\n   \n   if (type && (type.includes('Insert Drawings') || type === 'Duplicate Drawings')) return 'Nos Of Drawings';\n\n   else return '';\n};\n\n\n\n\nexport const ExcelDateToJSDate = (serial) => {\n   let utc_days = Math.floor(serial - 25569);\n   let utc_value = utc_days * 86400;\n   let date_info = new Date(utc_value * 1000);\n\n   let fractional_day = serial - Math.floor(serial) + 0.0000001;\n\n   let total_seconds = Math.floor(86400 * fractional_day);\n\n   let seconds = total_seconds % 60;\n\n   total_seconds -= seconds;\n\n   let hours = Math.floor(total_seconds / (60 * 60));\n   let minutes = Math.floor(total_seconds / 60) % 60;\n\n   return new Date(date_info.getFullYear(), date_info.getMonth(), date_info.getDate(), hours, minutes, seconds);\n};\n\n\n\nexport const sortRfaDrawingNumber = (a, b) => {\n\n   if (a['RFA Ref'] > b['RFA Ref']) return -1;\n   if (a['RFA Ref'] < b['RFA Ref']) return 1;\n\n   if (a['Drawing Number'] > b['Drawing Number']) return 1;\n   if (a['Drawing Number'] < b['Drawing Number']) return -1;\n\n};\n\n\nexport const compareDates = (dateInput1, dateInput2) => {\n   let date1 = dateInput1;\n   let date2 = dateInput2;\n   if (dateInput1 && dateInput1.length === 8 && dateInput1.includes('/')) date1 = moment(dateInput1, 'DD/MM/YY').format('YYYY-MM-DD');\n   if (dateInput2 && dateInput2.length === 8 && dateInput2.includes('/')) date2 = moment(dateInput2, 'DD/MM/YY').format('YYYY-MM-DD');\n\n   if (date1 && date2) {\n      return moment(date1).diff(moment(date2), 'days');\n   } else if (date1 && !date2) {\n      return moment(date1).diff(moment(), 'days');\n   };\n};\n\n\n\nexport const validateEmailInput = (email) => {\n   const re = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n   return re.test(String(email).toLowerCase());\n};\n\n\n\n\nexport const getUserRoleTradeCompany = (role, company, pageSheetTypeName) => {\n\n   if (pageSheetTypeName === 'page-data-entry') return { role, trade: null, company: null };\n\n   const roleArray = [\n      'Document Controller',\n\n      'WH Archi Coordinator',\n      'WH C&S Design Engineer',\n      'WH M&E Coordinator',\n      'WH PRECAST Coordinator',\n\n      'WH Archi Modeller',\n      'WH C&S Modeller',\n      'WH M&E Modeller',\n      'WH PRECAST Modeller',\n\n      'Production',\n\n      'WH Archi Manager',\n      'WH C&S Manager',\n      'WH M&E Manager',\n      'WH PRECAST Manager',\n\n      'Planning Engineer',\n      'QS',\n      'Project Manager',\n      'Corporate Manager',\n      'QAQC',\n      'Safety',\n      'Client',\n\n      'Sub-Con',\n      'Consultant',\n      'RE/RTO'\n   ];\n\n\n   if (\n      !role || !company || roleArray.indexOf(role) === -1 ||\n      role === 'WH Archi Manager' || role === 'WH C&S Manager' || role === 'WH M&E Manager' || role === 'WH PRECAST Manager' ||\n      role === 'Planning Engineer' || role === 'QS' || role === 'Project Manager' || role === 'Corporate Manager' ||\n      role === 'Client' || role === 'QAQC' || role === 'Safety' || role === 'RE/RTO'\n   ) {\n      return { role: 'View-Only User', trade: null, company: null };\n   };\n\n   if (role === 'WH Archi Coordinator') return { role: 'Coordinator', trade: 'ARCHI', company };\n   if (role === 'WH C&S Design Engineer') return { role: 'Coordinator', trade: 'C&S', company };\n   if (role === 'WH M&E Coordinator') return { role: 'Coordinator', trade: 'M&E', company };\n   if (role === 'WH PRECAST Coordinator') return { role: 'Coordinator', trade: 'PRECAST', company };\n\n   if (role === 'WH Archi Modeller') return { role: 'Modeller', trade: 'ARCHI', company };\n   if (role === 'WH C&S Modeller') return { role: 'Modeller', trade: 'C&S', company };\n   if (role === 'WH M&E Modeller') return { role: 'Modeller', trade: 'M&E', company };\n   if (role === 'WH PRECAST Modeller') return { role: 'Modeller', trade: 'PRECAST', company };\n\n   return { role, trade: null, company };\n};","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\DashboardLayout\\componentsDashboard\\CardPanel.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\DashboardLayout\\componentsDashboard\\ChartBarRecordPanel.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\DashboardLayout\\componentsDashboard\\PanelSettingDashboard.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\contexts\\createDataContext.js",["429"],"import React, { createContext, useReducer } from 'react';\n\n\nexport default (reducer, actions, initValue) => {\n\n    const Context = createContext();\n\n    const Provider = ({ children }) => {\n        const [state, dispatch] = useReducer(reducer, initValue);\n\n        const boundActions = {};\n        for (let key in actions) {\n            boundActions[key] = actions[key](dispatch);\n        };\n\n        return (\n            <Context.Provider value={{ state, ...boundActions }}>\n                {children}\n            </Context.Provider>\n        );\n    };\n    return { Context, Provider };\n};\n\n\n","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\generalComponents\\ButtonGroupComp.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\generalComponents\\PanelCalendar.js",["430","431"],"import { Calendar, Radio } from 'antd';\nimport React from 'react';\n\n\nconst { Group, Button } = Radio;\n\n\nconst PanelCalendar = ({ pickDate }) => {\n\n    return (\n        <div style={{ width: 300 }}>\n            <Calendar\n                fullscreen={false}\n                onSelect={pickDate}\n            />\n        </div>\n    );\n};\n\nexport default PanelCalendar;\n","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\generalComponents\\ButtonColumnTag.js",["432"],"\nimport React, { useEffect, useState } from 'react';\nimport { colorType } from '../../constants';\n\n\nconst ButtonColumnTag = ({ tag, setMode, actionType }) => {\n\n   const styleShown = { background: '#f1a99f', color: 'black' };\n   const styleFrozen = { background: colorType.primary, color: 'white' };\n   const styleHidden = { background: colorType.grey4, color: 'grey' };\n\n   const [btnStyle, setBtnStyle] = useState(\n      tag.mode === 'hidden' ? styleHidden :\n         tag.mode === 'frozen' ? styleFrozen :\n            styleShown\n   );\n\n   const [type, setType] = useState(tag.mode);\n\n   useEffect(() => {\n      if (actionType === 'reset-mode-action' || actionType === 'admin-pick-consultant-to-reply') {\n         setType(tag.mode);\n         setBtnStyle(\n            tag.mode === 'hidden' ? styleHidden :\n               tag.mode === 'frozen' ? styleFrozen :\n                  styleShown\n         );\n      };\n   }, [tag.mode]);\n\n\n   const onClick = () => {\n      if (actionType === 'reorder-columns-action') {\n         if (type === 'shown') {\n            setBtnStyle(styleFrozen);\n            setMode({ header: tag.header, id: tag.id, mode: 'frozen' });\n            setType('frozen');\n         } else if (type === 'frozen') {\n            setBtnStyle(styleHidden);\n            setMode({ header: tag.header, id: tag.id, mode: 'hidden' });\n            setType('hidden');\n         } else if (type === 'hidden') {\n            setBtnStyle(styleShown);\n            setMode({ header: tag.header, id: tag.id, mode: 'shown' });\n            setType('shown');\n         };\n      } else if (actionType === 'rearrange-drawing-type-tree-action') {\n         if (type === 'shown') {\n            setBtnStyle(styleHidden);\n            setMode({ header: tag.header, id: tag.id, mode: 'hidden' });\n            setType('hidden');\n         } else if (type === 'hidden') {\n            setBtnStyle(styleShown);\n            setMode({ header: tag.header, id: tag.id, mode: 'shown' });\n            setType('shown');\n         };\n      } else if (actionType === 'reset-mode-action' || actionType === 'admin-pick-consultant-to-reply') {\n         setMode({ id: tag.id });\n      };\n   };\n\n   return (\n      <div\n         style={{\n            ...btnStyle,\n            padding: 9,\n            cursor: (actionType === 'reset-mode-action' || actionType === 'admin-pick-consultant-to-reply') && 'pointer',\n            textAlign: 'center',\n            fontWeight: 'bold',\n            width: '70%',\n            margin: 'auto',\n            marginBottom: 10\n         }}\n         onClick={onClick}\n      >\n         {tag.header}\n      </div>\n   );\n};\n\nexport default ButtonColumnTag;","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\pageSpreadsheet\\TableDrawingDetail.js",["433"],"\nimport { Icon, Timeline } from 'antd';\nimport Axios from 'axios';\nimport React, { useContext, useEffect, useState } from 'react';\nimport BaseTable, { AutoResizer } from 'react-base-table';\nimport styled from 'styled-components';\nimport { colorType, SERVER_URL } from '../../constants';\nimport { Context as ProjectContext } from '../../contexts/projectContext';\nimport { Context as RowContext } from '../../contexts/rowContext';\nimport { mongoObjectId } from '../../utils';\nimport ButtonGroupComp from '../generalComponents/ButtonGroupComp';\nimport { headersConsultantWithNumber } from '../generalComponents/OverallComponentDMS';\nimport CellRFA, { getConsultantReplyData, isColumnWithReplyData } from './CellRFA';\n\n\n\n\nconst Table = (props) => {\n   return (\n      <AutoResizer>\n         {({ width, height }) => {\n            return (\n               <BaseTable\n                  {...props}\n                  width={width}\n                  height={height}\n               />\n            );\n         }}\n      </AutoResizer>\n   );\n};\n\n\n\nconst TableDrawingDetail = (props) => {\n\n   const { rowData, onClickCancelModal, onClickApply } = props;\n   const { id: rowId } = rowData;\n   const { state: stateProject } = useContext(ProjectContext);\n   const { state: stateRow } = useContext(RowContext);\n   const { headers } = stateProject.allDataOneSheet.publicSettings;\n   const { _id: projectId, token, companies, projectIsAppliedRfaView } = stateProject.allDataOneSheet;\n\n   const { rowsVersionsToSave } = stateRow;\n\n\n   const [rowsHistoryDatabase, setRowsHistoryDatabase] = useState(null);\n   const [rowsHistoryPrevious, setRowsHistoryPrevious] = useState([]);\n   const [rowCurrent, setRowCurrent] = useState(null);\n\n\n   useEffect(() => {\n      const fetchRowsHistory = async () => {\n         try {\n            const res = await Axios.get(`${SERVER_URL}/row/history/one-row/`, { params: { token, projectId, rowId } });\n\n            let rowsHistory = [];\n            res.data.forEach((r, i) => {\n               const { history } = r;\n               if (history) {\n                  let data = { id: mongoObjectId() };\n                  Object.keys(history).forEach(key => {\n                     if (key !== 'rfaNumber' && !key.includes('reply-$$$-') && !key.includes('submission-$$$-')) {\n                        const hdText = headers.find(hd => hd.key === key).text;\n                        data[hdText] = history[key];\n                     } else {\n                        data[key] = history[key];\n                     };\n                  });\n                  rowsHistory.push(data);\n               };\n            });\n            setRowsHistoryDatabase(rowsHistory);\n\n\n            let rowsHistoryPrevious = [];\n            if (rowsVersionsToSave) {\n               rowsHistoryPrevious = rowsVersionsToSave.filter(r => r.id === rowId);\n               rowsHistoryPrevious.forEach((r, i) => {\n                  r.id = mongoObjectId();\n               });\n               setRowsHistoryPrevious(rowsHistoryPrevious);\n            };\n\n            setRowCurrent({\n               ...rowData,\n               key: rowsHistory.length + rowsHistoryPrevious.length + 1\n            });\n\n\n         } catch (err) {\n            console.log(err);\n         };\n      };\n      fetchRowsHistory();\n   }, []);\n\n   let data, input, columnsData;\n   if (rowsHistoryDatabase && rowCurrent) {\n      input = [\n         ...rowsHistoryDatabase,\n         ...rowsHistoryPrevious,\n         rowCurrent\n      ];\n      data = convertToVerticalTable(input, headers, companies, projectIsAppliedRfaView);\n      columnsData = ['Info', ...input.map((hd, i) => `Version ${i}`)];\n   };\n\n\n   const panelHeight = window.innerHeight * 0.8;\n   const columnWidth = 190;\n   const columnHeaderWidth = 210;\n\n   const generateColumns = (headers, { columnWidth, columnHeaderWidth }) => headers.map((column, columnIndex) => ({\n      key: column,\n      dataKey: column,\n      title: column === 'Info' ? '' : column,\n      resizable: true,\n      width: columnIndex === 0 ? columnHeaderWidth : columnWidth,\n      className: columnIndex === 0 ? 'column-header' : 'column-data',\n      cellRenderer: (props) => {\n\n         const { cellData, rowData, column } = props;\n         const infoCol = rowData['Info'];\n\n         if ((headersConsultantWithNumber.indexOf(infoCol) !== -1 || infoCol === 'RFA Ref') && column.key !== 'Info') {\n            return (\n               <CellRFA \n                  {...props} \n                  contextInput={{\n                     contextRow: { stateRow },\n                     contextProject: { stateProject },\n                  }}\n\n               />\n            );\n         } else {\n            return (\n               <div style={{\n                  textOverflow: 'ellipsis',\n                  overflow: 'hidden',\n                  whiteSpace: 'nowrap',\n                  padding: 10\n               }}>{cellData}</div>\n            );\n         };\n      }\n   }));\n\n   return (\n      // <div style={{\n      //    height: panelHeight,\n      //    background: 'white',\n      //    padding: 10,\n      //    display: 'flex',\n      //    justifyContent: 'center',\n      //    flexDirection: 'column',\n      // }}>\n      <div style={{ width: '100%', height: '100%', padding: 10 }}>\n         {rowsHistoryDatabase && rowCurrent && (\n            <div style={{ display: 'flex', paddingBottom: 10, borderBottom: `1px solid ${colorType.grey4}` }}>\n               <div style={{\n                  width: columnHeaderWidth + columnWidth * input.length + 17,\n                  height: panelHeight - 50,\n                  color: 'black'\n               }}>\n                  <TableStyled\n                     fixed\n                     columns={generateColumns(columnsData, { columnWidth, columnHeaderWidth })}\n                     data={data}\n                     rowHeight={28}\n                  />\n               </div>\n\n               <div style={{\n                  padding: '0px 30px',\n                  height: panelHeight - 50,\n                  overflowY: 'scroll'\n               }}>\n                  {input.map((item, i) => (\n                     <TimeLineDrawing\n                        key={i}\n                        data={item}\n                        version={i}\n                     />\n                  ))}\n               </div>\n            </div>\n         )}\n         <div style={{ padding: 20, display: 'flex', flexDirection: 'row-reverse' }}>\n            <ButtonGroupComp\n               onClickCancel={onClickCancelModal}\n               onClickApply={onClickApply}\n               newTextBtnApply='Close'\n            />\n         </div>\n      </div>\n   );\n};\n\nexport default TableDrawingDetail;\n\n\n\n\n\n\n\n\nconst convertToVerticalTable = (data, headers, companies, projectIsAppliedRfaView) => {\n\n   let dwgArray = [];\n\n   const additionalHeadersForProjectWithRFA = projectIsAppliedRfaView\n      ? headersConsultantWithNumber.map(text => ({ key: mongoObjectId(), text }))\n      : [];\n\n\n   const headersArr = [\n      ...headers.filter(hd => hd.text !== 'Drawing'),\n      ...additionalHeadersForProjectWithRFA\n   ];\n\n\n   headersArr.filter(hd => hd.text !== 'Drawing').forEach(hd => {\n      let obj = {\n         id: mongoObjectId(),\n         Info: hd.text\n      };\n      data.forEach((row, i) => {\n         if (isColumnWithReplyData(hd.text)) {\n            const rfaNumber = row.rfaNumber;\n            const rfaRef = row['RFA Ref'];\n            if (rfaNumber && rfaRef) {\n               const { replyStatus, replyCompany, replyDate } = getConsultantReplyData(row, hd.text, companies);\n               if (replyStatus) {\n                  obj[i] = { ...obj[i] || {}, [`reply-$$$-status-${replyCompany}`]: replyStatus };\n                  obj[i] = { ...obj[i] || {}, [`reply-$$$-date-${replyCompany}`]: replyDate };\n                  obj[i] = { ...obj[i] || {}, [`reply-$$$-drawing-${replyCompany}`]: row[`reply-$$$-drawing-${replyCompany}`] };\n                  obj[i] = { ...obj[i] || {}, [`reply-$$$-comment-${replyCompany}`]: row[`reply-$$$-comment-${replyCompany}`] };\n                  obj[i] = { ...obj[i] || {}, [`reply-$$$-user-${replyCompany}`]: row[`reply-$$$-user-${replyCompany}`] };\n               };\n            };\n         } else if (hd.text === 'RFA Ref') {\n            const rfaNumber = row.rfaNumber;\n            const rfaRef = row['RFA Ref'];\n            if (rfaNumber && rfaRef) {\n               for (const key in row) {\n                  if (key.includes('submission-$$$-') && row[key]) {\n                     obj[i] = { ...obj[i] || {}, [key]: row[key] };\n                  };\n               };\n\n               if (rfaRef) {\n                  obj[i] = { ...obj[i] || {}, rfaRef };\n               };\n            };\n         } else {\n            obj[`Version ${i}`] = row[hd.text] || '';\n         };\n      });\n\n      dwgArray.push(obj);\n   });\n   return dwgArray;\n};\n\n\n\n\nconst TableStyled = styled(Table)`\n\n   color: black;\n   \n   .BaseTable__row-cell-text {\n      /* color: black; */\n   }\n   .column-header {\n      background: ${colorType.primary};\n      color: white;\n      font-weight: bold;\n   }\n   \n\n   .BaseTable__table .BaseTable__body {\n      /* -webkit-touch-callout: none;\n      -webkit-user-select: none;\n      -khtml-user-select: none;\n      -moz-user-select: none;\n      -ms-user-select: none;\n      user-select: none; */\n   }\n   .BaseTable__header-cell {\n      padding: 10px;\n      border-right: 1px solid #DCDCDC;\n      background: ${colorType.primary};\n      color: white\n   }\n\n   .BaseTable__row-cell {\n      border-right: 1px solid #DCDCDC;\n      overflow: visible !important;\n      padding: 0;\n   };\n\n   .BaseTable__table-main .BaseTable__row-cell:last-child {\n      padding-right: 0;\n   };\n   \n`;\n\n\n\nconst TimeLineDrawing = ({ data, version }) => {\n\n\n   const { state: stateProject } = useContext(ProjectContext);\n   const { headers } = stateProject.allDataOneSheet.publicSettings;\n\n   const headersForTimeline = headers.filter(hd => {\n      return (hd.text.includes('(A)') ||\n         hd.text === 'Construction Issuance Date' ||\n         hd.text === 'Construction Start') &&\n         hd.text !== 'Model Start (A)' && hd.text !== 'Model Finish (A)';\n   });\n\n   return (\n      <div style={{ width: 350 }}>\n         <div style={{ marginBottom: 15, fontSize: 17, fontWeight: 'bold' }}>Version {version}</div>\n         <TimelineStyled>\n            {headersForTimeline.map((hd, i) => {\n               return (\n                  <Timeline.Item\n                     dot={<Icon type='clock-circle-o' style={{ fontSize: '16px' }} />}\n                     color={colorType.primary}\n                     key={i}\n                  >\n                     ({data[hd.text] || 'n/a'}) - (<span style={{ fontWeight: 'bold' }}>{hd.text}</span>)\n                  </Timeline.Item>\n               );\n            })}\n         </TimelineStyled>\n      </div>\n   );\n};\n\n\n\nconst TimelineStyled = styled(Timeline)`\n   .ant-timeline-item {\n      padding-bottom: 5px;\n   }\n\n`;","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\pageSpreadsheet\\FormDateAutomation.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\pageSpreadsheet\\TableCellHistory.js",["434","435"],"import { List } from 'antd';\nimport Axios from 'axios';\nimport moment from 'moment';\nimport React, { useContext, useEffect, useState } from 'react';\nimport { SERVER_URL } from '../../constants';\nimport { Context as ProjectContext } from '../../contexts/projectContext';\nimport { Context as RowContext } from '../../contexts/rowContext';\nimport { getConsultantReplyData, isColumnWithReplyData } from './CellRFA';\n\n\n\nconst TableCellHistory = (props) => {\n\n   const { rowData, column } = props;\n   const { id: rowId } = rowData;\n\n   const { state: stateProject } = useContext(ProjectContext);\n   const { state: stateRow } = useContext(RowContext);\n\n   const [history, setHistory] = useState([]);\n\n   const { projectId, token, companies, publicSettings } = stateProject.allDataOneSheet;\n   const { headers } = publicSettings;\n\n   let headerKey;\n   const headerFound = headers.find(hd => hd.text === column.key);\n\n   if (headerFound) {\n      headerKey = headerFound.key;\n   } else if (isColumnWithReplyData(column.key)) {\n      const { replyCompany } = getConsultantReplyData(rowData, column.key, companies);\n      headerKey = replyCompany;\n   };\n\n\n   useEffect(() => {\n      const fetchCellHistory = async () => {\n         try {\n            const res = await Axios.get(`${SERVER_URL}/cell/history/one-cell/`, { params: { token, projectId, rowId, headerKey } });\n            setHistory(res.data.histories.reverse());\n         } catch (err) {\n            console.log(err);\n         };\n      };\n      fetchCellHistory();\n   }, [])\n\n\n   return (\n      <div style={{ width: '100%', padding: 15, maxHeight: window.innerHeight * 0.7, overflowY: 'scroll' }}>\n         <List\n            size='small'\n            header={null}\n            footer={null}\n            bordered\n            dataSource={history}\n            renderItem={item => (\n               <List.Item>\n                  <div>\n                     <div>{`${item.email}`}</div>\n                     <div style={{ fontSize: 12, color: 'grey' }}>{moment(item.createdAt).format('DD/MM/YY - HH:mm')}</div>\n                     <div style={{ fontWeight: 'bold' }}>{item.text}</div>\n                  </div>\n               </List.Item>\n            )}\n         />\n      </div>\n   );\n};\n\nexport default TableCellHistory;\n","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\pageSpreadsheet\\ColorizedForm.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\pageSpreadsheet\\FormCellColorizedCheck.js",["436","437"],"import Axios from 'axios';\nimport moment from 'moment';\nimport React, { useContext, useEffect, useState } from 'react';\nimport { SERVER_URL } from '../../constants';\nimport { Context as ProjectContext } from '../../contexts/projectContext';\nimport { convertHistoryData } from '../../utils';\nimport ButtonStyle from '../generalComponents/ButtonStyle';\nimport PanelCalendarDuration from '../generalComponents/PanelCalendarDuration';\n\n\n\n\nconst FormCellColorizedCheck = ({ setCellHistoryArr }) => {\n\n   const { state: stateProject } = useContext(ProjectContext);\n\n   const { projectId, token } = stateProject.allDataOneSheet;\n   const headersArr = stateProject.allDataOneSheet.publicSettings.headers;\n\n   useEffect(() => {\n      const fetchProjectHistory = async () => {\n         try {\n            const res = await Axios.get(`${SERVER_URL}/cell/history/`, { params: { token, projectId } });\n            setHistoryData(res.data);\n         } catch (err) {\n            console.log(err);\n         };\n      };\n      fetchProjectHistory();\n   }, []);\n\n   const [historyData, setHistoryData] = useState([]);\n\n   const [dateRange, setDateRange] = useState(null);\n   const onClickCheck = ({ start, end }) => {\n      let filterCells = convertHistoryData(historyData).filter(cell => {\n         let createdAt = moment(cell.createdAt).toDate();\n         return createdAt >= start && createdAt <= end;\n      });\n      const cellArr = filterCells.map(ch => {\n         const { row: rowId, headerKey } = ch;\n         let headerText = headersArr.find(hd => hd.key === headerKey).text;\n         return {\n            rowId,\n            header: headerText\n         }\n      });\n      let unique = cellArr.reduce((res, itm) => {\n         let result = res.find(item => JSON.stringify(item) == JSON.stringify(itm));\n         if (!result) return res.concat(itm);\n         return res;\n      }, []);\n\n      setCellHistoryArr(unique);\n   };\n   const checkCellWithinDates = (nos) => {\n      const addDays = (date, days) => {\n         let result = new Date(date);\n         result.setDate(result.getDate() + days);\n         return result;\n      };\n      let today = new Date();\n      let dateBefore = addDays(today, nos);\n      return {\n         start: dateBefore,\n         end: today\n      };\n   };\n\n\n   return (\n      <div style={{\n         padding: 15\n      }}>\n         <div style={{ display: 'flex', marginBottom: 10 }}>\n            <PanelCalendarDuration pickRangeDate={(e) => setDateRange(e)} />\n            <ButtonStyle\n               onClick={() => dateRange && onClickCheck({ start: dateRange[0], end: dateRange[1] })}\n               marginLeft={5}\n               name='Check Data Changed'\n            />\n         </div>\n         <div style={{ display: 'flex', marginBottom: 20, width: '100%' }}>\n            <ButtonStyle marginRight={5} name='Today'\n               onClick={() => onClickCheck(checkCellWithinDates(-1))}\n            />\n            <ButtonStyle marginRight={5} name='Last 3 Days'\n               onClick={() => onClickCheck(checkCellWithinDates(-3))}\n            />\n            <ButtonStyle marginRight={5} name='Last 7 Days'\n               onClick={() => onClickCheck(checkCellWithinDates(-7))}\n            />\n            <ButtonStyle marginRight={5} name='Last 14 Days'\n               onClick={() => onClickCheck(checkCellWithinDates(-14))}\n            />\n            <ButtonStyle marginRight={5} name='This Month'\n               onClick={() => onClickCheck(checkCellWithinDates(-31))}\n            />\n         </div>\n      </div>\n   );\n};\n\nexport default FormCellColorizedCheck;\n\n","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\pageSpreadsheet\\TableActivityHistory.js",["438","439"],"import { message, Modal } from 'antd';\nimport Axios from 'axios';\nimport moment from 'moment';\nimport React, { useContext, useEffect, useState } from 'react';\nimport BaseTable, { AutoResizer } from 'react-base-table';\nimport styled from 'styled-components';\nimport { colorType, SERVER_URL } from '../../constants';\nimport { Context as ProjectContext } from '../../contexts/projectContext';\nimport { Context as RowContext } from '../../contexts/rowContext';\nimport { convertHistoryData, mongoObjectId } from '../../utils';\nimport ButtonStyle from '../generalComponents/ButtonStyle';\nimport FormFilterActivityHistory from '../generalComponents/FormFilterActivityHistory';\nimport IconTable from '../generalComponents/IconTable';\nimport PanelCalendarDuration from '../generalComponents/PanelCalendarDuration';\n\n\n\nconst Table = (props) => {\n   return (\n      <AutoResizer>\n         {({ width, height }) => {\n            return (\n               <BaseTable\n                  {...props}\n                  width={width}\n                  height={height}\n               />\n            );\n         }}\n      </AutoResizer>\n   );\n};\n\nconst panelWidth = window.innerWidth * 0.8;\nconst panelHeight = window.innerHeight * 0.8;\n\n\nconst TableActivityHistory = (props) => {\n\n   const { state: stateProject } = useContext(ProjectContext);\n   const { state: stateRow } = useContext(RowContext);\n   const { allDataOneSheet: { publicSettings: { activityRecorded } } } = stateProject;\n\n\n\n   const { projectId, token } = stateProject.allDataOneSheet;\n   const { headers } = stateProject.allDataOneSheet.publicSettings;\n\n   const [historyAll, setHistoryAll] = useState(null);\n   const [historyAllInit, setHistoryAllInit] = useState(null);\n\n   const [loading, setLoading] = useState(false);\n\n\n   const headersShown = [\n      'Drawing Number',\n      'Drawing Name',\n      'Column',\n      'Value',\n      'User',\n      'Created At',\n      'Action'\n   ];\n\n   const revKey = headers.find(hd => hd.text === 'Rev').key;\n   const statusKey = headers.find(hd => hd.text === 'Status').key;\n   const dwgNumber = headers.find(hd => hd.text === 'Drawing Number').key;\n   const dwgName = headers.find(hd => hd.text === 'Drawing Name').key;\n\n   useEffect(() => {\n      const fetchRowsAndCellHistory = async () => {\n         setLoading(true);\n         try {\n            const resRows = await Axios.get(`${SERVER_URL}/row/history/`, { params: { token, projectId } });\n            const resCells = await Axios.get(`${SERVER_URL}/cell/history/`, { params: { token, projectId } });\n\n            let rowsOutput = [];\n            resRows.data.forEach(row => {\n               const { history } = row;\n               if (history) rowsOutput.push({\n                  'Drawing Number': history[dwgNumber],\n                  'Drawing Name': history[dwgName],\n                  'Column': 'Rev & Status',\n                  'Value': `${history[revKey] || ''} - ${history[statusKey] || ''}`,\n                  'User': row.userId || 'n/a',\n                  // 'Created At': moment(row.createdAt).format('DD/MM/YY - HH:mm'),\n                  'Created At': row.createdAt,\n                  'Action': 'Save Drawing Version',\n                  id: mongoObjectId()\n               });\n            });\n\n            let cellsOutput = [];\n            convertHistoryData(resCells.data).forEach(cell => {\n               const row = stateRow.rowsAll.find(r => r.id === cell.row);\n               const headerFound = headers.find(hd => hd.key === cell.headerKey);\n               if (row && headerFound) cellsOutput.push({\n                  'Drawing Number': row['Drawing Number'],\n                  'Drawing Name': row['Drawing Name'],\n                  'Column': headerFound.text,\n                  'Value': cell.text || '',\n                  'User': cell.email || 'n/a',\n                  // 'Created At': moment(cell.createdAt).format('DD/MM/YY - HH:mm'),\n                  'Created At': cell.createdAt,\n                  'Action': 'Edit Cell',\n                  id: mongoObjectId()\n               });\n            });\n\n            const activityRecordedData = activityRecorded.map(r => {\n               return {\n                  'Drawing Number': r[dwgNumber],\n                  'Drawing Name': r[dwgName],\n                  'Column': undefined,\n                  'Value': undefined,\n                  'User': r.email || 'n/a',\n                  // 'Created At': moment(r.createdAt).format('DD/MM/YY - HH:mm'),\n                  'Created At': r.createdAt,\n                  'Action': r.action,\n                  id: mongoObjectId()\n               };\n            });\n            let outputArr = [...rowsOutput, ...cellsOutput, ...activityRecordedData];\n\n            setHistoryAll(sortDataBeforePrint(outputArr));\n            setHistoryAllInit(sortDataBeforePrint(outputArr));\n\n            setLoading(false);\n         } catch (err) {\n            setLoading(false);\n            message.warn('Network Error!');\n            console.log(err);\n         };\n      };\n      fetchRowsAndCellHistory();\n   }, []);\n\n   const [modalFilter, setModalFilter] = useState(false);\n\n   const applyFilter = (data) => {\n      setHistoryAll(data);\n      setModalFilter(false);\n   };\n\n   const sortDataBeforePrint = (data) => {\n      data.sort((b, a) => {\n         return new Date(a['Created At']) - new Date(b['Created At']);\n      });\n      data.forEach((dt, i) => {\n         dt.index = i + 1;\n      });\n      return data;\n   };\n\n\n   const [dateRange, setDateRange] = useState(null);\n   const onClick = () => {\n      if (!dateRange) return;\n      let newData = historyAll.filter(r => {\n         let xxx = moment(r['Created At']);\n         return xxx <= dateRange[1] && xxx >= dateRange[0];\n      });\n      setHistoryAll(sortDataBeforePrint(newData));\n   };\n   const resetDataFilter = () => {\n      setHistoryAll(sortDataBeforePrint(historyAllInit));\n   };\n\n   const checkDataWithinDays = (nos) => {\n      const addDays = (date, days) => {\n         let result = new Date(date);\n         result.setDate(result.getDate() + days);\n         return result;\n      };\n\n      let today = new Date();\n      let dateBefore = addDays(today, nos);\n      let newData = historyAllInit.filter(r => {\n         let xxx = moment(r['Created At']);\n         return xxx <= today && xxx >= dateBefore;\n      });\n      setHistoryAll(sortDataBeforePrint(newData));\n   };\n\n\n   return (\n      <>\n         {historyAll && (\n            <div style={{\n               height: panelHeight,\n               background: 'white',\n               padding: 10,\n               display: 'flex',\n               justifyContent: 'center',\n               flexDirection: 'column',\n            }}>\n               <div style={{ paddingBottom: 10, fontSize: 20, fontWeight: 'bold', textAlign: 'center' }}>ACTIVITY HISTORY</div>\n               <div style={{ display: 'flex', marginBottom: 10 }}>\n                  <PanelCalendarDuration pickRangeDate={(e) => setDateRange(e)} />\n                  <ButtonStyle\n                     onClick={onClick}\n                     marginLeft={5}\n                     name='Check History'\n                  />\n               </div>\n               <div style={{ display: 'flex', marginBottom: 10 }}>\n                  <div style={{ marginRight: 10, display: 'flex' }}>\n                     <IconTable type='filter' onClick={() => setModalFilter(true)} isActivityTable={true} />\n                     <IconTable type='swap' onClick={resetDataFilter} />\n                  </div>\n\n                  <ButtonStyle\n                     marginRight={5} name='Today'\n                     onClick={() => checkDataWithinDays(-1)}\n                  />\n                  <ButtonStyle\n                     marginRight={5} name='Last 3 Days'\n                     onClick={() => checkDataWithinDays(-3)}\n                  />\n\n                  <ButtonStyle\n                     marginRight={5} name='Last 7 Days'\n                     onClick={() => checkDataWithinDays(-7)}\n                  />\n                  <ButtonStyle\n                     marginRight={5} name='Last 14 Days'\n                     onClick={() => checkDataWithinDays(-14)}\n                  />\n                  <ButtonStyle\n                     marginRight={5} name='This Month'\n                     onClick={() => checkDataWithinDays(-31)}\n                  />\n               </div>\n\n               <div style={{\n                  width: panelWidth,\n                  height: '100%',\n                  margin: '0 auto',\n                  textAlign: 'center'\n               }}>\n                  <TableStyled\n                     fixed\n                     columns={generateColumns(headersShown)}\n                     data={historyAll}\n                     rowHeight={28}\n                  />\n               </div>\n            </div>\n         )}\n\n         {modalFilter && (\n            <ModalStyledSetting\n               title='Filter Data Activity History'\n               visible={modalFilter}\n               footer={null}\n               onCancel={() => {\n                  setModalFilter(false);\n               }}\n               destroyOnClose={true}\n               centered={true}\n            >\n               <FormFilterActivityHistory\n                  applyFilter={applyFilter}\n                  onClickCancelModal={() => setModalFilter(false)}\n                  rowsAll={historyAll}\n                  headers={headersShown}\n               />\n            </ModalStyledSetting>\n         )}\n      </>\n   );\n};\n\nexport default TableActivityHistory;\n\n\nconst generateColumns = (headers) => {\n\n   return [\n      {\n         key: 'index',\n         dataKey: 'index',\n         title: '',\n         width: 70,\n      },\n      ...headers.map((column, columnIndex) => ({\n         key: column,\n         dataKey: column,\n         title: column,\n         resizable: true,\n         width: getHeaderWidth2(column),\n         cellRenderer: column !== 'Created At'\n         ? null\n         : ({ cellData }) => {\n            return (\n               <div style={{ color: 'black' }}>{moment(cellData).format('DD/MM/YY - HH:mm')}</div>\n            );\n         }\n      }))\n   ];\n};\nconst getHeaderWidth2 = (header) => {\n   if (header === 'Drawing Number') return 300;\n   if (header === 'Drawing Name') return 300;\n   if (header === 'Column') return 200;\n   if (header === 'Value') return 300;\n   if (header === 'User') return 200;\n   if (header === 'Created At') return 200;\n   if (header === 'Action') return 200;\n};\n\nconst ModalStyledSetting = styled(Modal)`\n    .ant-modal-content {\n        border-radius: 0;\n    }\n   .ant-modal-close {\n      display: none;\n   }\n   .ant-modal-header {\n      padding: 10px;\n   }\n   .ant-modal-title {\n        padding-left: 10px;\n        font-size: 20px;\n        font-weight: bold;\n   }\n   .ant-modal-body {\n      padding: 0;\n      display: flex;\n      justify-content: center;\n   }\n`;\nconst TableStyled = styled(Table)`\n\n   .BaseTable__row-cell-text {\n      color: black\n   }\n\n   .BaseTable__header-cell {\n      padding: 10px;\n      border-right: 1px solid #DCDCDC;\n      background: ${colorType.grey1};\n      color: black\n   }\n\n   .BaseTable__row-cell {\n      padding: 10px;\n      border-right: 1px solid #DCDCDC;\n      overflow: visible !important;\n   }\n`;\n\n\n\n\n","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\generalComponents\\ReorderColumnForm.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\generalComponents\\PanelConfirmResetMode.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\generalComponents\\PanelConfirm.js",["440"],"import { Input } from 'antd';\nimport React, { useState } from 'react';\nimport ButtonGroupComp from './ButtonGroupComp';\n\n\n\nconst PanelConfirm = ({ onClickCancel, onClickApply, content, newTextBtnApply, newTextBtnCancel, onClickApplyAdditional01, newTextBtnApplyAdditional01 }) => {\n\n    const [value, setValue] = useState('');\n\n\n    return (\n        <div style={{\n            width: '100%',\n            height: '100%',\n            color: 'black'\n        }}>\n            <div style={{ padding: 20 }}>\n                {(content === 'Do you want to save a new view template ?' ? (\n                    <div>\n                        <div>Do you want to save a new view template ?</div>\n                        <Input\n                            placeholder='Enter view template name...'\n                            style={{ width: '100%' }}\n                            value={value}\n                            onChange={(e) => setValue(e.target.value)}\n                            style={{\n                                marginBottom: 20,\n                                borderRadius: 0\n                             }}\n                        />\n                    </div>\n\n                ) : content) || 'Are you sure ?'}\n            </div>\n            <div style={{ padding: 20, paddingTop: 0, display: 'flex', flexDirection: 'row-reverse' }}>\n                <ButtonGroupComp\n                    onClickCancel={onClickCancel}\n                    onClickApply={() => onClickApply(value)}\n                    newTextBtnApply={newTextBtnApply}\n                    newTextBtnCancel={newTextBtnCancel}\n\n                    onClickApplyAdditional01={onClickApplyAdditional01}\n                    newTextBtnApplyAdditional01={newTextBtnApplyAdditional01}\n                />\n            </div>\n\n        </div>\n    );\n};\n\nexport default PanelConfirm;\n","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\generalComponents\\PanelPickNumber.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\generalComponents\\FormFilter.js",["441"],"import { Checkbox, Icon, Select, Tooltip } from 'antd';\nimport React, { useEffect, useState } from 'react';\nimport styled from 'styled-components';\nimport { colorType } from '../../constants';\nimport { mongoObjectId } from '../../utils/index';\nimport { getConsultantReplyData, getInfoValueFromRfaData, isColumnWithReplyData } from '../pageSpreadsheet/CellRFA';\nimport ButtonGroupComp from './ButtonGroupComp';\nimport ButtonStyle from './ButtonStyle';\n\n\nconst { Option } = Select;\n\n\nconst FormFilter = ({ applyFilter, onClickCancelModal, headers, rowsAll, modeFilter, pageSheetTypeName, rowsRfaAll, companies }) => {\n\n\n   const isSpreadsheetOrDataEntry = pageSheetTypeName === 'page-spreadsheet' || pageSheetTypeName === 'page-data-entry-new';\n\n\n   const [filterColumn, setFilterColumn] = useState(\n      isSpreadsheetOrDataEntry\n         ? (modeFilter.length > 1\n            ? modeFilter.map(item => ({...item}))\n            : [\n               {\n                  id: mongoObjectId(),\n                  header: 'Status',\n                  value: 'Select Value...'\n               },\n               {\n                  isIncludedParent: 'included'\n               }\n            ])\n         : (modeFilter.length > 1\n            ? modeFilter.map(item => ({...item}))\n            : [\n               {\n                  id: mongoObjectId(),\n                  header: 'Overdue RFA',\n                  value: 'Select Value...'\n               },\n               {\n                  isIncludedParent: 'included'\n               }\n            ])\n   );\n\n   const setFilterSelect = (dataFilter) => {\n      let found = filterColumn.find(x => x.id === dataFilter.id);\n      found.header = dataFilter.header;\n      found.value = dataFilter.value;\n      setFilterColumn([...filterColumn]);\n   };\n\n\n   const onClickAddField = () => {\n      setFilterColumn([\n         ...filterColumn,\n         { id: mongoObjectId(), header: 'Select Field...', value: 'Select Value...' }\n      ]);\n   };\n\n   const removeFilterTag = (id) => {\n      const arr = filterColumn.filter(x => x.id !== id);\n      setFilterColumn([...arr]);\n   };\n\n   const filterObj = modeFilter.find(x => x.isIncludedParent);\n\n   const [isChecked, setIsChecked] = useState(\n      filterObj && filterObj.isIncludedParent === 'included' ? true :\n         filterObj && filterObj.isIncludedParent === 'not included' ? false :\n            true);\n\n\n\n   const onChangeBox = () => {\n\n      setIsChecked(!isChecked);\n      const found = filterColumn.find(x => x.isIncludedParent);\n\n      if (found) {\n         found.isIncludedParent = isChecked ? 'not included' : 'included';\n         setFilterColumn(filterColumn);\n      } else {\n         let arr = [...filterColumn, { isIncludedParent: isChecked ? 'not included' : 'included' }];\n         setFilterColumn(arr);\n      };\n   };\n\n   const onClickApply = () => {\n\n      const output = filterColumn.filter(x => {\n         return (x.header !== 'Select Field...' && x.value !== 'Select Value...') || x.isIncludedParent;\n      });\n\n      if (!filterColumn.find(item => item.isIncludedParent)) {\n         output.push({ isIncludedParent: 'not included' });\n      };\n\n      if (output.length === 1 && output[0].isIncludedParent === 'included') {\n         applyFilter([]);\n      } else {\n         applyFilter(output);\n      };\n   };\n\n\n   return (\n      <div style={{ width: '100%', height: '100%' }}>\n         <div style={{ padding: 20, borderBottom: `1px solid ${colorType.grey4}` }}>\n\n            <ButtonStyle\n               colorText='black'\n               marginRight={10}\n               borderColor={colorType.grey1}\n               background={colorType.grey4}\n               onClick={onClickAddField}\n               name='Add Field'\n               marginBottom={10}\n            />\n\n            {filterColumn.filter(x => x.id).map(item => (\n               <SelectComp\n                  key={item.id}\n                  id={item.id}\n                  data={item}\n                  setFilterSelect={setFilterSelect}\n                  removeFilterTag={removeFilterTag}\n                  headers={headers}\n                  rows={isSpreadsheetOrDataEntry ? rowsAll : rowsRfaAll}\n                  isSpreadsheetOrDataEntry={isSpreadsheetOrDataEntry}\n                  companies={companies}\n               />\n            ))}\n\n            {isSpreadsheetOrDataEntry && (\n               <div>\n                  <CheckboxStyled\n                     onChange={onChangeBox}\n                     checked={isChecked}\n                  >\n                     Include Parent Rows\n                  </CheckboxStyled>\n               </div>\n            )}\n\n         </div>\n\n         <div style={{ padding: 20, display: 'flex', flexDirection: 'row-reverse' }}>\n            <ButtonGroupComp\n               onClickCancel={onClickCancelModal}\n               onClickApply={onClickApply}\n            />\n         </div>\n      </div>\n   );\n};\nexport default FormFilter;\n\n\nconst CheckboxStyled = styled(Checkbox)`\n   .ant-checkbox-inner {\n      border-radius: 0;\n      border: none;\n      background: ${colorType.primary}\n   }\n`;\n\n\nconst IconStyled = styled.div`\n    margin-left: 7px;\n    width: 18px; \n    height: 18px; \n    border: 1px solid ${colorType.grey1};\n    text-align: center;\n    &:hover {\n        background-color: ${colorType.grey4};\n        cursor: pointer;\n    };\n`;\n\n\n\nconst SelectComp = ({ setFilterSelect, data, id, removeFilterTag, headers, rows, isSpreadsheetOrDataEntry, companies }) => {\n\n   const columnsValueArr = getColumnsValue(rows, headers, isSpreadsheetOrDataEntry, companies);\n\n   const [column, setColumn] = useState(data.header);\n\n   const [value, setValue] = useState(null);\n\n   useEffect(() => {\n      if (column) {\n         setValue(data.value || 'Select Value...');\n         setFilterSelect({ id, header: column, value: data.value || 'Select Value...' });\n      };\n   }, [column]);\n\n   return (\n      <div style={{ display: 'flex', paddingBottom: 10, width: '100%' }}>\n\n         <SelectStyled\n            defaultValue='Select Field...'\n            value={column}\n            style={{ marginRight: 13, width: '47%' }}\n            onChange={(column) => setColumn(column)}\n         >\n            {headers.map(hd => (\n               <Option key={hd} value={hd}>{hd}</Option>\n            ))}\n         </SelectStyled>\n\n\n         <SelectStyled\n            showSearch\n            optionFilterProp='children'\n            filterOption={(input, option) => {\n               let stringArray = input.split(/(\\s+)/).filter(str => str !== ' ');\n               let isFound = true;\n               stringArray.forEach(str => {\n                  if (option.props.children.toLowerCase().indexOf(str.toLowerCase()) === -1) {\n                     isFound = false;\n                  };\n               });\n               return isFound;\n            }}\n\n            style={{ width: '47%' }}\n            onChange={(value) => {\n               setFilterSelect({ id, header: column, value });\n               setValue(value);\n            }}\n            disabled={!column ? true : false}\n            value={value}\n         >\n            {column && columnsValueArr[column] && columnsValueArr[column].map(hd => (\n               <Option key={hd} value={hd}>{hd}</Option>\n            ))}\n         </SelectStyled>\n\n\n         <Tooltip title='Remove Field'>\n            <IconStyled>\n               <Icon\n                  type='delete'\n                  style={{ transform: 'translate(0, -3px)', color: colorType.grey2, fontSize: 12 }}\n                  onClick={() => removeFilterTag(id)}\n               />\n            </IconStyled>\n         </Tooltip>\n\n      </div>\n   );\n};\n\n\nconst SelectStyled = styled(Select)`\n    .ant-select-selection {\n        border-radius: 0;\n    }\n`;\n\n\nconst getColumnsValue = (rows, headers, isSpreadsheetOrDataEntry, companies) => {\n\n   let valueObj = {};\n\n   const arrayHeaderRFA = [\n      'Requested By',\n      'Submission Date',\n      'Overdue RFA'\n   ];\n\n   [...headers, ...arrayHeaderRFA].forEach(hd => {\n      let valueArr = [];\n      rows.forEach(row => {\n         if (!isSpreadsheetOrDataEntry && isColumnWithReplyData(hd)) {\n            const { replyCompany } = getConsultantReplyData(row, hd, companies);\n            valueArr.push(replyCompany || '');\n\n         } else if (!isSpreadsheetOrDataEntry && hd === 'Overdue RFA') {\n            valueArr = [...valueArr, 'Overdue', 'Due in 3 days', 'RFA outstanding'];\n\n         } else if (!isSpreadsheetOrDataEntry && hd === 'Due Date') {\n            const dueDate = row['Consultant Reply (T)'];\n            valueArr.push(dueDate || '');\n\n         } else if (!isSpreadsheetOrDataEntry && hd === 'Requested By') {\n            const requestedBy = getInfoValueFromRfaData(row, 'submission', 'requestedBy');\n            valueArr.push(requestedBy || '');\n\n         } else if (!isSpreadsheetOrDataEntry && hd === 'Submission Date') {\n            const submissionDate = row['Drg To Consultant (A)'];\n            valueArr.push(submissionDate || '');\n            \n         } else {\n            valueArr.push(row[hd] || '');\n         };\n      });\n      valueArr = [...new Set(valueArr)].filter(e => e);\n      valueArr.sort((a, b) => a > b ? 1 : (b > a ? -1 : 0));\n      if (valueArr.length > 0) valueObj[hd] = valueArr;\n   });\n   return valueObj;\n};\n","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\generalComponents\\FormGroup.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\DashboardLayout\\componentsDashboard\\ChartBarRecord.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\generalComponents\\ButtonStyle.js",["442"],"import { Button } from 'antd';\nimport React, { useContext, useState } from 'react';\nimport { Context as RowContext } from '../../contexts/rowContext';\n\n\n\n\nconst ButtonStyle = ({\n   colorText,\n   marginRight,\n   marginLeft,\n   borderColor,\n   borderOverwritten,\n   marginBottom,\n   background,\n   name,\n   onClick,\n   disabled\n}) => {\n\n\n   const { state: stateRow } = useContext(RowContext);\n   const { loading } = stateRow;\n\n   const [isClicked, setIsClicked] = useState(false);\n\n\n   const arrayButtonUpload = [\n      'Choose PDF File',\n      'Upload Reply Form',\n      'Upload Documents',\n      'Upload Signed Off Cover Form',\n      'Upload 3D Model',\n   ];\n\n\n   const arrayButtonToLockAfterClick = [\n      'Send Email',\n      'Apply',\n      'Acknowledge',\n      'Yes'\n   ];\n\n\n   const arrayButtonLoadingAfterClick = [\n      'Yes',\n      'Acknowledge'\n   ];\n\n\n   return (\n      <Button\n         style={{\n            borderRadius: 0,\n            background: background,\n            color: colorText,\n            border: 'none',\n            marginRight,\n            marginBottom,\n            marginLeft,\n            border: `1px solid ${borderOverwritten ? borderColor : (borderColor || background)}`,\n         }}\n\n         disabled={disabled || (loading && arrayButtonLoadingAfterClick.indexOf(name) !== -1) || (!loading && isClicked && arrayButtonToLockAfterClick.indexOf(name) !== -1)}\n         loading={loading && arrayButtonLoadingAfterClick.indexOf(name) !== -1}\n\n         onClick={() => {\n            if (arrayButtonToLockAfterClick.indexOf(name) !== -1) {\n               setIsClicked(true);\n            };\n            if (arrayButtonUpload.indexOf(name) === -1) {\n               onClick();\n            };\n         }}\n      >\n         {name}\n      </Button>\n   );\n};\n\nexport default ButtonStyle;\n\n\n","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\generalComponents\\PanelCalendarDuration.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\generalComponents\\FormFilterActivityHistory.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\pageSpreadsheet\\ButtonAdminUpdateProjectSettings.js",["443"],"import { Icon, message, Tooltip } from 'antd';\r\nimport Axios from 'axios';\r\nimport React, { useContext, useState } from 'react';\r\nimport { SERVER_URL } from '../../constants';\r\nimport { Context as ProjectContext } from '../../contexts/projectContext';\r\n\r\n\r\nconst ButtonAdminUpdateProjectSettings = () => {\r\n\r\n   const { state: stateProject } = useContext(ProjectContext);\r\n   const token = stateProject.allDataOneSheet && stateProject.allDataOneSheet.token;\r\n   const projectId = stateProject.allDataOneSheet && stateProject.allDataOneSheet.projectId;\r\n   const email = stateProject.allDataOneSheet && stateProject.allDataOneSheet.email;\r\n   const [file, setFile] = useState('');\r\n\r\n   const handleChange = e => {\r\n      const fileReader = new FileReader();\r\n      fileReader.readAsText(e.target.files[0], 'UTF-8');\r\n      fileReader.onload = e => {\r\n         setFile(JSON.parse(e.target.result));\r\n         // setFile(getDataSumangAndHandy(JSON.parse(e.target.result)));\r\n      };\r\n   };\r\n\r\n\r\n\r\n\r\n\r\n   const uploadCurrentDataToServer = async () => {\r\n      try {\r\n         await Promise.all(file.map(async setting => {\r\n            await Axios.post(`${SERVER_URL}/sheet/update-setting-public/`, {\r\n               token,\r\n               email,\r\n               projectId: setting.sheetId,\r\n               publicSettings: { drawingTypeTree: setting.drawingTypeTree }\r\n            });\r\n         }));\r\n         message.info('DONE...');\r\n      } catch (err) {\r\n         console.log(err);\r\n      };\r\n   };\r\n\r\n\r\n   return (\r\n      <Tooltip title='Update Project Settings'>\r\n         {file ? (\r\n            <Icon type='align-center' onClick={uploadCurrentDataToServer} style={{ marginRight: 10 }} />\r\n         ) : (\r\n            <label style={{\r\n               border: '1px solid black',\r\n               display: 'inline-block',\r\n               width: 20,\r\n               height: 20,\r\n               padding: 3,\r\n               margin: 3,\r\n               cursor: 'pointer'\r\n            }}>\r\n               <input style={{ height: 25, fontSize: 8, marginRight: 6, display: 'none' }} type='file' onChange={handleChange} />\r\n               <div style={{ transform: 'translateX(-2px) translateY(-5px)' }}>(6)</div>\r\n            </label>\r\n         )}\r\n      </Tooltip>\r\n   );\r\n};\r\n\r\nexport default ButtonAdminUpdateProjectSettings;\r\n\r\n\r\n","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\contexts\\sheetContextProvider.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\pageSpreadsheet\\CellRFA.js",["444","445","446"],"import { Icon, message, Modal, Tooltip } from 'antd';\nimport Axios from 'axios';\nimport moment from 'moment';\nimport React, { useEffect, useState } from 'react';\nimport styled from 'styled-components';\nimport { colorTextRow, colorType, EDIT_DURATION_MIN } from '../../constants';\nimport { compareDates, mongoObjectId } from '../../utils';\nimport ButtonColumnTag from '../generalComponents/ButtonColumnTag';\nimport ButtonGroupComp from '../generalComponents/ButtonGroupComp';\n\n\n\n\nconst CellRFA = (props) => {\n\n   const { rowData, cellData, column, buttonPanelFunction, contextInput } = props;\n\n   const { contextRow, contextProject } = contextInput;\n   const { stateRow, getSheetRows } = contextRow;\n   const { stateProject } = contextProject;\n\n   const { rowsRfaAll, rowsRfaAllInit } = stateRow;\n\n   const {\n      roleTradeCompany, companies, company, email, projectIsAppliedRfaView,\n      isUserCanSubmitBothSide, pageSheetTypeName, isAdmin\n   } = stateProject.allDataOneSheet;\n\n   const [btnShown, setBtnShown] = useState(false);\n   const [isEditButtonShownInCell, setIsEditButtonShownInCell] = useState(false);\n\n   const [activeBtn, setActiveBtn] = useState('All');\n   const [modalContent, setModalContent] = useState(null);\n\n   const [modalActionTypeForAdminSubmit, setModalActionTypeForAdminSubmit] = useState(null);\n\n   const [modalPickConsultantForAdmin, setModalPickConsultantForAdmin] = useState(false);\n\n   const [thereIsDrawingWithNoReplyAndConsultantAllowedReply, setThereIsDrawingWithNoReplyAndConsultantAllowedReply] = useState(false);\n   const [thereIsDrawingWithNoRfaRef, setThereIsDrawingWithNoRfaRef] = useState(false);\n   const [requestedByCellData, setRequestedByCellData] = useState(null);\n\n   const [rfaData, setRfaData] = useState({});\n   const [rfaRefText, setRfaRefText] = useState(null);\n\n   const [replyStatus, setReplyStatus] = useState(null);\n   const [replyCompany, setReplyCompany] = useState(null);\n   const [replyDate, setReplyDate] = useState(null);\n\n\n   const [isAdminActionWithNoEmailSent, setIsAdminActionWithNoEmailSent] = useState(false);\n   const [overdueCount, setOverdueCount] = useState(0);\n   const [consultantsNotReplyYet, setConsultantsNotReplyYet] = useState([]);\n\n\n   useEffect(() => {\n\n      if (pageSheetTypeName === 'page-rfa' && rowData.treeLevel === 3 && column.key === 'RFA Ref') {\n\n         const rfaNumber = rowData.id;\n         const allBtn = rowData['btn'];\n         const allRowsChildren = rowData.children;\n         const lastBtn = allBtn[allBtn.length - 1];\n\n         let rfaRef;\n         if (activeBtn === '-') {\n            rfaRef = rfaNumber;\n         } else if (activeBtn === 'All') {\n            rfaRef = rfaNumber + (lastBtn === '-' ? '' : lastBtn);\n         } else if (activeBtn) { // A, B, C, ....\n            rfaRef = rfaNumber + activeBtn;\n         };\n\n         const rowsWithThisRFA = rowsRfaAllInit.filter(x => x['RFA Ref'] === rfaRef);\n         const oneRowChildren = rowsWithThisRFA[0];\n         const rfaDataObj = cloneRfaData(oneRowChildren);\n         setRfaRefText(rfaRef);\n         setRfaData(rfaDataObj);\n\n         const consultantMustReplyArray = getInfoValueFromRfaData(rfaDataObj, 'submission', 'consultantMustReply');\n\n         if (isUserCanSubmitBothSide) {\n            if (allRowsChildren.find(row => !row['RFA Ref'])) {\n               setThereIsDrawingWithNoRfaRef(true);\n            } else {\n               setThereIsDrawingWithNoRfaRef(false);\n            };\n            let arrayConsultantNotReplyYet = [];\n\n            consultantMustReplyArray.forEach(cst => {\n               const statusReply = getInfoValueFromRfaData(rfaDataObj, 'reply', 'status', cst);\n               if (!statusReply) {\n                  arrayConsultantNotReplyYet.push(cst);\n               };\n            });\n\n            if (arrayConsultantNotReplyYet.length > 0) {\n               setThereIsDrawingWithNoReplyAndConsultantAllowedReply(true);\n               setConsultantsNotReplyYet(arrayConsultantNotReplyYet);\n            } else {\n               setThereIsDrawingWithNoReplyAndConsultantAllowedReply(false);\n            };\n\n         } else if (roleTradeCompany.role === 'Consultant') {\n            if (\n               !rfaDataObj[`reply-$$$-status-${roleTradeCompany.company}`] &&\n               consultantMustReplyArray && consultantMustReplyArray.indexOf(company) !== -1\n            ) {\n               setThereIsDrawingWithNoReplyAndConsultantAllowedReply(true);\n            } else {\n               setThereIsDrawingWithNoReplyAndConsultantAllowedReply(false);\n            };\n         } else if (roleTradeCompany.role === 'Document Controller') {\n\n            if (allRowsChildren.find(row => !row['RFA Ref'])) {\n               setThereIsDrawingWithNoRfaRef(true);\n            } else {\n               setThereIsDrawingWithNoRfaRef(false);\n            };\n         };\n\n      } else if (!rowData.treeLevel && rowData['rfaNumber'] && rowData['RFA Ref']) {\n\n         const rfaDataObj = cloneRfaData(rowData);\n         setRfaData(rfaDataObj);\n\n         if (column.key === 'Requested By') {\n            setRequestedByCellData(getInfoValueFromRfaData(rfaDataObj, 'submission', 'requestedBy'));\n\n         } else if (isColumnWithReplyData(column.key)) {\n            const { replyStatus: replyStatusData, replyCompany: replyCompanyData, replyDate: replyDateData } = getConsultantReplyData(rowData, column.key);\n\n            setReplyStatus(replyStatusData);\n            setReplyCompany(replyCompanyData);\n            setReplyDate(convertReplyOrSubmissionDate(replyDateData));\n\n         } else if (isColumnConsultant(column.key)) {\n            if (roleTradeCompany.role !== 'Consultant') {\n               const consultantLead = getInfoValueFromRfaData(rfaDataObj, 'submission', 'consultantMustReply')[0];\n\n               setReplyStatus(getInfoValueFromRfaData(rfaDataObj, 'reply', 'status', consultantLead));\n               setReplyCompany(consultantLead);\n\n               const dateInfo = getInfoValueFromRfaData(rfaDataObj, 'reply', 'date', consultantLead);\n               setReplyDate(convertReplyOrSubmissionDate(dateInfo));\n            } else {\n               const consultantMustReplyValue = getInfoValueFromRfaData(rfaDataObj, 'submission', 'consultantMustReply');\n               if (consultantMustReplyValue.indexOf(company) !== -1) {\n                  setReplyStatus(rfaDataObj[`reply-$$$-status-${company}`]);\n                  setReplyCompany(company);\n                  const dateInfo = rfaDataObj[`reply-$$$-date-${company}`];\n                  setReplyDate(convertReplyOrSubmissionDate(dateInfo));\n               };\n            };\n\n         } else if (column.key === 'Due Date') {\n            const consultantMustReplyArray = getInfoValueFromRfaData(rfaDataObj, 'submission', 'consultantMustReply');\n            if (!rowData[`reply-$$$-status-${consultantMustReplyArray[0]}`]) {\n               const compare = compareDates(rowData['Consultant Reply (T)']);\n               setOverdueCount(compare);\n            };\n         };\n      };\n   }, [activeBtn]);\n\n\n\n   const [isDrawingDetailTableDms, setIsDrawingDetailTableDms] = useState(null);\n   const [is3dModelAttached, setIs3dModelAttached] = useState(false);\n\n   useEffect(() => {\n      if (column.key.includes('Version ')) {\n         const versionIndex = column.key.slice(8, column.key.length);\n         const infoData = rowData['Info'];\n         if (isColumnWithReplyData(infoData)) {\n            const dataStatus = getInfoValueFromRfaData(rowData[versionIndex], 'reply', 'status');\n            if (dataStatus) {\n               const dataDate = getInfoValueFromRfaData(rowData[versionIndex], 'reply', 'date');\n               const keyStatus = getInfoKeyFromRfaData(rowData[versionIndex], 'reply', 'status');\n               const companyName = keyStatus.slice(17, keyStatus.length);\n\n               setReplyStatus(dataStatus);\n               setReplyCompany(companyName);\n               setReplyDate(convertReplyOrSubmissionDate(dataDate));\n\n               setRfaData(rowData[versionIndex] || {});\n\n               setIsDrawingDetailTableDms('drawing-detail-consultant');\n            };\n         } else if (infoData === 'RFA Ref') {\n            setRfaData(rowData[versionIndex] || {});\n\n            setIsDrawingDetailTableDms('drawing-detail-rfa');\n\n            const dwfxLink = getInfoValueFromRfaData(rowData[versionIndex], 'submission', 'dwfxLink');\n            if (dwfxLink) {\n               setIs3dModelAttached(true);\n            };\n         };\n      };\n\n      if (!rowData.treeLevel && projectIsAppliedRfaView && column.key === 'RFA Ref' && rowData['RFA Ref']) {\n         const dwfxLink = getInfoValueFromRfaData(rowData, 'submission', 'dwfxLink');\n         if (dwfxLink) {\n            setIs3dModelAttached(true);\n         };\n      };\n   }, []);\n\n\n\n\n\n\n\n   const onClickRfaDrawing = (rfaCode, btn) => {\n      const rowsNotThisRFA = rowsRfaAll.filter(r => r.rfaNumber !== rfaCode);\n\n      const rowsThisRFAFiltered = rowsRfaAllInit.filter(r => {\n         return r.rfaNumber === rfaCode && (\n            btn === '-' ? r['RFA Ref'] === rfaCode\n               : btn === 'All' ? !r['row']\n                  : r['RFA Ref'] === rfaCode + btn\n         );\n      });\n      getSheetRows({\n         ...stateRow,\n         rowsRfaAll: [...rowsNotThisRFA, ...rowsThisRFAFiltered]\n      });\n      setActiveBtn(btn);\n   };\n\n   const onClickSubmitOrReplyRFA = (btn) => {\n      if (btn === 'form-reply-RFA') {\n         const isEditTimeOver = checkIfEditTimeIsOver(rfaData, null, EDIT_DURATION_MIN, 'consultant-check-if-rfa-ready-to-reply');\n         if (!isEditTimeOver) {\n            return message.warn('Woh Hup is submitting this RFA, please wait ...');\n         };\n      } else if (btn === 'form-resubmit-RFA') {\n         const isEditTimeOver = checkIfEditTimeIsOver(rfaData, null, EDIT_DURATION_MIN, 'wohhup-check-if-rfa-ready-to-resubmit');\n         if (!isEditTimeOver) {\n            return message.warn('Consultant is replying this RFA, please wait ...');\n         };\n      };\n\n\n      if (isUserCanSubmitBothSide) {\n         setModalActionTypeForAdminSubmit(btn);\n      } else {\n         buttonPanelFunction(btn);\n         getSheetRows({\n            ...stateRow,\n            currentRfaToAddNewOrReplyOrEdit: {\n               currentRfaNumber: rowData.rfaNumber,\n               currentRfaRef: rfaRefText,\n               currentRfaData: rfaData,\n               formRfaType: btn,\n               isFormEditting: false\n            },\n         });\n      };\n   };\n\n\n\n\n   const onMouseDownCellButtonConsultant = async (btn, replyCompany, rfaData) => {\n\n      try {\n         let userReply, isEditTimeOver;\n         if (isDrawingDetailTableDms === 'drawing-detail-consultant') {\n            userReply = getInfoValueFromRfaData(rfaData, 'reply', 'user', replyCompany);\n            isEditTimeOver = checkIfEditTimeIsOver(rfaData, replyCompany, EDIT_DURATION_MIN, 'check-if-status-button-ready');\n         } else {\n            userReply = getInfoValueFromRfaData(rowData, 'reply', 'user', replyCompany);\n            isEditTimeOver = checkIfEditTimeIsOver(rowData, replyCompany, EDIT_DURATION_MIN, 'check-if-status-button-ready');\n         };\n\n\n         if (isEditTimeOver || userReply === email) {\n            if (btn === 'See Note') {\n               setModalContent(\n                  <div>\n                     <div style={{ fontWeight: 'bold' }}>{rfaData[`reply-$$$-user-${replyCompany}`] || ''}</div>\n                     <div style={{ fontWeight: 'bold' }}>{rfaData[`reply-$$$-status-${replyCompany}`] || ''}</div>\n                     <div>{rfaData[`reply-$$$-comment-${replyCompany}`] || ''}</div>\n                  </div>\n               );\n\n            } else if (btn === 'Open Drawing File') {\n               const dwgLink = rfaData[`reply-$$$-drawing-${replyCompany}`];\n               if (dwgLink) {\n                  const res = await Axios.get('/api/issue/get-public-url', { params: { key: dwgLink, expire: 1000 } });\n                  window.open(res.data);\n               } else {\n                  message.info('There is no drawing attached!');\n               };\n\n            } else if (btn === 'Edit') {\n               let adminEditData = {};\n               const listEmailTo = getInfoValueFromRfaData(rfaData, 'reply', 'emailTo', replyCompany);\n               if (isUserCanSubmitBothSide) {\n                  adminEditData = {\n                     isAdminAction: true,\n                     isAdminActionWithNoEmailSent: !listEmailTo || listEmailTo.length === 0,\n                     adminActionConsultantToReply: replyCompany\n                  };\n               };\n\n               buttonPanelFunction('form-reply-RFA');\n               getSheetRows({\n                  ...stateRow,\n                  currentRfaToAddNewOrReplyOrEdit: {\n                     currentRfaNumber: rowData.rfaNumber,\n                     currentRfaRef: rowData['RFA Ref'],\n                     currentRfaData: rfaData,\n                     formRfaType: 'form-reply-RFA',\n                     isFormEditting: true,\n                     ...adminEditData\n                  },\n               });\n            };\n         } else {\n            return message.warn('Consultant is replying this RFA, please wait ...');\n         };\n      } catch (err) {\n         console.log(err);\n      };\n   };\n\n\n   const onMouseDownCellButtonRfaRef = async (btn) => {\n      try {\n         let userSubmission, isEditTimeOver;\n         if (isDrawingDetailTableDms === 'drawing-detail-rfa') {\n            userSubmission = getInfoValueFromRfaData(rfaData, 'submission', 'user');\n            isEditTimeOver = checkIfEditTimeIsOver(rfaData, null, EDIT_DURATION_MIN, 'check-if-rfa-button-ready');\n         } else {\n            userSubmission = getInfoValueFromRfaData(rowData, 'submission', 'user');\n            isEditTimeOver = checkIfEditTimeIsOver(rowData, null, EDIT_DURATION_MIN, 'check-if-rfa-button-ready');\n         };\n\n         if (!isEditTimeOver && userSubmission === email && btn === 'Open 3D File') {\n            return message.warn('3D model is uploading, please wait ...');\n         };\n\n         if (isEditTimeOver || userSubmission === email) {\n            if (btn === 'Open Drawing File') {\n               const dwgLink = getInfoValueFromRfaData(rfaData, 'submission', 'drawing');\n               if (dwgLink) {\n                  const res = await Axios.get('/api/issue/get-public-url', { params: { key: dwgLink, expire: 1000 } });\n                  window.open(res.data);\n               } else {\n                  message.info('There is no drawing attached!');\n               };\n\n            } else if (btn === 'Open 3D File') {\n               const dwgLink = getInfoValueFromRfaData(rfaData, 'submission', 'dwfxLink');\n               if (dwgLink) {\n                  window.open(dwgLink);\n               } else {\n                  message.info('There is no 3D model attached!');\n               };\n\n            } else if (btn === 'Edit') {\n               const typeBtn = rowData['RFA Ref'] !== rowData.rfaNumber ? 'form-resubmit-RFA' : 'form-submit-RFA';\n\n\n               let adminEditData = {};\n               const listEmailTo = getInfoValueFromRfaData(rfaData, 'submission', 'emailTo', company);\n               if (isUserCanSubmitBothSide) {\n                  adminEditData = {\n                     isAdminAction: true,\n                     isAdminActionWithNoEmailSent: !listEmailTo || listEmailTo.length === 0,\n                  };\n               };\n\n               buttonPanelFunction(typeBtn);\n               getSheetRows({\n                  ...stateRow,\n                  currentRfaToAddNewOrReplyOrEdit: {\n                     currentRfaNumber: rowData.rfaNumber,\n                     currentRfaRef: rowData['RFA Ref'],\n                     currentRfaData: rfaData,\n                     formRfaType: typeBtn,\n                     isFormEditting: true,\n                     ...adminEditData\n                  },\n               });\n            };\n         } else {\n            return message.warn('Woh Hup is submitting this RFA, please wait ...');\n         };\n      } catch (err) {\n         console.log(err);\n      };\n   };\n\n\n\n   const checkIfEditBtnShown = (header) => {\n\n      if (isAdmin) {\n         setIsEditButtonShownInCell(true);\n         return;\n      };\n\n      if (header === 'RFA Ref' && (roleTradeCompany.role === 'Document Controller' || isUserCanSubmitBothSide)) {\n         const userSubmission = getInfoValueFromRfaData(rowData, 'submission', 'user');\n         const isEditTimeOver = checkIfEditTimeIsOver(rowData, null, EDIT_DURATION_MIN, 'check-if-rfa-button-ready');\n         if (!isEditTimeOver && userSubmission === email) {\n            setIsEditButtonShownInCell(true);\n         } else {\n            setIsEditButtonShownInCell(false);\n         };\n\n      } else if (\n         (isColumnWithReplyData(column.key) || isColumnConsultant(column.key) || column.key.includes('Version ')) &&\n         (roleTradeCompany.role === 'Consultant' || isUserCanSubmitBothSide)\n      ) {\n         const userReply = getInfoValueFromRfaData(rowData, 'reply', 'user', replyCompany);\n         const isEditTimeOver = checkIfEditTimeIsOver(rowData, replyCompany, EDIT_DURATION_MIN, 'check-if-status-button-ready');\n         if (!isEditTimeOver && userReply === email) {\n            setIsEditButtonShownInCell(true);\n         } else {\n            setIsEditButtonShownInCell(false);\n         };\n      } else {\n         setIsEditButtonShownInCell(false);\n      };\n   };\n\n\n\n\n   const applyChooseConsultantToReplyForAdminOnly = (consultantToReply) => {\n      setModalPickConsultantForAdmin(false);\n      buttonPanelFunction('form-reply-RFA');\n      getSheetRows({\n         ...stateRow,\n         currentRfaToAddNewOrReplyOrEdit: {\n            currentRfaNumber: rowData.rfaNumber,\n            currentRfaRef: rfaRefText,\n            currentRfaData: rfaData,\n            formRfaType: 'form-reply-RFA',\n            isFormEditting: false,\n\n            isAdminAction: true,\n            isAdminActionWithNoEmailSent,\n            adminActionConsultantToReply: consultantToReply\n         },\n      });\n   };\n\n   const applyResubmitForAdminOnly = (isNoEmailSent) => {\n      buttonPanelFunction('form-resubmit-RFA');\n      getSheetRows({\n         ...stateRow,\n         currentRfaToAddNewOrReplyOrEdit: {\n            currentRfaNumber: rowData.rfaNumber,\n            currentRfaRef: rfaRefText,\n            currentRfaData: rfaData,\n            formRfaType: 'form-resubmit-RFA',\n            isFormEditting: false,\n\n            isAdminAction: true,\n            isAdminActionWithNoEmailSent: isNoEmailSent,\n         },\n      });\n   };\n\n\n\n\n   const additionalBtnToEdit = (isEditButtonShownInCell && pageSheetTypeName !== 'page-spreadsheet') ? ['Edit'] : [];\n   const additionalBtn3DModel = is3dModelAttached ? ['Open 3D File'] : [];\n\n   let arrayButtonReplyAndResubmit = [];\n   if (isUserCanSubmitBothSide) {\n      if (thereIsDrawingWithNoRfaRef) {\n         arrayButtonReplyAndResubmit = [...arrayButtonReplyAndResubmit, 'plus-square'];\n      };\n      if (thereIsDrawingWithNoReplyAndConsultantAllowedReply) {\n         arrayButtonReplyAndResubmit = [...arrayButtonReplyAndResubmit, 'form'];\n      };\n   } else {\n      if (thereIsDrawingWithNoReplyAndConsultantAllowedReply && roleTradeCompany.role === 'Consultant') {\n         arrayButtonReplyAndResubmit = ['form'];\n      } else if (thereIsDrawingWithNoRfaRef && roleTradeCompany.role === 'Document Controller') {\n         arrayButtonReplyAndResubmit = ['plus-square'];\n      };\n   };\n\n\n\n   return (\n      <div\n         style={{\n            width: '100%',\n            height: '100%',\n            position: 'relative',\n            padding: 5,\n\n            textOverflow: 'ellipsis',\n            overflow: 'hidden',\n            whiteSpace: 'nowrap',\n\n            color: replyStatus ? 'white' : 'black',\n            background: (column.key === 'Due Date' && overdueCount < 0)\n               ? '#FFEBCD'\n               : (colorTextRow[replyStatus] || 'transparent'),\n            fontWeight: (column.key === 'RFA Ref' && rowData.treeLevel) && 'bold'\n         }}\n         onMouseOver={() => {\n            if (\n               !rowData.treeLevel &&\n               (isColumnWithReplyData(column.key) || isColumnConsultant(column.key) || column.key === 'RFA Ref')\n            ) {\n               checkIfEditBtnShown(column.key);\n            };\n            if (!btnShown) setBtnShown(true);\n         }}\n         onMouseLeave={() => {\n            if (btnShown) setBtnShown(false);\n         }}\n      >\n         {(pageSheetTypeName === 'page-rfa' && rowData.treeLevel === 3 && column.key === 'RFA Ref') ? (\n            <div style={{ display: 'flex', position: 'relative' }}>\n\n               <span style={{ marginRight: 5 }}>{rowData['rfaNumber']}</span>\n\n               <div style={{ display: 'flex' }}>\n                  {[...rowData['btn'].sort(), 'All'].map(btn => (\n                     <Tooltip key={btn} placement='top' title={btn === '-' ? '0' : btn === 'All' ? 'Consolidate latest drawings' : btn}>\n                        <ButtonRFA\n                           onClick={() => onClickRfaDrawing(rowData['rfaNumber'], btn)}\n                           isActive={btn === activeBtn}\n                        >{btn === '-' ? '0' : btn}</ButtonRFA>\n                     </Tooltip>\n                  ))}\n               </div>\n\n               {arrayButtonReplyAndResubmit.map(button => (\n                  <Tooltip key={button} placement='top' title={button === 'form' ? 'Reply To This RFA' : button === 'plus-square' ? 'Add New RFA For This RFA' : null} >\n                     <Icon\n                        type={button}\n                        style={{\n                           fontSize: 17,\n                           transform: 'translateY(1.5px)',\n                           position: 'absolute',\n                           right: arrayButtonReplyAndResubmit.length === 2 ? (button === 'form' ? 30 : 3) : 3,\n                           top: 0\n                        }}\n                        onClick={() => onClickSubmitOrReplyRFA(button === 'form' ? 'form-reply-RFA' : button === 'plus-square' ? 'form-resubmit-RFA' : null)}\n                     />\n                  </Tooltip>\n               ))}\n            </div>\n         ) : (pageSheetTypeName !== 'page-spreadsheet' && rowData.treeLevel >= 2 && column.key === 'RFA Ref') ? rowData.title\n\n            : (!rowData.treeLevel && (isColumnWithReplyData(column.key) || isColumnConsultant(column.key)) && !replyStatus && rowData['RFA Ref']) ? (\n               <div>{replyCompany}</div>\n            ) : (!rowData.treeLevel && (isColumnWithReplyData(column.key) || isColumnConsultant(column.key)) && replyStatus) ? (\n               <div>\n                  <span style={{ fontWeight: 'bold' }}>{replyCompany}</span>\n                  <span>{` - (${replyDate})`}</span>\n               </div>\n\n            ) : (\n               !rowData.treeLevel &&\n               column.key.includes('Version ') &&\n               isDrawingDetailTableDms === 'drawing-detail-consultant' &&\n               replyStatus\n            ) ? (\n               <div style={{ float: 'left', paddingLeft: 3, fontWeight: 'bold' }}>{replyCompany}</div>\n\n            ) : (\n               !rowData.treeLevel &&\n               column.key.includes('Version ') &&\n               isDrawingDetailTableDms === 'drawing-detail-rfa'\n            ) ? (\n               <div style={{ float: 'left', paddingLeft: 3, fontWeight: 'bold' }}>{rfaData.rfaRef}</div>\n\n            ) : (!rowData.treeLevel && column.key === 'Due Date') ? (\n               <span style={{\n                  fontWeight: overdueCount < 0 && 'bold',\n                  color: overdueCount < 0 && 'red',\n               }}>\n                  {rowData['Consultant Reply (T)']}\n               </span>\n\n            ) : (!rowData.treeLevel && column.key === 'Submission Date') ? (\n               <span>{rowData['Drg To Consultant (A)']}</span>\n\n            ) : (!rowData.treeLevel && column.key === 'Requested By') ? (\n               <span>{requestedByCellData}</span>\n\n            ) : (!rowData.treeLevel && !isColumnWithReplyData(column.key)) ? cellData\n               : ''}\n\n\n         {btnShown && !rowData.treeLevel && replyCompany && (\n            isColumnWithReplyData(column.key) ||\n            isColumnConsultant(column.key) ||\n            (column.key.includes('Version ') && isDrawingDetailTableDms === 'drawing-detail-consultant')\n         ) && (\n               <>\n                  {['See Note', 'Open Drawing File', ...additionalBtnToEdit].map(btn => (\n                     <Tooltip key={btn} placement='topLeft' title={btn}>\n                        <div\n                           style={{\n                              cursor: 'pointer', position: 'absolute',\n                              right: btn === 'See Note' ? 27 : btn === 'Open Drawing File' ? 5 : 51,\n                              top: 5, height: 17, width: 17,\n                           }}\n                           onClick={() => onMouseDownCellButtonConsultant(btn, replyCompany, rfaData)}\n                        >\n                           <Icon\n                              type={btn === 'See Note' ? 'message' : btn === 'Open Drawing File' ? 'file' : 'edit'}\n                              style={{ color: replyStatus ? 'white' : 'black', fontSize: 15 }}\n                           />\n                        </div>\n                     </Tooltip>\n                  ))}\n               </>\n            )}\n\n         {btnShown && !rowData.treeLevel && (\n            (projectIsAppliedRfaView && column.key === 'RFA Ref' && rowData['RFA Ref']) ||\n            (column.key.includes('Version ') && isDrawingDetailTableDms === 'drawing-detail-rfa')\n         ) && (\n               <>\n                  {['Open Drawing File', ...additionalBtn3DModel, ...additionalBtnToEdit].map(btn => (\n                     <Tooltip key={btn} placement='top' title={btn}>\n                        <div\n                           style={{\n                              cursor: 'pointer', position: 'absolute',\n                              right: btn === 'Open Drawing File' ? 5 : btn === 'Open 3D File' ? 27 : (additionalBtn3DModel.length === 1 ? 51 : 27),\n                              top: 5, height: 17, width: 17,\n                           }}\n                           onClick={() => onMouseDownCellButtonRfaRef(btn)}\n                        >\n                           <Icon\n                              type={btn === 'Open Drawing File' ? 'file' : btn === 'Open 3D File' ? 'shake' : 'edit'}\n                              style={{ color: 'black', fontSize: 15 }}\n                           />\n                        </div>\n                     </Tooltip>\n                  ))}\n               </>\n            )\n         }\n\n\n         {modalContent && (\n            <ModalStyledSetting\n               title={'Drawing comment'}\n               visible={modalContent ? true : false}\n               footer={null}\n               onCancel={() => {\n                  setModalContent(null);\n                  setBtnShown(false);\n               }}\n               destroyOnClose={true}\n               centered={true}\n               width={window.innerWidth * 0.7}\n            >\n               {modalContent}\n            </ModalStyledSetting>\n         )}\n\n\n         {modalActionTypeForAdminSubmit && (\n            <ModalStyledSetting\n               title={'Choose Action (Admin)'}\n               visible={modalActionTypeForAdminSubmit === null ? false : true}\n               footer={null}\n               onCancel={() => setModalActionTypeForAdminSubmit(null)}\n               destroyOnClose={true}\n               centered={true}\n            >\n               <div style={{ flexDirection: 'column' }}>\n\n                  <div style={{ color: 'black', marginBottom: 10 }}>Do you want to submit/reply RFA and send an email ? (Not sending email option allows you to migrate RFA drawings already submitted previously)</div>\n                  <div style={{ marginTop: 20, padding: 10, display: 'flex', flexDirection: 'row-reverse' }}>\n                     <ButtonGroupComp\n                        onClickApply={() => {\n                           if (modalActionTypeForAdminSubmit === 'form-reply-RFA') {\n                              setModalPickConsultantForAdmin(true);\n                              setIsAdminActionWithNoEmailSent(false);\n                              setModalActionTypeForAdminSubmit(null);\n                           } else if (modalActionTypeForAdminSubmit === 'form-resubmit-RFA') {\n                              setIsAdminActionWithNoEmailSent(false);\n                              applyResubmitForAdminOnly(false);\n                              setModalActionTypeForAdminSubmit(null);\n                           };\n                        }}\n                        onClickCancel={() => {\n                           if (modalActionTypeForAdminSubmit === 'form-reply-RFA') {\n                              setModalPickConsultantForAdmin(true);\n                              setIsAdminActionWithNoEmailSent(true);\n                              setModalActionTypeForAdminSubmit(null);\n                           } else if (modalActionTypeForAdminSubmit === 'form-resubmit-RFA') {\n                              setIsAdminActionWithNoEmailSent(true);\n                              applyResubmitForAdminOnly(true);\n                              setModalActionTypeForAdminSubmit(null);\n                           };\n                        }}\n                        newTextBtnApply='Send Email'\n                        newTextBtnCancel='Update RFA Without Sending Email'\n                     />\n                  </div>\n               </div>\n            </ModalStyledSetting>\n         )}\n\n         {modalPickConsultantForAdmin && (\n            <ModalStyledSetting\n               title={'Choose Consultant To Reply'}\n               visible={modalPickConsultantForAdmin}\n               footer={null}\n               onCancel={() => setModalPickConsultantForAdmin(false)}\n               destroyOnClose={true}\n               centered={true}\n               width={window.innerWidth * 0.3}\n            >\n               <FormPickConsultantToReplyForAdmin\n                  applyChooseConsultantToReplyForAdminOnly={applyChooseConsultantToReplyForAdminOnly}\n                  onClickCancelModal={() => setModalPickConsultantForAdmin(false)}\n                  listConsultants={consultantsNotReplyYet}\n               />\n            </ModalStyledSetting>\n         )}\n      </div>\n   );\n};\n\nexport default CellRFA;\n\n\n\nconst ButtonRFA = styled.div`\n   &:hover {\n      cursor: pointer;\n      /* background: yellow; */\n   };\n   border-radius: 0;\n   border: 1px solid grey;\n   background: ${props => props.isActive ? colorType.yellow : 'white'};\n   min-width: 24px;\n   margin-right: 3px;\n   \n   text-align: center;\n   transition: 0.3s;\n`;\n\nconst ModalStyledSetting = styled(Modal)`\n   .ant-modal-content {\n      border-radius: 0;\n   }\n   .ant-modal-close {\n      display: none;\n   }\n   .ant-modal-header {\n      padding: 10px;\n   }\n   .ant-modal-title {\n        padding-left: 10px;\n        font-size: 20px;\n        font-weight: bold;\n   }\n   .ant-modal-body {\n      padding: 20px;\n      display: flex;\n      justify-content: center;\n   }\n`;\n\n\nexport const getConsultantReplyData = (rowData, header, companies) => {\n\n   let replyStatus, replyCompany, replyDate;\n\n   const listConsultantMustReply = getInfoValueFromRfaData(rowData, 'submission', 'consultantMustReply');\n   if (!listConsultantMustReply || listConsultantMustReply.length === 0) return { replyStatus, replyCompany, replyDate };\n\n   const consultantHeaderNumber = parseInt(header.slice(12, header.length - 1));\n\n   const consultantNameOfThisCell = listConsultantMustReply[consultantHeaderNumber - 1];\n\n   return {\n      replyStatus: rowData[`reply-$$$-status-${consultantNameOfThisCell}`],\n      replyCompany: consultantNameOfThisCell,\n      replyDate: convertReplyOrSubmissionDate(rowData[`reply-$$$-date-${consultantNameOfThisCell}`])\n   };\n};\n\nconst cloneRfaData = (row) => {\n   let obj = {};\n   for (const key in row) {\n      if (\n         key.includes('reply-') ||\n         key.includes('submission-') ||\n         key === 'rfaNumber' ||\n         key === 'Consultant Reply (T)' ||\n         key === 'Drg To Consultant (A)'\n      ) {\n         obj[key] = row[key];\n      };\n   };\n   return obj;\n};\n\nexport const isColumnWithReplyData = (header) => {\n   return header.includes('Consultant (') && !header.includes('Drg To Consultant (') && header !== 'Consultant';\n};\nexport const isColumnConsultant = (header) => {\n   return header === 'Consultant';\n};\n\nexport const getInfoValueFromRfaData = (obj, type, info, company = '') => {\n   for (const key in obj) {\n      if (key.includes(`${type}-$$$-${info}-${company}`)) {\n         return obj[key];\n      };\n   };\n};\nexport const getInfoKeyFromRfaData = (obj, type, info, company = '') => {\n   for (const key in obj) {\n      if (key.includes(`${type}-$$$-${info}-${company}`)) {\n         return key;\n      };\n   };\n};\nexport const getConsultantLeadName = (row) => {\n   const consultantMustReplyArray = getInfoValueFromRfaData(row, 'submission', 'consultantMustReply');\n   let consultantLead;\n   if (consultantMustReplyArray) {\n      consultantLead = consultantMustReplyArray[0];\n   };\n   return consultantLead;\n};\n\nexport const convertReplyOrSubmissionDate = (date) => {\n\n   let output;\n   if (typeof date === 'string' && date.length === 8) {\n      return date;\n   } else if (typeof date === 'string' && date.length > 8) {\n      return moment(date).format('DD/MM/YY');\n   };\n\n   return output;\n};\n\nconst checkIfEditTimeIsOver = (rowData, replyCompany, editTimeAllowed, type) => {\n   let result = false;\n   let duration;\n\n   if (type === 'consultant-check-if-rfa-ready-to-reply' || type === 'check-if-rfa-button-ready') {\n      const dateSubmission = getInfoValueFromRfaData(rowData, 'submission', 'date');\n      if (dateSubmission) {\n         duration = moment.duration(moment(new Date()).diff(dateSubmission)).asMinutes();\n      } else {\n         return true;\n      };\n   } else if (type === 'check-if-status-button-ready') {\n      const dateReply = getInfoValueFromRfaData(rowData, 'reply', 'date', replyCompany);\n\n      if (typeof dateReply === 'string' && dateReply.length > 8) {\n         duration = moment.duration(moment(new Date()).diff(dateReply)).asMinutes();\n      } else if (typeof dateReply === 'string' && dateReply.length === 8) {\n         return true;\n      };\n   } else if (type === 'wohhup-check-if-rfa-ready-to-resubmit') {\n      const consultantLead = getInfoValueFromRfaData(rowData, 'submission', 'consultantMustReply')[0];\n      const dateConsultantLeadReply = getInfoValueFromRfaData(rowData, 'reply', 'date', consultantLead);\n      if (typeof dateConsultantLeadReply === 'string' && dateConsultantLeadReply.length > 8) {\n         duration = moment.duration(moment(new Date()).diff(dateConsultantLeadReply)).asMinutes();\n\n      } else if (typeof dateConsultantLeadReply === 'string' && dateConsultantLeadReply.length === 8) {\n         return true;\n      };\n   };\n\n   if (duration && duration > editTimeAllowed) {\n      return true;\n   };\n   return result;\n};\n\n\n\n\n\n\nconst FormPickConsultantToReplyForAdmin = ({ applyChooseConsultantToReplyForAdminOnly, onClickCancelModal, listConsultants }) => {\n\n\n   const [list, setList] = useState(listConsultants.map(cst => ({\n      id: mongoObjectId(),\n      header: cst,\n      mode: 'hidden'\n   })));\n\n   const onClickApply = () => {\n      const consultantToReply = list.find(x => x.mode === 'shown');\n      if (!consultantToReply) {\n         return message.warn('Please choose consultant to reply!');\n      };\n      applyChooseConsultantToReplyForAdminOnly(consultantToReply.header);\n   };\n\n   const setMode = (item) => {\n      list.forEach(tag => {\n         if (tag.id === item.id) {\n            tag.mode = 'shown';\n         } else {\n            tag.mode = 'hidden';\n         };\n      });\n      setList([...list]);\n   };\n\n\n\n   return (\n      <div style={{ width: '100%', height: '100%' }}>\n         <PanelStyled>\n            <div style={{ fontSize: 11, paddingLeft: 20 }}>Click to select consultant to reply.</div>\n            <div style={{ width: '100%', paddingTop: 20 }}>\n               {list.map((tag, i) => (\n                  <ButtonColumnTag\n                     key={i}\n                     tag={tag}\n                     setMode={setMode}\n                     actionType='admin-pick-consultant-to-reply'\n                  />\n               ))}\n\n            </div>\n\n         </PanelStyled>\n         <div style={{ marginTop: 20, padding: 10, display: 'flex', flexDirection: 'row-reverse' }}>\n            <ButtonGroupComp\n               onClickCancel={onClickCancelModal}\n               onClickApply={onClickApply}\n            />\n         </div>\n\n      </div>\n   );\n};\n\nconst PanelStyled = styled.div`\n   max-height: 60vh;\n   width: 100%;\n   /* overflow-y: scroll;\n   overflow-x: hidden; */\n   border-bottom: 1px solid ${colorType.grey4};\n`;\n\n\n\n","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\pageSpreadsheet\\PanelAddNewRFA.js",["447","448","449","450","451","452","453","454","455","456","457","458"],"import { DatePicker, Icon, Input, message, Modal, Select, Tooltip, Upload } from 'antd';\nimport moment from 'moment';\nimport React, { useContext, useEffect, useState } from 'react';\nimport BaseTable, { AutoResizer, Column } from 'react-base-table';\nimport styled from 'styled-components';\nimport { colorType } from '../../constants';\nimport { Context as ProjectContext } from '../../contexts/projectContext';\nimport { Context as RowContext } from '../../contexts/rowContext';\nimport { debounceFnc, validateEmailInput } from '../../utils';\nimport ButtonGroupComp from '../generalComponents/ButtonGroupComp';\nimport ButtonStyle from '../generalComponents/ButtonStyle';\nimport { getInfoKeyFromRfaData, getInfoValueFromRfaData } from './CellRFA';\nimport { getTradeNameFnc } from './FormDrawingTypeOrder';\nimport TableDrawingRFA from './TableDrawingRFA';\n\n\nconst { Option } = Select;\nconst { TextArea } = Input;\n\n\nconst extractConsultantName = (name) => {\n   const indexOfSplitString = name.indexOf('_%$%_');\n   return name.slice(0, indexOfSplitString === -1 ? -99999 : indexOfSplitString);\n};\nconst checkIfMatchWithInputCompanyFormat = (item, listConsultants) => {\n   let result = false;\n   listConsultants.forEach(cm => {\n      if (cm.company === extractConsultantName(item)) {\n         result = true;\n      };\n   });\n   return result;\n};\nconst getGroupCompanyForAdminSubmitWithoutEmail = (listGroup, listConsultants) => {\n   let output = [];\n   listConsultants.forEach(cmp => {\n      if (listGroup.find(x => x.includes(`${cmp.company}_%$%_`))) {\n         output.push(`${cmp.company}_%$%_`);\n      };\n   });\n   return [...new Set(output)];\n};\n\n\n\nconst versionArray = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H'];\n\n\n\nconst Table = (props) => {\n   return (\n      <AutoResizer>\n         {({ width, height }) => {\n            return (\n               <BaseTable\n                  {...props}\n                  width={width}\n                  height={height}\n               />\n            );\n         }}\n      </AutoResizer>\n   );\n};\n\n\nconst PanelAddNewRFA = ({ onClickCancelModal, onClickApplyAddNewRFA }) => {\n\n\n   const { state: stateRow, getSheetRows } = useContext(RowContext);\n   const { state: stateProject } = useContext(ProjectContext);\n\n   const { roleTradeCompany: { role, company: companyUser }, companies, listUser, listGroup: listGroupOutput, projectNameShort: projectNameShortText } = stateProject.allDataOneSheet;\n   const projectNameShort = projectNameShortText || 'NO-PROJECT-NAME';\n\n   const { rowsAll, loading, currentRfaToAddNewOrReplyOrEdit, rowsRfaAll, rowsRfaAllInit, drawingTypeTreeDmsView } = stateRow;\n\n   const {\n      currentRfaNumber, currentRfaRef, currentRfaData, formRfaType, isFormEditting,\n      isAdminAction, isAdminActionWithNoEmailSent, adminActionConsultantToReply,\n   } = currentRfaToAddNewOrReplyOrEdit || {};\n\n   const company = (formRfaType === 'form-reply-RFA' && isAdminAction && adminActionConsultantToReply) ? adminActionConsultantToReply : companyUser;\n\n\n   const listConsultants = companies.filter(x => x.companyType === 'Consultant');\n\n\n   let listGroup = (isAdminAction && isAdminActionWithNoEmailSent)\n      ? getGroupCompanyForAdminSubmitWithoutEmail(listGroupOutput, listConsultants)\n      : listGroupOutput;\n\n\n   const listRecipient = (isAdminAction && isAdminActionWithNoEmailSent)\n      ? getGroupCompanyForAdminSubmitWithoutEmail(listGroup, listConsultants)\n      : [...listUser, ...listGroup];\n\n\n\n\n   const [rfaNumberSuffixFirstTimeSubmit, setRfaNumberSuffixFirstTimeSubmit] = useState('');\n\n   const [rfaNewVersionResubmitSuffix, setRfaNewVersionResubmitSuffix] = useState('');\n\n   const [tradeOfRfaForFirstTimeSubmit, setTradeOfRfaForFirstTimeSubmit] = useState(null);\n\n   const [mepSubTradeFirstTime, setMepSubTradeFirstTime] = useState(null);\n\n   const [dateReplyForSubmitForm, setDateReplyForSubmitForm] = useState(null);\n\n   const [tablePickDrawingRFA, setTablePickDrawingRFA] = useState(false);\n   const [dwgsToAddNewRFA, setDwgsToAddNewRFA] = useState(null);\n   const [dwgIdToAddComment, setIdToDwgAddComment] = useState(null);\n   const [nosColumnFixed, setNosColumnFixed] = useState(1);\n   const [commentText, setCommentText] = useState('');\n\n   const [filesPDF, setFilesPDF] = useState(null);\n   const [filesDWFX, setFilesDWFX] = useState(null);\n   const [listRecipientTo, setListRecipientTo] = useState([]);\n   const [listRecipientCc, setListRecipientCc] = useState([]);\n\n   const [listConsultantMustReply, setListConsultantMustReply] = useState([]);\n   const [requestedBy, setRequestedBy] = useState('');\n\n   const [textEmailTitle, setTextEmailTitle] = useState('');\n\n   const [textEmailAdditionalNotes, setTextEmailAdditionalNotes] = useState('');\n\n   const [modalConfirmsubmitOrCancel, setModalConfirmsubmitOrCancel] = useState(null);\n\n\n   const [dateSendThisForm, setDateSendThisForm] = useState(null);\n\n\n   const [existingTradeOfResubmision, setExistingTradeOfResubmision] = useState(null);\n\n   const [existingSubTradeOfResubmision, setExistingSubTradeOfResubmision] = useState(null);\n\n\n\n   useEffect(() => {\n      if (formRfaType === 'form-submit-RFA') {\n         if (!isFormEditting) {\n            setDwgsToAddNewRFA(null);\n            setDateReplyForSubmitForm(moment(moment().add(14, 'days').format('DD/MM/YY'), 'DD/MM/YY'));\n\n            if (isAdminAction && isAdminActionWithNoEmailSent) {\n               setDateSendThisForm(moment(moment().format('DD/MM/YY'), 'DD/MM/YY'));\n            };\n\n         } else {\n            const rowsToEdit = rowsRfaAllInit.filter(x => currentRfaRef === x['RFA Ref']);\n            const rowsToEditClone = rowsToEdit.map(x => ({ ...x }));\n            rowsToEditClone.forEach(r => {\n               const dwgLink = r[`submission-$$$-drawing-${company}`];\n               r[`submission-$$$-drawing-${company}`] = /[^/]*$/.exec(dwgLink)[0];\n            });\n            setDwgsToAddNewRFA(rowsToEditClone);\n\n\n            if (isAdminAction && isAdminActionWithNoEmailSent) {\n               const listConsultantMustReply = getInfoValueFromRfaData(currentRfaData, 'submission', 'consultantMustReply', company) || [];\n               setListRecipientTo(listConsultantMustReply.map(cmp => `${cmp}_%$%_`));\n               setDateSendThisForm(moment(currentRfaData['Drg To Consultant (A)'], 'DD/MM/YY'));\n            } else {\n               const listEmailTo = getInfoValueFromRfaData(currentRfaData, 'submission', 'emailTo', company) || [];\n               setListRecipientTo([...new Set(listEmailTo)]);\n            };\n\n\n            const listEmailCc = getInfoValueFromRfaData(currentRfaData, 'submission', 'emailCc', company) || [];\n            setListRecipientCc([...new Set(listEmailCc)]);\n\n            setListConsultantMustReply(getInfoValueFromRfaData(currentRfaData, 'submission', 'consultantMustReply', company) || []);\n            setRequestedBy(getInfoValueFromRfaData(currentRfaData, 'submission', 'requestedBy', company) || '');\n            setTextEmailTitle(getInfoValueFromRfaData(currentRfaData, 'submission', 'emailTitle', company) || '');\n            setTextEmailAdditionalNotes(getInfoValueFromRfaData(currentRfaData, 'submission', 'emailAdditionalNotes', company) || '');\n\n            setDateReplyForSubmitForm(moment(currentRfaData['Consultant Reply (T)'], 'DD/MM/YY'));\n\n            setTradeOfRfaForFirstTimeSubmit(convertTradeCode(getInfoValueFromRfaData(currentRfaData, 'submission', 'trade', company)));\n            setMepSubTradeFirstTime(getInfoValueFromRfaData(currentRfaData, 'submission', 'subTradeForMep', company));\n\n            const rfaNumberSuffixPrevious = /[^/]*$/.exec(currentRfaRef)[0];\n            setRfaNumberSuffixFirstTimeSubmit(rfaNumberSuffixPrevious);\n         };\n      } else if (formRfaType === 'form-resubmit-RFA') {\n         if (!isFormEditting) {\n            const dwgsToResubmit = rowsRfaAllInit.filter(dwg => {\n               return dwg.rfaNumber === currentRfaNumber &&\n                  !dwg['RFA Ref'];\n            });\n            setDwgsToAddNewRFA(dwgsToResubmit.map(x => ({ ...x })));\n\n\n            if (isAdminAction && isAdminActionWithNoEmailSent) {\n               const listConsultantMustReply = getInfoValueFromRfaData(currentRfaData, 'submission', 'consultantMustReply', company) || [];\n               setListRecipientTo(listConsultantMustReply.map(cmp => `${cmp}_%$%_`));\n               setDateSendThisForm(moment(moment().format('DD/MM/YY'), 'DD/MM/YY'));\n            } else {\n               const listEmailTo = currentRfaData[`submission-$$$-emailTo-${company}`] || [];\n               setListRecipientTo([...new Set(listEmailTo)]);\n            };\n\n            const listEmailCc = currentRfaData[`submission-$$$-emailCc-${company}`] || [];\n            setListRecipientCc([...new Set(listEmailCc)]);\n\n            setListConsultantMustReply(currentRfaData[`submission-$$$-consultantMustReply-${company}`]);\n            setRequestedBy(currentRfaData[`submission-$$$-requestedBy-${company}`]);\n\n\n            const versionAlreadySubmit = rowsRfaAllInit\n               .filter(dwg => dwg.rfaNumber === currentRfaNumber && dwg['RFA Ref'])\n               .map(x => x['RFA Ref']);\n\n            const versionTextAlreadySubmitArr = versionAlreadySubmit.map(rfaNum => {\n               return rfaNum.slice(currentRfaNumber.length, rfaNum.length);\n            });\n            const versionLeft = versionArray.filter(x => versionTextAlreadySubmitArr.indexOf(x) === -1);\n            setRfaNewVersionResubmitSuffix(versionLeft[0]);\n\n            const oneDwg = dwgsToResubmit[0];\n            setTextEmailTitle('Resubmit - ' + oneDwg[`submission-$$$-emailTitle-${company}`]);\n            setDateReplyForSubmitForm(moment(moment().add(14, 'days').format('DD/MM/YY'), 'DD/MM/YY'));\n\n\n            const tradeOfDrawing = convertTradeCodeInverted(oneDwg['rfaNumber'].split('/')[2]);\n            setExistingTradeOfResubmision(tradeOfDrawing);\n            const subTrade = getInfoValueFromRfaData(oneDwg, 'submission', 'subTrade', company);\n            if (subTrade) {\n               setExistingSubTradeOfResubmision(subTrade);\n            };\n\n         } else {\n\n            const rowsToEdit = rowsRfaAllInit.filter(x => currentRfaRef === x['RFA Ref']);\n            const rowsToEditClone = rowsToEdit.map(x => ({ ...x }));\n            rowsToEditClone.forEach(r => {\n               const dwgLink = r[`submission-$$$-drawing-${company}`];\n               r[`submission-$$$-drawing-${company}`] = /[^/]*$/.exec(dwgLink)[0];\n            });\n\n            const versionTextSuffix = currentRfaRef.slice(currentRfaNumber.length, currentRfaRef.length);\n            setRfaNewVersionResubmitSuffix(versionTextSuffix);\n            setDwgsToAddNewRFA(rowsToEditClone);\n\n            if (isAdminAction && isAdminActionWithNoEmailSent) {\n               const listConsultantMustReply = getInfoValueFromRfaData(currentRfaData, 'submission', 'consultantMustReply', company) || [];\n               setListRecipientTo(listConsultantMustReply.map(cmp => `${cmp}_%$%_`));\n               setDateSendThisForm(moment(currentRfaData['Drg To Consultant (A)'], 'DD/MM/YY'));\n            } else {\n               const listEmailTo = getInfoValueFromRfaData(currentRfaData, 'submission', 'emailTo', company) || [];\n               setListRecipientTo([...new Set(listEmailTo)]);\n            };\n\n\n            const listEmailCc = getInfoValueFromRfaData(currentRfaData, 'submission', 'emailCc', company) || [];\n            setListRecipientCc([...new Set(listEmailCc)]);\n\n            setListConsultantMustReply(getInfoValueFromRfaData(currentRfaData, 'submission', 'consultantMustReply', company) || []);\n            setRequestedBy(getInfoValueFromRfaData(currentRfaData, 'submission', 'requestedBy', company) || '');\n            setTextEmailTitle(getInfoValueFromRfaData(currentRfaData, 'submission', 'emailTitle', company) || '');\n            setTextEmailAdditionalNotes(getInfoValueFromRfaData(currentRfaData, 'submission', 'emailAdditionalNotes', company) || '');\n\n            setDateReplyForSubmitForm(moment(currentRfaData['Consultant Reply (T)'], 'DD/MM/YY'));\n            setTradeOfRfaForFirstTimeSubmit(convertTradeCode(getInfoValueFromRfaData(currentRfaData, 'submission', 'trade', company)));\n            setMepSubTradeFirstTime(getInfoValueFromRfaData(currentRfaData, 'submission', 'subTradeForMep', company));\n\n            const rfaNumberSuffixPrevious = /[^/]*$/.exec(currentRfaRef)[0];\n            setRfaNumberSuffixFirstTimeSubmit(rfaNumberSuffixPrevious);\n\n            const oneDwg = rowsToEditClone[0];\n            const tradeOfDrawing = convertTradeCodeInverted(oneDwg['rfaNumber'].split('/')[2]);\n            setExistingTradeOfResubmision(tradeOfDrawing);\n\n            const subTrade = getInfoValueFromRfaData(oneDwg, 'submission', 'subTrade', company);\n            if (subTrade) {\n               setExistingSubTradeOfResubmision(subTrade);\n            };\n         };\n\n      } else if (formRfaType === 'form-reply-RFA') {\n\n         if (!isFormEditting) {\n            const dwgsNotReplyYet = rowsRfaAllInit.filter(dwg => {\n               return dwg.rfaNumber === currentRfaNumber &&\n                  dwg['RFA Ref'] === currentRfaRef &&\n                  !currentRfaData[`reply-$$$-status-${company}`];\n            });\n\n            setDwgsToAddNewRFA(dwgsNotReplyYet.map(x => ({ ...x })));\n\n            let arrEmailCc = [];\n            for (const key in currentRfaData) {\n               if (key.includes('submission-$$$-user-')) {\n                  const listEmailTo = currentRfaData[key] ? [currentRfaData[key]] : [];\n                  setListRecipientTo([...new Set(listEmailTo)]);\n\n               } else if (key.includes('submission-$$$-emailTo-') || key.includes('submission-$$$-emailCc-')) {\n                  arrEmailCc = [...new Set([...arrEmailCc, ...currentRfaData[key]])];\n               };\n            };\n            setListRecipientCc([...new Set(arrEmailCc)]);\n            const oneDwg = dwgsNotReplyYet[0];\n            const keyEmailTitle = getInfoKeyFromRfaData(oneDwg, 'submission', 'emailTitle');\n            setTextEmailTitle('Reply - ' + oneDwg[keyEmailTitle]);\n\n            if (isAdminAction && isAdminActionWithNoEmailSent) {\n               setDateSendThisForm(moment(moment().format('DD/MM/YY'), 'DD/MM/YY'));\n            };\n\n         } else {\n            const dwgsToEditReply = rowsRfaAllInit.filter(x => currentRfaRef === x['RFA Ref']);\n            const dwgsToEditReplyClone = dwgsToEditReply.map(x => ({ ...x }));\n            dwgsToEditReplyClone.forEach(r => {\n               const dwgLink = r[`reply-$$$-drawing-${company}`];\n               r[`reply-$$$-drawing-${company}`] = /[^/]*$/.exec(dwgLink)[0];\n            });\n            setDwgsToAddNewRFA(dwgsToEditReplyClone);\n\n\n            const listEmailTo = getInfoValueFromRfaData(currentRfaData, 'reply', 'emailTo', company) || [];\n            setListRecipientTo([...new Set(listEmailTo)]);\n\n            const listEmailCc = getInfoValueFromRfaData(currentRfaData, 'reply', 'emailCc', company) || [];\n            setListRecipientCc([...new Set(listEmailCc)]);\n\n            setTextEmailTitle(getInfoValueFromRfaData(currentRfaData, 'reply', 'emailTitle', company) || '');\n            setTextEmailAdditionalNotes(getInfoValueFromRfaData(currentRfaData, 'reply', 'emailAdditionalNotes', company) || '');\n\n\n            if (isAdminAction && isAdminActionWithNoEmailSent) {\n               const replyActualDate = getInfoValueFromRfaData(currentRfaData, 'reply', 'date', company);\n               setDateSendThisForm(moment(moment(replyActualDate), 'DD/MM/YY'));\n            };\n         };\n      };\n   }, []);\n\n\n   useEffect(() => {\n      if (tradeOfRfaForFirstTimeSubmit && formRfaType === 'form-submit-RFA' && !isFormEditting) {\n\n         let filterRows = rowsRfaAllInit.filter(x => {\n            return x.rfaNumber &&\n               x.rfaNumber.split('/')[2] === tradeOfRfaForFirstTimeSubmit;\n         });\n\n         if (tradeOfRfaForFirstTimeSubmit === 'ME') {\n            filterRows = filterRows.filter(x => {\n               return x.rfaNumber.split('/')[3] === mepSubTradeFirstTime;\n            });\n         };\n\n         let rfaNumberExtracted = [...new Set(filterRows.map(x => /[^/]*$/.exec(x.rfaNumber)[0]))];\n\n         rfaNumberExtracted = rfaNumberExtracted\n            .filter(x => x.length === 3 && parseInt(x) > 0)\n            .map(x => parseInt(x));\n\n         if (rfaNumberExtracted.length > 0) {\n            const lastNumber = Math.max(...rfaNumberExtracted);\n            const suggestedNewRfaNumber = lastNumber + 1;\n            const suggestedNewRfaNumberConverted = suggestedNewRfaNumber.toString();\n            const suggestedNewRfaNumberString = suggestedNewRfaNumberConverted.length === 3 ? suggestedNewRfaNumberConverted\n               : suggestedNewRfaNumberConverted.length === 2 ? '0' + suggestedNewRfaNumberConverted\n                  : '00' + suggestedNewRfaNumberConverted;\n            setRfaNumberSuffixFirstTimeSubmit(suggestedNewRfaNumberString);\n         } else {\n            setRfaNumberSuffixFirstTimeSubmit('001');\n         };\n      };\n   }, [tradeOfRfaForFirstTimeSubmit, mepSubTradeFirstTime]);\n\n\n   useEffect(() => {\n      if (!loading) {\n         setModalConfirmsubmitOrCancel(null);\n      };\n   }, [loading]);\n\n\n\n\n   useEffect(() => {\n      if (filesDWFX && Object.keys(filesDWFX).length > 0) {\n         const dwgsToAddNewRfaClone = dwgsToAddNewRFA.map(x => ({ ...x }));\n         let isFileDWFXsameNameFound = false;\n         Object.keys(filesDWFX).forEach(key => {\n            const fileDwfxName = key.slice(0, key.length - 5);\n            dwgsToAddNewRfaClone.forEach(row => {\n               if (row['Drawing Number'] && (row['Drawing Number'].includes(fileDwfxName) || fileDwfxName.includes(row['Drawing Number']))) {\n                  row[`submission-$$$-dwfxName-${company}`] = key;\n                  isFileDWFXsameNameFound = true;\n               };\n            });\n         });\n\n         if (!isFileDWFXsameNameFound) {\n            const first3Dfile = Object.keys(filesDWFX)[0];\n            dwgsToAddNewRfaClone.forEach(dwg => {\n               dwg[`submission-$$$-dwfxName-${company}`] = first3Dfile;\n            });\n         };\n         setDwgsToAddNewRFA(dwgsToAddNewRfaClone);\n      };\n   }, [filesDWFX]);\n\n\n   useEffect(() => {\n      if (filesPDF && Object.keys(filesPDF).length > 0) {\n         const type = formRfaType === 'form-reply-RFA' ? 'reply' : 'submission';\n         const dwgsToAddNewRfaClone = dwgsToAddNewRFA.map(x => ({ ...x }));\n         Object.keys(filesPDF).forEach(key => {\n            const filePdfName = key.slice(0, key.length - 4);\n            dwgsToAddNewRfaClone.forEach(row => {\n               if (row['Drawing Number'] && (row['Drawing Number'].includes(filePdfName) || filePdfName.includes(row['Drawing Number']))) {\n                  row[`${type}-$$$-drawing-${company}`] = key;\n               };\n            });\n         });\n         setDwgsToAddNewRFA(dwgsToAddNewRfaClone);\n      };\n   }, [filesPDF]);\n\n\n\n\n\n\n   const onClickApplyModalPickDrawing = (formRfaType, drawingTrade, drawingSubTrade, dwgIds) => {\n\n\n\n      if (!dwgIds || dwgIds.length === 0) return;\n      let dwgsToAdd = [];\n\n      if (formRfaType === 'form-submit-RFA') {\n         dwgsToAdd = rowsAll.filter(r => dwgIds.indexOf(r.id) !== -1);\n         setDwgsToAddNewRFA(dwgsToAdd);\n         setTradeOfRfaForFirstTimeSubmit(convertTradeCode(drawingTrade));\n         setMepSubTradeFirstTime(drawingSubTrade);\n\n         if (listRecipientTo.length === 0) {\n            const dwgsThisTrade = rowsRfaAllInit\n               .filter(dwg => dwg[`submission-$$$-trade-${company}`] === drawingTrade)\n               .filter(dwg => {\n                  if (drawingSubTrade !== 'Select Sub Trade...') {\n                     return dwg[`submission-$$$-subTradeForMep-${company}`] === drawingSubTrade;\n                  } else {\n                     return true;\n                  };\n               })\n               .sort((a, b) => (a.rfaNumber > b.rfaNumber ? 1 : -1));\n            \n\n            const lastRfaFound = dwgsThisTrade[dwgsThisTrade.length - 1];\n            if (lastRfaFound) {\n               setListRecipientTo(lastRfaFound[`submission-$$$-emailTo-${company}`] || []);\n               setListRecipientCc(lastRfaFound[`submission-$$$-emailCc-${company}`] || []);\n               setListConsultantMustReply(lastRfaFound[`submission-$$$-consultantMustReply-${company}`] || []);\n            };\n         };\n      } else if (formRfaType === 'form-resubmit-RFA') {\n         dwgsToAdd = rowsAll.filter(r => dwgIds.indexOf(r.id) !== -1);\n         setDwgsToAddNewRFA([...dwgsToAddNewRFA, ...dwgsToAdd]);\n      };\n\n\n      \n      const dwgFound = dwgsToAdd.find(x => x['Coordinator In Charge']);\n      if (dwgFound) {\n         setRequestedBy(dwgFound['Coordinator In Charge']);\n      };\n      setTablePickDrawingRFA(false);\n   };\n\n\n\n   const setRevisionDwg = (id, rev) => {\n      const row = dwgsToAddNewRFA.find(x => x.id === id);\n      row['Rev'] = rev;\n      setDwgsToAddNewRFA([...dwgsToAddNewRFA]);\n   };\n   const removeDrawingToAddRFA = debounceFnc((id) => {\n      setDwgsToAddNewRFA(dwgsToAddNewRFA.filter(x => x.id !== id));\n      setNosColumnFixed(2);\n      setNosColumnFixed(1);\n   }, 1);\n   const onClickCommentBtn = (id) => {\n      setIdToDwgAddComment(id);\n   };\n\n\n   const onBlurInputRFANameCreateNew = () => {\n      const arr = [...new Set(rowsRfaAllInit.map(x => (x['RFA Ref'] || '')))];\n      if (formRfaType === 'form-submit-RFA') {\n         let regExp = /[a-zA-Z]/g;\n         if (regExp.test(rfaNumberSuffixFirstTimeSubmit)) {\n            message.info('Please key in number only!');\n            setRfaNumberSuffixFirstTimeSubmit('');\n         } else {\n\n            const subTradeForMepDwg = (mepSubTradeFirstTime && mepSubTradeFirstTime !== 'Select Sub Trade...') ? `${mepSubTradeFirstTime}/` : '';\n            if (!isFormEditting) {\n               const newRfaToRaiseFirstSubmit = `RFA/${projectNameShort}/${tradeOfRfaForFirstTimeSubmit || '____'}/${subTradeForMepDwg}${rfaNumberSuffixFirstTimeSubmit}`;\n               if (arr.indexOf(newRfaToRaiseFirstSubmit) !== -1) {\n                  message.info('This RFA number has already existed, please choose a new number!');\n                  setRfaNumberSuffixFirstTimeSubmit('');\n               };\n            } else {\n               const arrFilter = arr.filter(x => x !== currentRfaRef);\n               const newRfaToRaiseFirstSubmit = `RFA/${projectNameShort}/${tradeOfRfaForFirstTimeSubmit || '____'}/${subTradeForMepDwg}${rfaNumberSuffixFirstTimeSubmit}`;\n               if (arrFilter.indexOf(newRfaToRaiseFirstSubmit) !== -1) {\n                  message.info('This RFA number has already existed, please choose a new number!');\n                  setRfaNumberSuffixFirstTimeSubmit('');\n               };\n            };\n         };\n      } else if (formRfaType === 'form-resubmit-RFA') {\n         if (versionArray.indexOf(rfaNewVersionResubmitSuffix) === -1) {\n            message.info('Please key in letter only!');\n            setRfaNewVersionResubmitSuffix('');\n         } else {\n            if (!isFormEditting) {\n               const newRfaToRaiseResubmit = `${currentRfaNumber}${rfaNewVersionResubmitSuffix}`;\n               if (arr.indexOf(newRfaToRaiseResubmit) !== -1) {\n                  message.info('This RFA number has already existed, please choose a new number!');\n                  setRfaNewVersionResubmitSuffix('');\n               };\n            };\n         };\n      };\n   };\n\n\n\n   const applyAddCommentToDrawing = () => {\n      const row = dwgsToAddNewRFA.find(x => x.id === dwgIdToAddComment);\n      row[`reply-$$$-comment-${company}`] = commentText;\n      setDwgsToAddNewRFA([...dwgsToAddNewRFA.map(dwg => ({ ...dwg }))]);\n      setIdToDwgAddComment(null);\n      setCommentText('');\n   };\n\n   const onChangeUploadFilePDF = (info) => {\n      if (info.fileList) {\n         let output = {};\n         info.fileList.forEach(file => {\n            output = { ...output, [file.name]: file };\n         });\n         setFilesPDF(output);\n      };\n      const dwgsToAddNewRFAClone = dwgsToAddNewRFA.map(x => ({ ...x }));\n      dwgsToAddNewRFAClone.forEach(r => {\n         r[`${formRfaType === 'form-reply-RFA' ? 'reply' : 'submission'}-$$$-drawing-${company}`] = '';\n      });\n      setDwgsToAddNewRFA(dwgsToAddNewRFAClone);\n   };\n\n   const onChangeUploadFileDWFX = (info) => {\n      if (info.fileList) {\n         let output = {};\n         let canUploadFile = true;\n         info.fileList.forEach(file => {\n            output = { ...output, [file.name]: file };\n            if (file.size > 1000 * 1000 * 100) {\n               canUploadFile = false;\n            };\n         });\n\n         if (!canUploadFile) {\n            message.warn('File size should be less than 100MB!');\n         } else {\n            setFilesDWFX(output);\n         };\n      };\n   };\n\n\n\n\n   const onClickTagRecipientTo = (email, isRemoveTag) => {\n      let outputListConsultantMustReply = [...listConsultantMustReply];\n\n      const consultantName = extractConsultantName(email);\n      const originConsultant = listConsultants.find(x => x.company === consultantName);\n      outputListConsultantMustReply = outputListConsultantMustReply.filter(x => x !== consultantName);\n\n      if (originConsultant && !isRemoveTag) {\n         outputListConsultantMustReply.unshift(originConsultant.company);\n      };\n      setListConsultantMustReply(outputListConsultantMustReply);\n   };\n\n   const onClickApplyDoneFormRFA = () => {\n      if (!dwgsToAddNewRFA || dwgsToAddNewRFA.length === 0) {\n         return message.info('Please insert drawings to submit!', 2);\n      };\n\n      let isAllDataInRowFilledIn = true;\n      let listFilePdf;\n      if (formRfaType === 'form-submit-RFA' || formRfaType === 'form-resubmit-RFA') {\n         dwgsToAddNewRFA.forEach(r => {\n            if (!r['Rev'] || !r[`submission-$$$-drawing-${company}`]) {\n               isAllDataInRowFilledIn = false;\n            };\n         });\n         listFilePdf = dwgsToAddNewRFA.map(r => r[`submission-$$$-drawing-${company}`]);\n      } else if (formRfaType === 'form-reply-RFA') {\n         dwgsToAddNewRFA.forEach(r => {\n            if (!r[`reply-$$$-status-${company}`] || !r[`reply-$$$-drawing-${company}`]) {\n               isAllDataInRowFilledIn = false;\n            };\n         });\n         listFilePdf = dwgsToAddNewRFA.map(r => r[`reply-$$$-drawing-${company}`]);\n      };\n\n      const dwgPdfFile = [...new Set(listFilePdf)];\n\n\n      let trade, rfaToSaveVersionOrToReply, rfaToSave, mepSubTradeInfo;\n      if (formRfaType === 'form-submit-RFA') {\n         trade = convertTradeCodeInverted(tradeOfRfaForFirstTimeSubmit);\n         mepSubTradeInfo = (mepSubTradeFirstTime && mepSubTradeFirstTime !== 'Select Sub Trade...') ? mepSubTradeFirstTime : null;\n         rfaToSaveVersionOrToReply = '-';\n\n         if (tradeOfRfaForFirstTimeSubmit === 'ME') {\n            rfaToSave = `RFA/${projectNameShort}/${tradeOfRfaForFirstTimeSubmit}/${mepSubTradeInfo}/${rfaNumberSuffixFirstTimeSubmit}`;\n         } else {\n            rfaToSave = `RFA/${projectNameShort}/${tradeOfRfaForFirstTimeSubmit}/${rfaNumberSuffixFirstTimeSubmit}`;\n         };\n\n      } else if (formRfaType === 'form-resubmit-RFA') { // resubmission\n         trade = getInfoValueFromRfaData(currentRfaData, 'submission', 'trade');\n         mepSubTradeInfo = getInfoValueFromRfaData(currentRfaData, 'submission', 'subTradeForMep');\n         rfaToSaveVersionOrToReply = rfaNewVersionResubmitSuffix;\n         rfaToSave = currentRfaNumber;\n\n      } else if (formRfaType === 'form-reply-RFA') { // reply\n         trade = getInfoValueFromRfaData(currentRfaData, 'submission', 'trade');\n         mepSubTradeInfo = getInfoValueFromRfaData(currentRfaData, 'submission', 'subTradeForMep');\n         if (currentRfaNumber === currentRfaRef) {\n            rfaToSaveVersionOrToReply = '-';\n         } else {\n            rfaToSaveVersionOrToReply = currentRfaRef.slice(currentRfaNumber.length, currentRfaRef.length);\n         };\n         rfaToSave = currentRfaNumber;\n      };\n\n\n      if (projectNameShort === 'NO-PROJECT-NAME') {\n         return message.info('Please update project abbreviation name for RFA number!', 2);\n      } else if (!isAllDataInRowFilledIn) {\n         return message.info('Please fill in all necessary info for all drawings!', 2);\n      } else if (dwgsToAddNewRFA.length !== dwgPdfFile.length) {\n         return message.info('Different drawings can not attach same Pdf file!', 2);\n      } else if (!filesPDF && !isFormEditting) {\n         return message.info('Please choose file pdf!', 2);\n      } else if (!textEmailTitle && !isAdminActionWithNoEmailSent) {\n         return message.info('Please fill in email title!', 2);\n\n      } else if ((!listRecipientTo || listRecipientTo.length === 0) && !isAdminActionWithNoEmailSent) {\n         return message.info('Please fill in recipient!', 2);\n\n      } else if (formRfaType === 'form-submit-RFA' && !dateReplyForSubmitForm) {\n         return message.info('Please fill in expected reply date!', 2);\n\n      } else if (formRfaType === 'form-submit-RFA' && listConsultantMustReply.length === 0) {\n\n         return message.info('Please fill in consultant lead', 2);\n      } else if (formRfaType === 'form-submit-RFA' && !requestedBy) {\n         return message.info('Please fill in person requested', 2);\n      } else if (!trade || !rfaToSave || !rfaToSaveVersionOrToReply) {\n         return message.info('Please fill in necessary info!', 2);\n      };\n\n\n      const filesPDFOutput = {};\n      filesPDF && Object.keys(filesPDF).forEach(key => {\n         let fileFound;\n         if (formRfaType === 'form-reply-RFA') {\n            fileFound = dwgsToAddNewRFA.find(x => x[`reply-$$$-drawing-${company}`] === key);\n         } else {\n            fileFound = dwgsToAddNewRFA.find(x => x[`submission-$$$-drawing-${company}`] === key);\n         };\n         if (fileFound) {\n            filesPDFOutput[key] = filesPDF[key];\n         };\n      });\n\n      const filesDWFXOutput = {};\n      filesDWFX && Object.keys(filesDWFX).forEach(key => {\n         const found = dwgsToAddNewRFA.find(x => x[`submission-$$$-dwfxName-${company}`] === key);\n         if (found && !filesDWFXOutput[key]) {\n            filesDWFXOutput[key] = filesDWFX[key];\n         };\n      });\n\n\n      getSheetRows({ ...stateRow, loading: true });\n\n      onClickApplyAddNewRFA({\n         type: formRfaType,\n         isFormEditting,\n         trade,\n         filesPDF: (filesPDFOutput && Object.values(filesPDFOutput)) || [],\n         filesDWFX: (filesDWFXOutput && Object.values(filesDWFXOutput)) || [],\n         dwgsToAddNewRFA: dwgsToAddNewRFA.map(x => ({ ...x })),\n         rfaToSave, rfaToSaveVersionOrToReply,\n         recipient: {\n            to: isAdminActionWithNoEmailSent ? [] : [...new Set(listRecipientTo)],\n            cc: isAdminActionWithNoEmailSent ? [] : [...new Set(listRecipientCc)]\n         },\n         listConsultantMustReply: formRfaType === 'form-reply-RFA' ? [] : [...listConsultantMustReply],\n         requestedBy: formRfaType === 'form-reply-RFA' ? '' : requestedBy,\n         emailTextTitle: isAdminActionWithNoEmailSent ? '' : textEmailTitle,\n         emailTextAdditionalNotes: isAdminActionWithNoEmailSent ? '' : textEmailAdditionalNotes,\n         dateReplyForsubmitForm: dateReplyForSubmitForm && dateReplyForSubmitForm.format('DD/MM/YY'),\n         dateSendThisForm,\n\n         isAdminActionWithNoEmailSent,\n         adminActionConsultantToReply,\n         isAdminAction,\n         mepSubTradeInfo\n      });\n   };\n\n\n   const generateColumnsListDwgRFA = (headers, nosColumnFixed) => {\n\n      const buttonRemoveDrawing = !isFormEditting && (formRfaType === 'form-submit-RFA' || formRfaType === 'form-resubmit-RFA') ? [\n         {\n            key: 'action',\n            dataKey: 'action',\n            title: '',\n            width: 40,\n            frozen: Column.FrozenDirection.RIGHT,\n            cellRenderer: (\n               <CellRemoveDrawing\n                  removeDrawingToAddRFA={removeDrawingToAddRFA}\n               />\n            )\n         }\n      ] : [];\n\n      return [\n         {\n            key: 'index',\n            dataKey: 'index',\n            title: '',\n            width: 40,\n            frozen: Column.FrozenDirection.LEFT,\n            cellRenderer: ({ rowIndex }) => <div>{rowIndex + 1}</div>\n         },\n         ...headers.map((column, index) => ({\n            key: column,\n            dataKey: column,\n            title: column,\n            resizable: true,\n            frozen: index < nosColumnFixed ? Column.FrozenDirection.LEFT : undefined,\n            width: getHeaderWidthDwgRFA(column),\n            cellRenderer: (column === 'Rev' && formRfaType !== 'form-reply-RFA') ? (\n               <CellInputRevision\n                  setRevisionDwg={setRevisionDwg}\n                  rowsThisRFAWithRev={rowsRfaAllInit.filter(dwg => dwg.rfaNumber === currentRfaNumber && dwg['Rev'])}\n                  isFirstSubmission={formRfaType === 'form-submit-RFA'}\n               />\n            ) : (column === 'Comment' && formRfaType === 'form-reply-RFA') ? (\n               <CellAddCommentDrawing\n                  onClickCommentBtn={onClickCommentBtn}\n                  company={company}\n               />\n\n            ) : (column === 'Status' && formRfaType === 'form-reply-RFA') ? (\n               <CellSelectStatus\n                  dwgsToAddNewRFA={dwgsToAddNewRFA}\n                  setDwgsToAddNewRFA={setDwgsToAddNewRFA}\n                  company={company}\n               />\n\n            ) : (column === 'File PDF') ? (\n               <CellSelectDrawingFile\n                  dwgsToAddNewRFA={dwgsToAddNewRFA}\n                  setDwgsToAddNewRFA={setDwgsToAddNewRFA}\n                  filesPDF={filesPDF}\n                  company={company}\n                  formRfaType={formRfaType}\n               />\n            ) : (column === '3D Model') ? (\n               <CellSelect3DFile\n                  dwgsToAddNewRFA={dwgsToAddNewRFA}\n                  setDwgsToAddNewRFA={setDwgsToAddNewRFA}\n                  filesDWFX={filesDWFX}\n                  company={company}\n               />\n            ) : null\n         })),\n         ...buttonRemoveDrawing,\n      ];\n   };\n\n\n\n\n   return (\n      <>\n         <div style={{\n            background: 'white',\n            width: '100%',\n            padding: 10,\n            color: 'black',\n         }}>\n            <div style={{\n               padding: 20,\n               paddingRight: 10,\n               borderBottom: `1px solid ${colorType.grey4}`,\n            }}>\n               <div style={{ display: 'flex', marginBottom: 10 }}>\n                  <div style={{ marginRight: 10, fontWeight: 'bold' }}>RFA Number</div>\n                  {formRfaType === 'form-submit-RFA' ? (\n                     <>\n                        <div style={{ marginRight: 2 }}>\n                           {`RFA/${projectNameShort}/`}\n                           <Tooltip title='Trade info automatically filled in after selecting drawings'>{tradeOfRfaForFirstTimeSubmit || '____'}</Tooltip>\n\n                           {(mepSubTradeFirstTime && mepSubTradeFirstTime !== 'Select Sub Trade...') && (\n                              <Tooltip title='Sub trade info automatically filled in after selecting drawings'>{'/' + mepSubTradeFirstTime}</Tooltip>\n                           )}\n\n                           {`/`}\n                        </div>\n                        {tradeOfRfaForFirstTimeSubmit ? (\n                           <InputStyled\n                              style={{ width: 50, marginBottom: 10, borderRadius: 0, marginRight: 120, transform: 'translateY(-5px)' }}\n                              onChange={(e) => setRfaNumberSuffixFirstTimeSubmit(e.target.value)}\n                              onBlur={onBlurInputRFANameCreateNew}\n                              value={rfaNumberSuffixFirstTimeSubmit}\n                           />\n                        ) : (\n                           <div style={{ marginRight: 120 }}>\n                              <Tooltip title='Rfa number automatically filled in after selecting drawings'>{'____'}</Tooltip>\n                           </div>\n                        )}\n                     </>\n                  ) : formRfaType === 'form-resubmit-RFA' ? (\n                     <>\n                        <div style={{ marginRight: 2 }}>{currentRfaNumber}</div>\n                        <InputStyled\n                           style={{ width: 50, marginBottom: 10, borderRadius: 0, marginRight: 120, transform: 'translateY(-5px)' }}\n                           onChange={(e) => setRfaNewVersionResubmitSuffix(e.target.value)}\n                           onBlur={onBlurInputRFANameCreateNew}\n                           value={rfaNewVersionResubmitSuffix}\n                        />\n                     </>\n\n                  ) : formRfaType === 'form-reply-RFA' ? (\n                     <div>{currentRfaRef}</div>\n\n                  ) : null}\n\n\n                  {isAdminActionWithNoEmailSent && (\n                     <div style={{ display: 'flex', marginRight: 40 }}>\n                        <div style={{ marginRight: 10, fontWeight: 'bold' }}>Date Submission</div>\n                        <DatePickerStyled\n                           value={dateSendThisForm}\n                           format={'DD/MM/YY'}\n                           onChange={(e) => setDateSendThisForm(e)}\n                        />\n                     </div>\n                  )}\n\n                  {formRfaType !== 'form-reply-RFA' && (\n                     <div style={{ display: 'flex' }}>\n                        <div style={{ marginRight: 10, fontWeight: 'bold' }}>Date Reply</div>\n                        <DatePickerStyled\n                           value={dateReplyForSubmitForm}\n                           format={'DD/MM/YY'}\n                           onChange={(e) => setDateReplyForSubmitForm(e)}\n                        />\n                     </div>\n                  )}\n\n                  {formRfaType === 'form-reply-RFA' && adminActionConsultantToReply && (\n                     <div style={{ marginLeft: 20 }}>Company reply: <span style={{ fontWeight: 'bold' }}>{adminActionConsultantToReply}</span></div>\n                  )}\n\n\n               </div>\n\n\n               {(!isAdminActionWithNoEmailSent || formRfaType !== 'form-reply-RFA') && (\n                  <div style={{ display: 'flex', justifyContent: 'space-between', marginBottom: 10 }}>\n                     <div style={{ transform: 'translateY(5px)', fontWeight: 'bold', marginRight: 5 }}>{isAdminActionWithNoEmailSent ? 'Consultants' : 'To'}</div>\n                     <div style={{ width: '95%' }}>\n                        <SelectRecipientStyled\n                           mode='tags'\n                           placeholder={formRfaType === 'form-submit-RFA' ? 'Please pick drawings first to get email list of previous submission...' : 'Please select...'}\n                           value={listRecipientTo}\n\n                           onChange={(list) => {\n\n                              if (list.find(tag => !listGroup.find(x => x === tag) && !validateEmailInput(tag))) {\n                                 return message.warning('Please choose an available group email or key in an email address!');\n                              };\n\n                              if (formRfaType === 'form-submit-RFA') {\n                                 let isLeadConsultantIncluded = false;\n                                 list.forEach(tagCompany => {\n                                    if (checkIfMatchWithInputCompanyFormat(tagCompany, listConsultants)) {\n                                       isLeadConsultantIncluded = true;\n                                    };\n                                 });\n                                 if (!isLeadConsultantIncluded) {\n                                    if (isAdminAction && isAdminActionWithNoEmailSent) {\n                                       message.warning('You must include lead consultant!');\n                                    } else {\n                                       message.warning('Email loop must include lead consultant!');\n                                    };\n                                 };\n\n                                 const itemJustRemoved = listRecipientTo.find(x => !list.find(it => it === x));\n                                 if (\n                                    itemJustRemoved &&\n                                    listConsultantMustReply.find(x => x === extractConsultantName(itemJustRemoved)) &&\n                                    !list.find(tg => extractConsultantName(tg) && extractConsultantName(tg) === extractConsultantName(itemJustRemoved))\n                                 ) {\n                                    setListConsultantMustReply(listConsultantMustReply.filter(x => x !== extractConsultantName(itemJustRemoved)));\n                                 };\n\n\n                              } else if (formRfaType === 'form-resubmit-RFA') {\n                                 const consultantLeadFromPreviousSubmission = listConsultantMustReply[0];\n                                 const itemJustRemoved = listRecipientTo.find(x => !list.find(it => it === x));\n                                 if (\n                                    itemJustRemoved &&\n                                    listConsultantMustReply.find(x => x === extractConsultantName(itemJustRemoved)) &&\n                                    consultantLeadFromPreviousSubmission !== extractConsultantName(itemJustRemoved) &&\n                                    !list.find(tg => extractConsultantName(tg) && extractConsultantName(tg) === extractConsultantName(itemJustRemoved))\n                                 ) {\n                                    setListConsultantMustReply(listConsultantMustReply.filter(x => x !== extractConsultantName(itemJustRemoved)));\n                                 };\n                              };\n                              setListRecipientTo([...new Set(list)]);\n\n                              let companyNameToCheck, isRemoveTag;\n                              if (list.length === listRecipientTo.length + 1) {\n                                 companyNameToCheck = list.find(x => !listRecipientTo.find(item => item === x));\n                                 isRemoveTag = false;\n                              } else if (list.length === listRecipientTo.length - 1) {\n                                 companyNameToCheck = listRecipientTo.find(x => !list.find(item => item === x));\n                                 isRemoveTag = true;\n                              };\n                              onClickTagRecipientTo(companyNameToCheck, isRemoveTag);\n                           }}\n                        >\n                           {listRecipient.map(cm => {\n                              const isLeadConsultant = listConsultantMustReply[0] && extractConsultantName(cm) === listConsultantMustReply[0];\n                              const isLeadConsultantStyled = isLeadConsultant ? {\n                                 background: colorType.primary,\n                                 fontWeight: 'bold',\n                                 color: 'white'\n                              } : {};\n                              const textShown = extractConsultantName(cm) ? cm.replace('_%$%_', ' ') : cm;\n\n                              return (\n                                 <Option key={cm}>\n                                    <div\n                                       style={{\n                                          background: 'transparent',\n                                          fontWeight: 'normal',\n                                          color: 'black',\n                                          ...isLeadConsultantStyled,\n                                          padding: '0 5px',\n                                       }}\n                                       onClick={() => onClickTagRecipientTo(cm, false)}\n                                    >\n                                       {textShown}\n                                    </div>\n                                 </Option>\n                              )\n                           })}\n                        </SelectRecipientStyled>\n\n                        {formRfaType !== 'form-reply-RFA' && (\n                           <div style={{ display: 'flex', marginTop: 5, marginBottom: 10 }}>\n                              <div style={{ marginRight: 8 }}>Lead consultant :</div>\n                              <div style={{ fontWeight: 'bold', marginRight: 10 }}>{listConsultantMustReply[0] || ''}</div>\n                              {formRfaType === 'form-submit-RFA' && (\n                                 <div style={{ fontSize: 11, color: 'grey', fontStyle: 'italic', transform: 'translateY(3px)' }}>(Click on tag to change lead consultant)</div>\n                              )}\n                           </div>\n                        )}\n                     </div>\n                  </div>\n               )}\n\n\n\n               {!isAdminActionWithNoEmailSent && (\n                  <div style={{ display: 'flex', justifyContent: 'space-between', marginBottom: 10 }}>\n                     <div style={{ transform: 'translateY(5px)', fontWeight: 'bold' }}>CC</div>\n                     <div style={{ width: '95%' }}>\n                        <SelectRecipientStyled\n                           mode='tags'\n                           placeholder={formRfaType === 'form-submit-RFA' ? 'Please pick drawings first to get email list of previous submission...' : 'Please select...'}\n                           value={listRecipientCc}\n                           onChange={(list) => {\n                              if (list.find(tag => !listGroup.find(x => x === tag) && !validateEmailInput(tag))) {\n                                 message.warning('Please choose an available group email or key in an email address!');\n                                 return;\n                              };\n                              setListRecipientCc([...new Set(list)]);\n                           }}\n                        >\n                           {listRecipient.map(cm => {\n                              const textShown = extractConsultantName(cm) ? cm.replace('_%$%_', '_') : cm;\n                              return (\n                                 <Option key={cm}>\n                                    <div style={{\n                                       background: 'transparent',\n                                       fontWeight: 'normal',\n                                       color: 'black',\n                                       padding: '0 5px'\n                                    }}>{textShown}</div>\n                                 </Option>\n                              )\n                           })}\n                        </SelectRecipientStyled>\n                     </div>\n                  </div>\n               )}\n\n\n\n               {formRfaType !== 'form-reply-RFA' && (\n                  <>\n                     <div style={{ display: 'flex', marginBottom: 5 }}>\n                        <div style={{ transform: 'translateY(5px)', fontWeight: 'bold', marginRight: 15 }}>Requested by</div>\n                        <InputStyled\n                           style={{ width: 250, marginBottom: 10, borderRadius: 0 }}\n                           onChange={(e) => setRequestedBy(e.target.value)}\n                           value={requestedBy}\n                           disabled={dwgsToAddNewRFA ? false : true}\n                        />\n                     </div>\n                  </>\n               )}\n\n\n               {!isAdminActionWithNoEmailSent && (\n                  <>\n                     <div style={{ display: 'flex', marginBottom: 20 }}>\n                        <div style={{ width: 65, marginRight: 20, transform: 'translateY(5px)', fontWeight: 'bold' }}>Subject</div>\n                        <InputStyled\n                           style={{\n                              width: '90%',\n                              marginBottom: 10,\n                              borderRadius: 0,\n                           }}\n                           onChange={(e) => setTextEmailTitle(e.target.value)}\n                           value={textEmailTitle}\n                        />\n                     </div>\n\n                     <div style={{ paddingLeft: 100 }}>\n                        <div style={{ paddingLeft: 0 }}>Dear All,</div>\n                        {formRfaType === 'form-reply-RFA' ? (\n                           <div>\n                              <span style={{ fontWeight: 'bold' }}>{company}</span> has replied this RFA, the drawings included in this RFA are in the list below.\n                              Please review and update as per comments.\n                           </div>\n                        ) : (\n                           <div>\n                              <span style={{ fontWeight: 'bold' }}>{company}</span> has submitted <span style={{ fontWeight: 'bold' }}>\n                                 {formRfaType === 'form-resubmit-RFA'\n                                    ? `${currentRfaNumber}${rfaNewVersionResubmitSuffix}`\n                                    : `RFA/${projectNameShort}/${tradeOfRfaForFirstTimeSubmit || '____'}/${mepSubTradeFirstTime ? `${mepSubTradeFirstTime}/` : ''}${rfaNumberSuffixFirstTimeSubmit}`}\n                              </span> for you to review, the drawings included in this RFA are in the list below.\n                              Please review and reply to us by <span style={{ fontWeight: 'bold' }}>{dateReplyForSubmitForm ? dateReplyForSubmitForm.format('DD/MM/YY') : ''}.</span>\n                           </div>\n                        )}\n                     </div>\n\n                     <br />\n\n                     <div style={{ display: 'flex', marginBottom: 20 }}>\n                        <div style={{ width: 70, marginRight: 20, transform: 'translateY(5px)', fontWeight: 'bold', marginBottom: 10 }}>Notes : </div>\n                        <TextAreaStyled\n                           style={{\n                              width: '90%',\n                              marginBottom: 10,\n                              borderRadius: 0,\n                           }}\n                           rows={3}\n                           onChange={(e) => setTextEmailAdditionalNotes(e.target.value)}\n                           value={textEmailAdditionalNotes}\n                           placeholder='Write note...'\n                        />\n                     </div>\n                  </>\n               )}\n\n\n\n               <div style={{ display: 'flex', marginBottom: 5 }}>\n                  {formRfaType !== 'form-reply-RFA' && !isFormEditting && (\n                     <ButtonStyle\n                        marginRight={10}\n                        name='Add Drawing To List'\n                        onClick={() => setTablePickDrawingRFA(true)}\n                     />\n                  )}\n\n                  <Upload\n                     name='file' accept='application/pdf' multiple={true}\n                     headers={{ authorization: 'authorization-text' }}\n                     showUploadList={false}\n                     beforeUpload={() => {\n                        return false;\n                     }}\n                     onChange={onChangeUploadFilePDF}\n                  >\n                     <ButtonStyle\n                        marginRight={5}\n                        name='Choose PDF File'\n                        disabled={!dwgsToAddNewRFA || dwgsToAddNewRFA.length === 0}\n                     />\n                  </Upload>\n\n                  {formRfaType !== 'form-reply-RFA' && (\n                     <Upload\n                        name='file' accept='.dwfx' multiple={true}\n                        headers={{ authorization: 'authorization-text' }}\n                        showUploadList={false}\n                        onChange={onChangeUploadFileDWFX}\n                        beforeUpload={() => {\n                           return false;\n                        }}\n                     >\n                        <ButtonStyle\n                           marginRight={5}\n                           name='Upload 3D Model'\n                           disabled={!dwgsToAddNewRFA || dwgsToAddNewRFA.length === 0}\n                        />\n                     </Upload>\n                  )}\n\n\n                  <div style={{ marginLeft: 5 }}>\n                     {formRfaType !== 'form-reply-RFA' ? (\n                        <>\n                           {filesPDF ? `${Object.keys(filesPDF).length} PDF files has been chosen ` : 'No PDF files has been chosen '}\n                           / {filesDWFX ? `${Object.keys(filesDWFX).length} 3D models has been chosen.` : 'No 3D model has been chosen.'}\n                        </>\n                     ) : (\n                        <>\n                           {filesPDF ? `${Object.keys(filesPDF).length} PDF files has been chosen ` : 'No PDF files has been chosen '}\n                        </>\n                     )}\n                  </div>\n               </div>\n\n\n               {dwgsToAddNewRFA && (\n                  <div style={{\n                     width: window.innerWidth * 0.9 - 80,\n                     height: dwgsToAddNewRFA.length * 28 + 80\n                  }}>\n                     <TableStyled\n                        fixed\n                        columns={generateColumnsListDwgRFA(headersDwgRFA(formRfaType), nosColumnFixed)}\n                        data={dwgsToAddNewRFA}\n                        rowHeight={28}\n                     />\n                  </div>\n               )}\n            </div>\n\n            <div style={{\n               padding: 20,\n               display: 'flex',\n               flexDirection: 'row-reverse'\n            }}>\n               <ButtonGroupComp\n                  onClickCancel={() => setModalConfirmsubmitOrCancel('cancel')}\n                  onClickApply={() => setModalConfirmsubmitOrCancel('ok')}\n                  newTextBtnApply={'Submit'}\n               />\n            </div>\n         </div>\n\n\n         {tablePickDrawingRFA && (\n            <ModalPickDrawingRFAStyled\n               title={'Select Drawings For New RFA'}\n               visible={tablePickDrawingRFA}\n               footer={null}\n               destroyOnClose={true}\n               centered={true}\n               width={window.innerWidth * 0.85}\n               onOk={() => setTablePickDrawingRFA(false)}\n               onCancel={() => setTablePickDrawingRFA(false)}\n            >\n               <TableDrawingRFA\n                  onClickCancelModalPickDrawing={() => setTablePickDrawingRFA(false)}\n                  onClickApplyModalPickDrawing={onClickApplyModalPickDrawing}\n                  dwgsToAddNewRFA={dwgsToAddNewRFA}\n                  formRfaType={formRfaType}\n                  tradeOfRfaForFirstTimeSubmit={tradeOfRfaForFirstTimeSubmit}\n                  existingTradeOfResubmision={existingTradeOfResubmision}\n\n                  mepSubTradeFirstTime={mepSubTradeFirstTime}\n                  existingSubTradeOfResubmision={existingSubTradeOfResubmision}\n               />\n            </ModalPickDrawingRFAStyled>\n         )}\n\n\n         {dwgIdToAddComment && (\n            <ModalPickDrawingRFAStyled\n               title={'Add Drawing Comment'}\n               visible={dwgIdToAddComment ? true : false}\n               footer={null}\n               destroyOnClose={true}\n               centered={true}\n               width={window.innerWidth * 0.5}\n               onCancel={() => setIdToDwgAddComment(null)}\n            >\n               <div style={{ width: '100%', padding: 10 }}>\n                  <TextAreaStyled\n                     rows={4}\n                     onChange={(e) => setCommentText(e.target.value)}\n                     defaultValue={dwgsToAddNewRFA.find(x => x.id === dwgIdToAddComment)[`reply-$$$-comment-${company}`] || ''}\n                  />\n                  <div style={{ padding: 20, display: 'flex', flexDirection: 'row-reverse' }}>\n                     <ButtonGroupComp\n                        onClickCancel={() => setIdToDwgAddComment(null)}\n                        onClickApply={applyAddCommentToDrawing}\n                     />\n                  </div>\n               </div>\n            </ModalPickDrawingRFAStyled>\n         )}\n\n\n         {modalConfirmsubmitOrCancel && (\n            <ModalConfirmStyled\n               title={modalConfirmsubmitOrCancel === 'ok' ? 'Confirm Submission' : 'Cancel Submission'}\n               visible={modalConfirmsubmitOrCancel !== null ? true : false}\n               footer={null}\n               destroyOnClose={true}\n               centered={true}\n            >\n               <ConfirmSubmitOrCancelModal\n                  typeConfirm={modalConfirmsubmitOrCancel}\n                  formRfaType={formRfaType}\n                  rfaRef={formRfaType === 'form-submit-RFA'\n                     ? `RFA/${projectNameShort}/${tradeOfRfaForFirstTimeSubmit || '____'}/${mepSubTradeFirstTime ? `${mepSubTradeFirstTime}/` : ''}${rfaNumberSuffixFirstTimeSubmit}`\n                     : formRfaType === 'form-resubmit-RFA'\n                        ? `${currentRfaNumber}${rfaNewVersionResubmitSuffix}`\n                        : formRfaType === 'form-reply-RFA'\n                           ? `${currentRfaRef}` : null}\n                  onClickCancelConfirmModal={() => setModalConfirmsubmitOrCancel(null)}\n                  onClickApplyConfirmModal={(confirmFinal) => {\n                     if (confirmFinal === 'Cancel Action Form') {\n                        setModalConfirmsubmitOrCancel(null);\n                        onClickCancelModal();\n                     } else if (confirmFinal === 'Submit') {\n                        onClickApplyDoneFormRFA();\n                     };\n                  }}\n               />\n            </ModalConfirmStyled>\n         )}\n      </>\n   );\n};\nexport default PanelAddNewRFA;\n\n\n\nconst CellSelectDrawingFile = ({ filesPDF, rowData, dwgsToAddNewRFA, setDwgsToAddNewRFA, company, formRfaType }) => {\n\n   const type = formRfaType === 'form-reply-RFA' ? 'reply' : 'submission';\n\n   const pdfFileName = getInfoValueFromRfaData(rowData, type, 'drawing', company);\n   const [value, setValue] = useState(pdfFileName || 'No PDF file');\n   useEffect(() => {\n      if (pdfFileName && pdfFileName !== 'No PDF file') {\n         setValue(pdfFileName);\n      } else {\n         setValue('No PDF file');\n      };\n   }, [pdfFileName]);\n\n   const onChangeFileAttached = (fileName, dwgId) => {\n      const row = dwgsToAddNewRFA.find(x => x.id === dwgId);\n      row[`${type}-$$$-drawing-${company}`] = fileName;\n      setDwgsToAddNewRFA([...dwgsToAddNewRFA.map(dwg => ({ ...dwg }))]);\n   };\n   return (\n      <SelectStyled\n         placeholder='Select File...'\n         onChange={(fileName) => {\n            onChangeFileAttached(fileName, rowData.id);\n            setValue(fileName);\n         }}\n         value={value}\n      >\n         {(filesPDF && Object.keys(filesPDF) || []).map((fileName, i) => (\n            <Select.Option key={fileName} value={fileName}>{fileName}</Select.Option>\n         ))}\n      </SelectStyled>\n   );\n};\n\nconst CellSelect3DFile = ({ filesDWFX, rowData, dwgsToAddNewRFA, setDwgsToAddNewRFA, company }) => {\n\n   const dwfxFileName = getInfoValueFromRfaData(rowData, 'submission', 'dwfxName', company);\n   const [value, setValue] = useState(dwfxFileName || 'No 3D model');\n\n   useEffect(() => {\n      if (dwfxFileName && dwfxFileName !== 'No 3D model') {\n         setValue(dwfxFileName);\n      };\n   }, [dwfxFileName]);\n\n   const onChangeFileAttached = (fileName, dwgId) => {\n      const row = dwgsToAddNewRFA.find(x => x.id === dwgId);\n      row[`submission-$$$-dwfxName-${company}`] = fileName === 'No 3D model' ? '' : fileName;\n      setDwgsToAddNewRFA([...dwgsToAddNewRFA.map(dwg => ({ ...dwg }))]);\n   };\n\n   return (\n      <SelectStyled\n         onChange={(fileName) => {\n            onChangeFileAttached(fileName, rowData.id);\n            setValue(fileName);\n         }}\n         value={value}\n      >\n         {(filesDWFX && [...Object.keys(filesDWFX), 'No 3D model'] || ['No 3D model']).map((fileName, i) => (\n            <Select.Option key={fileName} value={fileName}>{fileName}</Select.Option>\n         ))}\n      </SelectStyled>\n   );\n};\nconst CellSelectStatus = ({ rowData, dwgsToAddNewRFA, setDwgsToAddNewRFA, company }) => {\n   const consultantStatus = [\n      'Reject and resubmit',\n      'Approved with comments, to Resubmit',\n      'Approved with Comment, no submission Required',\n      'Approved for Construction'\n   ];\n\n   const statusData = getInfoValueFromRfaData(rowData, 'reply', 'status', company);\n   const [valueStatus, setValueStatus] = useState(statusData || '');\n   useEffect(() => {\n      if (statusData) {\n         setValueStatus(statusData);\n      } else {\n         setValueStatus('');\n      };\n   }, [statusData]);\n\n\n   const onChangeStatusReply = (status, dwgId) => {\n      const row = dwgsToAddNewRFA.find(x => x.id === dwgId);\n      row[`reply-$$$-status-${company}`] = status;\n      setDwgsToAddNewRFA([...dwgsToAddNewRFA.map(dwg => ({ ...dwg }))]);\n   };\n\n   return (\n      <SelectStyled\n         placeholder='Select Status...'\n         onChange={(status) => onChangeStatusReply(status, rowData.id)}\n         value={valueStatus}\n      >\n         {consultantStatus.map(stt => (\n            <Select.Option key={stt} value={stt}>{stt}</Select.Option>\n         ))}\n      </SelectStyled>\n   );\n};\nconst CellAddCommentDrawing = (props) => {\n   const { onClickCommentBtn, rowData, company } = props;\n   const addComment = () => {\n      onClickCommentBtn(rowData.id);\n   };\n\n   const commentText = getInfoValueFromRfaData(rowData, 'reply', 'comment', company) || '';\n\n   return (\n      <div style={{\n         display: 'flex',\n         width: '100%',\n         textOverflow: 'ellipsis',\n         overflow: 'hidden',\n         whiteSpace: 'nowrap',\n      }}>\n         <Tooltip title='Add Comment For This Drawing'>\n            <Icon\n               type='form'\n               onClick={addComment}\n               style={{ marginRight: 5 }}\n            />\n         </Tooltip>\n         <div style={{ marginLeft: 3 }}>{commentText}</div>\n      </div>\n   );\n};\nconst CellInputRevision = ({ setRevisionDwg, rowData, rowsThisRFAWithRev, isFirstSubmission }) => {\n   const allRevsExisting = [...new Set(rowsThisRFAWithRev.filter(dwg => dwg.row === rowData.id).map(x => x['Rev']))];\n\n   const [value, setValue] = useState(isFirstSubmission ? '0' : rowData['Rev'] ? rowData['Rev'] : '');\n\n\n   useEffect(() => {\n      if (isFirstSubmission) {\n         setRevisionDwg(rowData.id, '0');\n      };\n   }, [])\n\n   return (\n      <Tooltip title='Edit Revision Name'>\n         <input\n            style={{\n               outline: 'none',\n               border: 'none',\n               borderRadius: 0,\n               background: 'transparent',\n               width: '80%'\n            }}\n            onChange={(e) => setValue(e.target.value)}\n            value={value}\n            onBlur={(e) => {\n               if (allRevsExisting.indexOf(e.target.value) !== -1) {\n                  message.info('This rev has already existed, please choose a new number!');\n                  setValue('');\n               } else {\n                  setValue(e.target.value);\n                  setRevisionDwg(rowData.id, e.target.value);\n               };\n            }}\n            disabled={isFirstSubmission}\n         />\n      </Tooltip>\n   );\n};\nconst CellRemoveDrawing = (props) => {\n\n   const { removeDrawingToAddRFA, rowData } = props;\n\n   const onClickRemoveDwgBtn = () => {\n      removeDrawingToAddRFA(rowData.id);\n   };\n\n   return (\n      <Tooltip title='Remove Drawing'>\n         <Icon type='close' onClick={onClickRemoveDwgBtn} />\n      </Tooltip>\n   );\n};\n\n\n\nconst ConfirmSubmitOrCancelModal = ({ typeConfirm, formRfaType, rfaRef, onClickCancelConfirmModal, onClickApplyConfirmModal }) => {\n\n   return (\n      <div style={{ padding: 20, width: '100%' }}>\n         {typeConfirm === 'ok' ? (\n            <div>Are you sure to {formRfaType === 'form-reply-RFA' ? 'reply' : 'submit'} the <span style={{ fontWeight: 'bold' }}>{rfaRef}</span>?</div>\n         ) : typeConfirm === 'cancel' ? (\n            <div>Are you sure to cancel the {formRfaType === 'form-reply-RFA' ? 'response' : 'submission'}?</div>\n         ) : null}\n\n         <div style={{ padding: 20, display: 'flex', flexDirection: 'row-reverse' }}>\n            <ButtonGroupComp\n               onClickCancel={onClickCancelConfirmModal}\n               onClickApply={() => onClickApplyConfirmModal(typeConfirm === 'ok' ? 'Submit' : 'Cancel Action Form')}\n               newTextBtnApply={'Yes'}\n            />\n         </div>\n      </div>\n   );\n};\n\n\nconst ModalConfirmStyled = styled(Modal)`\n    .ant-modal-content {\n        border-radius: 0;\n    }\n   .ant-modal-close {\n      display: none;\n   }\n   .ant-modal-header {\n      padding: 10px;\n   }\n   .ant-modal-title {\n        padding-left: 10px;\n        font-size: 20px;\n        font-weight: bold;\n   }\n   .ant-modal-body {\n      padding: 0;\n      display: flex;\n      justify-content: center;\n   }\n`;\nconst getHeaderWidthDwgRFA = (header) => {\n   if (header === 'File PDF') return 350;\n   else if (header === 'Rev') return 50;\n   else if (header === 'Status') return 350;\n   else if (header === 'Drawing Number') return 250;\n   else if (header === 'Drawing Name') return 420;\n   else if (header === 'Comment') return 200;\n   else if (header === 'Coordinator In Charge') return 200;\n   else return 200;\n};\n\n\n\nconst ModalPickDrawingRFAStyled = styled(Modal)`\n   .ant-modal-content {\n      border-radius: 0;\n   };\n   .ant-modal-close {\n      display: none;\n   };\n   .ant-modal-header {\n      padding: 10px;\n   };\n   .ant-modal-title {\n      padding-left: 10px;\n      font-size: 20px;\n      font-weight: bold;\n   };\n   .ant-modal-body {\n      padding: 0;\n      display: flex;\n      justify-content: center;\n   };\n`;\n\nconst TableStyled = styled(Table)`\n   .row-selected-rfa {\n      background-color: ${colorType.cellHighlighted};\n   };\n   .BaseTable__row-cell-text {\n      color: black\n   };\n   .BaseTable__table .BaseTable__body {\n      -webkit-touch-callout: none;\n      -webkit-user-select: none;\n      -khtml-user-select: none;\n      -moz-user-select: none;\n      -ms-user-select: none;\n      user-select: none;\n   };\n   .BaseTable__header-cell {\n      padding: 10px;\n      border-right: 1px solid #DCDCDC;\n      background: ${colorType.grey1};\n      color: black\n   };\n   .BaseTable__header-row {\n      background: ${colorType.grey1};\n   };\n   .BaseTable__row-cell {\n      padding: 10px;\n      border-right: 1px solid #DCDCDC;\n      overflow: visible !important;\n   };\n`;\nconst InputStyled = styled(Input)`\n   color: black;\n   border-top: none;\n   border-right: none;\n   border-left: none;\n   &:focus {\n      outline: none;\n      box-shadow: none;\n   }\n`;\nconst TextAreaStyled = styled(TextArea)`\n   color: black;\n   border-top: none;\n   border-right: none;\n   border-left: none;\n   &:focus {\n      outline: none;\n      box-shadow: none;\n   }\n`;\nconst SelectStyled = styled(Select)`\n   width: 100%;\n   outline: none;\n   .ant-select-selection {\n      outline: none;\n      border-radius: 0;\n      border: none;\n      width: 100%;\n      background: transparent;\n   }\n   .ant-select-selection__rendered {\n      outline: none;\n   }\n`;\n\nconst SelectRecipientStyled = styled(Select)`\n   width: 100%;\n   .ant-select-selection__choice {\n      /* padding: 0; */\n      margin-right: 5px;\n      border: 1px solid ${colorType.grey1}\n   }\n   .ant-select-selection__choice__remove {\n      \n   }\n\n   .ant-select-selection {\n      border-radius: 0;\n      width: 100%;\n      background: transparent;\n\n      border-top: none;\n      border-right: none;\n      border-left: none;\n      outline: none;\n      box-shadow: none;\n      &:focus {\n         outline: none;\n         box-shadow: none;\n      }\n   };\n\n   .ant-select-dropdown-menu-item .ant-select-dropdown-menu-item-selected {\n      padding: 0;\n   };\n   \n\n`;\n\n\n\nconst DatePickerStyled = styled(DatePicker)`\n   transform: translateY(-5px);\n   .ant-calendar-picker-input {\n      border-radius: 0;\n      border-top: none;\n      border-right: none;\n      border-left: none;\n      outline: none;\n      box-shadow: none;\n      &:focus {\n         outline: none;\n         box-shadow: none;\n      };\n      width: 110px;\n   };\n`;\n\n\n\n\nconst headersDwgRFA = (formRfaType) => {\n   return formRfaType === 'form-reply-RFA' ? [\n      'Drawing Number',\n      'Drawing Name',\n      'Rev',\n      'Status',\n      'File PDF',\n      'Comment',\n   ] : [\n      'Drawing Number',\n      'Drawing Name',\n      'Coordinator In Charge',\n      'Rev',\n      'File PDF',\n      '3D Model'\n   ];\n};\n\nexport const findTradeOfDrawing = (row, dwgTypeTree) => {\n   let output;\n   const parentNode = dwgTypeTree.find(x => x.id === row._parentRow);\n   if (parentNode) {\n      output = getTradeNameFnc(parentNode, dwgTypeTree);\n   };\n   return output;\n};\n\nconst convertTradeCode = (trade) => {\n   if (trade === 'ARCHI') return 'ARC';\n   if (trade === 'C&S') return 'CS';\n   if (trade === 'M&E') return 'ME';\n   if (trade === 'PRECAST') return 'PC';\n};\nexport const convertTradeCodeInverted = (trade) => {\n   if (trade === 'ARC') return 'ARCHI';\n   if (trade === 'CS') return 'C&S';\n   if (trade === 'ME') return 'M&E';\n   if (trade === 'PC') return 'PRECAST';\n};\n","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\pageSpreadsheet\\TableDrawingRFA.js",["459","460"],"import { message, Select } from 'antd';\nimport React, { useContext, useEffect, useState } from 'react';\nimport BaseTable, { AutoResizer } from 'react-base-table';\nimport styled from 'styled-components';\nimport { colorType } from '../../constants';\nimport { Context as ProjectContext } from '../../contexts/projectContext';\nimport { Context as RowContext } from '../../contexts/rowContext';\nimport { getHeaderWidth } from '../../utils';\nimport ButtonGroupComp from '../generalComponents/ButtonGroupComp';\nimport { getCompanySubconNameFnc, getTradeNameFnc } from './FormDrawingTypeOrder';\nimport { convertTradeCodeInverted, findTradeOfDrawing } from './PanelAddNewRFA';\n\n\nconst { Option } = Select;\n\nconst Table = (props) => {\n   return (\n      <AutoResizer>\n         {({ width, height }) => {\n            return (\n               <BaseTable\n                  {...props}\n                  width={width}\n                  height={height}\n               />\n            );\n         }}\n      </AutoResizer>\n   );\n};\n\n\nconst TableDrawingRFA = ({ onClickCancelModalPickDrawing, onClickApplyModalPickDrawing, dwgsToAddNewRFA, \n   existingSubTradeOfResubmision, tradeOfRfaForFirstTimeSubmit, formRfaType, existingTradeOfResubmision, mepSubTradeFirstTime }) => {\n\n\n   const { state: stateProject } = useContext(ProjectContext);\n   const { state: stateRow } = useContext(RowContext);\n\n   const { headers } = stateProject.allDataOneSheet.publicSettings;\n\n\n   const { rowsAll, drawingTypeTreeDmsView } = stateRow;\n\n   const [drawingTrade, setDrawingTrade] = useState(existingTradeOfResubmision || convertTradeCodeInverted(tradeOfRfaForFirstTimeSubmit) || 'ARCHI');\n   const [drawingSubTrade, setDrawingSubTrade] = useState(existingSubTradeOfResubmision || 'Select Sub Trade...');\n\n   const [rowsTableInput, setRowsTableInput] = useState([]);\n\n   const [arraySubTradeMEP, setArraySubTradeMEP] = useState([]);\n\n   \n   useEffect(() => {\n\n      if (drawingTrade !== convertTradeCodeInverted(tradeOfRfaForFirstTimeSubmit) || drawingSubTrade !== mepSubTradeFirstTime) {\n         setSelectedIdRows([]);\n      };\n\n      let rowsList = rowsAll.filter(r => {\n         const trade = findTradeOfDrawing(r, drawingTypeTreeDmsView);\n         return (r['Drawing Number']) &&\n            !r.rfaNumber &&\n            trade.includes(drawingTrade);\n      });\n\n\n\n      if (drawingTrade === 'M&E') {\n         const mepTreeFolder = drawingTypeTreeDmsView.filter(x => {\n            return x.treeLevel === 3 && getTradeNameFnc(x, drawingTypeTreeDmsView).includes('M&E');\n         });\n         setArraySubTradeMEP(mepTreeFolder.map(x => x.title));\n\n         rowsList = rowsList.filter(row => {\n            const meParentFound = drawingTypeTreeDmsView.find(tr => tr.title === drawingSubTrade);\n            const parentOfRow = drawingTypeTreeDmsView.find(x => x.id === row._parentRow);\n            const parentOfParentOfRowName = getCompanySubconNameFnc(parentOfRow, drawingTypeTreeDmsView);\n            return meParentFound && meParentFound.title === parentOfParentOfRowName;\n         });\n      };\n\n      setRowsTableInput(rowsList);\n\n   }, [drawingTrade, drawingSubTrade]);\n\n\n   const [selectedIdRows, setSelectedIdRows] = useState(dwgsToAddNewRFA ? dwgsToAddNewRFA.map(x => x.id) : []);\n\n\n   const generateColumnsRFA = (headers) => {\n      return [\n         {\n            key: 'index',\n            dataKey: 'index',\n            title: '',\n            width: 50,\n            cellRenderer: ({ rowIndex }) => <div>{rowIndex + 1}</div>\n         },\n         ...headers.map(column => ({\n            key: column,\n            dataKey: column,\n            title: column,\n            resizable: true,\n            width: getHeaderWidth(column),\n         }))\n      ];\n   };\n   const rowClassName = ({ rowData }) => {\n      if (selectedIdRows.indexOf(rowData.id) !== -1) {\n         return 'row-selected-rfa';\n      };\n   };\n\n\n   const rowEventHandlers = {\n      onClick: (props) => {\n         const { rowKey, rowData } = props;\n         if (selectedIdRows.indexOf(rowKey) === -1) {\n            setSelectedIdRows([...selectedIdRows, rowKey]);\n         } else {\n            setSelectedIdRows(selectedIdRows.filter(id => id !== rowKey));\n         };\n      },\n   };\n\n   return (\n      <div style={{\n         width: '100%',\n         height: window.innerHeight * 0.85 - 20,\n         margin: '0 auto',\n         padding: 10,\n         textAlign: 'center',\n      }}>\n         <div style={{ display: 'flex' }}>\n            <SelectStyled\n               style={{ minWidth: 100, paddingRight: 10 }}\n               value={drawingTrade}\n               onChange={(e) => setDrawingTrade(e)}\n               disabled={formRfaType === 'form-resubmit-RFA'}\n            >\n               {['ARCHI', 'C&S', 'M&E', 'PRECAST'].map(item => (\n                  <Option key={item} value={item}>{item}</Option>\n               ))}\n            </SelectStyled>\n\n\n            {drawingTrade === 'M&E' && (\n               <SelectStyled\n                  style={{ minWidth: 100, paddingRight: 10 }}\n                  value={drawingSubTrade}\n                  onChange={(e) => setDrawingSubTrade(e)}\n                  disabled={formRfaType === 'form-resubmit-RFA'}\n               >\n                  {arraySubTradeMEP.map(item => (\n                     <Option key={item} value={item}>{item}</Option>\n                  ))}\n               </SelectStyled>\n            )}\n            <div style={{ fontWeight: 'bold', marginBottom: 10 }}>{`Number of drawings selected: ${selectedIdRows.length}`}</div>\n         </div>\n\n         <div style={{ width: '100%', height: window.innerHeight * 0.8 - 150 }}>\n            <TableStyled\n               fixed\n               columns={generateColumnsRFA(headers.map(hd => hd.text))}\n               data={rowsTableInput}\n               rowHeight={28}\n               rowEventHandlers={rowEventHandlers}\n               rowClassName={rowClassName}\n            />\n         </div>\n         <div style={{ padding: 20, display: 'flex', flexDirection: 'row-reverse' }}>\n            <ButtonGroupComp\n               onClickCancel={onClickCancelModalPickDrawing}\n               onClickApply={() => {\n                  if (selectedIdRows.length === 0) {\n                     return message.info('Please select drawings to submit!', 3);\n                  } else {\n                     onClickApplyModalPickDrawing(formRfaType, drawingTrade, drawingSubTrade, selectedIdRows);\n                  };\n               }}\n            />\n         </div>\n      </div>\n   );\n};\n\nexport default TableDrawingRFA;\n\n\n\n\nconst SelectStyled = styled(Select)`\n   .ant-select-selection {\n      border-radius: 0;\n   }\n`;\n\n\nconst TableStyled = styled(Table)`\n\n   .row-selected-rfa {\n      background-color: ${colorType.cellHighlighted};\n   };\n   .row-with-rfa-locked {\n      background-color: ${colorType.lockedCell}\n   };\n\n   \n   .BaseTable__row-cell-text {\n      color: black\n   }\n\n   .BaseTable__table .BaseTable__body {\n      /* -webkit-touch-callout: none;\n      -webkit-user-select: none;\n      -khtml-user-select: none;\n      -moz-user-select: none;\n      -ms-user-select: none;\n      user-select: none; */\n   }\n\n   .BaseTable__header-cell {\n      padding: 10px;\n      border-right: 1px solid #DCDCDC;\n      background: ${colorType.grey1};\n      color: black\n   }\n\n   .BaseTable__row-cell {\n      padding: 10px;\n      border-right: 1px solid #DCDCDC;\n      overflow: visible !important;\n   }\n`;\n","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\generalComponents\\LoadingIcon.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\generalComponents\\OverallComponentDMS.js",["461","462","463","464","465","466","467","468","469","470","471","472","473","474","475","476","477","478","479","480"],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\PageRFA.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\PageRFAM.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\pageSpreadsheet\\CellForm.js",["481","482","483","484","485","486","487","488","489","490","491","492","493"],"import { Icon, message, Modal, Tooltip, Upload } from 'antd';\nimport Axios from 'axios';\nimport moment from 'moment';\nimport React, { useEffect, useState } from 'react';\nimport styled from 'styled-components';\nimport { colorTextRow, colorType, EDIT_DURATION_MIN, SERVER_URL, tradeArrayForm, tradeArrayMeetingMinutesForm, versionTextArray } from '../../constants';\nimport { mongoObjectId } from '../../utils';\nimport ButtonColumnTag from '../generalComponents/ButtonColumnTag';\nimport ButtonGroupComp from '../generalComponents/ButtonGroupComp';\nimport ButtonStyle from '../generalComponents/ButtonStyle';\nimport { convertReplyOrSubmissionDate, isColumnConsultant, isColumnWithReplyData } from './CellRFA';\nimport { getKeyTextForSheet } from './PanelSetting';\n\n\n\n\n\n\n\nconst CellForm = (props) => {\n\n\n\n   const { rowData, cellData, column, buttonPanelFunction, contextInput, commandAction, setLoading } = props;\n\n\n   const { contextCell, contextRow, contextProject } = contextInput;\n   const { stateCell, getCellModifiedTemp, setCellActive } = contextCell;\n   const { stateRow, getSheetRows } = contextRow;\n   const { stateProject } = contextProject;\n\n   const {\n      token, projectId, projectName, roleTradeCompany, companies, company, email, projectIsAppliedRfaView,\n      pageSheetTypeName, isAdmin, isUserCanSubmitBothSide\n   } = stateProject.allDataOneSheet;\n\n\n   const expandedColumn = pageSheetTypeName === 'page-rfam' ? 'RFAM Ref'\n      : pageSheetTypeName === 'page-rfi' ? 'RFI Ref'\n         : pageSheetTypeName === 'page-cvi' ? 'CVI Ref'\n            : pageSheetTypeName === 'page-dt' ? 'DT Ref'\n               : pageSheetTypeName === 'page-mm' ? 'MM Ref'\n                  : 'n/a';\n\n   const [activeBtn, setActiveBtn] = useState(null);\n\n   const [arrayButtonCell, setArrayButtonCell] = useState([]);\n\n\n   const [btnShown, setBtnShown] = useState(false);\n\n   const { rowsRfamAllInit, rowsRfamAll, rowsRfiAllInit, rowsRfiAll, rowsCviAllInit, rowsCviAll, rowsDtAllInit, rowsDtAll, rowsMmAllInit, rowsMmAll } = stateRow;\n\n   const rowsRefAllInit = pageSheetTypeName === 'page-rfam' ? rowsRfamAllInit\n      : pageSheetTypeName === 'page-rfi' ? rowsRfiAllInit\n         : pageSheetTypeName === 'page-cvi' ? rowsCviAllInit\n            : pageSheetTypeName === 'page-dt' ? rowsDtAllInit\n               : pageSheetTypeName === 'page-mm' ? rowsMmAllInit\n                  : [];\n\n   const rowsRefAll = pageSheetTypeName === 'page-rfam' ? rowsRfamAll\n      : pageSheetTypeName === 'page-rfi' ? rowsRfiAll\n         : pageSheetTypeName === 'page-cvi' ? rowsCviAll\n            : pageSheetTypeName === 'page-dt' ? rowsDtAll\n               : pageSheetTypeName === 'page-mm' ? rowsMmAll\n                  : [];\n\n\n   const refType = getKeyTextForSheet(pageSheetTypeName);\n   const refKey = refType + 'Ref';\n\n\n   const [replyStatus, setReplyStatus] = useState(null);\n   const [replyCompany, setReplyCompany] = useState(null);\n   const [replyDate, setReplyDate] = useState(null);\n\n   const [modalListDrawingAttached, setModalListDrawingAttached] = useState(null);\n   const [consultantMustReply, setConsultantMustReply] = useState([]);\n\n   const [consultantsNotReplyYet, setConsultantsNotReplyYet] = useState([]);\n\n   const [modalPickConsultantForAdmin, setModalPickConsultantForAdmin] = useState(false);\n   const [modalActionTypeForAdminSubmit, setModalActionTypeForAdminSubmit] = useState(null);\n\n   const [isAdminActionWithNoEmailSent, setIsAdminActionWithNoEmailSent] = useState(false);\n\n   const [overdueCount, setOverdueCount] = useState(0);\n\n\n\n   const [panelUploadSignedOffFormShown, setPanelUploadSignedOffFormShown] = useState(false);\n   const [fileSignedOffFormPdf, setFileSignedOffFormPdf] = useState(null);\n   const onChangeUploadSignedOffForm = (info) => {\n      if (info.fileList) {\n         let output = {};\n         info.fileList.forEach(file => {\n            output = { [file.name]: file };\n         });\n         setFileSignedOffFormPdf(output);\n      };\n   };\n\n\n\n   useEffect(() => {\n\n      if (!rowData.treeLevel) {\n\n\n         if (column.key === expandedColumn) {\n\n            let cellButtonArr = [];\n            const consultantMustReplyArray = getInfoValueFromRefDataForm(rowData, 'submission', refType, 'consultantMustReply');\n\n            if (roleTradeCompany.role === 'Document Controller') {\n\n               if (checkIfEditTimeIsOverMultiForm(rowData, null, EDIT_DURATION_MIN, refType, 'wohhup-check-if-submission-edit-is-over')) {\n                  if (pageSheetTypeName !== 'page-mm') {\n                     cellButtonArr = [...cellButtonArr, 'btn-submitSignedOffToConsultant'];\n                  };\n                  cellButtonArr = cellButtonArr.filter(btn => btn !== 'btn-edit');\n               } else {\n                  cellButtonArr = [...cellButtonArr, 'btn-edit'];\n               };\n\n               if (getInfoValueFromRefDataForm(rowData, 'submission', refType, 'linkSignedOffFormSubmit')) {\n                  cellButtonArr = cellButtonArr.filter(btn => btn !== 'btn-submitSignedOffToConsultant');\n               };\n\n               if (\n                  getInfoValueFromRefDataForm(rowData, 'reply', refType, 'status', consultantMustReplyArray[0]) &&\n                  checkIfEditTimeIsOverMultiForm(rowData, consultantMustReplyArray[0], EDIT_DURATION_MIN, refType, 'consultant-check-if-reply-edit-is-over')\n               ) {\n                  const versionTextIndex = versionTextArray.indexOf(rowData.revision);\n                  const versionTextNext = versionTextArray[versionTextIndex + 1];\n                  const rowVersionNext = rowsRefAllInit.find(r => r[refKey] === rowData[refKey] && r.revision === versionTextNext);\n                  if (!rowVersionNext) {\n                     cellButtonArr = [...cellButtonArr, 'btn-resubmit'];\n                  };\n               };\n            };\n\n            if (\n               getInfoValueFromRefDataForm(rowData, 'submission', refType, 'linkDrawings') ||\n               getInfoValueFromRefDataForm(rowData, 'submission', refType, 'linkDrawingsRfa')\n            ) {\n               cellButtonArr = [...cellButtonArr, 'btn-linkDrawings'];\n            };\n            if (getInfoValueFromRefDataForm(rowData, 'submission', refType, 'linkFormNoSignature') || getInfoValueFromRefDataForm(rowData, 'submission', refType, 'linkSignedOffFormSubmit')) {\n               cellButtonArr = [...cellButtonArr, 'btn-linkFormSubmitNoSignatureOrSignedOff'];\n            };\n            setArrayButtonCell(cellButtonArr);\n\n\n         } else if (isColumnWithReplyData(column.key)) {\n\n            let cellButtonArr = [];\n            const { replyStatus: replyStatusData, replyCompany: replyCompanyData, replyDate: replyDateData } = getConsultantReplyFormData(rowData, column.key, refType);\n            setReplyStatus(replyStatusData);\n            setReplyCompany(replyCompanyData);\n            setReplyDate(convertReplyOrSubmissionDate(replyDateData));\n\n            if (roleTradeCompany.role === 'Consultant' && replyCompanyData === company) {\n               if (\n                  getInfoValueFromRefDataForm(rowData, 'submission', refType, 'linkSignedOffFormSubmit') &&\n                  (\n                     (!rowData[`reply-${refType}-status-${company}`] && (pageSheetTypeName === 'page-rfam' || pageSheetTypeName === 'page-rfi')) ||\n                     (!rowData[`reply-${refType}-acknowledge-${company}`] && pageSheetTypeName === 'page-dt') ||\n                     ((!rowData[`reply-${refType}-acknowledge-${company}`] && !rowData[`reply-${refType}-status-${company}`]) && pageSheetTypeName === 'page-cvi')\n                  )\n               ) {\n                  cellButtonArr = [...cellButtonArr, 'btn-reply'];\n\n               } else if (\n                  getInfoValueFromRefDataForm(rowData, 'reply', refType, 'linkFormReply') && \n                  !checkIfEditTimeIsOverMultiForm(rowData, replyCompanyData, EDIT_DURATION_MIN, refType, 'consultant-check-if-reply-edit-is-over')\n               ) {\n                  cellButtonArr = [...cellButtonArr, 'btn-edit'];\n               };\n            };\n\n\n            if (getInfoValueFromRefDataForm(rowData, 'reply', refType, 'linkFormReply', replyCompanyData)) {\n               cellButtonArr = [...cellButtonArr, 'btn-linkFormReply'];\n            };\n            setArrayButtonCell(cellButtonArr);\n\n\n         } else if (isColumnConsultant(column.key)) {\n            const consultantMustReplyValue = getInfoValueFromRefDataForm(rowData, 'submission', refType, 'consultantMustReply');\n            let cellButtonArr = [];\n            if (roleTradeCompany.role === 'Consultant' && consultantMustReplyValue.indexOf(company) !== -1) {\n\n               setReplyStatus(rowData[`reply-${refType}-status-${company}`]);\n               setReplyCompany(company);\n               const dateInfo = rowData[`reply-${refType}-date-${company}`];\n               setReplyDate(convertReplyOrSubmissionDate(dateInfo));\n\n               if (\n                  getInfoValueFromRefDataForm(rowData, 'submission', refType, 'linkSignedOffFormSubmit') &&\n                  (\n                     (!rowData[`reply-${refType}-status-${company}`] && (pageSheetTypeName === 'page-rfam' || pageSheetTypeName === 'page-rfi')) ||\n                     (!rowData[`reply-${refType}-acknowledge-${company}`] && pageSheetTypeName === 'page-dt') ||\n                     ((!rowData[`reply-${refType}-acknowledge-${company}`] && !rowData[`reply-${refType}-status-${company}`]) && pageSheetTypeName === 'page-cvi')\n                  )\n               ) {\n                  cellButtonArr = [...cellButtonArr, 'btn-reply'];\n               } else if (\n                  getInfoValueFromRefDataForm(rowData, 'reply', refType, 'linkFormReply') && \n                  !checkIfEditTimeIsOverMultiForm(rowData, company, EDIT_DURATION_MIN, refType, 'consultant-check-if-reply-edit-is-over')\n               ) {\n                  cellButtonArr = [...cellButtonArr, 'btn-edit'];\n               };\n\n\n               if (getInfoValueFromRefDataForm(rowData, 'reply', refType, 'linkFormReply', company)) {\n                  cellButtonArr = [...cellButtonArr, 'btn-linkFormReply'];\n               };\n\n            } else {\n               const consultantLead = getInfoValueFromRefDataForm(rowData, 'submission', refType, 'consultantMustReply')[0];\n               setReplyStatus(rowData[`reply-${refType}-status-${consultantLead}`]);\n               setReplyCompany(consultantLead);\n               const dateInfo = rowData[`reply-${refType}-date-${consultantLead}`];\n               setReplyDate(convertReplyOrSubmissionDate(dateInfo));\n\n               if (getInfoValueFromRefDataForm(rowData, 'reply', refType, 'linkFormReply', consultantLead)) {\n                  cellButtonArr = [...cellButtonArr, 'btn-linkFormReply'];\n               };\n            };\n            setArrayButtonCell(cellButtonArr);\n         } else if (column.key === 'Received By') {\n            setConsultantMustReply(getInfoValueFromRefDataForm(rowData, 'submission', refType, 'consultantMustReply'));\n         };\n      };\n\n   }, [activeBtn]);\n\n\n\n\n   const onClickRefDrawing = (btn) => {\n\n      const rowsNotThisRef = rowsRefAll.filter(r => r[refKey] !== rowData[refKey]);\n\n      let rowsThisRefFiltered = rowsRefAllInit.filter(r => {\n         return r.revision === btn && r[refKey] === rowData[refKey];\n      });\n      const rowsToDisplay = [...rowsNotThisRef, ...rowsThisRefFiltered].sort((a, b) => (a[refKey] > b[refKey] ? 1 : -1));\n\n      setActiveBtn(btn);\n\n      getSheetRows({\n         ...stateRow,\n         [`rows${refType.charAt(0).toUpperCase() + refType.slice(1)}All`]: rowsToDisplay\n      });\n\n   };\n\n   const onClickSubmitOrReplyForm = (btn) => {\n\n      if (roleTradeCompany.role === 'Consultant' && (pageSheetTypeName === 'page-cvi' || pageSheetTypeName === 'page-dt')) {\n         if (pageSheetTypeName === 'page-dt') {\n            buttonPanelFunction('acknowledge-form');\n         } else if (pageSheetTypeName === 'page-cvi') {\n            buttonPanelFunction('acknowledge-or-reply-form');\n         };\n\n      } else {\n         if (btn === 'form-upload-signed-off') {\n            // setPanelUploadSignedOffFormShown(true);\n         } else {\n            if (isUserCanSubmitBothSide) {\n               setModalActionTypeForAdminSubmit(btn);\n            } else {\n               buttonPanelFunction(btn);\n\n            };\n         };\n      };\n\n      getSheetRows({\n         ...stateRow,\n         currentRefToAddNewOrReplyOrEdit: {\n            currentRefData: rowData,\n            formRefType: btn,\n            isFormEditting: false\n         },\n      });\n   };\n\n\n   const openDrawingFromList = async (dwgLink) => {\n      try {\n         const res = await Axios.get('/api/issue/get-public-url', { params: { key: dwgLink, expire: 1000 } });\n         window.open(res.data);\n      } catch (err) {\n         console.log(err);\n      };\n   };\n\n\n\n   const onClickCellButton = async (btnName, isCviReplyOption, companyCellTagCvi) => {\n      try {\n         if (btnName === 'btn-linkDrawings') {\n            const dwgsLinkList = getInfoValueFromRefDataForm(rowData, 'submission', refType, 'linkDrawings') || [];\n            const dwgsRfaLinkList = getInfoValueFromRefDataForm(rowData, 'submission', refType, 'linkDrawingsRfa') || [];\n            setModalListDrawingAttached([...dwgsLinkList, ...dwgsRfaLinkList]);\n            \n         } else if (btnName === 'btn-linkFormSubmitNoSignatureOrSignedOff') {\n            const linkFormSignedOff = getInfoValueFromRefDataForm(rowData, 'submission', refType, 'linkSignedOffFormSubmit');\n            if (linkFormSignedOff) {\n               const res = await Axios.get('/api/issue/get-public-url', { params: { key: linkFormSignedOff, expire: 1000 } });\n               window.open(res.data);\n            } else {\n               const linkFormNoSignature = getInfoValueFromRefDataForm(rowData, 'submission', refType, 'linkFormNoSignature');\n               const res = await Axios.get('/api/issue/get-public-url', { params: { key: linkFormNoSignature, expire: 1000 } });\n               window.open(res.data);\n            };\n         } else if (btnName === 'btn-linkFormReply') {\n            const linkFormReply = getInfoValueFromRefDataForm(rowData, 'reply', refType, 'linkFormReply', isCviReplyOption ? companyCellTagCvi : replyCompany);\n            const res = await Axios.get('/api/issue/get-public-url', { params: { key: linkFormReply, expire: 1000 } });\n            window.open(res.data);\n\n         } else if (btnName === 'btn-submitSignedOffToConsultant') {\n            setPanelUploadSignedOffFormShown(true);\n\n         } else if (btnName === 'btn-edit') {\n\n            let typeFormBtn = '';\n            if (isCviReplyOption) {\n               typeFormBtn = 'form-reply-multi-type';\n            } else {\n               if (isColumnWithReplyData(column.key) || isColumnConsultant(column.key)) {\n                  typeFormBtn = 'form-reply-multi-type';\n               } else {\n                  if (rowData.revision !== '0') {\n                     typeFormBtn = 'form-resubmit-multi-type';\n                  } else {\n                     typeFormBtn = 'form-submit-multi-type';\n                  };\n               };\n            };\n            \n            buttonPanelFunction(typeFormBtn);\n            getSheetRows({\n               ...stateRow,\n               currentRefToAddNewOrReplyOrEdit: {\n                  currentRefData: rowData,\n                  formRefType: typeFormBtn,\n                  isFormEditting: true\n               },\n            });\n\n         } else if (btnName === 'btn-resubmit') {\n            buttonPanelFunction('form-resubmit-multi-type');\n            getSheetRows({\n               ...stateRow,\n               currentRefToAddNewOrReplyOrEdit: {\n                  currentRefData: rowData,\n                  formRefType: 'form-resubmit-multi-type',\n                  isFormEditting: false\n               },\n            });\n\n         } else if (btnName === 'btn-reply') {\n            if (isCviReplyOption) {\n               if (pageSheetTypeName === 'page-dt') {\n                  buttonPanelFunction('acknowledge-form');\n               } else if (pageSheetTypeName === 'page-cvi') {\n                  buttonPanelFunction('acknowledge-or-reply-form');\n               };\n            } else {\n               buttonPanelFunction('form-reply-multi-type');\n            };\n            getSheetRows({\n               ...stateRow,\n               currentRefToAddNewOrReplyOrEdit: {\n                  currentRefData: rowData,\n                  formRefType: 'form-reply-multi-type',\n                  isFormEditting: false\n               },\n            });\n         };\n      } catch (err) {\n         console.log(err);\n      };\n   };\n\n\n\n\n   const applyChooseConsultantToReplyForAdminOnly = (consultantToReply) => {\n\n   };\n\n\n\n   const openFormReplyForCvi = async (company) => {\n      try {\n         const linkFormReply = getInfoValueFromRefDataForm(rowData, 'reply', refType, 'linkFormReply', company);\n         const res = await Axios.get('/api/issue/get-public-url', { params: { key: linkFormReply, expire: 1000 } });\n         window.open(res.data);\n\n      } catch (err) {\n         console.log(err);\n      };\n   };\n\n\n   const submitSignedOffFormSendEmail = async () => {\n\n      if (!fileSignedOffFormPdf || Object.values(fileSignedOffFormPdf).length === 0) {\n         return message.warn('Please upload pdf signed off form!', 3)\n      };\n\n      try {\n         setLoading(true);\n         commandAction({ type: '' });\n\n         let data;\n         data = new FormData();\n         Object.values(fileSignedOffFormPdf).forEach(file => {\n            data.append('files', file.originFileObj);\n         });\n         data.append('projectId', projectId);\n         data.append(`${refType}Number`, `${rowData[`${refType}Ref`]}/${rowData.revision}/submit`);\n\n         let arrayFileName = [];\n         if (data) {\n            console.log('CHECK FILE LINK FOLDER', `${refType}Number`, `${rowData[`${refType}Ref`]}/${rowData.revision}/submit`);\n            // const res = await Axios.post('/api/drawing/set-dms-files', data);\n            // const listFileName = res.data;\n\n            // arrayFileName = listFileName.map(link => ({\n            //    fileName: getFileNameFromLinkResponse(link),\n            //    fileLink: link\n            // }));\n\n            arrayFileName = Object.values(fileSignedOffFormPdf).map(fl => {\n               return {\n                  fileName: fl.name,\n                  fileLink: `https://www.google.com/${fl.name}`\n               };\n            });\n         };\n\n         let rowOutput = { _id: rowData.id, data: {} };\n         rowOutput.data[`submission-${refType}-linkSignedOffFormSubmit-${company}`] = arrayFileName[0].fileLink;\n\n         await Axios.post(`${SERVER_URL}/row-${refType}/save-rows-${refType}/`, { token, projectId, rows: [rowOutput] });\n\n         // await Axios.post('/api/rfa/mail', {\n         //    token,\n         //    data: {\n         //       projectId, company, projectName,\n         //       formSubmitType: refType,\n         //       type: 'submit-signed-off-final',\n         //       rowIds: [rowChild.id],\n         //       emailSender: email,\n         //    },\n         //    momentToTriggerEmail: moment().add(moment.duration(0.5, 'minutes'))\n         // });\n\n         // TEST API SEND FINAL...\n         const resEmail = await Axios.post(`${SERVER_URL}/row-${refType}/mail-test/`, {\n            token,\n            data: {\n               projectId, company, projectName,\n               formSubmitType: refType,\n               type: 'submit-signed-off-final',\n               rowIds: [rowData.id],\n               emailSender: email,\n            },\n         });\n\n         console.log('MULTI-FORM-SEND_FINAL======>>>', resEmail.data.emailContent);\n\n         message.success('Submitted Successfully', 2);\n\n         const route = pageSheetTypeName === 'page-rfam' ? 'row-rfam'\n            : pageSheetTypeName === 'page-cvi' ? 'row-cvi'\n               : pageSheetTypeName === 'page-rfi' ? 'row-rfi'\n                  : pageSheetTypeName === 'page-dt' ? 'row-dt'\n                     : pageSheetTypeName === 'page-mm' ? 'row-mm'\n                        : 'n/a';\n\n         const res = await Axios.get(`${SERVER_URL}/${route}/`, { params: { token, projectId, email } });\n         const rowsAllMultiForm = res.data;\n\n         const expandedRowsIdArr = [\n            ...(pageSheetTypeName === 'page-mm' ? tradeArrayMeetingMinutesForm : tradeArrayForm),\n            ...rowsAllMultiForm.filter(x => x[refKey]).map(x => x[refKey])\n         ];\n\n         commandAction({\n            type: 'reload-data-view-multi-form',\n            data: {\n               rowsAllMultiForm,\n               expandedRowsIdArr,\n            }\n         });\n\n      } catch (err) {\n         getSheetRows({ ...stateRow, loading: false });\n         commandAction({ type: 'save-data-failure' });\n         console.log(err);\n      };\n   };\n\n\n\n   const applyResubmitForAdminOnly = (isNoEmailSent) => {\n      // buttonPanelFunction('form-resubmit-RFA');\n      // getSheetRows({\n      //    ...stateRow,\n      //    currentRfaToAddNewOrReplyOrEdit: {\n      //       currentRfaNumber: rowData.rfaNumber,\n      //       currentRfaRef: rfaRefText,\n      //       currentRfaData: rfaData,\n      //       formRefType: 'form-resubmit-RFA',\n      //       isFormEditting: false,\n\n      //       isAdminAction: true,\n      //       isAdminActionWithNoEmailSent: isNoEmailSent,\n      //    },\n      // });\n   };\n\n\n\n\n\n   return (\n      <div\n         style={{\n            width: '100%', height: '100%',\n            position: 'relative',\n            display: 'flex',\n            padding: 3, paddingLeft: 5, color: 'black',\n            background: (column.key === 'Due Date' && overdueCount < 0)\n               ? '#FFEBCD'\n               : (colorTextRow[replyStatus] || 'transparent'),\n         }}\n         onMouseOver={() => {\n            if (!btnShown) setBtnShown(true);\n         }}\n         onMouseLeave={() => {\n            if (btnShown) setBtnShown(false);\n         }}\n      >\n         {(rowData.treeLevel && column.key === expandedColumn) ? (\n            <div style={{ color: 'black', fontWeight: 'bold' }}>{rowData.title}</div>\n         ) : !rowData.treeLevel ? (\n            <div style={{\n               display: 'flex',\n               textOverflow: 'ellipsis',\n               overflow: 'hidden',\n               whiteSpace: 'nowrap'\n            }}>\n               <span>{getCellFormData(\n                  rowData, column.key, refType, consultantMustReply, replyCompany, \n                  replyStatus, replyDate, onClickCellButton, company, pageSheetTypeName\n               )}</span>\n\n               {(column.key === expandedColumn && pageSheetTypeName !== 'page-mm') && (\n                  <div style={{\n                     position: 'absolute', left: 150, top: 4,\n                     display: 'flex',\n                  }}>\n                     {rowData['btn'].map(btn => (\n                        <ButtonForm\n                           key={btn}\n                           onClick={() => onClickRefDrawing(btn)}\n                           isActive={btn === rowData.revision}\n                        >{btn}</ButtonForm>\n                     ))}\n                  </div>\n               )}\n\n            </div>\n         ) : ''}\n\n\n         {btnShown && !rowData.treeLevel && (\n            <>\n               {arrayButtonCell.map((btn, i) => (\n                  <Tooltip key={i} placement='top' title={getTooltipText(btn)}>\n                     <Icon\n                        type={getButtonType(btn)}\n                        style={{\n                           cursor: 'pointer', fontSize: 16,\n                           position: 'absolute',\n                           right: getOffsetRight(i),\n                           top: 6\n                        }}\n                        onClick={() => onClickCellButton(btn)}\n                     />\n                  </Tooltip>\n               ))}\n            </>\n         )}\n\n\n         {modalListDrawingAttached && (\n            <ModalStyled\n               title={'Drawing List'}\n               visible={modalListDrawingAttached !== null ? true : false}\n               footer={null}\n               destroyOnClose={true}\n               centered={true}\n               onCancel={() => {\n                  setModalListDrawingAttached(null);\n                  setBtnShown(false);\n               }}\n            >\n               <div>{modalListDrawingAttached.map(dwgLink => {\n                  const fileName = /[^/]*$/.exec(dwgLink)[0]\n                  return (\n                     <div\n                        key={dwgLink}\n                        onClick={() => openDrawingFromList(dwgLink)}\n                        style={{ cursor: 'pointer' }}\n                     >{fileName}</div>\n                  );\n               })}</div>\n            </ModalStyled>\n         )}\n\n\n         {modalActionTypeForAdminSubmit && (\n            <ModalStyled\n               title={'Choose Action (Admin)'}\n               visible={modalActionTypeForAdminSubmit === null ? false : true}\n               footer={null}\n               onCancel={() => setModalActionTypeForAdminSubmit(null)}\n               destroyOnClose={true}\n               centered={true}\n            >\n               <div style={{ flexDirection: 'column' }}>\n\n                  <div style={{ color: 'black', marginBottom: 10 }}>{`Do you want to submit/reply ${refType.toUpperCase()} and send an email ? (Not sending email option allows you to migrate ${refType.toUpperCase()} already submitted previously)`}</div>\n                  <div style={{ marginTop: 20, padding: 10, display: 'flex', flexDirection: 'row-reverse' }}>\n                     <ButtonGroupComp\n                        onClickApply={() => {\n                           if (modalActionTypeForAdminSubmit === 'form-reply-multi-type') {\n                              setModalPickConsultantForAdmin(true);\n                              setIsAdminActionWithNoEmailSent(false);\n                              setModalActionTypeForAdminSubmit(null);\n                           } else if (modalActionTypeForAdminSubmit === 'form-resubmit-multi-type') {\n                              setIsAdminActionWithNoEmailSent(false);\n                              applyResubmitForAdminOnly(false);\n                              setModalActionTypeForAdminSubmit(null);\n                           };\n                        }}\n                        onClickCancel={() => {\n                           if (modalActionTypeForAdminSubmit === 'form-reply-multi-type') {\n                              setModalPickConsultantForAdmin(true);\n                              setIsAdminActionWithNoEmailSent(true);\n                              setModalActionTypeForAdminSubmit(null);\n                           } else if (modalActionTypeForAdminSubmit === 'form-resubmit-multi-type') {\n                              setIsAdminActionWithNoEmailSent(true);\n                              applyResubmitForAdminOnly(true);\n                              setModalActionTypeForAdminSubmit(null);\n                           };\n                        }}\n                        newTextBtnApply='Send Email'\n                        newTextBtnCancel={`Update ${refType.toUpperCase()} Without Sending Email`}\n                     />\n                  </div>\n               </div>\n            </ModalStyled>\n         )}\n\n\n         {modalPickConsultantForAdmin && (\n            <ModalStyled\n               title={'Choose Consultant To Reply'}\n               footer={null} destroyOnClose={true} centered={true}\n               visible={modalPickConsultantForAdmin}\n               onCancel={() => setModalPickConsultantForAdmin(false)}\n               width={window.innerWidth * 0.3}\n            >\n               <FormPickConsultantToReplyForAdmin\n                  applyChooseConsultantToReplyForAdminOnly={applyChooseConsultantToReplyForAdminOnly}\n                  onClickCancelModal={() => setModalPickConsultantForAdmin(false)}\n                  listConsultants={consultantsNotReplyYet}\n               />\n            </ModalStyled>\n         )}\n\n\n\n         {panelUploadSignedOffFormShown && (\n            <ModalStyled\n               title={'Submit Signed Off Cover Form'}\n               visible={panelUploadSignedOffFormShown}\n               footer={null}\n               onCancel={() => setPanelUploadSignedOffFormShown(false)}\n               destroyOnClose={true}\n               centered={true}\n            >\n               <div style={{ flexDirection: 'column' }}>\n                  <div style={{ marginBottom: 20, display: 'flex' }}>\n                     <Upload\n                        name='file' accept='application/pdf' multiple={false} showUploadList={false}\n                        headers={{ authorization: 'authorization-text' }}\n                        beforeUpload={() => { return false }}\n                        onChange={onChangeUploadSignedOffForm}\n                     >\n                        <ButtonStyle\n                           marginRight={5}\n                           name='Upload Signed Off Cover Form'\n                        />\n                     </Upload>\n                     <div>{fileSignedOffFormPdf && Object.values(fileSignedOffFormPdf)[0].name}</div>\n                  </div>\n\n\n                  <div style={{ marginTop: 20, padding: 10, float: 'right' }}>\n                     <ButtonGroupComp\n                        onClickApply={submitSignedOffFormSendEmail}\n                        onClickCancel={() => setPanelUploadSignedOffFormShown(false)}\n                        newTextBtnApply={`Submit ${refType.toUpperCase()}`}\n                     />\n                  </div>\n               </div>\n            </ModalStyled>\n         )}\n\n      </div>\n   );\n};\n\nexport default CellForm;\n\n\n\nconst ButtonForm = styled.div`\n   &:hover {\n      cursor: pointer;\n   };\n   border-radius: 0;\n   border: 1px solid grey;\n   background: ${props => props.isActive ? colorType.yellow : colorType.grey4};\n   min-width: 24px;\n   margin-right: 3px;\n   \n   text-align: center;\n   transition: 0.3s;\n`;\n\nconst ModalStyled = styled(Modal)`\n   .ant-modal-content {\n      border-radius: 0;\n   }\n   .ant-modal-close {\n      display: none;\n   }\n   .ant-modal-header {\n      padding: 10px;\n   }\n   .ant-modal-title {\n        padding-left: 10px;\n        font-size: 20px;\n        font-weight: bold;\n   }\n   .ant-modal-body {\n      padding: 20px;\n      display: flex;\n      justify-content: center;\n   }\n`;\n\n\n\n\nconst getTooltipText = (btnName, pageSheetTypeName) => {\n   let result = 'No Tooltip';\n   if (btnName === 'btn-linkDrawings') {\n      result = 'Open Documents Attached List';\n   } else if (btnName === 'btn-linkFormSubmitNoSignatureOrSignedOff') {\n      result = 'Open Submission Form';\n   } else if (btnName === 'btn-submitSignedOffToConsultant') {\n      result = 'Submit To Consultants';\n   } else if (btnName === 'btn-edit') {\n      result = 'Edit Form';\n   } else if (btnName === 'btn-resubmit') {\n      result = 'Resubmit Form';\n   } else if (btnName === 'btn-reply' && pageSheetTypeName === 'page-cvi') {\n      result = 'Reply Or Acknowledge Form';\n   } else if (btnName === 'btn-reply' && pageSheetTypeName === 'page-dt') {\n      result = 'Acknowledge Form';\n   } else if (btnName === 'btn-reply' && pageSheetTypeName !== 'page-cvi' && pageSheetTypeName !== 'page-dt') {\n      result = 'Reply Form';\n   } else if (btnName === 'btn-linkFormReply') {\n      result = 'Open Reply Form';\n   };\n   return result;\n};\n\nconst getOffsetRight = (index) => {\n   if (index === 0) return 5;\n   else {\n      return 5 + index * 22;\n   };\n\n};\nconst getButtonType = (btnName) => {\n   let result = 'xxx';\n   if (btnName === 'btn-linkDrawings') {\n      result = 'file';\n   } else if (btnName === 'btn-linkFormSubmitNoSignatureOrSignedOff') {\n      result = 'shake';\n   } else if (btnName === 'btn-submitSignedOffToConsultant') {\n      result = 'vertical-align-top';\n   } else if (btnName === 'btn-edit') {\n      result = 'edit';\n   } else if (btnName === 'btn-resubmit') {\n      result = 'plus-square';\n   } else if (btnName === 'btn-reply') {\n      result = 'form';\n   } else if (btnName === 'btn-linkFormReply') {\n      result = 'shake';\n   };\n   return result;\n};\n\n\n\n\n\nexport const checkIfEditTimeIsOverMultiForm = (rowData, replyCompany, editTimeAllowed, refType, type) => {\n   let result = false;\n   let duration;\n\n   if (type === 'wohhup-check-if-submission-edit-is-over') {\n      const dateSubmission = getInfoValueFromRefDataForm(rowData, 'submission', refType, 'date');\n\n      if (dateSubmission) {\n         duration = moment.duration(moment(new Date()).diff(dateSubmission)).asMinutes();\n         console.log('111111', duration);\n      } else {\n         return true;\n      };\n   } else if (type === 'consultant-check-if-reply-edit-is-over') {\n      const dateReply = getInfoValueFromRefDataForm(rowData, 'reply', refType, 'date', replyCompany);\n      if (typeof dateReply === 'string' && dateReply.length > 8) { // distinguish with old database\n         duration = moment.duration(moment(new Date()).diff(dateReply)).asMinutes();\n      } else if (typeof dateReply === 'string' && dateReply.length === 8) {\n         return true;\n      };\n   };\n\n   if (duration && duration > editTimeAllowed) {\n      return true;\n   };\n   return result;\n};\n\n\n\nconst getCellFormData = (row, header, refType, consultantMustReply, replyCompany, replyStatus, replyDate, onClickCellButton, company, pageSheetTypeName) => {\n\n   if (\n      header === 'RFAM Ref' ||\n      header === 'RFI Ref' ||\n      header === 'CVI Ref' ||\n      header === 'DT Ref'\n   ) {\n      return row.revision === '0' ? row[refType + 'Ref'] : row[refType + 'Ref'] + row.revision;\n\n   } else if (header === 'Description') return getInfoValueFromRefDataForm(row, 'submission', refType, 'description');\n   else if (header === 'Requested By') return getInfoValueFromRefDataForm(row, 'submission', refType, 'requestedBy');\n   else if (header === 'Submission Date') {\n      const dateSubmission = getInfoValueFromRefDataForm(row, 'submission', refType, 'date');\n      return moment(dateSubmission).format('DD/MM/YY');\n   } else if (header === 'Conversation Date') {\n      const dateSubmission = getInfoValueFromRefDataForm(row, 'submission', refType, 'dateConversation');\n      const timeSubmission = getInfoValueFromRefDataForm(row, 'submission', refType, 'timeConversation');\n      return `${moment(dateSubmission).format('DD/MM/YY')} -  ${moment(timeSubmission).format('HH:mm')}`;\n   } else if (header === 'Due Date') {\n      const dateDue = getInfoValueFromRefDataForm(row, 'submission', refType, 'due');\n      return moment(dateDue).format('DD/MM/YY');\n\n   } else if (header === 'Conversation Among') {\n      return getInfoValueFromRefDataForm(row, 'submission', refType, 'conversationAmong');\n   } else if (header === 'Cost Implication') {\n      return getInfoValueFromRefDataForm(row, 'submission', refType, 'isCostImplication')\n         ? <Icon type='check' />\n         : null;\n   } else if (header === 'Time Extension') {\n      return getInfoValueFromRefDataForm(row, 'submission', refType, 'isTimeExtension')\n         ? <Icon type='check' />\n         : null;\n   } else if (header === 'Signatured By') {\n      return getInfoValueFromRefDataForm(row, 'submission', refType, 'signaturedBy');\n   } else if (header === 'Contract Specification') {\n      return getInfoValueFromRefDataForm(row, 'submission', refType, 'contractSpecification');\n   } else if (header === 'Proposed Specification') {\n      return getInfoValueFromRefDataForm(row, 'submission', refType, 'proposedSpecification');\n   } else if (header === 'Submission Type') {\n      return getInfoValueFromRefDataForm(row, 'submission', refType, 'submissionType');\n   } else if (header === 'Attachment Type') {\n      return getInfoValueFromRefDataForm(row, 'submission', refType, 'herewithForDt');\n   } else if (header === 'Transmitted For') {\n      return getInfoValueFromRefDataForm(row, 'submission', refType, 'transmittedForDt');\n   } else if (header === 'Received By') {\n      return (\n         <div style={{ display: 'flex' }}>\n            {consultantMustReply.map((cmp, i) => {\n\n               const isAcknowledge = getInfoValueFromRefDataForm(row, 'reply', refType, 'acknowledge', cmp);\n               const filePdfAttached = getInfoValueFromRefDataForm(row, 'reply', refType, 'linkFormReply', cmp);\n\n               let iconTagsArray = [];\n               if (filePdfAttached) {\n                  if (checkIfEditTimeIsOverMultiForm(row, cmp, EDIT_DURATION_MIN, refType, 'consultant-check-if-reply-edit-is-over')) {\n                     iconTagsArray = [...iconTagsArray, 'btn-linkFormReply'];\n                  };\n                  \n                  if (\n                     !checkIfEditTimeIsOverMultiForm(row, cmp, EDIT_DURATION_MIN, refType, 'consultant-check-if-reply-edit-is-over') &&\n                     cmp === company\n                  ) {\n                     iconTagsArray = [...iconTagsArray, 'btn-edit'];\n                  };\n               } else {\n                  if (cmp === company) {\n                     iconTagsArray = [...iconTagsArray, 'btn-reply'];\n                  };\n               };\n\n               if (pageSheetTypeName === 'page-dt' && isAcknowledge) {\n                  iconTagsArray = iconTagsArray.filter(btn => btn !== 'btn-reply');\n               };\n\n               return (\n                  <div\n                     key={i}\n                     style={{\n                        marginRight: 5, paddingLeft: 4, paddingRight: 4,\n                        background: (isAcknowledge || filePdfAttached) ? colorType.yellow : 'white',\n                        fontWeight: (isAcknowledge || filePdfAttached) ? 'bold' : 'normal',\n                        border: `1px solid ${colorType.grey1}`,\n                        display: 'flex',\n                     }}\n                  >\n                     <div>{cmp}</div>\n                     {iconTagsArray.map((icon, index) => (\n                        <Tooltip key={index} placement='top' title={getTooltipText(icon, pageSheetTypeName)}>\n                           <Icon\n                              type={getButtonType(icon)}\n                              style={{\n                                 cursor: 'pointer', fontSize: 16,\n                                 marginTop: 1,\n                                 marginLeft: index === 0 ? 10 : 5\n                              }}\n                              onClick={() => onClickCellButton(icon, true, cmp)}\n                           />\n                        </Tooltip>\n                     ))}\n                  </div>\n               );\n            })}\n         </div>\n      );\n   } else if (isColumnConsultant(header) || isColumnWithReplyData(header)) {\n      return replyStatus ? (\n         <div>\n            <span style={{ fontWeight: 'bold' }}>{replyCompany}</span>\n            <span>{` - (${replyDate})`}</span>\n         </div>\n      ) : (\n         <div>{replyCompany}</div>\n      );\n   };\n\n   return 'xxx-xx';\n};\n\n\n\n\n\n\n\n\n\nconst FormPickConsultantToReplyForAdmin = ({ applyChooseConsultantToReplyForAdminOnly, onClickCancelModal, listConsultants }) => {\n\n   const [list, setList] = useState(listConsultants.map(cst => ({\n      id: mongoObjectId(),\n      header: cst,\n      mode: 'hidden'\n   })));\n\n   const onClickApply = () => {\n      const consultantToReply = list.find(x => x.mode === 'shown');\n      if (!consultantToReply) {\n         return message.warn('Please choose consultant to reply!');\n      };\n      applyChooseConsultantToReplyForAdminOnly(consultantToReply.header);\n   };\n\n   const setMode = (item) => {\n      list.forEach(tag => {\n         if (tag.id === item.id) {\n            tag.mode = 'shown';\n         } else {\n            tag.mode = 'hidden';\n         };\n      });\n      setList([...list]);\n   };\n\n   return (\n      <div style={{ width: '100%', height: '100%' }}>\n         <PanelStyled>\n            <div style={{ fontSize: 11, paddingLeft: 20 }}>Click to select consultant to reply.</div>\n            <div style={{ width: '100%', paddingTop: 20 }}>\n               {list.map((tag, i) => (\n                  <ButtonColumnTag\n                     key={i}\n                     tag={tag}\n                     setMode={setMode}\n                     actionType='admin-pick-consultant-to-reply'\n                  />\n               ))}\n            </div>\n         </PanelStyled>\n         <div style={{ marginTop: 20, padding: 10, display: 'flex', flexDirection: 'row-reverse' }}>\n            <ButtonGroupComp\n               onClickCancel={onClickCancelModal}\n               onClickApply={onClickApply}\n            />\n         </div>\n\n      </div>\n   );\n};\n\nconst PanelStyled = styled.div`\n   max-height: 60vh;\n   width: 100%;\n   /* overflow-y: scroll; */\n   /* overflow-x: hidden; */\n   border-bottom: 1px solid ${colorType.grey4};\n`;\n\n\nconst getConsultantReplyFormData = (rowData, header, refType) => {\n   let replyStatus, replyCompany, replyDate;\n\n   const listConsultantMustReply = getInfoValueFromRefDataForm(rowData, 'submission', refType, 'consultantMustReply');\n   if (!listConsultantMustReply || listConsultantMustReply.length === 0) return { replyStatus, replyCompany, replyDate };\n\n   const consultantHeaderNumber = parseInt(header.slice(12, header.length - 1));\n\n   const consultantNameOfThisCell = listConsultantMustReply[consultantHeaderNumber - 1];\n\n   return {\n      replyStatus: rowData[`reply-${refType}-status-${consultantNameOfThisCell}`],\n      replyCompany: consultantNameOfThisCell,\n      replyDate: convertReplyOrSubmissionDate(rowData[`reply-${refType}-date-${consultantNameOfThisCell}`])\n   };\n};\n\n\nexport const getInfoValueFromRefDataForm = (obj, typeSubmit, typeForm, info, company = '') => {\n   for (const key in obj) {\n      if (key.includes(`${typeSubmit}-${typeForm}-${info}-${company}`)) {\n         return obj[key];\n      };\n   };\n};\nexport const getInfoKeyFromRefDataForm = (obj, typeSubmit, typeForm, info, company = '') => {\n   for (const key in obj) {\n      if (key.includes(`${typeSubmit}-${typeForm}-${info}-${company}`)) {\n         return key;\n      };\n   };\n};\n\n","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\generalComponents\\PanelAddNewMultiForm.js",["494","495","496","497","498","499","500","501","502","503"],"import { Checkbox, DatePicker, Icon, Input, message, Modal, Select, TimePicker, Tooltip, Upload } from 'antd';\nimport moment from 'moment';\nimport React, { useContext, useEffect, useState } from 'react';\nimport BaseTable, { AutoResizer, Column } from 'react-base-table';\nimport styled from 'styled-components';\nimport { colorType, EDIT_DURATION_MIN, versionTextArray } from '../../constants';\nimport { Context as ProjectContext } from '../../contexts/projectContext';\nimport { Context as RowContext } from '../../contexts/rowContext';\nimport { debounceFnc, mongoObjectId, validateEmailInput } from '../../utils';\nimport { checkIfEditTimeIsOverMultiForm, getInfoValueFromRefDataForm } from '../pageSpreadsheet/CellForm';\nimport { getKeyTextForSheet } from '../pageSpreadsheet/PanelSetting';\nimport ButtonGroupComp from './ButtonGroupComp';\nimport ButtonStyle from './ButtonStyle';\nimport TableDrawingRfaForMultiForm from './TableDrawingRfaForMultiForm';\n\n\n\n\nconst { Option } = Select;\nconst { TextArea } = Input;\n\n\nconst extractConsultantName = (name) => {\n   const indexOfSplitString = name.indexOf('_%$%_');\n   return name.slice(0, indexOfSplitString === -1 ? -99999 : indexOfSplitString);\n};\n\nconst checkIfMatchWithInputCompanyFormat = (item, listConsultants) => {\n   let result = false;\n   listConsultants.forEach(cm => {\n      if (cm.company === extractConsultantName(item)) {\n         result = true;\n      };\n   });\n   return result;\n};\n\n\n\n\nconst Table = (props) => {\n   return (\n      <AutoResizer>\n         {({ width, height }) => {\n            return (\n               <BaseTable\n                  {...props}\n                  width={width}\n                  height={height}\n               />\n            );\n         }}\n      </AutoResizer>\n   );\n};\n\n\nconst PanelAddNewMultiForm = ({ onClickCancelModal, onClickApplySendFormToSignature }) => {\n\n\n   const { state: stateRow, getSheetRows } = useContext(RowContext);\n   const { state: stateProject } = useContext(ProjectContext);\n\n   const { roleTradeCompany: { role, company: companyUser }, companies, listUser, email, listGroup, projectName, projectNameShort: projectNameShortText, pageSheetTypeName } = stateProject.allDataOneSheet;\n   const projectNameShort = projectNameShortText || 'NO-PROJECT-NAME';\n\n   const {\n      rowsAll, loading, currentRefToAddNewOrReplyOrEdit,\n      rowsRfamAllInit, rowsRfiAllInit, rowsCviAllInit, rowsDtAllInit, rowsMmAllInit\n   } = stateRow;\n\n   const rowsRefAllInit = pageSheetTypeName === 'page-rfam' ? rowsRfamAllInit\n      : pageSheetTypeName === 'page-rfi' ? rowsRfiAllInit\n         : pageSheetTypeName === 'page-cvi' ? rowsCviAllInit\n            : pageSheetTypeName === 'page-dt' ? rowsDtAllInit\n               : pageSheetTypeName === 'page-mm' ? rowsMmAllInit\n                  : [];\n\n\n   const refType = getKeyTextForSheet(pageSheetTypeName);\n   const refKey = refType + 'Ref';\n\n   const {\n      currentRefData, formRefType, isFormEditting,\n      isAdminAction, isAdminActionWithNoEmailSent, adminActionConsultantToReply,\n   } = currentRefToAddNewOrReplyOrEdit || {};\n\n   const company = (formRefType === 'form-reply-multi-type' && isAdminAction && adminActionConsultantToReply) ? adminActionConsultantToReply : companyUser;\n\n\n\n   const listRecipient = (\n      isAdminAction &&\n      isAdminActionWithNoEmailSent &&\n      (formRefType === 'form-submit-multi-type' || formRefType === 'form-resubmit-multi-type')\n   )\n      ? [...listUser, ...listGroup].filter(x => !validateEmailInput(x))\n      : [...listUser, ...listGroup];\n\n\n   const listConsultants = companies.filter(x => x.companyType === 'Consultant');\n\n\n   const [tradeForFirstTimeSubmit, setTradeForFirstTimeSubmit] = useState('');\n   const [refNumberSuffixFirstTimeSubmit, setRefNumberSuffixFirstTimeSubmit] = useState('');\n   const [refNewVersionResubmitSuffix, setRefNewVersionResubmitSuffix] = useState('');\n\n\n   const [consultantReplyStatus, setConsultantReplyStatus] = useState('');\n   const [fileReplyFormName, setFileReplyFormName] = useState('');\n   const [fileFormCoverReply, setFileFormCoverReply] = useState({});\n\n\n   const [submissionType, setSubmissionType] = useState('');\n\n   const [dateReplyForSubmitForm, setDateReplyForSubmitForm] = useState(null);\n\n   const [dateConversation, setDateConversation] = useState(null);\n   const [timeConversation, setTimeConversation] = useState(null);\n\n   const [tablePickDrawingRfaSubmitted, setTablePickDrawingRfaSubmitted] = useState(false);\n\n   const [nosColumnFixed, setNosColumnFixed] = useState(1);\n\n\n   const [filesPdfDrawing, setFilesPdfDrawing] = useState({});\n   const [dwgsImportFromRFA, setDwgsImportFromRFA] = useState([]);\n   const [dataInputForTable, setDataInputForTable] = useState([]);\n\n\n   const [listRecipientTo, setListRecipientTo] = useState([]);\n   const [listRecipientCc, setListRecipientCc] = useState([]);\n\n   const [listConsultantMustReply, setListConsultantMustReply] = useState([]);\n   const [requestedBy, setRequestedBy] = useState(email);\n   const [signaturedBy, setSignaturedBy] = useState('');\n\n   const [textEmailTitle, setTextEmailTitle] = useState('');\n   const [conversationAmong, setConversationAmong] = useState('');\n\n   const [description, setDescription] = useState('');\n   const [contractSpecification, setContractSpecification] = useState('');\n   const [proposedSpecification, setProposedSpecification] = useState('');\n\n   const [modalConfirmsubmitOrCancel, setModalConfirmsubmitOrCancel] = useState(null);\n\n   const [isCostImplication, setIsCostImplication] = useState(true);\n   const [isTimeExtension, setIsTimeExtension] = useState(true);\n\n   const [herewithForDt, setHerewithForDt] = useState('');\n   const [transmittedForDt, setTransmittedForDt] = useState('');\n\n\n   useEffect(() => {\n      if (isFormEditting &&\n         dwgsImportFromRFA.length === 0 &&\n         Object.values(filesPdfDrawing).length === 0\n      ) {\n         const linkDrawingsData = getInfoValueFromRefDataForm(currentRefData, 'submission', refType, 'linkDrawings', company) || [];\n         const linkDrawingsRfaData = getInfoValueFromRefDataForm(currentRefData, 'submission', refType, 'linkDrawingsRfa', company) || [];\n\n         setDataInputForTable([\n            ...linkDrawingsData.map(dwgLink => {\n               return {\n                  id: mongoObjectId(),\n                  'File Name': /[^/]*$/.exec(dwgLink)[0],\n                  'Type': 'Drawing',\n               };\n            }),\n            ...linkDrawingsRfaData.map(dwgLink => {\n               return {\n                  id: mongoObjectId(),\n                  'Drawing Number': /[^/]*$/.exec(dwgLink)[0],\n               };\n            })\n         ]);\n      } else {\n         setDataInputForTable(getInputForTable(filesPdfDrawing, dwgsImportFromRFA));\n      };\n   }, [filesPdfDrawing, dwgsImportFromRFA]);\n\n\n   useEffect(() => {\n      if (Object.values(fileFormCoverReply).length > 0) {\n         const file = Object.values(fileFormCoverReply)[0];\n         setFileReplyFormName(file.name);\n      };\n   }, [fileFormCoverReply]);\n\n\n\n   useEffect(() => {\n      if (formRefType === 'form-submit-multi-type') {\n         if (!isFormEditting) {\n            setDateReplyForSubmitForm(moment(moment().add(14, 'days').format('DD/MM/YY'), 'DD/MM/YY'));\n\n         } else {\n            const listRecipientToData = getInfoValueFromRefDataForm(currentRefData, 'submission', refType, 'emailTo', company) || [];\n            setListRecipientTo([...new Set(listRecipientToData)]);\n\n            const listRecipientCcData = getInfoValueFromRefDataForm(currentRefData, 'submission', refType, 'emailCc', company) || [];\n            setListRecipientCc([...new Set(listRecipientCcData)]);\n\n            const listConsultantMustReplyData = getInfoValueFromRefDataForm(currentRefData, 'submission', refType, 'consultantMustReply', company) || [];\n            setListConsultantMustReply(listConsultantMustReplyData);\n\n            const requestedByData = getInfoValueFromRefDataForm(currentRefData, 'submission', refType, 'requestedBy', company) || '';\n            setRequestedBy(requestedByData);\n\n            const signaturedByData = getInfoValueFromRefDataForm(currentRefData, 'submission', refType, 'signaturedBy', company) || '';\n            setSignaturedBy(signaturedByData);\n\n            const textEmailTitleData = getInfoValueFromRefDataForm(currentRefData, 'submission', refType, 'emailTitle', company) || '';\n            setTextEmailTitle(textEmailTitleData);\n\n            const descriptionData = getInfoValueFromRefDataForm(currentRefData, 'submission', refType, 'description', company) || '';\n            setDescription(descriptionData);\n\n\n            setConversationAmong(getInfoValueFromRefDataForm(currentRefData, 'submission', refType, 'conversationAmong', company));\n            setContractSpecification(getInfoValueFromRefDataForm(currentRefData, 'submission', refType, 'contractSpecification', company));\n            setProposedSpecification(getInfoValueFromRefDataForm(currentRefData, 'submission', refType, 'proposedSpecification', company));\n            setIsCostImplication(getInfoValueFromRefDataForm(currentRefData, 'submission', refType, 'isCostImplication', company));\n            setIsTimeExtension(getInfoValueFromRefDataForm(currentRefData, 'submission', refType, 'isTimeExtension', company));\n            setHerewithForDt(getInfoValueFromRefDataForm(currentRefData, 'submission', refType, 'herewithForDt', company));\n            setTransmittedForDt(getInfoValueFromRefDataForm(currentRefData, 'submission', refType, 'transmittedForDt', company));\n            setSubmissionType(getInfoValueFromRefDataForm(currentRefData, 'submission', refType, 'submissionType', company));\n\n            setTimeConversation(moment(getInfoValueFromRefDataForm(currentRefData, 'submission', refType, 'timeConversation', company)));\n            setDateConversation(moment(getInfoValueFromRefDataForm(currentRefData, 'submission', refType, 'dateConversation', company)));\n\n            setDateReplyForSubmitForm(moment(getInfoValueFromRefDataForm(currentRefData, 'submission', refType, 'due', company)));\n    \n            setTradeForFirstTimeSubmit(convertTradeCode(currentRefData.trade));\n\n            const refNumberSuffixFirstTimeSubmitData = /[^/]*$/.exec(currentRefData[refKey])[0];\n            setRefNumberSuffixFirstTimeSubmit(refNumberSuffixFirstTimeSubmitData);\n\n         };\n\n      } else if (formRefType === 'form-resubmit-multi-type') {\n\n         if (!isFormEditting) {\n\n            setDateReplyForSubmitForm(moment(moment().add(14, 'days').format('DD/MM/YY'), 'DD/MM/YY'));\n\n            const listRecipientToData = getInfoValueFromRefDataForm(currentRefData, 'submission', refType, 'emailTo', company) || [];\n            setListRecipientTo([...new Set(listRecipientToData)]);\n\n            const listRecipientCcData = getInfoValueFromRefDataForm(currentRefData, 'submission', refType, 'emailCc', company) || [];\n            setListRecipientCc([...new Set(listRecipientCcData)]);\n\n            const listConsultantMustReplyData = getInfoValueFromRefDataForm(currentRefData, 'submission', refType, 'consultantMustReply', company) || [];\n            setListConsultantMustReply(listConsultantMustReplyData);\n\n            const textEmailTitleData = getInfoValueFromRefDataForm(currentRefData, 'submission', refType, 'emailTitle', company) || '';\n            setTextEmailTitle(textEmailTitleData);\n\n\n            const versionTextIndex = versionTextArray.indexOf(currentRefData.revision);\n            const versionTextNext = versionTextArray[versionTextIndex + 1];\n            setRefNewVersionResubmitSuffix(versionTextNext);\n\n         } else {\n\n            const listRecipientToData = getInfoValueFromRefDataForm(currentRefData, 'submission', refType, 'emailTo', company) || [];\n            setListRecipientTo([...new Set(listRecipientToData)]);\n\n            const listRecipientCcData = getInfoValueFromRefDataForm(currentRefData, 'submission', refType, 'emailCc', company) || [];\n            setListRecipientCc([...new Set(listRecipientCcData)]);\n\n            const listConsultantMustReplyData = getInfoValueFromRefDataForm(currentRefData, 'submission', refType, 'consultantMustReply', company) || [];\n            setListConsultantMustReply(listConsultantMustReplyData);\n\n            const requestedByData = getInfoValueFromRefDataForm(currentRefData, 'submission', refType, 'requestedBy', company) || '';\n            setRequestedBy(requestedByData);\n\n            const signaturedByData = getInfoValueFromRefDataForm(currentRefData, 'submission', refType, 'signaturedBy', company) || '';\n            setSignaturedBy(signaturedByData);\n\n            const textEmailTitleData = getInfoValueFromRefDataForm(currentRefData, 'submission', refType, 'emailTitle', company) || '';\n            setTextEmailTitle(textEmailTitleData);\n\n            const descriptionData = getInfoValueFromRefDataForm(currentRefData, 'submission', refType, 'description', company) || '';\n            setDescription(descriptionData);\n\n\n            setConversationAmong(getInfoValueFromRefDataForm(currentRefData, 'submission', refType, 'conversationAmong', company));\n            setContractSpecification(getInfoValueFromRefDataForm(currentRefData, 'submission', refType, 'contractSpecification', company));\n            setProposedSpecification(getInfoValueFromRefDataForm(currentRefData, 'submission', refType, 'proposedSpecification', company));\n            setIsCostImplication(getInfoValueFromRefDataForm(currentRefData, 'submission', refType, 'isCostImplication', company));\n            setIsTimeExtension(getInfoValueFromRefDataForm(currentRefData, 'submission', refType, 'isTimeExtension', company));\n            setHerewithForDt(getInfoValueFromRefDataForm(currentRefData, 'submission', refType, 'herewithForDt', company));\n            setTransmittedForDt(getInfoValueFromRefDataForm(currentRefData, 'submission', refType, 'transmittedForDt', company));\n            setSubmissionType(getInfoValueFromRefDataForm(currentRefData, 'submission', refType, 'submissionType', company));\n\n            setTimeConversation(moment(getInfoValueFromRefDataForm(currentRefData, 'submission', refType, 'timeConversation', company)));\n            setDateConversation(moment(getInfoValueFromRefDataForm(currentRefData, 'submission', refType, 'dateConversation', company)));\n\n            setDateReplyForSubmitForm(moment(getInfoValueFromRefDataForm(currentRefData, 'submission', refType, 'due', company)));\n\n            setRefNewVersionResubmitSuffix(currentRefData.revision);\n         };\n\n\n      } else if (formRefType === 'form-reply-multi-type') {\n         if (!isFormEditting) {\n            let arrEmailCc = [];\n            for (const key in currentRefData) {\n               if (key.includes(`submission-${refType}-user-`)) {\n                  const listEmailTo = currentRefData[key] ? [currentRefData[key]] : [];\n                  setListRecipientTo([...new Set(listEmailTo)]);\n               } else if (key.includes(`submission-${refType}-emailTo-`) || key.includes(`submission-${refType}-emailCc-`)) {\n                  arrEmailCc = [...new Set([...arrEmailCc, ...currentRefData[key]])];\n               };\n            };\n            setListRecipientCc([...new Set(arrEmailCc)]);\n\n            const title = getInfoValueFromRefDataForm(currentRefData, 'submission', refType, 'emailTitle');\n            setTextEmailTitle('Reply - ' + title);\n\n         } else {\n\n            const listRecipientToData = getInfoValueFromRefDataForm(currentRefData, 'reply', refType, 'emailTo', company) || [];\n            setListRecipientTo([...new Set(listRecipientToData)]);\n\n            const listRecipientCcData = getInfoValueFromRefDataForm(currentRefData, 'reply', refType, 'emailCc', company) || [];\n            setListRecipientCc([...new Set(listRecipientCcData)]);\n\n            const textEmailTitleData = getInfoValueFromRefDataForm(currentRefData, 'reply', refType, 'emailTitle', company) || '';\n            setTextEmailTitle(textEmailTitleData);\n\n            const descriptionData = getInfoValueFromRefDataForm(currentRefData, 'reply', refType, 'description', company) || '';\n            setDescription(descriptionData);\n\n            const statusData = getInfoValueFromRefDataForm(currentRefData, 'reply', refType, 'status', company) || '';\n            setConsultantReplyStatus(statusData);\n\n            const linkFormReplyData = getInfoValueFromRefDataForm(currentRefData, 'reply', refType, 'linkFormReply', company) || '';\n            setFileReplyFormName(/[^/]*$/.exec(linkFormReplyData)[0]);\n\n         };\n      };\n   }, []);\n\n\n   useEffect(() => {\n      if (tradeForFirstTimeSubmit && formRefType === 'form-submit-multi-type') {\n\n         if (!isFormEditting) {\n            const allRefNumberUnderThisTrade = rowsRefAllInit.filter(r => r.trade === convertTradeCodeInverted(tradeForFirstTimeSubmit));\n\n            let refNumberExtracted = [... new Set(allRefNumberUnderThisTrade.map(x => /[^/]*$/.exec(x[refKey])[0]))];\n\n            refNumberExtracted = refNumberExtracted\n               .filter(x => x.length === 3 && parseInt(x) > 0)\n               .map(x => parseInt(x));\n\n            if (refNumberExtracted.length > 0) {\n               const lastNumber = Math.max(...refNumberExtracted);\n               const suggestedNewRefNumber = lastNumber + 1;\n               const suggestedNewRefNumberConverted = suggestedNewRefNumber.toString();\n               const suggestedNewRefNumberString = suggestedNewRefNumberConverted.length === 3 ? suggestedNewRefNumberConverted\n                  : suggestedNewRefNumberConverted.length === 2 ? '0' + suggestedNewRefNumberConverted\n                     : '00' + suggestedNewRefNumberConverted;\n\n               setRefNumberSuffixFirstTimeSubmit(suggestedNewRefNumberString);\n            } else {\n               setRefNumberSuffixFirstTimeSubmit('001');\n            };\n         } else {\n            if (checkIfRefIsDuplicated()) {\n               message.info(`This ${refType.toUpperCase()} number has already existed, please choose a new number!`);\n               setRefNumberSuffixFirstTimeSubmit('');\n            };\n         };\n      };\n   }, [tradeForFirstTimeSubmit]);\n\n\n\n   useEffect(() => {\n      if (!loading) {\n         setModalConfirmsubmitOrCancel(null);\n      };\n   }, [loading]);\n\n\n\n\n   const checkIfRefIsDuplicated = () => {\n      const arr = [...new Set(rowsRefAllInit.map(r => (r[refKey] || '')))];\n      if (formRefType === 'form-submit-multi-type') {\n         const newRefToSubmit = `${refType.toUpperCase()}/${projectNameShort}/${tradeForFirstTimeSubmit}/${refNumberSuffixFirstTimeSubmit}`;\n         return (\n            (!isFormEditting && arr.indexOf(newRefToSubmit) !== -1) ||\n            (isFormEditting && arr.indexOf(newRefToSubmit) !== -1 && newRefToSubmit !== currentRefData[refKey])\n         );\n      } else if (formRefType === 'form-resubmit-multi-type') {\n         const newRefToSubmit = currentRefData[refKey] + refNewVersionResubmitSuffix;\n\n         return (\n            (!isFormEditting && arr.indexOf(newRefToSubmit) !== -1) ||\n            (isFormEditting && arr.indexOf(newRefToSubmit) !== -1 && newRefToSubmit !== (currentRefData[refKey] + currentRefData.revision))\n         );\n      };\n   };\n\n\n   const onBlurInputRefNameCreateNew = () => {\n      if (checkIfRefIsDuplicated()) {\n         message.info(`This ${refType.toUpperCase()} number has already existed, please choose a new number!`);\n         setRefNumberSuffixFirstTimeSubmit('');\n         setRefNewVersionResubmitSuffix('');\n      };\n   };\n\n\n\n\n   const onChangeUploadPdfDrawing = (info) => {\n      if (info.fileList) {\n         let output = {};\n         info.fileList.forEach(file => {\n            output = { ...output, [file.name]: file };\n         });\n         setFilesPdfDrawing(output);\n      };\n   };\n\n   const onChangeUploadFormCoverForReply = (info) => {\n      if (info.fileList) {\n         let output = {};\n         info.fileList.forEach(file => {\n            output = { [file.name]: file };\n         });\n         setFileFormCoverReply(output);\n      };\n   };\n\n   const onClickTagRecipientTo = (email, isRemoveTag) => {\n      if (formRefType !== 'page-mm') {\n         let outputListConsultantMustReply = [...listConsultantMustReply];\n         const consultantName = extractConsultantName(email);\n         const originConsultant = listConsultants.find(x => x.company === consultantName);\n         outputListConsultantMustReply = outputListConsultantMustReply.filter(x => x !== consultantName);\n\n         if (originConsultant && !isRemoveTag) {\n            outputListConsultantMustReply.unshift(originConsultant.company);\n         };\n         setListConsultantMustReply(outputListConsultantMustReply);\n      };\n   };\n\n\n\n   const onClickApplyDoneFormRef = (typeButton) => {\n\n      const isSubmitOrResubmitForm = formRefType.includes('form-submit-multi-') || formRefType.includes('form-resubmit-multi-');\n\n      if (isFormEditting) {\n         if (\n            (isSubmitOrResubmitForm && checkIfEditTimeIsOverMultiForm(currentRefData, null, EDIT_DURATION_MIN, refType, 'wohhup-check-if-submission-edit-is-over')) ||\n            (!isSubmitOrResubmitForm && checkIfEditTimeIsOverMultiForm(currentRefData, company, EDIT_DURATION_MIN, refType, 'consultant-check-if-reply-edit-is-over'))\n         ) {\n            return message.info('Time is up, you are unable to edit the submission!', 2);\n         };\n      };\n\n      let trade, refToSaveVersionOrToReply, refToSave;\n\n      if (formRefType.includes('form-submit-multi-')) {\n         if (pageSheetTypeName === 'page-mm') {\n            trade = convertTradeCodeMeetingMinutesInverted(tradeForFirstTimeSubmit);\n         } else {\n            trade = convertTradeCodeInverted(tradeForFirstTimeSubmit);\n         };\n         refToSaveVersionOrToReply = '0';\n         refToSave = `${refType.toUpperCase()}/${projectNameShort}/${tradeForFirstTimeSubmit}/${refNumberSuffixFirstTimeSubmit}`;\n      } else if (formRefType.includes('form-resubmit-multi-')) {\n         trade = currentRefData.trade;\n         refToSaveVersionOrToReply = refNewVersionResubmitSuffix;\n         refToSave = currentRefData[refKey];\n      } else if (formRefType.includes('form-reply-multi-')) { // reply\n         trade = currentRefData.trade;\n         refToSaveVersionOrToReply = currentRefData.revision;\n         refToSave = currentRefData[refKey];\n      };\n\n\n      \n\n\n      if (projectNameShort === 'NO-PROJECT-NAME') {\n         return message.info(`Please update project abbreviation name for ${refType.toUpperCase()} number!`, 2);\n      } else if (!textEmailTitle && !isAdminActionWithNoEmailSent) {\n         return message.info('Please fill in email title!', 2);\n      } else if (!description) {\n         return message.info('Please fill in description!', 2);\n      } else if (!listRecipientTo || listRecipientTo.length === 0) {\n         return message.info('Please fill in recipient!', 2);\n      } else if (isSubmitOrResubmitForm && !dateReplyForSubmitForm) {\n         return message.info('Please fill in expected reply date!', 2);\n      } else if (isSubmitOrResubmitForm && listConsultantMustReply.length === 0 && pageSheetTypeName !== 'page-mm') {\n         return message.info('Please fill in consultant lead', 2);\n      } else if (isSubmitOrResubmitForm && !requestedBy) {\n         return message.info('Please fill in person requested', 2);\n      } else if (!trade || !refToSave || !refToSaveVersionOrToReply) {\n         return message.info('Please fill in necessary info!', 2);\n      } else if (isSubmitOrResubmitForm && !signaturedBy && pageSheetTypeName !== 'page-mm') {\n         return message.info('Please fill in signatured by!', 2);\n      } else if (isSubmitOrResubmitForm && !submissionType && pageSheetTypeName === 'page-rfam') {\n         return message.info('Please fill in submission type!', 2);\n      } else if (isSubmitOrResubmitForm && !conversationAmong && (pageSheetTypeName === 'page-cvi' || pageSheetTypeName === 'page-mm')) {\n         return message.info('Please fill in conversation among!', 2);\n      } else if (isSubmitOrResubmitForm && (!dateConversation || !timeConversation) && (pageSheetTypeName === 'page-cvi' || pageSheetTypeName === 'page-mm')) {\n         return message.info('Please fill in date and time conversation!', 2);\n      } else if (isSubmitOrResubmitForm && !herewithForDt && pageSheetTypeName === 'page-dt') {\n         return message.info('Please fill in herewith!', 2);\n      } else if (isSubmitOrResubmitForm && !transmittedForDt && pageSheetTypeName === 'page-dt') {\n         return message.info('Please fill in transmitted for!', 2);\n\n      } else if (formRefType === 'form-resubmit-multi-type' && !refNewVersionResubmitSuffix) {\n         return message.info('Please fill in version!', 2);\n      } else if (!isSubmitOrResubmitForm && !consultantReplyStatus && pageSheetTypeName === 'page-rfam') {\n         return message.info('Please fill in reply status!', 2);\n      } else if (!isSubmitOrResubmitForm && Object.keys(fileFormCoverReply).length === 0 && !isFormEditting) {\n         return message.info('Please upload form!', 2);\n      };\n\n\n      let outputConsultantsToReply = [];\n      if (isSubmitOrResubmitForm) {\n         if (\n            pageSheetTypeName === 'page-rfam' ||\n            pageSheetTypeName === 'page-rfi'\n         ) {\n            outputConsultantsToReply = [...listConsultantMustReply];\n         } else if (\n            pageSheetTypeName === 'page-cvi' ||\n            pageSheetTypeName === 'page-dt'\n         ) {\n            outputConsultantsToReply = [...listConsultantMustReply].sort();\n         };\n      };\n\n\n      getSheetRows({ ...stateRow, loading: true });\n\n\n      onClickApplySendFormToSignature(typeButton, {\n         type: formRefType,\n         isFormEditting, trade,\n\n         filesPdfDrawing: Object.values(filesPdfDrawing),\n         dwgsImportFromRFA: dwgsImportFromRFA.map(x => ({ ...x })),\n         fileFormCoverReply: Object.values(fileFormCoverReply)[0],\n\n         refToSave, refToSaveVersionOrToReply,\n         recipient: {\n            to: isAdminActionWithNoEmailSent ? [] : [...new Set(listRecipientTo)],\n            cc: isAdminActionWithNoEmailSent ? [] : [...new Set(listRecipientCc)]\n         },\n         listConsultantMustReply: outputConsultantsToReply,\n         requestedBy, signaturedBy,\n         dateConversation, timeConversation,\n         conversationAmong,\n         isCostImplication, isTimeExtension,\n         emailTextTitle: isAdminActionWithNoEmailSent ? '' : textEmailTitle,\n         description: isAdminActionWithNoEmailSent ? '' : description,\n         dateReplyForSubmitForm,\n         consultantReplyStatus,\n         contractSpecification,\n         proposedSpecification,\n         submissionType,\n         herewithForDt,\n         transmittedForDt,\n\n         isAdminActionWithNoEmailSent,\n         adminActionConsultantToReply,\n         isAdminAction,\n      });\n   };\n\n\n   const generateColumnsListDwgRef = (headers, nosColumnFixed) => {\n      const buttonRemoveDrawing = [\n         {\n            key: 'action', dataKey: 'action', title: '',\n            width: 40,\n            frozen: Column.FrozenDirection.RIGHT,\n            cellRenderer: (\n               <CellRemoveDrawing\n                  onClickRemoveDwgBtn={onClickRemoveDwgBtn}\n               />\n            )\n         }\n      ];\n\n\n      return [\n         {\n            key: 'index', dataKey: 'index', title: '', width: 40,\n            frozen: Column.FrozenDirection.LEFT,\n            cellRenderer: ({ rowIndex }) => <div>{rowIndex + 1}</div>\n         },\n         ...headers.map((column, index) => ({\n            key: column, dataKey: column, title: column,\n            resizable: true,\n            frozen: index < nosColumnFixed ? Column.FrozenDirection.LEFT : undefined,\n            width: getHeaderWidthDwgRef(column),\n            cellRenderer: ({ rowData, cellData }) => {\n               let cellTypeName;\n               if (!rowData['Type'] && !rowData['File Name']) {\n                  if (column === 'Type') {\n                     cellTypeName = 'Submitted RFA';\n                  } else if (column === 'File Name') {\n                     cellTypeName = rowData['Drawing Number'];\n                  };\n               };\n               return <div>{cellTypeName || cellData}</div>;\n            }\n         })),\n         ...buttonRemoveDrawing,\n      ];\n   };\n\n\n   const onClickRemoveDwgBtn = debounceFnc((rowData) => {\n      return;\n      // const onClickRemoveDwgBtn = (rowData) => {\n      console.log(rowData, filesPdfDrawing, Object.keys(filesPdfDrawing).length);\n      if (rowData['Type'] === 'Drawing') {\n         console.log('========================filesPdfDrawing', filesPdfDrawing, Object.keys(filesPdfDrawing).length);\n         // let obj = {};\n         // for (const key in filesPdfDrawing) {\n         //    const file = filesPdfDrawing[key];\n         //    console.log('444-666', file.name, rowData['File Name']);\n         //    if (file.name !== rowData['File Name']) {\n         //       obj[key] = file;\n         //    };\n         // };\n         // setFilesPdfDrawing(obj);\n\n      } else if (rowData['Type'] === 'Cover') {\n         // delete fileFormCoverReply[rowData['File Name']];\n         // let obj = {};\n         // for (const key in fileFormCoverReply) {\n         //    obj[key] = fileFormCoverReply[key];\n         // };\n         // setFileFormCoverReply(obj);\n\n      } else if (!rowData['Type']) {\n         // setDwgsImportFromRFA(dwgsImportFromRFA.filter(x => x.id !== rowData.id));\n      };\n\n      setNosColumnFixed(2);\n      setNosColumnFixed(1);\n   }, 1);\n   // };\n\n\n\n\n   return (\n      <>\n         <div style={{ background: 'white', width: '100%', padding: 10, color: 'black' }}>\n            <div style={{ padding: 20, paddingRight: 10, borderBottom: `1px solid ${colorType.grey4}` }}>\n               <div style={{ display: 'flex', marginBottom: 10 }}>\n                  <div style={{ marginRight: 10, fontWeight: 'bold' }}>{refType.toUpperCase()} Number</div>\n                  {formRefType === 'form-submit-multi-type' ? (\n                     <>\n                        <div>{`${refType.toUpperCase()}/${projectNameShort}/`}</div>\n                        <SelectTradeStyled\n                           showSearch\n                           optionFilterProp='children'\n                           onChange={(value) => {\n                              setTradeForFirstTimeSubmit(value);\n                           }}\n                           filterOption={(input, option) => option.props.children.toLowerCase().indexOf(input.toLowerCase()) >= 0}\n                           suffixIcon={<div></div>}\n                           value={tradeForFirstTimeSubmit}\n                        >\n                           {(\n                              pageSheetTypeName === 'page-mm'\n                                 ? ['PRO', 'TEC', 'ICE']\n                                 : ['ARC', 'CS', 'ME', 'PC']\n                           ).map(trade => (\n                              <Select.Option key={trade} value={trade}>{trade}</Select.Option>\n                           ))}\n                        </SelectTradeStyled>\n                        <div style={{ marginLeft: 10 }}>/</div>\n                        {tradeForFirstTimeSubmit ? (\n                           <InputStyled\n                              style={{ width: 50, marginRight: 120 }}\n                              onChange={(e) => setRefNumberSuffixFirstTimeSubmit(e.target.value)}\n                              onBlur={onBlurInputRefNameCreateNew}\n                              value={refNumberSuffixFirstTimeSubmit}\n                           />\n                        ) : (\n                           <div style={{ marginRight: 120, transform: 'translateY(8px)', color: colorType.grey1 }}>\n                              <Tooltip title='Ref number automatically filled in after selecting trade'>{'____'}</Tooltip>\n                           </div>\n                        )}\n                     </>\n                  ) : formRefType === 'form-resubmit-multi-type' ? (\n                     <>\n                        <div style={{ marginRight: 2 }}>{currentRefData[refKey]}</div>\n                        <InputStyled\n                           style={{ width: 50, marginRight: 120 }}\n                           onChange={(e) => setRefNewVersionResubmitSuffix(e.target.value)}\n                           onBlur={onBlurInputRefNameCreateNew}\n                           value={refNewVersionResubmitSuffix}\n                        />\n                     </>\n\n                  ) : formRefType === 'form-reply-multi-type' ? (\n                     <div>{currentRefData[refKey] + (currentRefData.revision === '0' ? '' : currentRefData.revision)}</div>\n\n                  ) : null}\n\n\n                  {formRefType !== 'form-reply-multi-type' && pageSheetTypeName !== 'page-mm' && (\n                     <>\n                        <div style={{ marginRight: 10, fontWeight: 'bold' }}>Date Reply</div>\n                        <DatePickerStyled\n                           value={dateReplyForSubmitForm}\n                           format={'DD/MM/YY'}\n                           onChange={(e) => setDateReplyForSubmitForm(e)}\n                        />\n                     </>\n                  )}\n\n\n                   \n                  {/* {formRefType === 'form-reply-multi-type' && adminActionConsultantToReply && (\n                     <div style={{ marginLeft: 20 }}>Company reply: <span style={{ fontWeight: 'bold' }}>{adminActionConsultantToReply}</span></div>\n                  )} */}\n\n                  \n               </div>\n\n\n\n               {!isAdminActionWithNoEmailSent && (\n                  <div style={{ display: 'flex', justifyContent: 'space-between', marginBottom: 10 }}>\n                     <div style={{ transform: 'translateY(5px)', fontWeight: 'bold' }}>{'To'}</div>\n                     <div style={{ width: '95%' }}>\n                        <SelectRecipientStyled\n                           mode='tags'\n                           placeholder='Please select...'\n                           value={listRecipientTo}\n\n                           onChange={(list) => {\n                              if (list.find(tag => !listGroup.find(x => x === tag) && !validateEmailInput(tag))) {\n                                 return message.warning('Please choose an available group email or key in an email address!');\n                              };\n\n                              if (formRefType === 'form-submit-multi-type') {\n                                 let isLeadConsultantIncluded = false;\n                                 list.forEach(tagCompany => {\n                                    if (checkIfMatchWithInputCompanyFormat(tagCompany, listConsultants)) {\n                                       isLeadConsultantIncluded = true;\n                                    };\n                                 });\n                                 if (!isLeadConsultantIncluded && pageSheetTypeName !== 'page-mm') {\n                                    if (\n                                       pageSheetTypeName === 'page-rfam' ||\n                                       pageSheetTypeName === 'page-rfi'\n                                    ) {\n                                       message.warning('You must include lead consultant!');\n                                    } else if (\n                                       pageSheetTypeName === 'page-cvi' ||\n                                       pageSheetTypeName === 'page-dt'\n                                    ) {\n                                       message.warning('You must include consultants!');\n                                    };\n                                 };\n\n                                 const itemJustRemoved = listRecipientTo.find(x => !list.find(it => it === x));\n                                 if (\n                                    itemJustRemoved &&\n                                    listConsultantMustReply.find(x => x === extractConsultantName(itemJustRemoved)) &&\n                                    !list.find(tg => extractConsultantName(tg) && extractConsultantName(tg) === extractConsultantName(itemJustRemoved))\n                                 ) {\n                                    setListConsultantMustReply(listConsultantMustReply.filter(x => x !== extractConsultantName(itemJustRemoved)));\n                                 };\n\n\n                              } else if (formRefType === 'form-resubmit-multi-type') {\n                                 const consultantLeadFromPreviousSubmission = listConsultantMustReply[0];\n                                 const itemJustRemoved = listRecipientTo.find(x => !list.find(it => it === x));\n                                 if (\n                                    itemJustRemoved &&\n                                    listConsultantMustReply.find(x => x === extractConsultantName(itemJustRemoved)) &&\n                                    consultantLeadFromPreviousSubmission !== extractConsultantName(itemJustRemoved) &&\n                                    !list.find(tg => extractConsultantName(tg) && extractConsultantName(tg) === extractConsultantName(itemJustRemoved))\n                                 ) {\n                                    setListConsultantMustReply(listConsultantMustReply.filter(x => x !== extractConsultantName(itemJustRemoved)));\n                                 };\n                              };\n                              setListRecipientTo([...new Set(list)]);\n\n                              let companyNameToCheck, isRemoveTag;\n                              if (list.length === listRecipientTo.length + 1) {\n                                 companyNameToCheck = list.find(x => !listRecipientTo.find(item => item === x));\n                                 isRemoveTag = false;\n                              } else if (list.length === listRecipientTo.length - 1) {\n                                 companyNameToCheck = listRecipientTo.find(x => !list.find(item => item === x));\n                                 isRemoveTag = true;\n                              };\n\n                              onClickTagRecipientTo(companyNameToCheck, isRemoveTag);\n                           }}\n                        >\n                           {listRecipient.map(cm => {\n                              const isLeadConsultant = listConsultantMustReply[0] && extractConsultantName(cm) === listConsultantMustReply[0];\n                              const isLeadConsultantStyled = (isLeadConsultant && (\n                                 pageSheetTypeName === 'page-rfam' ||\n                                 pageSheetTypeName === 'page-rfi'\n                              )) ? {\n                                 background: colorType.primary,\n                                 fontWeight: 'bold',\n                                 color: 'white'\n                              } : {};\n                              const textShown = extractConsultantName(cm) ? cm.replace('_%$%_', ' ') : cm;\n\n                              return (\n                                 <Option key={cm}>\n                                    <div\n                                       style={{\n                                          background: 'transparent',\n                                          fontWeight: 'normal',\n                                          color: 'black',\n                                          ...isLeadConsultantStyled,\n                                          padding: '0 5px'\n                                       }}\n                                       onClick={() => onClickTagRecipientTo(cm, false)}\n                                    >\n                                       {textShown}\n                                    </div>\n                                 </Option>\n                              )\n                           })}\n                        </SelectRecipientStyled>\n\n                        {formRefType !== 'form-reply-multi-type' && (\n                           <div style={{ display: 'flex', marginTop: 5, marginBottom: 10 }}>\n                              {pageSheetTypeName !== 'page-mm' && (\n                                 <div style={{ marginRight: 8 }}>\n                                    {(pageSheetTypeName === 'page-rfam' || pageSheetTypeName === 'page-rfi') ? 'Lead consultant :'\n                                       : (pageSheetTypeName === 'page-cvi' || pageSheetTypeName === 'page-dt') ? 'Received By :'\n                                          : 'n/a'\n                                    }\n                                 </div>\n                              )}\n                              {pageSheetTypeName !== 'page-mm' && (\n                                 <div style={{ fontWeight: 'bold', marginRight: 10 }}>\n                                    {(pageSheetTypeName === 'page-rfam' || pageSheetTypeName === 'page-rfi') ? (listConsultantMustReply[0] || '')\n                                       : (pageSheetTypeName === 'page-cvi' || pageSheetTypeName === 'page-dt') ? (listConsultantMustReply.sort().join(', ') || '')\n                                          : 'n/a'\n                                    }\n                                 </div>\n                              )}\n\n\n\n                              {formRefType === 'form-submit-multi-type' && pageSheetTypeName !== 'page-mm' && (\n                                 <div style={{ fontSize: 11, color: 'grey', fontStyle: 'italic', transform: 'translateY(3px)' }}>(Click on tag to change lead consultant)</div>\n                              )}\n\n                           </div>\n                        )}\n                     </div>\n                  </div>\n               )}\n\n\n\n\n               {!isAdminActionWithNoEmailSent && (\n                  <div style={{ display: 'flex', justifyContent: 'space-between', marginBottom: 10 }}>\n                     <div style={{ transform: 'translateY(5px)', fontWeight: 'bold' }}>CC</div>\n                     <div style={{ width: '95%' }}>\n                        <SelectRecipientStyled\n                           mode='tags'\n                           placeholder='Please select...'\n                           value={listRecipientCc}\n                           onChange={(list) => {\n                              if (list.find(tag => !listGroup.find(x => x === tag) && !validateEmailInput(tag))) {\n                                 message.warning('Please choose an available group email or key in an email address!');\n                                 return;\n                              };\n                              setListRecipientCc([...new Set(list)]);\n                           }}\n                        >\n                           {listRecipient.map(cm => {\n                              const textShown = extractConsultantName(cm) ? cm.replace('_%$%_', '_') : cm;\n                              return (\n                                 <Option key={cm}>\n                                    <div style={{\n                                       background: 'transparent',\n                                       fontWeight: 'normal',\n                                       color: 'black',\n                                       padding: '0 5px'\n                                    }}>{textShown}</div>\n                                 </Option>\n                              )\n                           })}\n                        </SelectRecipientStyled>\n                     </div>\n                  </div>\n               )}\n\n\n\n               {formRefType !== 'form-reply-multi-type' && pageSheetTypeName !== 'page-mm' && (\n                  <div style={{ display: 'flex' }}>\n                     <div style={{ display: 'flex', marginBottom: 5, marginRight: 120 }}>\n                        <div style={{ transform: 'translateY(5px)', fontWeight: 'bold', marginRight: 15 }}>Requested by</div>\n                        <InputStyled\n                           style={{ width: 250, marginBottom: 10, borderRadius: 0 }}\n                           onChange={(e) => setRequestedBy(e.target.value)}\n                           value={requestedBy}\n                        />\n                     </div>\n                     <div style={{ display: 'flex', marginBottom: 5 }}>\n                        <div style={{ transform: 'translateY(5px)', fontWeight: 'bold', marginRight: 15 }}>Signature</div>\n                        <SelectTradeStyled\n                           style={{ width: 200 }}\n                           showSearch\n                           optionFilterProp='children'\n                           onChange={(value) => setSignaturedBy(value)}\n                           filterOption={(input, option) =>\n                              option.props.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\n                           }\n                           suffixIcon={<div></div>}\n                           value={signaturedBy}\n                        >\n                           {listUser.map((email, i) => (\n                              <Select.Option key={i} value={email}>{email}</Select.Option>\n                           ))}\n                        </SelectTradeStyled>\n                     </div>\n                  </div>\n               )}\n\n\n\n\n               <div style={{ display: 'flex', marginBottom: 20 }}>\n                  <div style={{ width: 65, marginRight: 20, transform: 'translateY(5px)', fontWeight: 'bold' }}>Subject</div>\n                  <InputStyled\n                     style={{ width: '90%', marginBottom: 10, borderRadius: 0 }}\n                     onChange={(e) => setTextEmailTitle(e.target.value)}\n                     value={textEmailTitle}\n                  />\n               </div>\n\n               {\n                  formRefType !== 'form-reply-multi-type' &&\n                  pageSheetTypeName === 'page-dt' &&\n                  (\n                     <div style={{ display: 'flex' }}>\n                        <div style={{ display: 'flex', marginBottom: 5, marginRight: 100 }}>\n                           <div style={{ transform: 'translateY(5px)', fontWeight: 'bold', marginRight: 15 }}>Herewith</div>\n                           <SelectTradeStyled\n                              style={{ width: 200 }}\n                              showSearch\n                              optionFilterProp='children'\n                              onChange={(value) => setHerewithForDt(value)}\n                              filterOption={(input, option) =>\n                                 option.props.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\n                              }\n                              suffixIcon={<div></div>}\n                           >\n                              {[\n                                 'Drawings', 'CD', 'Calculations', 'Method Statement', 'Document', 'Programme',\n                                 'Specifications', 'Part Prints/Sketches', 'Catalogues', 'Test Results', 'Correspondence', 'Others',\n                              ].map((typeFile, i) => (\n                                 <Select.Option key={i} value={typeFile}>{typeFile}</Select.Option>\n                              ))}\n                           </SelectTradeStyled>\n                        </div>\n\n                        <div style={{ display: 'flex', marginBottom: 5 }}>\n                           <div style={{ transform: 'translateY(5px)', fontWeight: 'bold', marginRight: 15 }}>Transmitted For</div>\n                           <SelectTradeStyled\n                              style={{ width: 200 }}\n                              showSearch\n                              optionFilterProp='children'\n                              onChange={(value) => setTransmittedForDt(value)}\n                              filterOption={(input, option) =>\n                                 option.props.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\n                              }\n                              suffixIcon={<div></div>}\n                           >\n                              {['Information / Action', 'Comments / Approval', 'Construction', 'Record'].map((typeFile, i) => (\n                                 <Select.Option key={i} value={typeFile}>{typeFile}</Select.Option>\n                              ))}\n                           </SelectTradeStyled>\n                        </div>\n                     </div>\n                  )}\n\n\n\n               {\n                  formRefType !== 'form-reply-multi-type' &&\n                  pageSheetTypeName === 'page-rfam' &&\n                  (\n                     <div style={{ display: 'flex' }}>\n                        <div style={{ marginRight: 10, fontWeight: 'bold' }}>Submission Type</div>\n                        <SelectTradeStyled\n                           style={{ width: 150 }}\n                           showSearch\n                           optionFilterProp='children'\n                           onChange={(value) => setSubmissionType(value)}\n                           filterOption={(input, option) =>\n                              option.props.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\n                           }\n                           suffixIcon={<div></div>}\n                           value={submissionType}\n                        >\n                           {[\n                              'New Submittal',\n                              'Alternative',\n                              'Resubmittal',\n                           ].map(typeSubmit => (\n                              <Select.Option key={typeSubmit} value={typeSubmit}>{typeSubmit}</Select.Option>\n                           ))}\n                        </SelectTradeStyled>\n                     </div>\n                  )}\n\n\n\n               {\n                  formRefType !== 'form-reply-multi-type' &&\n                  (pageSheetTypeName === 'page-cvi' || pageSheetTypeName === 'page-mm') &&\n                  (\n                     <>\n                        <div style={{ display: 'flex', marginBottom: 20 }}>\n                           <div style={{ width: 150, marginRight: 20, transform: 'translateY(5px)', fontWeight: 'bold' }}>Conversation Among</div>\n                           <InputStyled\n                              style={{ width: '90%', marginBottom: 10, borderRadius: 0 }}\n                              onChange={(e) => setConversationAmong(e.target.value)}\n                              value={conversationAmong}\n                           />\n                        </div>\n\n                        <div style={{ display: 'flex' }}>\n                           <div style={{ display: 'flex', marginRight: 50 }}>\n                              <div style={{ marginRight: 10, fontWeight: 'bold' }}>Date</div>\n                              <DatePickerStyled\n                                 value={dateConversation}\n                                 format={'DD/MM/YY'}\n                                 onChange={(e) => setDateConversation(e)}\n                              />\n                           </div>\n\n                           <div style={{ display: 'flex' }}>\n                              <div style={{ marginRight: 10, fontWeight: 'bold' }}>Time</div>\n                              <TimePickerStyled\n                                 defaultValue={moment('12:08', 'HH:mm')} format={'HH:mm'}\n                                 value={timeConversation}\n                                 onChange={(e) => setTimeConversation(e)}\n                              />\n                           </div>\n                        </div>\n                     </>\n                  )}\n\n\n               <br />\n\n               <div style={{ display: 'flex', marginBottom: 20 }}>\n                  <div style={{ width: 90, marginRight: 20, transform: 'translateY(5px)', fontWeight: 'bold', marginBottom: 10 }}>Description</div>\n                  <TextAreaStyled\n                     style={{ width: '85%', marginBottom: 10, borderRadius: 0 }}\n                     rows={5}\n                     onChange={(e) => setDescription(e.target.value)}\n                     value={description}\n                     placeholder='Write details...'\n                  />\n               </div>\n\n\n               {\n                  formRefType !== 'form-reply-multi-type' &&\n                  pageSheetTypeName === 'page-rfam' &&\n                  (\n                     <>\n                        <div style={{ display: 'flex', marginBottom: 20 }}>\n                           <div style={{ width: 90, marginRight: 20, transform: 'translateY(5px)', fontWeight: 'bold', marginBottom: 10 }}>Contract Specification</div>\n                           <TextAreaStyled\n                              style={{ width: '85%', marginBottom: 10, borderRadius: 0 }}\n                              rows={5}\n                              onChange={(e) => setContractSpecification(e.target.value)}\n                              value={contractSpecification}\n                              placeholder='Write contract specification...'\n                           />\n                        </div>\n                        <div style={{ display: 'flex', marginBottom: 20 }}>\n                           <div style={{ width: 90, marginRight: 20, transform: 'translateY(5px)', fontWeight: 'bold', marginBottom: 10 }}>Proposed Specification</div>\n                           <TextAreaStyled\n                              style={{ width: '85%', marginBottom: 10, borderRadius: 0 }}\n                              rows={5}\n                              onChange={(e) => setProposedSpecification(e.target.value)}\n                              value={proposedSpecification}\n                              placeholder='Write proposed specification...'\n                           />\n                        </div>\n                     </>\n                  )}\n\n\n\n\n               {\n                  formRefType !== 'form-reply-multi-type' &&\n                  pageSheetTypeName === 'page-cvi' &&\n                  (\n                     <>\n                        <div style={{ display: 'flex', marginBottom: 10 }}>\n                           <div style={{ marginRight: 30 }}>\n                              <div style={{ marginBottom: 10 }}>\n                                 <CheckboxStyled\n                                    onChange={() => setIsCostImplication(true)}\n                                    checked={isCostImplication}\n                                 >Variation with cost implication</CheckboxStyled>\n                              </div>\n                              <div>\n                                 <CheckboxStyled\n                                    onChange={() => setIsTimeExtension(true)}\n                                    checked={isTimeExtension}\n                                 >With time extension</CheckboxStyled>\n                              </div>\n                           </div>\n                           <div>\n                              <div style={{ marginBottom: 10 }}>\n                                 <CheckboxStyled\n                                    onChange={() => setIsCostImplication(false)}\n                                    checked={!isCostImplication}\n                                 >With no cost implication</CheckboxStyled>\n                              </div>\n                              <div>\n                                 <CheckboxStyled\n                                    onChange={() => setIsTimeExtension(false)}\n                                    checked={!isTimeExtension}\n                                 >With no time extension</CheckboxStyled>\n                              </div>\n                           </div>\n                        </div>\n                     </>\n                  )}\n\n\n               {\n                  formRefType === 'form-reply-multi-type' &&\n                  pageSheetTypeName === 'page-rfam' &&\n                  (\n                     <div style={{ display: 'flex' }}>\n                        <div style={{ marginRight: 10, fontWeight: 'bold' }}>Status</div>\n                        <SelectTradeStyled\n                           style={{ width: 400 }}\n                           showSearch\n                           optionFilterProp='children'\n                           onChange={(value) => setConsultantReplyStatus(value)}\n                           filterOption={(input, option) =>\n                              option.props.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\n                           }\n                           suffixIcon={<div></div>}\n                           value={consultantReplyStatus}\n                        >\n                           {[\n                              'Reject and resubmit',\n                              'Approved with comments, to Resubmit',\n                              'Approved with Comment, no submission Required',\n                              'Approved for Construction'\n                           ].map(status => (\n                              <Select.Option key={status} value={status}>{status}</Select.Option>\n                           ))}\n                        </SelectTradeStyled>\n                     </div>\n                  )}\n\n\n\n               <br /><br />\n\n               <div style={{ display: 'flex', marginBottom: 5 }}>\n                  {formRefType === 'form-reply-multi-type' && (\n                     <Upload\n                        name='file' accept='application/pdf' multiple={false} showUploadList={false}\n                        headers={{ authorization: 'authorization-text' }}\n                        beforeUpload={() => { return false }}\n                        onChange={onChangeUploadFormCoverForReply}\n                     >\n                        <ButtonStyle\n                           marginRight={5}\n                           name='Upload Reply Form'\n                        />\n                     </Upload>\n                  )}\n\n                  <div style={{ marginLeft: 10 }}>{fileReplyFormName}</div>\n\n\n                  {(formRefType === 'form-submit-multi-type' || formRefType === 'form-resubmit-multi-type') && (\n                     <>\n                        <Upload\n                           name='file' accept='application/pdf' multiple={true} showUploadList={false}\n                           headers={{ authorization: 'authorization-text' }}\n                           beforeUpload={() => { return false }}\n                           onChange={onChangeUploadPdfDrawing}\n                        >\n                           <ButtonStyle\n                              marginRight={5}\n                              name='Upload Documents'\n                           />\n                        </Upload>\n\n                        {pageSheetTypeName !== 'page-mm' && (\n                           <ButtonStyle\n                              marginRight={10}\n                              name='Add Drawings From RFA'\n                              onClick={() => setTablePickDrawingRfaSubmitted(true)}\n                           />\n                        )}\n                     </>\n                  )}\n\n               </div>\n\n\n               {(dataInputForTable.length > 0) && (\n                  <div style={{\n                     width: window.innerWidth * 0.9 - 80,\n                     height: dataInputForTable.length * 28 + 80\n                  }}>\n                     <TableStyled\n                        fixed\n                        columns={generateColumnsListDwgRef(headersDwgRef(pageSheetTypeName), nosColumnFixed)}\n                        data={dataInputForTable}\n                        rowHeight={28}\n                     />\n                  </div>\n               )}\n\n\n            </div>\n\n\n            <div style={{\n               padding: 20,\n               display: 'flex',\n               flexDirection: 'row-reverse'\n            }}>\n               <ButtonGroupComp\n                  onClickCancel={() => setModalConfirmsubmitOrCancel('cancel')}\n                  onClickApply={() => setModalConfirmsubmitOrCancel('ok')}\n                  newTextBtnApply={formRefType === 'form-reply-multi-type' ? 'Submit' : 'Create Form & Email For Signature'}\n\n                  onClickApplyAdditional01={() => setModalConfirmsubmitOrCancel('download')}\n                  newTextBtnApplyAdditional01={formRefType === 'form-reply-multi-type' ? null : 'Create Form & Download Pdf'}\n               />\n            </div>\n\n\n         </div>\n\n\n         {tablePickDrawingRfaSubmitted && (\n            <ModalStyled\n               title={'Select Drawings For New RFA'}\n               visible={tablePickDrawingRfaSubmitted}\n               footer={null}\n               destroyOnClose={true}\n               centered={true}\n               width={window.innerWidth * 0.85}\n               onOk={() => setTablePickDrawingRfaSubmitted(false)}\n               onCancel={() => setTablePickDrawingRfaSubmitted(false)}\n            >\n               <TableDrawingRfaForMultiForm\n                  onClickCancelModalPickDrawing={() => setTablePickDrawingRfaSubmitted(false)}\n                  onClickApplyModalPickRfaDrawings={(dwgsRfaToAdd) => {\n                     setDwgsImportFromRFA(dwgsRfaToAdd);\n                     setTablePickDrawingRfaSubmitted(false);\n                  }}\n                  dwgsImportFromRFA={dwgsImportFromRFA}\n               />\n            </ModalStyled>\n         )}\n\n\n         {modalConfirmsubmitOrCancel && formRefType && (\n            <ModalStyled\n               title={modalConfirmsubmitOrCancel === 'ok' ? 'Confirm Submission'\n                  : modalConfirmsubmitOrCancel === 'download' ? 'Download Form Pdf'\n                     : 'Cancel Submission'\n               }\n               visible={modalConfirmsubmitOrCancel !== null ? true : false}\n               footer={null}\n               destroyOnClose={true}\n               centered={true}\n            >\n               <ConfirmSubmitOrCancelModal\n                  typeConfirm={modalConfirmsubmitOrCancel}\n                  formRefType={formRefType}\n                  refData={formRefType.includes('form-submit-multi-')\n                     ? `${refType.toUpperCase()}/${projectNameShort}/${tradeForFirstTimeSubmit}/${refNumberSuffixFirstTimeSubmit}`\n                     : formRefType.includes('form-resubmit-multi-')\n                        ? `${currentRefData[refKey]}${refNewVersionResubmitSuffix}`\n                        : formRefType.includes('form-reply-multi-')\n                           ? `${currentRefData[refKey]}` : null}\n                  onClickCancelConfirmModal={() => setModalConfirmsubmitOrCancel(null)}\n                  onClickApplyConfirmModal={(confirmFinal) => {\n                     if (confirmFinal === 'Cancel Action Form') {\n                        setModalConfirmsubmitOrCancel(null);\n                        onClickCancelModal();\n                     } else {\n                        onClickApplyDoneFormRef(confirmFinal);\n                     };\n                  }}\n               />\n            </ModalStyled>\n         )}\n\n      </>\n   );\n};\n\nexport default PanelAddNewMultiForm;\n\n\nconst getInputForTable = (filesPdfDrawing, dwgsImportFromRFA) => {\n\n   let output = [];\n   // if (fileFormCoverReply) {\n   //    for (const pdfDrawing in fileFormCoverReply) {\n   //       output.push({\n   //          id: mongoObjectId(),\n   //          'Type': 'Form Cover',\n   //          'File Name': pdfDrawing\n   //       });\n   //    };\n   // };\n\n   if (filesPdfDrawing) {\n      for (const pdfDrawing in filesPdfDrawing) {\n         output.push({\n            id: mongoObjectId(),\n            'Type': 'Drawing',\n            'File Name': pdfDrawing\n         });\n      };\n   };\n\n   if (dwgsImportFromRFA && dwgsImportFromRFA.length > 0) {\n      dwgsImportFromRFA.forEach(row => {\n         output.push(row);\n      });\n   };\n\n   return output;\n};\n\nconst CellRemoveDrawing = (props) => {\n   const { onClickRemoveDwgBtn, rowData } = props;\n\n   return (\n      <Tooltip title='Remove File'>\n         <Icon type='close' onClick={() => onClickRemoveDwgBtn(rowData)} />\n      </Tooltip>\n   );\n};\n\n\n\nconst ConfirmSubmitOrCancelModal = ({ typeConfirm, formRefType, refData, onClickCancelConfirmModal, onClickApplyConfirmModal }) => {\n\n   return (\n      <div style={{ padding: 20, width: '100%' }}>\n         {typeConfirm === 'ok' ? (\n            <div>Are you sure to {formRefType === 'form-reply-multi-type' ? 'reply' : 'submit'} the <span style={{ fontWeight: 'bold' }}>{refData}</span>?</div>\n         ) : typeConfirm === 'download' ? (\n            <div>Are you sure to download Pdf form ?</div>\n         ) : typeConfirm === 'cancel' ? (\n            <div>Are you sure to cancel the {formRefType === 'form-reply-multi-type' ? 'response' : 'submission'}?</div>\n         ) : null}\n\n         <div style={{ padding: 20, display: 'flex', flexDirection: 'row-reverse' }}>\n            <ButtonGroupComp\n               onClickCancel={onClickCancelConfirmModal}\n               onClickApply={() => onClickApplyConfirmModal(typeConfirm === 'ok' ? 'action-multiform-email' : typeConfirm === 'download' ? 'action-multiform-download' : 'Cancel Action Form')}\n               newTextBtnApply={'Yes'}\n            />\n         </div>\n      </div>\n   );\n};\n\n\nconst ModalStyled = styled(Modal)`\n    .ant-modal-content {\n        border-radius: 0;\n    }\n   .ant-modal-close {\n      display: none;\n   }\n   .ant-modal-header {\n      padding: 10px;\n   }\n   .ant-modal-title {\n        padding-left: 10px;\n        font-size: 20px;\n        font-weight: bold;\n   }\n   .ant-modal-body {\n      padding: 0;\n      display: flex;\n      justify-content: center;\n   }\n`;\n\n\nconst getHeaderWidthDwgRef = (header) => {\n   if (header === 'Type') return 350;\n   else if (header === 'File Name') return 500;\n   else return 50;\n};\n\n\n\nconst CheckboxStyled = styled(Checkbox)`\n   .ant-checkbox-inner {\n      border-radius: 0;\n      border: none;\n      background: ${colorType.primary}\n   };\n`;\n\nconst TableStyled = styled(Table)`\n   .row-selected-rfa {\n      background-color: ${colorType.cellHighlighted};\n   };\n   .BaseTable__row-cell-text {\n      color: black\n   };\n   .BaseTable__table .BaseTable__body {\n      -webkit-touch-callout: none;\n      -webkit-user-select: none;\n      -khtml-user-select: none;\n      -moz-user-select: none;\n      -ms-user-select: none;\n      user-select: none;\n   };\n   .BaseTable__header-cell {\n      padding: 10px;\n      border-right: 1px solid #DCDCDC;\n      background: ${colorType.grey1};\n      color: black\n   };\n   .BaseTable__header-row {\n      background: ${colorType.grey1};\n   };\n   .BaseTable__row-cell {\n      padding: 10px;\n      border-right: 1px solid #DCDCDC;\n      overflow: visible !important;\n   };\n`;\nconst InputStyled = styled(Input)`\n   transform: translateY(-5px);\n   color: black;\n   border-top: none;\n   border-right: none;\n   border-left: none;\n   border-radius: 0;\n   &:focus {\n      outline: none;\n      box-shadow: none;\n   }\n`;\nconst TextAreaStyled = styled(TextArea)`\n   color: black;\n   border-top: none;\n   border-right: none;\n   border-left: none;\n   &:focus {\n      outline: none;\n      box-shadow: none;\n   }\n`;\nconst SelectStyled = styled(Select)`\n   width: 100%;\n   outline: none;\n   .ant-select-selection {\n      outline: none;\n      border-radius: 0;\n      border: none;\n      width: 100%;\n      background: transparent;\n   }\n   .ant-select-selection__rendered {\n      outline: none;\n   }\n`;\n\nconst SelectRecipientStyled = styled(Select)`\n   width: 100%;\n   .ant-select-selection__choice {\n      /* padding: 0; */\n      margin-right: 5px;\n      border: 1px solid ${colorType.grey1}\n   }\n   .ant-select-selection__choice__remove {\n      \n   }\n\n   .ant-select-selection {\n      border-radius: 0;\n      width: 100%;\n      background: transparent;\n\n      border-top: none;\n      border-right: none;\n      border-left: none;\n      outline: none;\n      box-shadow: none;\n      &:focus {\n         outline: none;\n         box-shadow: none;\n      }\n   };\n\n`;\n\nconst TimePickerStyled = styled(TimePicker)`\n   transform: translateY(-5px);\n   .ant-time-picker-input {\n      border-radius: 0;\n      border-top: none;\n      border-right: none;\n      border-left: none;\n      outline: none;\n      box-shadow: none;\n      &:focus {\n         outline: none;\n         box-shadow: none;\n      };\n      width: 110px;\n   };\n   .anticon {\n      transform: translateX(-10px);\n   }\n`;\n\n\nconst DatePickerStyled = styled(DatePicker)`\n   transform: translateY(-5px);\n   .ant-calendar-picker-input {\n      border-radius: 0;\n      border-top: none;\n      border-right: none;\n      border-left: none;\n      outline: none;\n      box-shadow: none;\n      &:focus {\n         outline: none;\n         box-shadow: none;\n      };\n      width: 110px;\n   };\n`;\n\n\nconst SelectTradeStyled = styled(Select)`\n   transform: translateY(-5px);\n   width: 60px;\n   cursor: alias;\n\n   .ant-select-selection__rendered {\n      padding: 0;\n      margin: 0;\n      margin-left: 10px;\n   };\n   .ant-select-selection {\n      border-radius: 0;\n      border-top: none;\n      border-right: none;\n      border-left: none;\n      outline: none;\n      box-shadow: none;\n      &:focus {\n         outline: none;\n         box-shadow: none;\n      };\n   }\n`;\n\n\n\n\nconst headersDwgRef = (pageSheetTypeName) => {\n\n   return pageSheetTypeName === 'page-rfa' ? [\n      'Drawing Number',\n      'Drawing Name',\n      'Coordinator In Charge',\n      'Rev',\n      'File PDF',\n      '3D Model'\n\n   ] : [\n      'Type',\n      'File Name',\n   ];\n};\n\n\nconst convertTradeCode = (trade) => {\n   if (trade === 'ARCHI') return 'ARC';\n   if (trade === 'C&S') return 'CS';\n   if (trade === 'M&E') return 'ME';\n   if (trade === 'PRECAST') return 'PC';\n};\nexport const convertTradeCodeInverted = (trade) => {\n   if (trade === 'ARC') return 'ARCHI';\n   if (trade === 'CS') return 'C&S';\n   if (trade === 'ME') return 'M&E';\n   if (trade === 'PC') return 'PRECAST';\n};\nexport const convertTradeCodeMeetingMinutesInverted = (trade) => {\n   if (trade === 'PRO') return 'PROJECT PROGRESS MEETING';\n   if (trade === 'TEC') return 'TECHNICAL MEETING';\n   if (trade === 'ICE') return 'ICE MEETING';\n};\n","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\generalComponents\\TableDrawingRfaForMultiForm.js",["504"],"import { message } from 'antd';\nimport Axios from 'axios';\nimport React, { useContext, useEffect, useState } from 'react';\nimport BaseTable, { AutoResizer } from 'react-base-table';\nimport styled from 'styled-components';\nimport { colorType, SERVER_URL } from '../../constants';\nimport { Context as ProjectContext } from '../../contexts/projectContext';\nimport { getHeaderWidth } from '../../utils';\nimport { convertRowHistoryData, getDataForRFASheet } from '../pageSpreadsheet/PanelSetting';\nimport ButtonGroupComp from './ButtonGroupComp';\n\n\nconst Table = (props) => {\n   return (\n      <AutoResizer>\n         {({ width, height }) => {\n            return (\n               <BaseTable\n                  {...props}\n                  width={width}\n                  height={height}\n               />\n            );\n         }}\n      </AutoResizer>\n   );\n};\n\n\nconst TableDrawingRfaForMultiForm = ({ onClickCancelModalPickDrawing, onClickApplyModalPickRfaDrawings, dwgsImportFromRFA }) => {\n\n\n   const { state: stateProject } = useContext(ProjectContext);\n   const { role, company, projectId, email, token } = stateProject.allDataOneSheet;\n\n   const [rowsTableInput, setRowsTableInput] = useState([]);\n\n   const [headers, setHeaders] = useState([]);\n\n\n   useEffect(() => {\n      const fetchAllRfaDrawings = async () => {\n         try {\n            const res = await Axios.get(`${SERVER_URL}/sheet/`, { params: { token, projectId, email } });\n            const resRowHistory = await Axios.get(`${SERVER_URL}/row/history/`, { params: { token, projectId } });\n            const { rows, publicSettings } = res.data;\n            const dataRowsHistoryConverted = convertRowHistoryData(resRowHistory.data, publicSettings.headers);\n\n            const { rowsDataRFA } = getDataForRFASheet(rows, dataRowsHistoryConverted, role, company);\n\n            setRowsTableInput(rowsDataRFA.filter(dwg => dwg['Drawing Number']));\n            setHeaders(publicSettings.headers);\n\n         } catch (err) {\n            console.log(err);\n         };\n      };\n      fetchAllRfaDrawings();\n   }, []);\n\n\n\n   const [selectedRows, setSelectedRows] = useState(dwgsImportFromRFA || []);\n\n\n   const generateColumnsRFA = (headers) => {\n      return [\n         {\n            key: 'index',\n            dataKey: 'index',\n            title: '',\n            width: 50,\n            cellRenderer: ({ rowIndex }) => <div>{rowIndex + 1}</div>\n         },\n         ...headers.map(column => ({\n            key: column,\n            dataKey: column,\n            title: column,\n            resizable: true,\n            width: getHeaderWidth(column),\n         }))\n      ];\n   };\n   const rowClassName = ({ rowData }) => {\n      if (selectedRows.find(x => x.id === rowData.id)) {\n         return 'row-selected-rfa';\n      };\n   };\n\n\n   const rowEventHandlers = {\n      onClick: (props) => {\n         const { rowKey, rowData } = props;\n         if (selectedRows.find(x => x.id === rowKey)) {\n            setSelectedRows(selectedRows.filter(row => row.id !== rowKey));\n         } else {\n            setSelectedRows([...selectedRows, rowData]);\n         };\n      },\n   };\n\n   return (\n      <div style={{\n         width: '100%',\n         height: window.innerHeight * 0.85 - 20,\n         margin: '0 auto',\n         padding: 10,\n         textAlign: 'center',\n      }}>\n         <div style={{ width: '100%', height: window.innerHeight * 0.8 - 150 }}>\n            <TableStyled\n               fixed\n               columns={generateColumnsRFA(headers.map(hd => hd.text))}\n               data={rowsTableInput}\n               rowHeight={28}\n               rowEventHandlers={rowEventHandlers}\n               rowClassName={rowClassName}\n            />\n         </div>\n         <div style={{ padding: 20, display: 'flex', flexDirection: 'row-reverse' }}>\n            <ButtonGroupComp\n               onClickCancel={onClickCancelModalPickDrawing}\n               onClickApply={() => {\n                  if (selectedRows.length === 0) {\n                     return message.info('Please select drawings', 3);\n                  } else {\n                     onClickApplyModalPickRfaDrawings(selectedRows);\n                  };\n               }}\n            />\n         </div>\n      </div>\n   );\n};\n\nexport default TableDrawingRfaForMultiForm;\n\n\n\n\n\n\nconst TableStyled = styled(Table)`\n\n   .row-selected-rfa {\n      background-color: ${colorType.cellHighlighted};\n   };\n   .row-with-rfa-locked {\n      background-color: ${colorType.lockedCell}\n   };\n\n   \n   .BaseTable__row-cell-text {\n      color: black\n   };\n\n   .BaseTable__header-cell {\n      padding: 10px;\n      border-right: 1px solid #DCDCDC;\n      background: ${colorType.grey1};\n      color: black\n   };\n\n   .BaseTable__row-cell {\n      padding: 10px;\n      border-right: 1px solid #DCDCDC;\n      overflow: visible !important;\n   };\n`;\n","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\PageCVI.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\generalComponents\\IconSidePanel.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\PageRFI.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\PageDT.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\generalComponents\\ExportPdf.js",["505","506","507","508","509","510","511","512"],"import { Document, Font, Image, Page, StyleSheet, Text, View } from '@react-pdf/renderer';\r\nimport moment from 'moment';\r\nimport React from 'react';\r\nimport { imgLink } from '../../constants';\r\nimport { getInfoValueFromRfaData } from '../pageSpreadsheet/CellRFA';\r\nimport { getFileNameFromLinkResponse } from '../pageSpreadsheet/PanelSetting';\r\n\r\nFont.register({\r\n   fonts: [\r\n      {\r\n         src: `/Roboto-Bold.ttf`,\r\n         fontWeight: 'bold'\r\n      },\r\n   ]\r\n});\r\n\r\n\r\nconst ExportPdf = ({ pdfContent }) => {\r\n   const {\r\n      refNumberText, listRecipientTo, listRecipientCc, isCostImplication, isTimeExtension,\r\n      requestedBy, signatureBy, conversationAmong, emailTextTitle, dateConversation, timeConversation, description,\r\n      filesPdfDrawing, dwgsImportFromRFA, dateReplyForSubmitForm, projectName, listConsultantMustReply,\r\n      contractSpecification,\r\n      proposedSpecification,\r\n      submissionType,\r\n      herewithForDt,\r\n      transmittedForDt,\r\n      pageSheetTypeName,\r\n\r\n   } = pdfContent;\r\n\r\n\r\n   let dataTableInput = [];\r\n   filesPdfDrawing.map((file, i) => {\r\n      dataTableInput.push([\r\n         i + 1,\r\n         'Drawing',\r\n         file.name\r\n      ]);\r\n   });\r\n   dwgsImportFromRFA.map((dwg, i) => {\r\n      const link = getInfoValueFromRfaData(dwg, 'submission', 'drawing');\r\n      dataTableInput.push([\r\n         i + 1 + filesPdfDrawing.length,\r\n         'Submitted RFA',\r\n         getFileNameFromLinkResponse(link)\r\n      ]);\r\n   });\r\n\r\n\r\n\r\n\r\n   const formTitle = pageSheetTypeName === 'page-rfam' ? 'Request For Approval Of Material'\r\n      : pageSheetTypeName === 'page-rfi' ? 'Request For Information'\r\n         : pageSheetTypeName === 'page-cvi' ? 'Confirmation of Verbal Instruction'\r\n            : pageSheetTypeName === 'page-dt' ? 'Document Transmittal'\r\n               : null;\r\n\r\n\r\n   const testLorem1 = 'Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industrys standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.';\r\n   const testLorem2 = 'All the Lorem Ipsum generators on the Internet tend to repeat predefined chunks as necessary, making this the first true generator on the Internet. It uses a dictionary of over 200 Latin words, combined with a handful of model sentence structures, to generate Lorem Ipsum which looks reasonable. The generated Lorem Ipsum is therefore always free from repetition, injected humour, or non-characteristic words etc.';\r\n   const testLorem3 = 'There are many variations of passages of Lorem Ipsum available, but the majority have suffered alteration in some form, by injected humour, or randomised words which dont look even slightly believable.';\r\n\r\n\r\n   return (\r\n      <Document>\r\n         <Page size='A4' style={{ fontSize: 9, padding: 12 }}>\r\n            <View style={{\r\n               border: '1px solid grey', padding: 12, height: '100%', width: '100%',\r\n            }}>\r\n               <View style={{ flexDirection: 'row', justifyContent: 'space-between', marginBottom: 15 }}>\r\n                  <Image src={imgLink.logoWohhup} style={{ width: 90, height: 25, marginRight: 6 }} />\r\n                  <Text style={{ fontSize: 13 }}>{formTitle}</Text>\r\n               </View>\r\n\r\n\r\n               <View style={{\r\n                  flexDirection: 'row', marginBottom: 15, paddingBottom: 5, borderBottom: '1px solid grey'\r\n               }}>\r\n                  <View style={{ width: '9%' }}>\r\n                     <Text style={{ marginBottom: 4 }}>To</Text>\r\n                     <Text>Project</Text>\r\n                  </View>\r\n\r\n                  <View style={{ width: '53%' }}>\r\n                     <Text style={{ marginBottom: 4 }}>{`: ${(listConsultantMustReply || []).join(', ')}`}</Text>\r\n                     <Text>{`: ${projectName}`}</Text>\r\n                  </View>\r\n\r\n                  <View style={{ width: '18%' }}>\r\n                     <Text style={{ marginBottom: 4 }}>Ref. No</Text>\r\n                     <Text style={{ marginBottom: 4 }}>Date Submission</Text>\r\n                     {/* <Text>Date Reply</Text> */}\r\n                     <Text>Page</Text>\r\n                  </View>\r\n                  <View style={{ width: '20%' }}>\r\n                     <Text style={{ marginBottom: 4 }}>{`: ${refNumberText}`}</Text>\r\n                     <Text style={{ marginBottom: 4 }}>{`: ${moment(new Date()).format('DD/MM/YY')}`}</Text>\r\n                     {/* <Text>{`: ${moment(dateReplyForSubmitForm).format('DD/MM/YY')}`}</Text> */}\r\n                     <Text>: 01/01</Text>\r\n                  </View>\r\n               </View>\r\n\r\n\r\n               <View style={{ flexDirection: 'row', marginBottom: 15, paddingBottom: 5, borderBottom: '1px solid grey' }}>\r\n                  <Text>Subject</Text>\r\n                  <Text style={{ fontWeight: 'bold' }}>{`: ${emailTextTitle}`}</Text>\r\n               </View>\r\n\r\n               {pageSheetTypeName === 'page-dt' && (\r\n                  <>\r\n                     <Text>We forward herewith the following :</Text>\r\n                     <View style={{ flexDirection: 'row' }}>\r\n                        <View style={{ width: '34%', padding: 10, marginRight: 10 }}>\r\n                           {['Drawings', 'CD', 'Calculations', 'Method Statement'].map((item, i) => (\r\n                              <View key={i} style={{ flexDirection: 'row', marginBottom: 2 }}>\r\n                                 <Image src={herewithForDt === item ? imgLink.imgCheckTrue : imgLink.imgCheckFalse} style={{ width: 15, height: 15, marginRight: 6 }} />\r\n                                 <Text>{item}</Text>\r\n                              </View>\r\n                           ))}\r\n                        </View>\r\n                        <View style={{ width: '33%', padding: 10, marginRight: 10 }}>\r\n                           {['Document', 'Programme', 'Specifications', 'Part Prints/Sketches'].map((item, i) => (\r\n                              <View key={i} style={{ flexDirection: 'row', marginBottom: 2 }}>\r\n                                 <Image src={herewithForDt === item ? imgLink.imgCheckTrue : imgLink.imgCheckFalse} style={{ width: 15, height: 15, marginRight: 6 }} />\r\n                                 <Text>{item}</Text>\r\n                              </View>\r\n                           ))}\r\n                        </View>\r\n                        <View style={{ width: '33%', padding: 10, marginRight: 10 }}>\r\n                           {['Catalogues', 'Test Results', 'Correspondence', 'Others'].map((item, i) => (\r\n                              <View key={i} style={{ flexDirection: 'row', marginBottom: 2 }}>\r\n                                 <Image src={herewithForDt === item ? imgLink.imgCheckTrue : imgLink.imgCheckFalse} style={{ width: 15, height: 15, marginRight: 6 }} />\r\n                                 <Text>{item}</Text>\r\n                              </View>\r\n                           ))}\r\n                        </View>\r\n                     </View>\r\n\r\n\r\n                     <Text>Transmitted for :</Text>\r\n                     <View>\r\n                        <View style={{ width: '50%', padding: 10, marginRight: 10 }}>\r\n                           {['Information / Action', 'Comments / Approval', 'Construction', 'Record'].map((item, i) => (\r\n                              <View key={i} style={{ flexDirection: 'row', marginBottom: 2 }}>\r\n                                 <Image src={transmittedForDt === item ? imgLink.imgCheckTrue : imgLink.imgCheckFalse} style={{ width: 15, height: 15, marginRight: 6 }} />\r\n                                 <Text>{item}</Text>\r\n                              </View>\r\n                           ))}\r\n                        </View>\r\n                     </View>\r\n                  </>\r\n               )}\r\n               {pageSheetTypeName === 'page-cvi' && (\r\n                  <>\r\n                     <View style={{ flexDirection: 'row' }}>\r\n                        <Text>Conversation Among</Text>\r\n                        <Text>{`: ${conversationAmong}`}</Text>\r\n                     </View>\r\n\r\n                     <View style={{ flexDirection: 'row', marginBottom: 10 }}>\r\n                        <Text>Date</Text>\r\n                        <Text style={{ marginRight: 30 }}>{`: ${moment(dateConversation).format('DD/MM/YY')}`}</Text>\r\n                        <Text>Time</Text>\r\n                        <Text>{`: ${moment(timeConversation).format('HH: mm')}`}</Text>\r\n                     </View>\r\n                     <View style={{ flexDirection: 'row', marginBottom: 15, paddingBottom: 5, borderBottom: '1px solid grey', height: 220 }}>\r\n                        <Text>Details :</Text>\r\n                        <Text style={{ width: '100%' }}>{`: ${description}`}</Text>\r\n                     </View>\r\n\r\n\r\n                     <View style={{ flexDirection: 'row' }}>\r\n                        <View style={{ width: '50%', padding: 10, marginRight: 10 }}>\r\n                           <View style={{ flexDirection: 'row', marginBottom: 10 }}>\r\n                              <Image src={isCostImplication ? imgLink.imgCheckTrue : imgLink.imgCheckFalse} style={{ width: 15, height: 15, marginRight: 6 }} />\r\n                              <Text>Variation with cost implication</Text>\r\n                           </View>\r\n                           <View style={{ flexDirection: 'row' }}>\r\n                              <Image src={isTimeExtension ? imgLink.imgCheckTrue : imgLink.imgCheckFalse} style={{ width: 15, height: 15, marginRight: 6 }} />\r\n                              <Text>With time extension</Text>\r\n                           </View>\r\n                        </View>\r\n                        <View style={{ width: '50%', padding: 10 }}>\r\n                           <View style={{ flexDirection: 'row', marginBottom: 10 }}>\r\n                              <Image src={!isCostImplication ? imgLink.imgCheckTrue : imgLink.imgCheckFalse} style={{ width: 15, height: 15, marginRight: 6 }} />\r\n                              <Text>With no cost implication</Text>\r\n                           </View>\r\n                           <View style={{ flexDirection: 'row' }}>\r\n                              <Image src={!isTimeExtension ? imgLink.imgCheckTrue : imgLink.imgCheckFalse} style={{ width: 15, height: 15, marginRight: 6 }} />\r\n                              <Text>With no time extension</Text>\r\n                           </View>\r\n                        </View>\r\n                     </View>\r\n                     <Text>This form is issued pursuant to the Conditions of Contract and also constitutes our notification of an event which may form the basis of a possible claim for additional costs or an extension of time or both.</Text>\r\n                  </>\r\n               )}\r\n\r\n               {pageSheetTypeName === 'page-rfam' && (\r\n                  <View style={{\r\n                     flexDirection: 'row', marginBottom: 15, paddingBottom: 5, borderBottom: '1px solid grey'\r\n                  }}>\r\n                     <View style={{ width: '70%' }}>\r\n                        <Text>Reply Required By:</Text>\r\n                        <Text>{(listConsultantMustReply || []).join(', ')}</Text>\r\n                     </View>\r\n\r\n\r\n                     <View style={{ width: '30%' }}>\r\n                        {[\r\n                           'New Submittal',\r\n                           'Alternative',\r\n                           'Resubmittal',\r\n                        ].map((note, ind) => (\r\n                           <View key={ind} style={{ flexDirection: 'row' }}>\r\n                              <Image src={note === submissionType ? imgLink.imgCheckTrue : imgLink.imgCheckFalse} style={{ width: 15, height: 15, marginRight: 6 }} />\r\n                              <Text>{note}</Text>\r\n                           </View>\r\n                        ))}\r\n                     </View>\r\n\r\n                  </View>\r\n               )}\r\n\r\n               {pageSheetTypeName === 'page-rfam' && (\r\n                  <TableDrawings\r\n                     th\r\n                     col={['34%', '33%', '33%']}\r\n                     children={[\r\n                        ['DESCRIPTION OF ITEM SUBMITTED', 'CONTRACT SPECIFICATION / SUPPLIER', 'PROPOSED SPECIFICATION / SUPPLIER'],\r\n                        [description, contractSpecification, proposedSpecification]\r\n                     ]}\r\n                     isRfamDescriptionTable={true}\r\n                  />\r\n               )}\r\n\r\n\r\n               {pageSheetTypeName === 'page-rfi' && (\r\n                  <View style={{ marginBottom: 35, paddingBottom: 10, borderBottom: '1px solid black' }}>\r\n                     <Text>Description:</Text>\r\n                     <Text>{description}</Text>\r\n                  </View>\r\n               )}\r\n\r\n\r\n\r\n               {dataTableInput.length > 0 && (\r\n                  <>\r\n                     <View style={{ marginTop: 10 }}>\r\n                        <Text>Documents:</Text>\r\n                     </View>\r\n                     <TableDrawings\r\n                        th\r\n                        col={['5%', '20%', '75%']}\r\n                        children={[\r\n                           ['', 'Type', 'File'],\r\n                           ...dataTableInput\r\n                        ]}\r\n                     />\r\n                  </>\r\n               )}\r\n\r\n\r\n               {pageSheetTypeName === 'page-rfi' && (\r\n                  <>\r\n                     <View style={{ flexDirection: 'row' }}>\r\n                        <Text>Date Required:</Text>\r\n                        <Text>{moment(dateReplyForSubmitForm).format('DD/MM/YY')}</Text>\r\n                     </View>\r\n                     <View style={{ flexDirection: 'row' }}>\r\n                        <Text>Requested By:</Text>\r\n                        <Text>{requestedBy}</Text>\r\n                     </View>\r\n                  </>\r\n               )}\r\n\r\n               <View style={{ marginBottom: 35, marginTop: 35, paddingTop: 3, borderTop: '1px solid black', width: 100 }}>\r\n                  <Text>Site Manager</Text>\r\n               </View>\r\n\r\n               {pageSheetTypeName === 'page-dt' && (\r\n                  <Text>Please Sign and Return the Duplicate copy of this transmittal to Woh Hup (Private) Limited at Technical Department</Text>\r\n               )}\r\n\r\n\r\n\r\n               {pageSheetTypeName !== 'page-cvi' && (\r\n                  <View style={{ marginBottom: 15, marginTop: 15, borderTop: '1px solid grey', paddingTop: 10 }}>\r\n                     <Text style={{ fontSize: 10, marginBottom: 5, textDecoration: 'underline' }}>REPLY</Text>\r\n                     <Text style={{ marginBottom: 5 }}>To: Woh Hup (Private) Limited</Text>\r\n                     {pageSheetTypeName === 'page-rfi' ? (\r\n                        <Text>Ref to the above query, we advise as follows: </Text>\r\n                     ) : (\r\n                        <Text>Attention: </Text>\r\n                     )}\r\n                  </View>\r\n               )}\r\n\r\n\r\n\r\n               {pageSheetTypeName === 'page-rfam' ? (\r\n                  <View style={{ border: '1px solid black', width: '100%', flexDirection: 'row' }}>\r\n                     <View style={{ width: '67%', borderRight: '1px solid black', padding: 10 }}>\r\n                        <Text>The material / equipment submitted is hereby transmitted with actions as indicated.</Text>\r\n                        <View style={{ flexDirection: 'row' }}>\r\n                           <View style={{ width: '47%', padding: 10, marginRight: 10 }}>\r\n                              <View style={{ flexDirection: 'row', marginBottom: 10 }}>\r\n                                 <Image src={imgLink.imgCheckFalse} style={{ width: 15, height: 15, marginRight: 6 }} />\r\n                                 <Text>Approved For Construction (AP)</Text>\r\n                              </View>\r\n                              <View style={{ flexDirection: 'row' }}>\r\n                                 <Image src={imgLink.imgCheckFalse} style={{ width: 15, height: 15, marginRight: 6 }} />\r\n                                 <Text>Approved with comments, no submission required (AC)</Text>\r\n                              </View>\r\n                           </View>\r\n                           <View style={{ width: '47%', padding: 10 }}>\r\n                              <View style={{ flexDirection: 'row', marginBottom: 10 }}>\r\n                                 <Image src={imgLink.imgCheckFalse} style={{ width: 15, height: 15, marginRight: 6 }} />\r\n                                 <Text>Rejected, resubmission required (RR)</Text>\r\n                              </View>\r\n                              <View style={{ flexDirection: 'row' }}>\r\n                                 <Image src={imgLink.imgCheckFalse} style={{ width: 15, height: 15, marginRight: 6 }} />\r\n                                 <Text>Approved with comments, resubmission required (AR)</Text>\r\n                              </View>\r\n                           </View>\r\n                        </View>\r\n                        <Text style={{ marginBottom: 10 }}>Company Stamp & Signature : _________________</Text>\r\n                        <View style={{ flexDirection: 'row' }}>\r\n                           <Text style={{ marginRight: 20 }}>Name :_________________________</Text>\r\n                           <Text>Date :_____________</Text>\r\n                        </View>\r\n\r\n                     </View>\r\n\r\n                     <View style={{ width: '33%', padding: 10 }}>\r\n                        <Text>Comments:</Text>\r\n                     </View>\r\n                  </View>\r\n               ) : (\r\n                  <>\r\n                     <Text style={{ marginBottom: 10 }}>Company Stamp & Signature : _________________</Text>\r\n                     <View style={{ flexDirection: 'row' }}>\r\n                        <Text style={{ marginRight: 20 }}>Name :_________________________</Text>\r\n                        <Text>Date :_____________</Text>\r\n                     </View>\r\n                  </>\r\n               )}\r\n\r\n            </View>\r\n         </Page>\r\n      </Document>\r\n   );\r\n};\r\n\r\n\r\nexport default ExportPdf;\r\n\r\n\r\n\r\n\r\nconst stylesTable = StyleSheet.create({\r\n   em: {\r\n      fontStyle: 'bold'\r\n   },\r\n   table: {\r\n      width: '100%',\r\n      borderLeft: '1px solid black',\r\n      borderTop: '1px solid black',\r\n      display: 'flex',\r\n      flexDirection: 'column',\r\n      marginVertical: 1,\r\n      borderCollapse: 'collapse',\r\n      fontSize: '8px'\r\n   },\r\n   tableRow: {\r\n      display: 'flex',\r\n      flexDirection: 'row',\r\n   },\r\n   cell: {\r\n      borderRight: '1px solid black',\r\n      borderBottom: '1px solid black',\r\n      display: 'flex',\r\n      alignContent: 'center',\r\n      flexWrap: 'wrap',\r\n\r\n      // justifyContent: 'center',\r\n      // textAlign: 'center',\r\n   }\r\n});\r\n\r\n\r\n\r\nconst TableDrawings = ({ children, col, th, isRfamDescriptionTable }) => {\r\n   return (\r\n      <View style={stylesTable.table}>\r\n         {children.map((row, ind) => {\r\n            const textArea = isRfamDescriptionTable && ind === 1;\r\n            const drawingInfo = !isRfamDescriptionTable && ind > 0;\r\n            return (\r\n               <View key={ind} style={[stylesTable.tableRow, th && ind === 0 ? stylesTable.em : {}]}>\r\n                  {row.map((cell, j) => {\r\n                     return (\r\n                        <View key={j} style={[stylesTable.cell, {\r\n                           width: col[j],\r\n                           height: textArea ? 150 : drawingInfo ? 18 : 20,\r\n                           padding: drawingInfo ? 1 : 5,\r\n                           paddingLeft: 5,\r\n                           justifyContent: textArea ? 'none' : 'center'\r\n                        }]}>\r\n                           {(typeof (cell) === 'string' || typeof (cell) === 'number')\r\n                              ? <Text>{cell}</Text>\r\n                              : cell\r\n                           }\r\n                        </View>\r\n                     );\r\n                  })}\r\n               </View>\r\n            );\r\n         })}\r\n      </View>\r\n   );\r\n};","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\PageMM.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\pageSpreadsheet\\FormDrawingTypeOrderDataEntry.js",["513"],"import { Icon, Input, Modal, Tooltip } from 'antd';\r\nimport React, { useContext, useState } from 'react';\r\nimport SortableTree from 'react-sortable-tree';\r\nimport 'react-sortable-tree/style.css';\r\nimport styled from 'styled-components';\r\nimport { colorType } from '../../constants';\r\nimport { Context as ProjectContext } from '../../contexts/projectContext';\r\nimport { Context as RowContext } from '../../contexts/rowContext';\r\nimport { mongoObjectId } from '../../utils';\r\nimport ButtonGroupComp from '../generalComponents/ButtonGroupComp';\r\n\r\n\r\n\r\n\r\nconst FormDrawingTypeOrderDataEntry = ({ onClickCancelModal, applyFolderOrganizeDataEntry }) => {\r\n\r\n   const { state: stateProject } = useContext(ProjectContext);\r\n   const { state: stateRow } = useContext(RowContext);\r\n\r\n   const { rowsAll } = stateRow;\r\n\r\n   const { sheetName, sheetId, role } = stateProject.allDataOneSheet;\r\n   const { drawingTypeTree, viewTemplateNodeId } = stateRow;\r\n\r\n\r\n   const [input, setInput] = useState(addProjectHeaderToTree(drawingTypeTree, sheetName, sheetId));\r\n\r\n   const [modalTitle, setModalTitle] = useState(null);\r\n   const [itemNode, setItemNode] = useState(null);\r\n   const [mergeList, setMergeList] = useState([]);\r\n\r\n   const addFolderBelow = (node) => {\r\n      node.children.push({\r\n         title: 'New Folder',\r\n         id: mongoObjectId(),\r\n         parentId: node.id,\r\n         treeLevel: node.treeLevel + 1,\r\n         expanded: true,\r\n         children: []\r\n      });\r\n      setInput(addProjectHeaderToTree(flattenAllTreeChildNode1(input[0].children), sheetName, sheetId));\r\n\r\n   };\r\n   const deleteFolder = (node) => {\r\n      setItemNode(node);\r\n      setModalTitle('Delete Folder');\r\n   };\r\n   const editFolderName = (node) => {\r\n      setItemNode(node);\r\n      setModalTitle('Edit Folder Name');\r\n   };\r\n   const mergeChildDrawings = (node) => {\r\n      setItemNode(node);\r\n      setModalTitle('Merge All Child Drawings');\r\n   };\r\n   const confirmAction = (modalTitle, text) => {\r\n      if (modalTitle === 'Delete Folder') {\r\n         let idsToDelete = flattenAllTreeChildNode1(itemNode.children).map(x => x.id);\r\n         idsToDelete.push(itemNode.id);\r\n\r\n         let currentNodeFlatten = flattenAllTreeChildNode1(input[0].children);\r\n         let outputArray = currentNodeFlatten.filter(x => idsToDelete.indexOf(x.id) === -1);\r\n         setInput(addProjectHeaderToTree(outputArray, sheetName, sheetId));\r\n\r\n      } else if (modalTitle === 'Merge All Child Drawings') {\r\n         let idsToMerge = flattenAllTreeChildNode1(itemNode.children).map(x => x.id);\r\n         let mergeListUpdate = [...mergeList];\r\n         idsToMerge.forEach(id => {\r\n            if (mergeList.indexOf(id) !== -1) {\r\n               mergeListUpdate = mergeListUpdate.filter(x => x !== id);\r\n            };\r\n         });\r\n\r\n         setMergeList([...mergeListUpdate, itemNode.id]);\r\n\r\n         let currentNodeFlatten = flattenAllTreeChildNode1(input[0].children);\r\n         let outputArray = currentNodeFlatten.filter(x => idsToMerge.indexOf(x.id) === -1);\r\n\r\n         setInput(addProjectHeaderToTree(outputArray, sheetName, sheetId));\r\n\r\n      } else if (modalTitle === 'Edit Folder Name') {\r\n         itemNode.title = text;\r\n         setInput(addProjectHeaderToTree(flattenAllTreeChildNode1(input[0].children), sheetName, sheetId));\r\n      };\r\n\r\n      setModalTitle(null);\r\n   };\r\n\r\n   const treeFlatten = flattenAllTreeChildNode1(input);\r\n\r\n   let eyeShownInit;\r\n   if (viewTemplateNodeId) {\r\n      const nodeTreeFound = treeFlatten.find(x => x.id === viewTemplateNodeId);\r\n      if (nodeTreeFound) {\r\n         const br = getTreeFlattenOfNodeInArray(treeFlatten, nodeTreeFound);\r\n         eyeShownInit = br.map(x => x.id);\r\n      };\r\n   };\r\n   const [iconBtnEyeShownArr, setIconBtnEyeShownArr] = useState(eyeShownInit || []);\r\n   const [nodeIsolated, setNodeIsolated] = useState(viewTemplateNodeId || null);\r\n   const isolateView = (node) => {\r\n      setNodeIsolated(node.id);\r\n      const nodeFound = treeFlatten.find(x => x.id === node.id);\r\n      const branch = getTreeFlattenOfNodeInArray(treeFlatten, nodeFound);\r\n      setIconBtnEyeShownArr(branch.map(x => x.id));\r\n   };\r\n\r\n   return (\r\n      <Container>\r\n         <PanelStyled>\r\n            <SortableTreeStyled\r\n               treeData={input}\r\n               onChange={treeData => setInput(treeData)}\r\n               canDrag={({ node }) => {\r\n                  if (node.treeLevel === 0) return false;\r\n                  if (!role.canEditParent) return false;\r\n                  return true;\r\n               }}\r\n               canDrop={({ prevParent, nextParent, node }) => {\r\n                  if (node.treeLevel === 0 || !nextParent || !prevParent ||\r\n                     (nextParent && nextParent.treeLevel !== node.treeLevel - 1)\r\n                  ) {\r\n                     return false;\r\n                  };\r\n                  return true;\r\n               }}\r\n               onMoveNode={({ nextParentNode, node }) => {\r\n                  updateChildrenNode([node], nextParentNode.treeLevel + 1 - node.treeLevel);\r\n               }}\r\n               isVirtualized={false}\r\n\r\n               generateNodeProps={({ node }) => {\r\n\r\n                  const isEyeShownColor = iconBtnEyeShownArr.indexOf(node.id) !== -1 ? 'black' : '#DCDCDC';\r\n                  const isEyeShownType = iconBtnEyeShownArr.indexOf(node.id) !== -1 ? 'eye' : 'eye-invisible';\r\n\r\n                  return ({\r\n                     className: 'parent-tags',\r\n                     buttons:\r\n                        node.treeLevel === 0 ? [\r\n                           <IconBtn type='plus' onClick={() => addFolderBelow(node)} />,\r\n                           node.children.length > 0 && <IconBtn type='shrink' onClick={() => mergeChildDrawings(node)} />,\r\n                           <IconBtn type={isEyeShownType} onClick={() => isolateView(node)} color={isEyeShownColor} />\r\n\r\n                        ] : [\r\n                           <IconBtn type='plus' onClick={() => addFolderBelow(node)} />,\r\n                           <IconBtn type='edit' onClick={() => editFolderName(node)} />,\r\n                           <IconBtn type='delete' onClick={() => deleteFolder(node)} />,\r\n                           node.children.length > 0 && <IconBtn type='shrink' onClick={() => mergeChildDrawings(node)} />,\r\n                           <IconBtn type={isEyeShownType} onClick={() => isolateView(node)} color={isEyeShownColor} />\r\n                        ]\r\n                  });\r\n               }}\r\n            />\r\n         </PanelStyled>\r\n\r\n         <div style={{ padding: 20, display: 'flex', flexDirection: 'row-reverse' }}>\r\n            <ButtonGroupComp\r\n               onClickCancel={onClickCancelModal}\r\n               onClickApply={() => applyFolderOrganizeDataEntry(input[0].children, mergeList, nodeIsolated)} // remove sheetName item before apply...\r\n            />\r\n         </div>\r\n\r\n\r\n         {modalTitle && (\r\n            <ModalStyledSetting\r\n               title={modalTitle}\r\n               visible={modalTitle !== null ? true : false}\r\n               footer={null}\r\n               onCancel={() => setModalTitle(null)}\r\n               destroyOnClose={true}\r\n               centered={true}\r\n               width={window.innerWidth * 0.6}\r\n            >\r\n               <ConfirmOrEditNameModal\r\n                  modalTitle={modalTitle}\r\n                  confirmAction={confirmAction}\r\n                  itemNode={itemNode}\r\n                  input={input}\r\n                  rowsAll={rowsAll}\r\n               />\r\n            </ModalStyledSetting>\r\n         )}\r\n\r\n      </Container>\r\n   );\r\n};\r\n\r\nexport default FormDrawingTypeOrderDataEntry;\r\n\r\n\r\nconst SortableTreeStyled = styled(SortableTree)`\r\n   .rst__node {\r\n      height: 45px !important;\r\n   }\r\n   .rst__rowContents {\r\n      min-width: fit-content;\r\n      background-color: transparent !important;\r\n   }\r\n`;\r\nconst IconStyle = styled(Icon)`\r\n   font-size: 14px;\r\n   margin: 2px;\r\n   padding: 4px;\r\n   &:hover {\r\n      background-color: ${colorType.grey0};\r\n   };\r\n`;\r\nconst ModalStyledSetting = styled(Modal)`\r\n    .ant-modal-content {\r\n        border-radius: 0;\r\n    }\r\n   .ant-modal-close {\r\n      display: none;\r\n   }\r\n   .ant-modal-header {\r\n      padding: 10px;\r\n   }\r\n   .ant-modal-title {\r\n        padding-left: 10px;\r\n        font-size: 20px;\r\n        font-weight: bold;\r\n   }\r\n   .ant-modal-body {\r\n      padding: 0;\r\n      display: flex;\r\n      justify-content: center;\r\n   }\r\n`;\r\nconst Container = styled.div`\r\n   height: ${`${window.innerHeight * 0.8}` + 'px'};\r\n   width: 100%;\r\n   display: flex;\r\n   flex-direction: column;\r\n`;\r\nconst PanelStyled = styled.div`\r\n   width: 100%;\r\n   float: right;\r\n   overflow-x: hidden;\r\n   border-bottom: 1px solid ${colorType.grey4};\r\n`;\r\nconst IconBtn = ({ type, onClick, color }) => {\r\n   const text = type === 'plus' ? 'Add Sub Folder'\r\n      : type === 'delete' ? 'Delete Folder'\r\n         : type === 'edit' ? 'Edit Name'\r\n            : type === 'eye' ? 'Isolate View'\r\n               : type === 'eye-invisible' ? 'Isolate View'\r\n                  : 'Merge All Sub Folders'\r\n\r\n   return (\r\n      <Tooltip title={text}>\r\n         <IconStyle type={type} onClick={onClick} style={{ color: color || 'black' }} />\r\n      </Tooltip>\r\n   );\r\n};\r\n\r\n\r\nconst ConfirmOrEditNameModal = ({ modalTitle, confirmAction, itemNode, input, rowsAll }) => {\r\n\r\n   let dwgsToWarn = [];\r\n   if (modalTitle === 'Delete Folder') {\r\n      const currentTree = flattenAllTreeChildNode1(input[0].children);\r\n      const currentTreeNode = currentTree.find(x => x.id === itemNode.id);\r\n      const nodeArray = getTreeFlattenOfNodeInArray(currentTree, currentTreeNode);\r\n      nodeArray.forEach(nd => {\r\n         dwgsToWarn = [...dwgsToWarn, ...rowsAll.filter(x => x._parentRow === nd.id)];\r\n      });\r\n   };\r\n\r\n\r\n   const [value, setValue] = useState(null);\r\n   const onClickApplyModal = () => {\r\n      if (modalTitle === 'Delete Folder') {\r\n         confirmAction(modalTitle);\r\n      } else if (modalTitle === 'Edit Folder Name') {\r\n         confirmAction(modalTitle, value);\r\n      } else if (modalTitle === 'Merge All Child Drawings') {\r\n         confirmAction(modalTitle);\r\n      };\r\n   };\r\n   return (\r\n      <div style={{ padding: 20, width: '100%', maxHeight: window.innerHeight * 0.7 }}>\r\n         {modalTitle === 'Delete Folder' ? (\r\n            <div>\r\n               <div>Are you sure to delete the folder <span style={{ fontWeight: 'bold' }}>{itemNode.title}</span>?</div>\r\n               <div>All the <span style={{ fontWeight: 'bold' }}>{dwgsToWarn.length}</span> following drawings will be deleted accordingly</div>\r\n            </div>\r\n         ) : modalTitle === 'Merge All Child Drawings' ? (\r\n            <div>Are you sure to delete all sub folders and retains all drawings</div>\r\n         ) : (\r\n            <Input\r\n               style={{ width: '100%' }}\r\n               value={value || itemNode.title}\r\n               onChange={(e) => setValue(e.target.value)}\r\n            />\r\n         )}\r\n\r\n         <div style={{ padding: 20, display: 'flex', flexDirection: 'row-reverse' }}>\r\n            <ButtonGroupComp\r\n               onClickCancel={() => { }}\r\n               onClickApply={onClickApplyModal}\r\n            />\r\n         </div>\r\n      </div>\r\n   );\r\n};\r\n\r\n\r\n\r\nexport const flattenAllTreeChildNode1 = (root) => {\r\n   let temp = [];\r\n   let queue = [...root];\r\n   while (queue.length > 0) {\r\n      let node = queue.shift();\r\n      if (node.children) {\r\n         let childNode = [];\r\n         node.children.forEach(nd => {\r\n            childNode.push({ ...nd, parentId: node.id });\r\n         });\r\n         queue = [...queue, ...childNode];\r\n         let nodeObj = { ...node };\r\n         delete nodeObj.children;\r\n         temp.push(nodeObj);\r\n      } else {\r\n         let nodeObj = { ...node };\r\n         delete nodeObj.children;\r\n         temp.push(nodeObj);\r\n      };\r\n   };\r\n   return temp;\r\n};\r\nexport const convertFlattenArraytoTree1 = (list) => {\r\n   let map = {}, node, roots = [], i;\r\n   for (i = 0; i < list.length; i += 1) {\r\n      map[list[i].id] = i;\r\n      if (list[i]._rowLevel !== 1) {\r\n         list[i].children = list[i].children || [];\r\n      };\r\n   };\r\n\r\n   let arrayOfTreeLevel = [];\r\n   list.forEach(tr => {\r\n      arrayOfTreeLevel.push(tr.treeLevel);\r\n   });\r\n   const treeLevelOfTopTree = Math.min(...arrayOfTreeLevel);\r\n\r\n   for (i = 0; i < list.length; i++) {\r\n      node = list[i];\r\n      if (node.treeLevel > treeLevelOfTopTree) {\r\n         list[map[node.parentId]].children.push(node);\r\n      } else {\r\n         roots.push(node);\r\n      };\r\n   };\r\n   return roots;\r\n};\r\nconst addProjectHeaderToTree = (tree, sheetName, sheetId) => {\r\n   return [{\r\n      title: sheetName,\r\n      id: sheetId,\r\n      treeLevel: 0,\r\n      expanded: true,\r\n      children: convertFlattenArraytoTree1(tree.map(x => ({ ...x })))\r\n   }];\r\n};\r\nconst updateChildrenNode = (arr, n) => {\r\n   arr.forEach(i => {\r\n      i.treeLevel = i.treeLevel + n;\r\n      if (i.children.length > 0) {\r\n         updateChildrenNode(i.children, n);\r\n      };\r\n   });\r\n};\r\nconst updateChildrenNodeTreeLevel = (arr) => {\r\n   arr.forEach(i => {\r\n      let childrenArr = i.children;\r\n      if (childrenArr && childrenArr.length > 0) {\r\n         childrenArr.forEach(ch => {\r\n            ch.treeLevel = i.treeLevel + 1;\r\n         });\r\n         updateChildrenNodeTreeLevel(childrenArr);\r\n      };\r\n   });\r\n};\r\nconst getListOfBranchesTree = (inputArr) => {\r\n   const arr = inputArr.map(x => ({ ...x }));\r\n   arr.sort((a, b) => { return b.treeLevel - a.treeLevel });\r\n\r\n   const parentArrIds = [];\r\n   arr.forEach(x => {\r\n      let item = arr.find(fld => fld.id === x.parentId);\r\n      if (item) {\r\n         item.children = [...item.children || [], x];\r\n      } else {\r\n         parentArrIds.push(x.id);\r\n      };\r\n   });\r\n   return arr.filter(x => parentArrIds.indexOf(x.id) !== -1);\r\n};\r\nexport const getTreeFlattenOfNodeInArray = (treeArray, node) => {\r\n   let obj = { ...node };\r\n   let arrayTree = treeArray.map(x => ({ ...x })).filter(x => x.treeLevel > obj.treeLevel);\r\n   arrayTree = [...arrayTree, obj];\r\n   const treeOfFound = getListOfBranchesTree(arrayTree).find(x => x.id === obj.id);\r\n   return flattenAllTreeChildNode1([treeOfFound]);\r\n};\r\nexport const compareCurrentTreeAndTreeFromDB = (treeFromCurrentInit, treeFromCurrentInput, treeDeletedFromCurrent, treeFromDBInput, treeDeletedFromDB) => {\r\n\r\n   let treeFromCurrent = treeFromCurrentInput.map(i => ({ ...i }));\r\n   let treeFromDB = treeFromDBInput.map(i => ({ ...i }));\r\n\r\n   // check if need to save tree or not\r\n   if (treeFromCurrent.length === treeFromCurrentInit.length) {\r\n      const stringTreeCurrent = treeFromCurrent.reduce((acc, current) => acc + `${current.id}-${current.parentId}-${current.title}-`, '');\r\n      const stringTreeInit = treeFromCurrentInit.reduce((acc, current) => acc + `${current.id}-${current.parentId}-${current.title}-`, '');\r\n      if (stringTreeCurrent === stringTreeInit) {\r\n         return {\r\n            needToSaveTree: false,\r\n            treeDBModifiedToSave: treeFromDB,\r\n            nodesToAddToDB: [],\r\n            nodesToRemoveFromDB: [],\r\n         };\r\n      };\r\n   };\r\n\r\n   let treeCurrentModified = removeNodesDeletedByOtherUsersFromTreeCurrent(treeFromCurrent, treeDeletedFromDB);\r\n\r\n   let { nodesToRemoveFromDB, treeFromDB: treeFromDBModified, nodesIdNoNeedToAddNew } = removeNodesDeletedByCurrentUserFromTreeDB(treeFromDB, treeDeletedFromCurrent, treeCurrentModified);\r\n\r\n   let { nodesToAddToDB, treeDBModifiedToSave: treeDBModified } = haveChangedNodesInDBAndNewNodesInCurrentBackToDB(treeFromDBModified, treeCurrentModified, treeFromCurrentInit, nodesIdNoNeedToAddNew);\r\n\r\n\r\n\r\n   // reorder item follow new order...\r\n   let treeDBModifiedToSave = [];\r\n   treeFromCurrentInput.forEach(item => {\r\n      const found = treeDBModified.find(x => x.id === item.id);\r\n      if (found) {\r\n         treeDBModifiedToSave.push(found);\r\n         treeDBModified = treeDBModified.filter(x => x.id !== found.id);\r\n      };\r\n   });\r\n   treeDBModifiedToSave = [...treeDBModifiedToSave, ...treeDBModified].sort((a, b) => { return a.treeLevel - b.treeLevel });\r\n\r\n   return {\r\n      needToSaveTree: true,\r\n      treeDBModifiedToSave,\r\n      nodesToAddToDB,\r\n      nodesToRemoveFromDB,\r\n   };\r\n};\r\nconst removeNodesDeletedByOtherUsersFromTreeCurrent = (treeCurrent, treeDeletedFromDB) => {\r\n   let idsToCheckCurrent = [];\r\n   treeDeletedFromDB.forEach(item => {\r\n      const found = treeCurrent.find(x => x.id === item.id);\r\n      if (found) {\r\n         idsToCheckCurrent = [\r\n            ...idsToCheckCurrent,\r\n            ...getTreeFlattenOfNodeInArray(treeCurrent, found).map(x => x.id)\r\n         ];\r\n      };\r\n   });\r\n   idsToCheckCurrent = [...new Set(idsToCheckCurrent)];\r\n\r\n   const nodesArray = treeCurrent.filter(x => idsToCheckCurrent.indexOf(x.id) !== -1);\r\n\r\n   const branchTrees = getListOfBranchesTree(nodesArray);\r\n\r\n   const newIdObj = {};\r\n   treeDeletedFromDB.forEach(item => {\r\n      newIdObj[item.id] = mongoObjectId();\r\n   });\r\n\r\n   branchTrees.forEach(tree => {\r\n      let flattenArray = flattenAllTreeChildNode1([tree]);\r\n      let isAbleToDelete = true;\r\n\r\n      flattenArray.forEach(item => {\r\n         if (!treeDeletedFromDB.find(x => x.id === item.id)) isAbleToDelete = false;\r\n      });\r\n\r\n      if (isAbleToDelete) {\r\n         treeCurrent = treeCurrent.filter(x => !flattenArray.find(item => item.id === x.id));\r\n      } else {\r\n         const arrayToModify = treeCurrent.filter(item => flattenArray.find(x => x.id === item.id));\r\n         treeDeletedFromDB.forEach(item => {\r\n            const found = arrayToModify.find(x => x.id === item.id);\r\n            if (found) {\r\n               found.id = newIdObj[item.id];\r\n            };\r\n            const childrenFound = arrayToModify.filter(x => x.parentId === item.id);\r\n            if (childrenFound.length > 0) {\r\n               childrenFound.forEach(child => {\r\n                  child.parentId = newIdObj[item.id];\r\n               });\r\n            };\r\n         });\r\n      };\r\n   });\r\n   return treeCurrent;\r\n};\r\nconst removeNodesDeletedByCurrentUserFromTreeDB = (treeFromDB, treeDeletedFromCurrent, treeCurrent) => {\r\n   let listIdToRemoveFromDB = [];\r\n   treeDeletedFromCurrent.forEach(item => {\r\n      const found = treeFromDB.find(x => x.id === item.id);\r\n      if (found) {\r\n         listIdToRemoveFromDB = [\r\n            ...listIdToRemoveFromDB,\r\n            ...getTreeFlattenOfNodeInArray(treeFromDB, found).map(x => x.id)\r\n         ];\r\n      };\r\n   });\r\n\r\n   const nodesToRemoveFromDB = treeFromDB.filter(x => {\r\n      return listIdToRemoveFromDB.indexOf(x.id) !== -1 && !treeCurrent.find(item => item.id === x.id);\r\n   });\r\n   const nodesIdNoNeedToAddNew = listIdToRemoveFromDB.filter(id => treeCurrent.find(item => item.id === id))\r\n\r\n   treeFromDB = treeFromDB.filter(x => listIdToRemoveFromDB.indexOf(x.id) === -1);\r\n\r\n   return {\r\n      nodesToRemoveFromDB,\r\n      nodesIdNoNeedToAddNew,\r\n      treeFromDB\r\n   };\r\n};\r\nconst haveChangedNodesInDBAndNewNodesInCurrentBackToDB = (treeFromDB, treeCurrent, treeCurrentInit, nodesIdNoNeedToAddNew) => {\r\n   let nodesToAddToDB = [];\r\n   treeCurrent.forEach(item => {\r\n      if (!treeFromDB.find(x => x.id === item.id)) {\r\n         nodesToAddToDB.push(item);\r\n      };\r\n   });\r\n\r\n   let dwgTypeExistedInDBButLevelOrParentChangesArr = [];\r\n   let childrenIdsToWithdrawFromDB = [];\r\n   treeFromDB.forEach(item => {\r\n      const found = treeCurrent.find(r => r.id === item.id);\r\n      const foundInit = treeCurrentInit.find(r => r.id === item.id);\r\n      if (found && foundInit) {\r\n         if (found.title !== foundInit.title) item.title = found.title;\r\n\r\n         if (found.parentId !== item.parentId && found.parentId !== foundInit.parentId) {\r\n            dwgTypeExistedInDBButLevelOrParentChangesArr.push({ ...found, title: item.title });\r\n\r\n            const arrIdsChildrenInDB = getTreeFlattenOfNodeInArray(treeFromDB, item).filter((x, i) => i !== 0).map(x => x.id);\r\n\r\n            childrenIdsToWithdrawFromDB = [...childrenIdsToWithdrawFromDB, ...arrIdsChildrenInDB];\r\n         };\r\n      };\r\n   });\r\n   childrenIdsToWithdrawFromDB = [...new Set(childrenIdsToWithdrawFromDB)];\r\n\r\n   const dwgTypeToWithdrawFromDB = treeFromDB.filter(x => childrenIdsToWithdrawFromDB.indexOf(x.id) !== -1);\r\n\r\n   treeFromDB = treeFromDB.filter(item => {\r\n      return childrenIdsToWithdrawFromDB.indexOf(item.id) === -1 && !dwgTypeExistedInDBButLevelOrParentChangesArr.find(x => x.id === item.id)\r\n   });\r\n\r\n\r\n   const listBranchesTreeToPushToDB = getListOfBranchesTree([\r\n      ...nodesToAddToDB,\r\n      ...dwgTypeExistedInDBButLevelOrParentChangesArr,\r\n      ...dwgTypeToWithdrawFromDB\r\n   ]);\r\n\r\n   listBranchesTreeToPushToDB.forEach(itemTree => {\r\n      treeFromDB = [...treeFromDB, ...flattenAllTreeChildNode1([itemTree])];\r\n   });\r\n\r\n   const treeDBModifiedToSave = convertFlattenArraytoTree1(treeFromDB);\r\n   updateChildrenNodeTreeLevel(treeDBModifiedToSave);\r\n\r\n   return {\r\n      nodesToAddToDB: nodesToAddToDB.filter(item => nodesIdNoNeedToAddNew.indexOf(item.id) === -1),\r\n      treeDBModifiedToSave: flattenAllTreeChildNode1(treeDBModifiedToSave)\r\n   };\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\PageDataEntrySheet.js",[],{"ruleId":"514","replacedBy":"515"},{"ruleId":"516","replacedBy":"517"},{"ruleId":"518","severity":1,"message":"519","line":159,"column":10,"nodeType":"520","messageId":"521","endLine":159,"endColumn":37},{"ruleId":"522","severity":1,"message":"523","line":269,"column":85,"nodeType":"524","messageId":"525","endLine":269,"endColumn":87},{"ruleId":"522","severity":1,"message":"523","line":271,"column":53,"nodeType":"524","messageId":"525","endLine":271,"endColumn":55},{"ruleId":"522","severity":1,"message":"523","line":273,"column":53,"nodeType":"524","messageId":"525","endLine":273,"endColumn":55},{"ruleId":"522","severity":1,"message":"523","line":275,"column":54,"nodeType":"524","messageId":"525","endLine":275,"endColumn":56},{"ruleId":"522","severity":1,"message":"523","line":277,"column":52,"nodeType":"524","messageId":"525","endLine":277,"endColumn":54},{"ruleId":"522","severity":1,"message":"526","line":277,"column":87,"nodeType":"524","messageId":"525","endLine":277,"endColumn":89},{"ruleId":"527","severity":1,"message":"528","line":65,"column":7,"nodeType":"529","endLine":65,"endColumn":9,"suggestions":"530"},{"ruleId":"518","severity":1,"message":"531","line":66,"column":21,"nodeType":"520","messageId":"521","endLine":66,"endColumn":26},{"ruleId":"532","severity":1,"message":"533","line":167,"column":22,"nodeType":"534","endLine":167,"endColumn":40},{"ruleId":"522","severity":1,"message":"526","line":79,"column":23,"nodeType":"524","messageId":"525","endLine":79,"endColumn":25},{"ruleId":"522","severity":1,"message":"526","line":89,"column":23,"nodeType":"524","messageId":"525","endLine":89,"endColumn":25},{"ruleId":"522","severity":1,"message":"526","line":99,"column":23,"nodeType":"524","messageId":"525","endLine":99,"endColumn":25},{"ruleId":"522","severity":1,"message":"526","line":119,"column":28,"nodeType":"524","messageId":"525","endLine":119,"endColumn":30},{"ruleId":"522","severity":1,"message":"526","line":120,"column":18,"nodeType":"524","messageId":"525","endLine":120,"endColumn":20},{"ruleId":"522","severity":1,"message":"526","line":121,"column":21,"nodeType":"524","messageId":"525","endLine":121,"endColumn":23},{"ruleId":"522","severity":1,"message":"526","line":138,"column":28,"nodeType":"524","messageId":"525","endLine":138,"endColumn":30},{"ruleId":"522","severity":1,"message":"526","line":139,"column":18,"nodeType":"524","messageId":"525","endLine":139,"endColumn":20},{"ruleId":"522","severity":1,"message":"526","line":140,"column":21,"nodeType":"524","messageId":"525","endLine":140,"endColumn":23},{"ruleId":"518","severity":1,"message":"535","line":179,"column":13,"nodeType":"520","messageId":"521","endLine":179,"endColumn":19},{"ruleId":"522","severity":1,"message":"526","line":179,"column":28,"nodeType":"524","messageId":"525","endLine":179,"endColumn":30},{"ruleId":"522","severity":1,"message":"526","line":180,"column":18,"nodeType":"524","messageId":"525","endLine":180,"endColumn":20},{"ruleId":"522","severity":1,"message":"526","line":181,"column":21,"nodeType":"524","messageId":"525","endLine":181,"endColumn":23},{"ruleId":"518","severity":1,"message":"536","line":10,"column":46,"nodeType":"520","messageId":"521","endLine":10,"endColumn":53},{"ruleId":"514","replacedBy":"537"},{"ruleId":"516","replacedBy":"538"},{"ruleId":"518","severity":1,"message":"539","line":40,"column":55,"nodeType":"520","messageId":"521","endLine":40,"endColumn":62},{"ruleId":"527","severity":1,"message":"540","line":269,"column":7,"nodeType":"529","endLine":269,"endColumn":29,"suggestions":"541"},{"ruleId":"527","severity":1,"message":"542","line":286,"column":7,"nodeType":"529","endLine":286,"endColumn":36,"suggestions":"543"},{"ruleId":"527","severity":1,"message":"544","line":298,"column":7,"nodeType":"529","endLine":298,"endColumn":19,"suggestions":"545"},{"ruleId":"546","severity":1,"message":"547","line":402,"column":48,"nodeType":"524","messageId":"548","endLine":402,"endColumn":49},{"ruleId":"518","severity":1,"message":"549","line":51,"column":7,"nodeType":"520","messageId":"521","endLine":51,"endColumn":14},{"ruleId":"518","severity":1,"message":"550","line":51,"column":16,"nodeType":"520","messageId":"521","endLine":51,"endColumn":26},{"ruleId":"518","severity":1,"message":"551","line":51,"column":28,"nodeType":"520","messageId":"521","endLine":51,"endColumn":49},{"ruleId":"518","severity":1,"message":"552","line":55,"column":10,"nodeType":"520","messageId":"521","endLine":55,"endColumn":16},{"ruleId":"553","severity":1,"message":"554","line":387,"column":64,"nodeType":"555","messageId":"556","endLine":387,"endColumn":147},{"ruleId":"553","severity":1,"message":"554","line":489,"column":58,"nodeType":"555","messageId":"556","endLine":489,"endColumn":141},{"ruleId":"553","severity":1,"message":"554","line":534,"column":67,"nodeType":"555","messageId":"556","endLine":534,"endColumn":150},{"ruleId":"518","severity":1,"message":"557","line":651,"column":59,"nodeType":"520","messageId":"521","endLine":651,"endColumn":82},{"ruleId":"558","severity":1,"message":"559","line":817,"column":40,"nodeType":"555","messageId":"560","endLine":817,"endColumn":42},{"ruleId":"558","severity":1,"message":"559","line":940,"column":29,"nodeType":"555","messageId":"560","endLine":940,"endColumn":31},{"ruleId":"518","severity":1,"message":"561","line":1001,"column":29,"nodeType":"520","messageId":"521","endLine":1001,"endColumn":33},{"ruleId":"518","severity":1,"message":"557","line":1001,"column":48,"nodeType":"520","messageId":"521","endLine":1001,"endColumn":71},{"ruleId":"518","severity":1,"message":"539","line":1001,"column":89,"nodeType":"520","messageId":"521","endLine":1001,"endColumn":96},{"ruleId":"518","severity":1,"message":"562","line":1002,"column":15,"nodeType":"520","messageId":"521","endLine":1002,"endColumn":27},{"ruleId":"518","severity":1,"message":"563","line":1002,"column":29,"nodeType":"520","messageId":"521","endLine":1002,"endColumn":42},{"ruleId":"518","severity":1,"message":"564","line":1002,"column":44,"nodeType":"520","messageId":"521","endLine":1002,"endColumn":58},{"ruleId":"518","severity":1,"message":"565","line":1002,"column":60,"nodeType":"520","messageId":"521","endLine":1002,"endColumn":72},{"ruleId":"518","severity":1,"message":"566","line":1007,"column":10,"nodeType":"520","messageId":"521","endLine":1007,"endColumn":28},{"ruleId":"518","severity":1,"message":"567","line":1017,"column":10,"nodeType":"520","messageId":"521","endLine":1017,"endColumn":28},{"ruleId":"518","severity":1,"message":"568","line":1018,"column":10,"nodeType":"520","messageId":"521","endLine":1018,"endColumn":23},{"ruleId":"518","severity":1,"message":"569","line":1019,"column":10,"nodeType":"520","messageId":"521","endLine":1019,"endColumn":20},{"ruleId":"518","severity":1,"message":"570","line":1020,"column":10,"nodeType":"520","messageId":"521","endLine":1020,"endColumn":18},{"ruleId":"518","severity":1,"message":"571","line":1025,"column":13,"nodeType":"520","messageId":"521","endLine":1025,"endColumn":26},{"ruleId":"558","severity":1,"message":"559","line":1300,"column":29,"nodeType":"555","messageId":"560","endLine":1300,"endColumn":31},{"ruleId":"518","severity":1,"message":"572","line":1407,"column":119,"nodeType":"520","messageId":"521","endLine":1407,"endColumn":128},{"ruleId":"518","severity":1,"message":"573","line":1814,"column":46,"nodeType":"520","messageId":"521","endLine":1814,"endColumn":62},{"ruleId":"518","severity":1,"message":"561","line":1814,"column":91,"nodeType":"520","messageId":"521","endLine":1814,"endColumn":95},{"ruleId":"518","severity":1,"message":"574","line":2149,"column":29,"nodeType":"520","messageId":"521","endLine":2149,"endColumn":40},{"ruleId":"518","severity":1,"message":"575","line":2149,"column":42,"nodeType":"520","messageId":"521","endLine":2149,"endColumn":56},{"ruleId":"518","severity":1,"message":"576","line":2150,"column":13,"nodeType":"520","messageId":"521","endLine":2150,"endColumn":26},{"ruleId":"518","severity":1,"message":"577","line":2150,"column":28,"nodeType":"520","messageId":"521","endLine":2150,"endColumn":56},{"ruleId":"518","severity":1,"message":"578","line":2150,"column":58,"nodeType":"520","messageId":"521","endLine":2150,"endColumn":86},{"ruleId":"518","severity":1,"message":"579","line":2157,"column":16,"nodeType":"520","messageId":"521","endLine":2157,"endColumn":39},{"ruleId":"553","severity":1,"message":"580","line":2496,"column":44,"nodeType":"555","messageId":"556","endLine":2496,"endColumn":93},{"ruleId":"522","severity":1,"message":"526","line":2496,"column":73,"nodeType":"524","messageId":"525","endLine":2496,"endColumn":75},{"ruleId":"553","severity":1,"message":"580","line":2514,"column":44,"nodeType":"555","messageId":"556","endLine":2514,"endColumn":93},{"ruleId":"522","severity":1,"message":"526","line":2514,"column":73,"nodeType":"524","messageId":"525","endLine":2514,"endColumn":75},{"ruleId":"553","severity":1,"message":"580","line":2532,"column":44,"nodeType":"555","messageId":"556","endLine":2532,"endColumn":93},{"ruleId":"522","severity":1,"message":"526","line":2532,"column":73,"nodeType":"524","messageId":"525","endLine":2532,"endColumn":75},{"ruleId":"553","severity":1,"message":"580","line":2553,"column":44,"nodeType":"555","messageId":"556","endLine":2553,"endColumn":93},{"ruleId":"522","severity":1,"message":"526","line":2553,"column":73,"nodeType":"524","messageId":"525","endLine":2553,"endColumn":75},{"ruleId":"522","severity":1,"message":"523","line":2562,"column":47,"nodeType":"524","messageId":"525","endLine":2562,"endColumn":49},{"ruleId":"558","severity":1,"message":"581","line":2575,"column":33,"nodeType":"555","messageId":"582","endLine":2575,"endColumn":35},{"ruleId":"558","severity":1,"message":"583","line":2716,"column":30,"nodeType":"555","messageId":"582","endLine":2716,"endColumn":32},{"ruleId":"518","severity":1,"message":"584","line":8,"column":35,"nodeType":"520","messageId":"521","endLine":8,"endColumn":43},{"ruleId":"553","severity":1,"message":"580","line":87,"column":44,"nodeType":"555","messageId":"556","endLine":87,"endColumn":91},{"ruleId":"522","severity":1,"message":"526","line":87,"column":70,"nodeType":"524","messageId":"525","endLine":87,"endColumn":72},{"ruleId":"522","severity":1,"message":"526","line":180,"column":30,"nodeType":"524","messageId":"525","endLine":180,"endColumn":32},{"ruleId":"522","severity":1,"message":"526","line":209,"column":16,"nodeType":"524","messageId":"525","endLine":209,"endColumn":18},{"ruleId":"585","severity":1,"message":"586","line":4,"column":1,"nodeType":"587","endLine":23,"endColumn":3},{"ruleId":"518","severity":1,"message":"588","line":5,"column":9,"nodeType":"520","messageId":"521","endLine":5,"endColumn":14},{"ruleId":"518","severity":1,"message":"589","line":5,"column":16,"nodeType":"520","messageId":"521","endLine":5,"endColumn":22},{"ruleId":"527","severity":1,"message":"590","line":29,"column":7,"nodeType":"529","endLine":29,"endColumn":17,"suggestions":"591"},{"ruleId":"527","severity":1,"message":"592","line":97,"column":7,"nodeType":"529","endLine":97,"endColumn":9,"suggestions":"593"},{"ruleId":"518","severity":1,"message":"594","line":18,"column":19,"nodeType":"520","messageId":"521","endLine":18,"endColumn":27},{"ruleId":"527","severity":1,"message":"595","line":46,"column":7,"nodeType":"529","endLine":46,"endColumn":9,"suggestions":"596"},{"ruleId":"527","severity":1,"message":"597","line":30,"column":7,"nodeType":"529","endLine":30,"endColumn":9,"suggestions":"598"},{"ruleId":"522","severity":1,"message":"526","line":49,"column":61,"nodeType":"524","messageId":"525","endLine":49,"endColumn":63},{"ruleId":"518","severity":1,"message":"599","line":52,"column":11,"nodeType":"520","messageId":"521","endLine":52,"endColumn":18},{"ruleId":"527","severity":1,"message":"600","line":136,"column":7,"nodeType":"529","endLine":136,"endColumn":9,"suggestions":"601"},{"ruleId":"532","severity":1,"message":"533","line":27,"column":29,"nodeType":"534","endLine":30,"endColumn":32},{"ruleId":"527","severity":1,"message":"602","line":198,"column":7,"nodeType":"529","endLine":198,"endColumn":15,"suggestions":"603"},{"ruleId":"604","severity":1,"message":"605","line":61,"column":13,"nodeType":"606","messageId":"525","endLine":61,"endColumn":19},{"ruleId":"518","severity":1,"message":"607","line":12,"column":10,"nodeType":"520","messageId":"521","endLine":12,"endColumn":19},{"ruleId":"518","severity":1,"message":"572","line":25,"column":25,"nodeType":"520","messageId":"521","endLine":25,"endColumn":34},{"ruleId":"527","severity":1,"message":"608","line":164,"column":7,"nodeType":"529","endLine":164,"endColumn":18,"suggestions":"609"},{"ruleId":"527","severity":1,"message":"610","line":208,"column":7,"nodeType":"529","endLine":208,"endColumn":9,"suggestions":"611"},{"ruleId":"518","severity":1,"message":"561","line":73,"column":32,"nodeType":"520","messageId":"521","endLine":73,"endColumn":36},{"ruleId":"518","severity":1,"message":"612","line":76,"column":63,"nodeType":"520","messageId":"521","endLine":76,"endColumn":73},{"ruleId":"518","severity":1,"message":"613","line":76,"column":91,"nodeType":"520","messageId":"521","endLine":76,"endColumn":113},{"ruleId":"527","severity":1,"message":"614","line":338,"column":7,"nodeType":"529","endLine":338,"endColumn":9,"suggestions":"615"},{"ruleId":"527","severity":1,"message":"616","line":373,"column":7,"nodeType":"529","endLine":373,"endColumn":59,"suggestions":"617"},{"ruleId":"527","severity":1,"message":"618","line":407,"column":7,"nodeType":"529","endLine":407,"endColumn":18,"suggestions":"619"},{"ruleId":"527","severity":1,"message":"620","line":424,"column":7,"nodeType":"529","endLine":424,"endColumn":17,"suggestions":"621"},{"ruleId":"622","severity":1,"message":"623","line":1312,"column":21,"nodeType":"624","messageId":"625","endLine":1312,"endColumn":23},{"ruleId":"622","severity":1,"message":"623","line":1312,"column":46,"nodeType":"624","messageId":"625","endLine":1312,"endColumn":48},{"ruleId":"622","severity":1,"message":"623","line":1344,"column":22,"nodeType":"624","messageId":"625","endLine":1344,"endColumn":24},{"ruleId":"622","severity":1,"message":"623","line":1344,"column":68,"nodeType":"624","messageId":"625","endLine":1344,"endColumn":70},{"ruleId":"527","severity":1,"message":"626","line":1424,"column":7,"nodeType":"529","endLine":1424,"endColumn":9,"suggestions":"627"},{"ruleId":"527","severity":1,"message":"628","line":84,"column":7,"nodeType":"529","endLine":84,"endColumn":38,"suggestions":"629"},{"ruleId":"518","severity":1,"message":"630","line":117,"column":26,"nodeType":"520","messageId":"521","endLine":117,"endColumn":33},{"ruleId":"527","severity":1,"message":"631","line":122,"column":7,"nodeType":"529","endLine":122,"endColumn":9,"suggestions":"632"},{"ruleId":"527","severity":1,"message":"633","line":684,"column":7,"nodeType":"529","endLine":684,"endColumn":9,"suggestions":"634"},{"ruleId":"518","severity":1,"message":"561","line":1010,"column":29,"nodeType":"520","messageId":"521","endLine":1010,"endColumn":33},{"ruleId":"518","severity":1,"message":"557","line":1010,"column":48,"nodeType":"520","messageId":"521","endLine":1010,"endColumn":71},{"ruleId":"518","severity":1,"message":"539","line":1010,"column":89,"nodeType":"520","messageId":"521","endLine":1010,"endColumn":96},{"ruleId":"518","severity":1,"message":"562","line":1011,"column":15,"nodeType":"520","messageId":"521","endLine":1011,"endColumn":27},{"ruleId":"518","severity":1,"message":"563","line":1011,"column":29,"nodeType":"520","messageId":"521","endLine":1011,"endColumn":42},{"ruleId":"518","severity":1,"message":"564","line":1011,"column":44,"nodeType":"520","messageId":"521","endLine":1011,"endColumn":58},{"ruleId":"518","severity":1,"message":"565","line":1011,"column":60,"nodeType":"520","messageId":"521","endLine":1011,"endColumn":72},{"ruleId":"518","severity":1,"message":"566","line":1016,"column":10,"nodeType":"520","messageId":"521","endLine":1016,"endColumn":28},{"ruleId":"518","severity":1,"message":"567","line":1026,"column":10,"nodeType":"520","messageId":"521","endLine":1026,"endColumn":28},{"ruleId":"518","severity":1,"message":"568","line":1027,"column":10,"nodeType":"520","messageId":"521","endLine":1027,"endColumn":23},{"ruleId":"518","severity":1,"message":"569","line":1028,"column":10,"nodeType":"520","messageId":"521","endLine":1028,"endColumn":20},{"ruleId":"518","severity":1,"message":"570","line":1029,"column":10,"nodeType":"520","messageId":"521","endLine":1029,"endColumn":18},{"ruleId":"518","severity":1,"message":"571","line":1034,"column":13,"nodeType":"520","messageId":"521","endLine":1034,"endColumn":26},{"ruleId":"558","severity":1,"message":"559","line":1308,"column":29,"nodeType":"555","messageId":"560","endLine":1308,"endColumn":31},{"ruleId":"558","severity":1,"message":"559","line":1784,"column":22,"nodeType":"555","messageId":"560","endLine":1784,"endColumn":24},{"ruleId":"635","severity":1,"message":"636","line":2012,"column":27,"nodeType":"637","messageId":"638","endLine":2012,"endColumn":28,"fix":"639"},{"ruleId":"518","severity":1,"message":"640","line":2271,"column":13,"nodeType":"520","messageId":"521","endLine":2271,"endColumn":19},{"ruleId":"558","severity":1,"message":"559","line":2371,"column":24,"nodeType":"555","messageId":"560","endLine":2371,"endColumn":26},{"ruleId":"518","severity":1,"message":"641","line":24,"column":21,"nodeType":"520","messageId":"521","endLine":24,"endColumn":29},{"ruleId":"518","severity":1,"message":"642","line":28,"column":12,"nodeType":"520","messageId":"521","endLine":28,"endColumn":21},{"ruleId":"518","severity":1,"message":"643","line":28,"column":23,"nodeType":"520","messageId":"521","endLine":28,"endColumn":42},{"ruleId":"518","severity":1,"message":"644","line":28,"column":44,"nodeType":"520","messageId":"521","endLine":28,"endColumn":57},{"ruleId":"518","severity":1,"message":"572","line":33,"column":56,"nodeType":"520","messageId":"521","endLine":33,"endColumn":65},{"ruleId":"518","severity":1,"message":"557","line":33,"column":83,"nodeType":"520","messageId":"521","endLine":33,"endColumn":106},{"ruleId":"518","severity":1,"message":"645","line":34,"column":26,"nodeType":"520","messageId":"521","endLine":34,"endColumn":33},{"ruleId":"518","severity":1,"message":"646","line":80,"column":35,"nodeType":"520","messageId":"521","endLine":80,"endColumn":60},{"ruleId":"518","severity":1,"message":"577","line":85,"column":11,"nodeType":"520","messageId":"521","endLine":85,"endColumn":39},{"ruleId":"518","severity":1,"message":"647","line":87,"column":25,"nodeType":"520","messageId":"521","endLine":87,"endColumn":40},{"ruleId":"527","severity":1,"message":"648","line":237,"column":7,"nodeType":"529","endLine":237,"endColumn":18,"suggestions":"649"},{"ruleId":"518","severity":1,"message":"650","line":260,"column":10,"nodeType":"520","messageId":"521","endLine":260,"endColumn":34},{"ruleId":"518","severity":1,"message":"651","line":400,"column":10,"nodeType":"520","messageId":"521","endLine":400,"endColumn":29},{"ruleId":"518","severity":1,"message":"561","line":64,"column":32,"nodeType":"520","messageId":"521","endLine":64,"endColumn":36},{"ruleId":"518","severity":1,"message":"652","line":64,"column":101,"nodeType":"520","messageId":"521","endLine":64,"endColumn":112},{"ruleId":"518","severity":1,"message":"536","line":68,"column":7,"nodeType":"520","messageId":"521","endLine":68,"endColumn":14},{"ruleId":"527","severity":1,"message":"653","line":180,"column":7,"nodeType":"529","endLine":180,"endColumn":43,"suggestions":"654"},{"ruleId":"527","severity":1,"message":"655","line":344,"column":7,"nodeType":"529","endLine":344,"endColumn":9,"suggestions":"656"},{"ruleId":"635","severity":1,"message":"636","line":353,"column":42,"nodeType":"637","messageId":"638","endLine":353,"endColumn":43,"fix":"657"},{"ruleId":"527","severity":1,"message":"658","line":378,"column":7,"nodeType":"529","endLine":378,"endColumn":32,"suggestions":"659"},{"ruleId":"660","severity":1,"message":"661","line":632,"column":7,"nodeType":"662","messageId":"663","endLine":655,"endColumn":8},{"ruleId":"660","severity":1,"message":"661","line":657,"column":7,"nodeType":"662","messageId":"663","endLine":658,"endColumn":28},{"ruleId":"518","severity":1,"message":"664","line":1496,"column":7,"nodeType":"520","messageId":"521","endLine":1496,"endColumn":19},{"ruleId":"527","severity":1,"message":"665","line":59,"column":7,"nodeType":"529","endLine":59,"endColumn":9,"suggestions":"666"},{"ruleId":"518","severity":1,"message":"667","line":20,"column":22,"nodeType":"520","messageId":"521","endLine":20,"endColumn":37},{"ruleId":"518","severity":1,"message":"668","line":20,"column":39,"nodeType":"520","messageId":"521","endLine":20,"endColumn":54},{"ruleId":"518","severity":1,"message":"669","line":21,"column":20,"nodeType":"520","messageId":"521","endLine":21,"endColumn":31},{"ruleId":"558","severity":1,"message":"559","line":34,"column":34,"nodeType":"555","messageId":"560","endLine":34,"endColumn":36},{"ruleId":"558","severity":1,"message":"559","line":41,"column":35,"nodeType":"555","messageId":"560","endLine":41,"endColumn":37},{"ruleId":"518","severity":1,"message":"670","line":60,"column":10,"nodeType":"520","messageId":"521","endLine":60,"endColumn":20},{"ruleId":"518","severity":1,"message":"671","line":61,"column":10,"nodeType":"520","messageId":"521","endLine":61,"endColumn":20},{"ruleId":"518","severity":1,"message":"672","line":62,"column":10,"nodeType":"520","messageId":"521","endLine":62,"endColumn":20},{"ruleId":"546","severity":1,"message":"547","line":231,"column":44,"nodeType":"524","messageId":"548","endLine":231,"endColumn":45},"no-native-reassign",["673"],"no-negated-in-lhs",["674"],"no-unused-vars","'getDataFromOutsideComponent' is assigned a value but never used.","Identifier","unusedVar","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","Expected '===' and instead saw '=='.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'projectsArray' and 'token'. Either include them or remove the dependency array. If 'setDataDB' needs the current value of 'projectsArray', you can also switch to useReducer instead of useState and read 'projectsArray' in the reducer.","ArrayExpression",["675"],"'value' is assigned a value but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","'addNos' is assigned a value but never used.","'rowsAll' is assigned a value but never used.",["673"],["674"],"'company' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'columnIndex', 'inputRender', 'isLockedColumn', 'isLockedRow', and 'rowIndex'. Either include them or remove the dependency array.",["676"],"React Hook useEffect has missing dependencies: 'cellEditDone', 'columnIndex', 'inputRender', 'isLockedColumn', 'isLockedRow', 'rowIndex', and 'stateCell.tempCopiedText'. Either include them or remove the dependency array.",["677"],"React Hook useEffect has a missing dependency: 'btnShown'. Either include it or remove the dependency array.",["678"],"no-useless-concat","Unexpected string concatenation of literals.","unexpectedConcat","'history' is assigned a value but never used.","'localState' is assigned a value but never used.","'resetAllPanelInitMode' is assigned a value but never used.","'refKey' is assigned a value but never used.","no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'arrayNodes'.","ArrowFunctionExpression","unsafeRefs","'projectIsAppliedRfaView' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","expectedInside","'role' is assigned a value but never used.","'headersShown' is assigned a value but never used.","'headersHidden' is assigned a value but never used.","'nosColumnFixed' is assigned a value but never used.","'colorization' is assigned a value but never used.","'rowsVersionsToSave' is assigned a value but never used.","'viewTemplateNodeId' is assigned a value but never used.","'viewTemplates' is assigned a value but never used.","'modeFilter' is assigned a value but never used.","'modeSort' is assigned a value but never used.","'rowsGetNewRev' is assigned a value but never used.","'companies' is assigned a value but never used.","'projectNameShort' is assigned a value but never used.","'formRefType' is assigned a value but never used.","'isFormEditting' is assigned a value but never used.","'isAdminAction' is assigned a value but never used.","'isAdminActionWithNoEmailSent' is assigned a value but never used.","'adminActionConsultantToReply' is assigned a value but never used.","'rowsAllInitThisTypeForm' is assigned a value but never used.","Function declared in a loop contains unsafe references to variable(s) 'preRow'.","Array.prototype.map() expects a value to be returned at the end of arrow function.","expectedAtEnd","Array.prototype.sort() expects a value to be returned at the end of arrow function.","'rowIndex' is assigned a value but never used.","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","'Group' is assigned a value but never used.","'Button' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'actionType', 'styleFrozen', 'styleHidden', and 'styleShown'. Either include them or remove the dependency array.",["679"],"React Hook useEffect has missing dependencies: 'headers', 'projectId', 'rowData', 'rowId', 'rowsVersionsToSave', and 'token'. Either include them or remove the dependency array.",["680"],"'stateRow' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'headerKey', 'projectId', 'rowId', and 'token'. Either include them or remove the dependency array.",["681"],"React Hook useEffect has missing dependencies: 'projectId' and 'token'. Either include them or remove the dependency array.",["682"],"'loading' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'activityRecorded', 'dwgName', 'dwgNumber', 'headers', 'projectId', 'revKey', 'stateRow.rowsAll', 'statusKey', and 'token'. Either include them or remove the dependency array.",["683"],"React Hook useEffect has missing dependencies: 'data.value', 'id', and 'setFilterSelect'. Either include them or remove the dependency array. If 'setFilterSelect' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["684"],"no-dupe-keys","Duplicate key 'border'.","ObjectExpression","'projectId' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'column.key', 'company', 'isUserCanSubmitBothSide', 'pageSheetTypeName', 'roleTradeCompany.company', 'roleTradeCompany.role', 'rowData', and 'rowsRfaAllInit'. Either include them or remove the dependency array.",["685"],"React Hook useEffect has missing dependencies: 'column.key', 'projectIsAppliedRfaView', and 'rowData'. Either include them or remove the dependency array.",["686"],"'rowsRfaAll' is assigned a value but never used.","'drawingTypeTreeDmsView' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'company', 'currentRfaData', 'currentRfaNumber', 'currentRfaRef', 'formRfaType', 'isAdminAction', 'isAdminActionWithNoEmailSent', 'isFormEditting', and 'rowsRfaAllInit'. Either include them or remove the dependency array.",["687"],"React Hook useEffect has missing dependencies: 'formRfaType', 'isFormEditting', and 'rowsRfaAllInit'. Either include them or remove the dependency array.",["688"],"React Hook useEffect has missing dependencies: 'company' and 'dwgsToAddNewRFA'. Either include them or remove the dependency array.",["689"],"React Hook useEffect has missing dependencies: 'company', 'dwgsToAddNewRFA', and 'formRfaType'. Either include them or remove the dependency array.",["690"],"no-mixed-operators","Unexpected mix of '&&' and '||'.","LogicalExpression","unexpectedMixedOperator","React Hook useEffect has missing dependencies: 'isFirstSubmission', 'rowData.id', and 'setRevisionDwg'. Either include them or remove the dependency array. If 'setRevisionDwg' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["691"],"React Hook useEffect has missing dependencies: 'drawingTypeTreeDmsView', 'mepSubTradeFirstTime', 'rowsAll', and 'tradeOfRfaForFirstTimeSubmit'. Either include them or remove the dependency array.",["692"],"'rowData' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'EventKeyDown'. Either include it or remove the dependency array.",["693"],"React Hook useEffect has missing dependencies: 'canEditParent', 'companies', 'company', 'email', 'fetchDataOneSheet', 'getSheetRows', 'isAdmin', 'isUserCanSubmitBothSide', 'listGroup', 'listUser', 'pageSheetTypeName', 'projectId', 'projectIsAppliedRfaView', 'projectName', 'projectNameShort', 'role', 'roleTradeCompany', 'setUserData', 'sheetDataInput', 'sheetId', 'sheetName', and 'token'. Either include them or remove the dependency array.",["694"],"rest-spread-spacing","Unexpected whitespace after spread operator.","SpreadElement","unexpectedWhitespace",{"range":"695","text":"696"},"'keyRef' is assigned a value but never used.","'cellData' is assigned a value but never used.","'stateCell' is assigned a value but never used.","'getCellModifiedTemp' is assigned a value but never used.","'setCellActive' is assigned a value but never used.","'isAdmin' is assigned a value but never used.","'setConsultantsNotReplyYet' is assigned a value but never used.","'setOverdueCount' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'column.key', 'company', 'expandedColumn', 'pageSheetTypeName', 'refKey', 'refType', 'roleTradeCompany.role', 'rowData', and 'rowsRefAllInit'. Either include them or remove the dependency array.",["697"],"'onClickSubmitOrReplyForm' is assigned a value but never used.","'openFormReplyForCvi' is assigned a value but never used.","'projectName' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'company', 'currentRefData', 'isFormEditting', and 'refType'. Either include them or remove the dependency array.",["698"],"React Hook useEffect has missing dependencies: 'company', 'currentRefData', 'formRefType', 'isFormEditting', 'refKey', and 'refType'. Either include them or remove the dependency array.",["699"],{"range":"700","text":"696"},"React Hook useEffect has missing dependencies: 'checkIfRefIsDuplicated', 'formRefType', 'isFormEditting', 'refKey', 'refType', and 'rowsRefAllInit'. Either include them or remove the dependency array.",["701"],"no-unreachable","Unreachable code.","ExpressionStatement","unreachableCode","'SelectStyled' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'company', 'email', 'projectId', 'role', and 'token'. Either include them or remove the dependency array.",["702"],"'listRecipientTo' is assigned a value but never used.","'listRecipientCc' is assigned a value but never used.","'signatureBy' is assigned a value but never used.","'testLorem1' is assigned a value but never used.","'testLorem2' is assigned a value but never used.","'testLorem3' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"703","fix":"704"},{"desc":"705","fix":"706"},{"desc":"707","fix":"708"},{"desc":"709","fix":"710"},{"desc":"711","fix":"712"},{"desc":"713","fix":"714"},{"desc":"715","fix":"716"},{"desc":"717","fix":"718"},{"desc":"719","fix":"720"},{"desc":"721","fix":"722"},{"desc":"723","fix":"724"},{"desc":"725","fix":"726"},{"desc":"727","fix":"728"},{"desc":"729","fix":"730"},{"desc":"731","fix":"732"},{"desc":"733","fix":"734"},{"desc":"735","fix":"736"},{"desc":"737","fix":"738"},{"desc":"739","fix":"740"},{"desc":"741","fix":"742"},[78637,78638],"",{"desc":"743","fix":"744"},{"desc":"745","fix":"746"},{"desc":"747","fix":"748"},[16876,16877],{"desc":"749","fix":"750"},{"desc":"751","fix":"752"},"Update the dependencies array to be: [projectsArray, token]",{"range":"753","text":"754"},"Update the dependencies array to be: [columnIndex, inputRender, isLockedColumn, isLockedRow, rowIndex, stateCell.cellActive]",{"range":"755","text":"756"},"Update the dependencies array to be: [cellEditDone, columnIndex, inputRender, isLockedColumn, isLockedRow, rowIndex, stateCell.cellAppliedAction, stateCell.tempCopiedText]",{"range":"757","text":"758"},"Update the dependencies array to be: [btnShown, valueInput]",{"range":"759","text":"760"},"Update the dependencies array to be: [actionType, styleFrozen, styleHidden, styleShown, tag.mode]",{"range":"761","text":"762"},"Update the dependencies array to be: [headers, projectId, rowData, rowId, rowsVersionsToSave, token]",{"range":"763","text":"764"},"Update the dependencies array to be: [headerKey, projectId, rowId, token]",{"range":"765","text":"766"},"Update the dependencies array to be: [projectId, token]",{"range":"767","text":"768"},"Update the dependencies array to be: [activityRecorded, dwgName, dwgNumber, headers, projectId, revKey, stateRow.rowsAll, statusKey, token]",{"range":"769","text":"770"},"Update the dependencies array to be: [column, data.value, id, setFilterSelect]",{"range":"771","text":"772"},"Update the dependencies array to be: [activeBtn, column.key, company, isUserCanSubmitBothSide, pageSheetTypeName, roleTradeCompany.company, roleTradeCompany.role, rowData, rowsRfaAllInit]",{"range":"773","text":"774"},"Update the dependencies array to be: [column.key, projectIsAppliedRfaView, rowData]",{"range":"775","text":"776"},"Update the dependencies array to be: [company, currentRfaData, currentRfaNumber, currentRfaRef, formRfaType, isAdminAction, isAdminActionWithNoEmailSent, isFormEditting, rowsRfaAllInit]",{"range":"777","text":"778"},"Update the dependencies array to be: [tradeOfRfaForFirstTimeSubmit, mepSubTradeFirstTime, formRfaType, isFormEditting, rowsRfaAllInit]",{"range":"779","text":"780"},"Update the dependencies array to be: [company, dwgsToAddNewRFA, filesDWFX]",{"range":"781","text":"782"},"Update the dependencies array to be: [company, dwgsToAddNewRFA, filesPDF, formRfaType]",{"range":"783","text":"784"},"Update the dependencies array to be: [isFirstSubmission, rowData.id, setRevisionDwg]",{"range":"785","text":"786"},"Update the dependencies array to be: [drawingTrade, drawingSubTrade, tradeOfRfaForFirstTimeSubmit, mepSubTradeFirstTime, rowsAll, drawingTypeTreeDmsView]",{"range":"787","text":"788"},"Update the dependencies array to be: [EventKeyDown]",{"range":"789","text":"790"},"Update the dependencies array to be: [canEditParent, companies, company, email, fetchDataOneSheet, getSheetRows, isAdmin, isUserCanSubmitBothSide, listGroup, listUser, pageSheetTypeName, projectId, projectIsAppliedRfaView, projectName, projectNameShort, role, roleTradeCompany, setUserData, sheetDataInput, sheetId, sheetName, token]",{"range":"791","text":"792"},"Update the dependencies array to be: [activeBtn, column.key, company, expandedColumn, pageSheetTypeName, refKey, refType, roleTradeCompany.role, rowData, rowsRefAllInit]",{"range":"793","text":"794"},"Update the dependencies array to be: [filesPdfDrawing, dwgsImportFromRFA, isFormEditting, currentRefData, refType, company]",{"range":"795","text":"796"},"Update the dependencies array to be: [company, currentRefData, formRefType, isFormEditting, refKey, refType]",{"range":"797","text":"798"},"Update the dependencies array to be: [checkIfRefIsDuplicated, formRefType, isFormEditting, refKey, refType, rowsRefAllInit, tradeForFirstTimeSubmit]",{"range":"799","text":"800"},"Update the dependencies array to be: [company, email, projectId, role, token]",{"range":"801","text":"802"},[2288,2290],"[projectsArray, token]",[9997,10019],"[columnIndex, inputRender, isLockedColumn, isLockedRow, rowIndex, stateCell.cellActive]",[10577,10606],"[cellEditDone, columnIndex, inputRender, isLockedColumn, isLockedRow, rowIndex, stateCell.cellAppliedAction, stateCell.tempCopiedText]",[10932,10944],"[btnShown, valueInput]",[915,925],"[actionType, styleFrozen, styleHidden, styleShown, tag.mode]",[3274,3276],"[headers, projectId, rowData, rowId, rowsVersionsToSave, token]",[1520,1522],"[headerKey, projectId, rowId, token]",[1037,1039],"[projectId, token]",[5030,5032],"[activityRecorded, dwgName, dwgNumber, headers, projectId, revKey, stateRow.rowsAll, statusKey, token]",[5852,5860],"[column, data.value, id, setFilterSelect]",[7009,7020],"[activeBtn, column.key, company, isUserCanSubmitBothSide, pageSheetTypeName, roleTradeCompany.company, roleTradeCompany.role, rowData, rowsRfaAllInit]",[8766,8768],"[column.key, projectIsAppliedRfaView, rowData]",[15579,15581],"[company, currentRfaData, currentRfaNumber, currentRfaRef, formRfaType, isAdminAction, isAdminActionWithNoEmailSent, isFormEditting, rowsRfaAllInit]",[17050,17102],"[tradeOfRfaForFirstTimeSubmit, mepSubTradeFirstTime, formRfaType, isFormEditting, rowsRfaAllInit]",[18215,18226],"[company, dwgsToAddNewRFA, filesDWFX]",[18943,18953],"[company, dwgsToAddNewRFA, filesPDF, formRfaType]",[62706,62708],"[isFirstSubmission, rowData.id, setRevisionDwg]",[3100,3131],"[drawingTrade, drawingSubTrade, tradeOfRfaForFirstTimeSubmit, mepSubTradeFirstTime, rowsAll, drawingTypeTreeDmsView]",[4621,4623],"[EventKeyDown]",[28130,28132],"[canEditParent, companies, company, email, fetchDataOneSheet, getSheetRows, isAdmin, isUserCanSubmitBothSide, listGroup, listUser, pageSheetTypeName, projectId, projectIsAppliedRfaView, projectName, projectNameShort, role, roleTradeCompany, setUserData, sheetDataInput, sheetId, sheetName, token]",[11039,11050],"[activeBtn, column.key, company, expandedColumn, pageSheetTypeName, refKey, refType, roleTradeCompany.role, rowData, rowsRefAllInit]",[6760,6796],"[filesPdfDrawing, dwgsImportFromRFA, isFormEditting, currentRefData, refType, company]",[16554,16556],"[company, currentRefData, formRefType, isFormEditting, refKey, refType]",[18116,18141],"[checkIfRefIsDuplicated, formRefType, isFormEditting, refKey, refType, rowsRefAllInit, tradeForFirstTimeSubmit]",[2066,2068],"[company, email, projectId, role, token]"]
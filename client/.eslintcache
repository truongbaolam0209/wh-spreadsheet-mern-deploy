[{"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\index.js":"1","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\App.js":"2","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\reportWebVitals.js":"3","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\contexts\\cellContext.js":"4","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\contexts\\rowContext.js":"5","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\contexts\\projectContext.js":"6","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\PageSpreadsheet.jsx":"7","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\contexts\\_createDataContext.js":"8","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\PanelSetting.jsx":"9","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\CellHeader.jsx":"10","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\Cell.jsx":"11","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\PanelFunction.jsx":"12","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\utils\\index.js":"13","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\constants\\index.js":"14","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\PanelCalendar.jsx":"15","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\ReorderColumnForm.jsx":"16","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\ColorizedForm.jsx":"17","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\TableDrawingDetail.jsx":"18","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\TableCellHistory.jsx":"19","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\InputSearch.jsx":"20","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\IconTable.jsx":"21","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\CellIndex.jsx":"22","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\FormSort.jsx":"23","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\FormFilter.jsx":"24","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\FormGroup.jsx":"25","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\TableActivityHistory.jsx":"26","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\FormDateAutomation.jsx":"27","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\ButtonStyle.jsx":"28","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\ButtonGroupComp.jsx":"29","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\PanelConfirm.jsx":"30","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\FormDrawingTypeOrder.jsx":"31","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\FormCellColorizedCheck.jsx":"32"},{"size":507,"mtime":1607175136833,"results":"33","hashOfConfig":"34"},{"size":909,"mtime":1609257214934,"results":"35","hashOfConfig":"34"},{"size":362,"mtime":1606274463595,"results":"36","hashOfConfig":"34"},{"size":1087,"mtime":1609148537496,"results":"37","hashOfConfig":"34"},{"size":582,"mtime":1609148593298,"results":"38","hashOfConfig":"34"},{"size":964,"mtime":1609149456727,"results":"39","hashOfConfig":"34"},{"size":32656,"mtime":1609256992628,"results":"40","hashOfConfig":"34"},{"size":613,"mtime":1604905406752,"results":"41","hashOfConfig":"34"},{"size":26780,"mtime":1609257136456,"results":"42","hashOfConfig":"34"},{"size":529,"mtime":1609149533797,"results":"43","hashOfConfig":"34"},{"size":13626,"mtime":1609254123301,"results":"44","hashOfConfig":"34"},{"size":1897,"mtime":1609166050136,"results":"45","hashOfConfig":"34"},{"size":20385,"mtime":1609243120820,"results":"46","hashOfConfig":"34"},{"size":789,"mtime":1609170899693,"results":"47","hashOfConfig":"34"},{"size":381,"mtime":1608382149906,"results":"48","hashOfConfig":"34"},{"size":6466,"mtime":1609243042163,"results":"49","hashOfConfig":"34"},{"size":1099,"mtime":1607490395942,"results":"50","hashOfConfig":"34"},{"size":6210,"mtime":1609148970984,"results":"51","hashOfConfig":"34"},{"size":1976,"mtime":1609236502353,"results":"52","hashOfConfig":"34"},{"size":4119,"mtime":1609150990266,"results":"53","hashOfConfig":"34"},{"size":1908,"mtime":1609252167307,"results":"54","hashOfConfig":"34"},{"size":704,"mtime":1608544241999,"results":"55","hashOfConfig":"34"},{"size":6414,"mtime":1609242400666,"results":"56","hashOfConfig":"34"},{"size":5670,"mtime":1609243039328,"results":"57","hashOfConfig":"34"},{"size":4310,"mtime":1609242944908,"results":"58","hashOfConfig":"34"},{"size":10644,"mtime":1609243069165,"results":"59","hashOfConfig":"34"},{"size":4393,"mtime":1609251699928,"results":"60","hashOfConfig":"34"},{"size":677,"mtime":1609231385791,"results":"61","hashOfConfig":"34"},{"size":751,"mtime":1608563473295,"results":"62","hashOfConfig":"34"},{"size":687,"mtime":1609052515513,"results":"63","hashOfConfig":"34"},{"size":5641,"mtime":1609035830430,"results":"64","hashOfConfig":"34"},{"size":3121,"mtime":1609251920425,"results":"65","hashOfConfig":"34"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},"utwymk",{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"81","messages":"82","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"68"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"86","messages":"87","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"68"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"68"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"68"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"68"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110","usedDeprecatedRules":"68"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"125","usedDeprecatedRules":"68"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"128","messages":"129","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130","usedDeprecatedRules":"68"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"137","usedDeprecatedRules":"68"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\index.js",[],["140","141"],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\App.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\reportWebVitals.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\contexts\\cellContext.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\contexts\\rowContext.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\contexts\\projectContext.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\PageSpreadsheet.jsx",["142","143","144","145","146","147"],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\contexts\\_createDataContext.js",["148"],"import React, { createContext, useReducer } from 'react';\r\n\r\n\r\nexport default (reducer, actions, initValue) => {\r\n\r\n    const Context = createContext();\r\n\r\n    const Provider = ({ children }) => {\r\n        const [state, dispatch] = useReducer(reducer, initValue);\r\n\r\n        const boundActions = {};\r\n        for (let key in actions) {\r\n            boundActions[key] = actions[key](dispatch);\r\n        };\r\n\r\n        return (\r\n            <Context.Provider value={{ state, ...boundActions }}>\r\n                {children}\r\n            </Context.Provider>\r\n        );\r\n    };\r\n    return { Context, Provider };\r\n};\r\n","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\PanelSetting.jsx",["149","150","151"],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\CellHeader.jsx",["152","153","154","155","156"],"import React from 'react';\r\n\r\n\r\nconst CellHeader = (props) => {\r\n\r\n    const { className, column, columns, columnIndex, onMouseDownColumnHeader, headerIndex, container } = props;\r\n\r\n\r\n    return (\r\n        <div\r\n            style={{\r\n                height: '100%',\r\n                width: '100%',\r\n                verticalAlign: 'middle',\r\n            }}\r\n            onMouseDown={(e) => onMouseDownColumnHeader(e, column.title)}\r\n        >\r\n            {column.title}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CellHeader;\r\n","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\Cell.jsx",["157","158","159","160","161"],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\PanelFunction.jsx",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\utils\\index.js",["162","163","164","165","166","167","168","169","170","171","172","173","174","175"],"import Axios from 'axios';\r\nimport _ from 'lodash';\r\n\r\n\r\n\r\n\r\nexport const formatStringNameToId = (str) => {\r\n    let mystring = str\r\n        .replace(/ /g, '')\r\n        .replace(/\\(|\\)/g, '')\r\n        .replace(/\\//g, '');\r\n\r\n    return mystring.charAt(0).toLowerCase() + mystring.slice(1);\r\n};\r\n\r\n\r\n\r\nexport const extractCellInfo = (key) => {\r\n    return {\r\n        rowId: key.slice(0, 24),\r\n        headerName: key.slice(25, key.length)\r\n    }\r\n};\r\n\r\n\r\nexport const mongoObjectId = () => {\r\n    var timestamp = (new Date().getTime() / 1000 | 0).toString(16);\r\n    return timestamp + 'xxxxxxxxxxxxxxxx'.replace(/[x]/g, function () {\r\n        return (Math.random() * 16 | 0).toString(16);\r\n    }).toLowerCase();\r\n};\r\n\r\n\r\nexport const getHeadersText = (headers) => {\r\n    if (!headers) return [];\r\n    let arr = [];\r\n    headers.forEach(hd => {\r\n        arr.push(hd.text);\r\n    });\r\n    return arr;\r\n};\r\n\r\nexport const getHeaderKey = (headers, headerText) => {\r\n    if (!headers) return;\r\n\r\n    return headers.find(hd => hd.text === headerText).key;\r\n};\r\n\r\n\r\n\r\nexport const groupRowsBy = (array, key) => {\r\n\r\n    return array.reduce((result, currentValue) => {\r\n        (result[currentValue[key]] = result[currentValue[key]] || []).push(\r\n            currentValue\r\n        );\r\n\r\n        return result;\r\n    }, {});\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport const mapSubRows = (rows) => {\r\n\r\n    if (!rows) return;\r\n\r\n    let rowsArr = rows.filter(r => r._rowLevel === 0);\r\n\r\n    if (rowsArr.length < 1) return rows;\r\n\r\n    let rowsSubArr = rows.filter(r => r._rowLevel === 1);\r\n    if (rowsSubArr.length < 1) return rows;\r\n\r\n    const rowsDataOutput = rowsArr.map(r => {\r\n        let subR = rowsSubArr.filter(rSub => rSub._parentRow === r.id);\r\n        return {\r\n            ...r, children: subR\r\n        }\r\n    });\r\n    return rowsDataOutput;\r\n};\r\n\r\n\r\n\r\n\r\nexport const groupByHeaders = (data, headers) => {\r\n    let res = [];\r\n    let _map = {};\r\n    // push all rowIds have children in here\r\n    let parentIdsArr = [];\r\n    let _mapParentIds = {};\r\n\r\n    for (let item of data) {\r\n        let _prevLevelKey = '';\r\n        let _prevLevelParent = null;\r\n        for (let i = 0; i < headers.length; i++) {\r\n            let arrayParent = i == 0 ? res : _prevLevelParent.children;\r\n\r\n            let header = headers[i];\r\n            let value = String(item[header]).trim() || '';\r\n\r\n            let levelKey = `${_prevLevelKey}_._${value}`;\r\n            let levelParentIndex = _map[levelKey];\r\n            let levelParent = arrayParent[levelParentIndex];\r\n\r\n            if (!levelParent) {\r\n                let iddd = mongoObjectId();\r\n                levelParent = _newParent(item, header, i, iddd);\r\n\r\n                _map[levelKey] = arrayParent.length;\r\n                arrayParent.push(levelParent);\r\n            };\r\n\r\n            levelParent.count++;\r\n            // levelParent[header] = `${item[header]}: (${levelParent.count} nos)`;\r\n            levelParent['Drawing Number'] = `${String(item[header]).toUpperCase()}: (${levelParent.count} nos)`;\r\n\r\n            if (!_mapParentIds[levelParent.id]) { // levelParent id not yet been push to parentIdsArr\r\n                parentIdsArr.push(levelParent.id);\r\n                _mapParentIds[levelParent.id] = true;\r\n            }\r\n\r\n            if (i == headers.length - 1) {\r\n                levelParent.children.push(item);\r\n            } else {\r\n                _prevLevelKey = levelKey;\r\n                _prevLevelParent = levelParent;\r\n            };\r\n        };\r\n    };\r\n\r\n    return {\r\n        rows: res,\r\n        expandedRows: parentIdsArr\r\n    };\r\n};\r\nfunction _newParent(item, header, level, iddd) {\r\n\r\n    return {\r\n        id: iddd,\r\n        _rowLevel: level,\r\n        [header]: `${item[header]}: (0 nos)`,\r\n        _src_header: item[header],\r\n        count: 0,\r\n        children: []\r\n    };\r\n};\r\n\r\nconst returnDate = (num) => {\r\n    let date = new Date();\r\n    date.setDate(date.getDate() + num);\r\n    return date;\r\n};\r\n\r\n\r\nexport const convertCellTempToHistory = (\r\n    cellsModifiedTemp,\r\n    stateProject\r\n) => {\r\n    const { username, publicSettings } = stateProject.allDataOneSheet;\r\n\r\n    const cellsHistoryData = Object.keys(cellsModifiedTemp).map(key => {\r\n        const { rowId, headerName, email } = extractCellInfo(key);\r\n\r\n        const dataOut = {\r\n            rowId,\r\n            headerKey: getHeaderKey(publicSettings.headers, headerName),\r\n            history: {\r\n                text: cellsModifiedTemp[key],\r\n                user: email,\r\n                username,\r\n                createdAt: new Date(),\r\n            }\r\n        };\r\n        return dataOut;\r\n    });\r\n    return cellsHistoryData;\r\n};\r\n\r\nexport const convertDrawingVersionToHistory = (\r\n    rowsHistory,\r\n    stateProject\r\n) => {\r\n    const { username, publicSettings } = stateProject.allDataOneSheet;\r\n\r\n    const rowsHistoryOutput = rowsHistory.map(rowsH => {\r\n        let obj = {};\r\n        publicSettings.headers.forEach(hd => {\r\n            if (rowsH[hd.text]) obj = { ...obj || {}, [hd.key]: rowsH[hd.text] };\r\n        });\r\n        return {\r\n            row: rowsH.id,\r\n            history: obj,\r\n            username\r\n        };\r\n    });\r\n    return rowsHistoryOutput;\r\n};\r\n\r\n\r\n\r\n\r\nexport const convertHistoryData = (data) => {\r\n    let arr = [];\r\n    data.forEach(ch => {\r\n        const { histories, headerKey, row } = ch;\r\n        histories.forEach(dt => {\r\n            arr.push({\r\n                ...dt,\r\n                headerKey, row\r\n            });\r\n        });\r\n    });\r\n    return arr\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport const addZero = (num) => {\r\n    if (num < 10) return '0' + num;\r\n    return num;\r\n};\r\n\r\nconst getRndInteger = (min, max) => {\r\n    return Math.floor(Math.random() * (max - min)) + min;\r\n};\r\n\r\n\r\nconst findHeaderId = (headers, headerName) => {\r\n    let header = headers.find(hd => hd.text === headerName);\r\n    return header.key;\r\n};\r\n\r\n\r\n\r\nexport const convertHeadersTextToKeyArray = (headersText, headers) => {\r\n\r\n    return headersText.map(hdText => {\r\n        let hdObj = headers.find(hd => hd.text === hdText);\r\n\r\n        return hdObj.key\r\n    });\r\n};\r\n\r\n\r\n\r\n\r\nconst _groupSubRowsByParentId = (subRows) => {\r\n    let groups = {};\r\n    for (let subRow of subRows) {\r\n        let parentId = subRow._parentRow;\r\n        let group = groups[parentId] || [];\r\n        groups[parentId] = group;\r\n        group.push(subRow);\r\n    };\r\n    return groups;\r\n};\r\nconst _filterRows = (rowsData) => {\r\n    let rows = [];\r\n    let subRowsLv1 = [];\r\n    let subRowsLv2 = [];\r\n\r\n    for (let rowData of rowsData) {\r\n        let level = rowData._rowLevel;\r\n        if (level === 0) {\r\n            rows.push(rowData);\r\n        } else if (level == 1) {\r\n            subRowsLv1.push(rowData);\r\n        } else if (level == 2) {\r\n            subRowsLv2.push(rowData);\r\n        };\r\n    };\r\n    return [rows, subRowsLv1, subRowsLv2];\r\n};\r\nexport const sortRowsReorder = (rowsData) => {\r\n    let [rows, subRowsLv1, subRowsLv2] = _filterRows(rowsData);\r\n    let rowsProcessed = [];\r\n    let groupSubRowsLv1 = _groupSubRowsByParentId(subRowsLv1);\r\n    let groupSubRowsLv2 = _groupSubRowsByParentId(subRowsLv2);\r\n\r\n    let firstRowIndex = rows.findIndex((row) => row._preRow === null);\r\n    if (firstRowIndex >= 0) {\r\n        let preRow = rows.splice(firstRowIndex, 1)[0];\r\n        while (preRow) {\r\n            rowsProcessed.push(preRow);\r\n\r\n            // sort & format subRowsLv1\r\n            let subRowsLv1 = groupSubRowsLv1[preRow.id] || [];\r\n            let firstSubRowLv1Index = subRowsLv1.findIndex(\r\n                (sr1) => sr1._preRow == null\r\n            );\r\n            if (firstSubRowLv1Index >= 0) {\r\n                let preSubRowLv1 = subRowsLv1.splice(firstSubRowLv1Index, 1)[0];\r\n                while (preSubRowLv1) {\r\n                    rowsProcessed.push(preSubRowLv1);\r\n\r\n                    // sort & format subRowsLv2\r\n                    let subRowsLv2 = groupSubRowsLv2[preSubRowLv1.id] || [];\r\n                    let firstSubRowLv2Index = subRowsLv2.findIndex(\r\n                        (sr2) => sr2._preRow == null\r\n                    );\r\n                    if (firstSubRowLv2Index >= 0) {\r\n                        let preSubRowLv2 = subRowsLv2.splice(firstSubRowLv2Index, 1)[0];\r\n                        while (preSubRowLv2) {\r\n                            rowsProcessed.push(preSubRowLv2);\r\n\r\n                            let nextSubRowLv2Index = subRowsLv2.findIndex(\r\n                                (sr2) => String(sr2._preRow) == String(preSubRowLv2.id)\r\n                            );\r\n                            if (nextSubRowLv2Index >= 0) {\r\n                                preSubRowLv2 = subRowsLv2.splice(nextSubRowLv2Index, 1)[0];\r\n                            } else {\r\n                                preSubRowLv2 = null;\r\n                            };\r\n                        };\r\n                    };\r\n\r\n                    let nextSubRowLv1Index = subRowsLv1.findIndex(\r\n                        (sr1) => String(sr1._preRow) == String(preSubRowLv1.id)\r\n                    );\r\n                    if (nextSubRowLv1Index >= 0) {\r\n                        preSubRowLv1 = subRowsLv1.splice(nextSubRowLv1Index, 1)[0];\r\n                    } else {\r\n                        preSubRowLv1 = null;\r\n                    };\r\n                };\r\n            };\r\n\r\n            let nextRowIndex = rows.findIndex(\r\n                (row) => String(row._preRow) == String(preRow.id)\r\n            );\r\n            if (nextRowIndex >= 0) {\r\n                preRow = rows.splice(nextRowIndex, 1)[0];\r\n            } else {\r\n                preRow = null;\r\n            };\r\n        };\r\n    };\r\n\r\n    return rowsProcessed;\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst saveRandomRows = async () => {\r\n    try {\r\n        let arrrows = [];\r\n        for (let i = 0; i < 1; i++) {\r\n            // const data = newObj2(stateProject.allDataOneSheet.publicSettings.headers);\r\n            const row = {\r\n                // data,\r\n                parentRow: '5fe979ed94100ae8c49c4afc',\r\n                preRow: null,\r\n                level: 1\r\n            };\r\n            arrrows.push(row);\r\n        };\r\n        await Axios.post(\r\n            // `${SERVER_URL}/sheet/update-rows/${projectId}`,\r\n            { rows: arrrows }\r\n        );\r\n    } catch (err) {\r\n        console.log(err);\r\n    };\r\n};\r\n\r\n\r\n// WORKING WITH SMARTHSHEET ..................................................................\r\n\r\nexport const getDataConvertedSmartsheet = (projectArray) => {\r\n\r\n    let dataOutput = {};\r\n    for (let i = 0; i < projectArray.length; i++) {\r\n\r\n        // get the column header\r\n        const project = projectArray[i];\r\n        const categoryArray = _.map(project.columns, 'title');\r\n        let columnsIndexArray = {};\r\n        categoryArray.forEach(cate => {\r\n            project.columns.forEach(cl => {\r\n                if (cl.title === cate) columnsIndexArray[cate] = cl.index;\r\n            });\r\n        });\r\n\r\n        const indexDrawingName = columnsIndexArray['Drawing Name'];\r\n        const indexRev = columnsIndexArray['Rev'];\r\n\r\n        let allDrawings = [];\r\n        let allDrawingsLatestRevision = [];\r\n\r\n        for (let i = 0; i < project.rows.length; i++) {\r\n            const dwg = project.rows[i];\r\n            if (dwg.cells[indexDrawingName].value === undefined) continue; // make sure all drawing name is keyed in\r\n            allDrawings.push([...dwg.cells]);\r\n\r\n            if (dwg.cells[indexRev].value === undefined) {\r\n                allDrawingsLatestRevision.push([...dwg.cells]);\r\n                continue;\r\n            };\r\n\r\n            let found = false;\r\n            for (let j = 0; j < allDrawingsLatestRevision.length; j++) {\r\n\r\n                if (allDrawingsLatestRevision[j][indexDrawingName].value === dwg.cells[indexDrawingName].value) {\r\n\r\n                    found = true;\r\n                    if (String(allDrawingsLatestRevision[j][indexRev].value) < String(dwg.cells[indexRev].value)) {\r\n                        allDrawingsLatestRevision.splice(j, 1);\r\n                        allDrawingsLatestRevision.push([...dwg.cells]);\r\n                    };\r\n                    break;\r\n                };\r\n            };\r\n            if (!found) allDrawingsLatestRevision.push([...dwg.cells]);\r\n        };\r\n\r\n\r\n        dataOutput[project.name.slice(0, project.name.length - 17)] = {\r\n            columnsIndexArray: columnsIndexArray,\r\n            allDrawings,\r\n            allDrawingsLatestRevision,\r\n            allDrawingsSorted: pickDataToTable(allDrawings, columnsIndexArray)\r\n        };\r\n    };\r\n    return dataOutput;\r\n};\r\n\r\nconst pickDataToTable = (drawings, columnsIndexArray) => {\r\n    let arrayDrw = [];\r\n    drawings.forEach(dwg => {\r\n        let objDwg = {};\r\n        Object.keys(columnsIndexArray).forEach(header => {\r\n\r\n            if (header === 'Rev') {\r\n                objDwg[checkSpelling(header)] = dwg[columnsIndexArray[header]].displayValue;\r\n            } else {\r\n                if (dwg[columnsIndexArray[header]].value) {\r\n                    objDwg[checkSpelling(header)] = dwg[columnsIndexArray[header]].value;\r\n                };\r\n            };\r\n\r\n        });\r\n        arrayDrw.push(objDwg);\r\n    });\r\n    return arrayDrw;\r\n};\r\n\r\n\r\nconst checkSpelling = (header) => {\r\n    if (header === 'Construction issuance date') return 'Construction Issuance Date';\r\n    if (header === 'Drg to Consultant (T)') return 'Drg To Consultant (T)';\r\n    if (header === 'Drg to Consultant (A)') return 'Drg To Consultant (A)';\r\n    if (header === 'get Approval (A)') return 'Get Approval (A)';\r\n    if (header === 'get Approval (T)') return 'Get Approval (T)';\r\n    return header;\r\n};\r\n\r\n\r\n\r\nexport const getHeaderWidth = (header) => {\r\n\r\n    if (header === 'RFA Ref') return 170;\r\n    else if (\r\n        header === 'Block/Zone' ||\r\n        header === 'Level' || header === 'Unit/CJ' ||\r\n        header === 'Drg Type' || header === 'Use For' ||\r\n        header === 'Coordinator In Charge' || header === 'Modeller' ||\r\n        header === 'Model Progress' || header === 'Drawing Progress' ||\r\n        header === 'Construction Start'\r\n    ) return 100;\r\n    else if (header === 'Construction Issuance Date') return 120;\r\n    else if (header === 'Drawing') return 100;\r\n\r\n    else if (\r\n        header === 'Drg To Consultant (A)' ||\r\n        header === 'Drg To Consultant (T)' ||\r\n        header === 'Get Approval (A)' ||\r\n        header === 'Get Approval (T)'\r\n    ) return 120;\r\n\r\n    else if (header.includes('(A)') || header.includes('(T)')) return 90;\r\n\r\n\r\n\r\n\r\n    else if (header === 'Rev') return 50;\r\n    else if (header === 'Status') return 280;\r\n    else if (header === 'Remark') return 120;\r\n    else if (header === 'Drawing Number') return 270;\r\n    else if (header === 'Drawing Name') return 450;\r\n    else return 300;\r\n\r\n};\r\n\r\n\r\nexport const getActionName = (type) => {\r\n    if (type === 'filter-ICON') return 'Create New Filter';\r\n    if (type === 'reorderColumn-ICON') return 'Columns Layout';\r\n    if (type === 'group-ICON') return 'Group Data';\r\n    if (type === 'sort-ICON') return 'Sort Data';\r\n    if (type === 'rollback-ICON') return 'Clear Filter/Sort/Group/Search';\r\n    if (type === 'addDrawingType-ICON') return 'Drawing Type Organization';\r\n    if (type === 'color-cell-history-ICON') return 'Check Data Changed';\r\n    if (type === 'View Cell History') return 'Cell History';\r\n    else return '';\r\n};\r\n\r\n\r\n\r\n\r\n\r\nconst createParentRows = (arr) => {\r\n    let newRows = [];\r\n    arr.forEach((title, i) => {\r\n        newRows.push({\r\n            _id: mongoObjectId(),\r\n            _rowLevel: 0,\r\n            _parentRow: null,\r\n            _preRow: i === 0 ? null : newRows[i - 1]._id,\r\n            'Drawing Number': title\r\n        });\r\n    });\r\n    return newRows;\r\n};\r\nconst getParentRowsHandy = () => {\r\n\r\n    let arrParentTitle = [\r\n        'COLUMN AND WALL SETTING OUT Keyplan',\r\n        'UNIT TYPE LAYOUT TSO Plan',\r\n        'STAIRCASES and LIFT LOBBIES',\r\n        'ANCILLARY STRUCTURES',\r\n        'No Name 1',\r\n        'No Name 2',\r\n        'PBU Tile layout',\r\n        'Tile layout',\r\n        'Clubhouse',\r\n        'RCP',\r\n        'RCP Unit type',\r\n        'RCP Clubhouse',\r\n        'Swimming Pool',\r\n        'External Sections/ Elevations',\r\n        'Driveway/ Pavement',\r\n        'No Name 3',\r\n        'No Name 4',\r\n        'Carpark Details',\r\n        'M&E Details',\r\n        'FAÇADE Maintenance',\r\n        'No Name 5',\r\n        'TOILETS Details',\r\n    ];\r\n\r\n    let rows = createParentRows(arrParentTitle);\r\n    return rows;\r\n};\r\nexport const getCurrentAndHistoryDrawings = (rows, headers) => {\r\n\r\n    let obj = {};\r\n    rows.forEach(r => {\r\n        const key = `${r['Drawing Number'] || ''}-${r['Drawing Name'] || ''}`;\r\n        obj[key] = [...obj[key] || [], r];\r\n    });\r\n\r\n\r\n    let parentRows = getParentRowsHandy();\r\n    let historyOutput = [];\r\n    let objOutput = [];\r\n\r\n    Object.keys(obj).forEach((key, i) => {\r\n\r\n        const arr = obj[key];\r\n        arr.sort((a, b) => (a['Rev'].toLowerCase() > b['Rev'].toLowerCase()) ? 1 : ((b['Rev'].toLowerCase() > a['Rev'].toLowerCase()) ? -1 : 0));\r\n\r\n        let rowsHistory = arr.filter((r, index) => index < arr.length - 1);\r\n\r\n        let rowId = mongoObjectId();\r\n\r\n        if (rowsHistory.length > 0) {\r\n            let rowsHistoryOutput = rowsHistory.map(r => {\r\n                let rowDataObj = { row: rowId };\r\n\r\n                headers.forEach(hd => {\r\n                    if (r[hd.text]) rowDataObj.history = { ...rowDataObj.history || {}, [hd.key]: r[hd.text] };\r\n                });\r\n                return rowDataObj;\r\n            });\r\n            historyOutput = [...historyOutput, ...rowsHistoryOutput];\r\n        };\r\n\r\n\r\n        let rowCurrent = arr[arr.length - 1];\r\n        let rowCurrentOutput = {};\r\n\r\n        headers.forEach(hd => {\r\n            if (rowCurrent[hd.text]) rowCurrentOutput.data = { ...rowCurrentOutput.data || {}, [hd.key]: rowCurrent[hd.text] };\r\n        });\r\n\r\n        rowCurrentOutput._id = rowId;\r\n        rowCurrentOutput.parentRow = i === 0 ? null : parentRows[getParentId(i)]._id;\r\n        rowCurrentOutput.preRow = returnPreRowNull(i) ? null : objOutput[i - 1]._id;\r\n        rowCurrentOutput.level = 1;\r\n\r\n        objOutput.push(rowCurrentOutput);\r\n    });\r\n\r\n    objOutput.splice(0, 1);\r\n\r\n\r\n    const parentRowsOutput = parentRows.map(r => {\r\n        const { _id, _rowLevel, _parentRow, _preRow } = r;\r\n\r\n        let rowDTObj = {};\r\n        headers.forEach(hd => {\r\n            if (r[hd.text]) rowDTObj = { ...rowDTObj || {}, [hd.key]: r[hd.text] };\r\n        });\r\n        return {\r\n            _id,\r\n            level: _rowLevel,\r\n            parentRow: _parentRow,\r\n            preRow: _preRow,\r\n            data: rowDTObj\r\n        };\r\n    });\r\n\r\n\r\n\r\n    return {\r\n        rows: [...parentRowsOutput, ...objOutput],\r\n        historyRows: historyOutput\r\n    };\r\n};\r\nconst getParentId = (i) => {\r\n    if (i >= 1 && i < 20) return 0;\r\n    if (i >= 20 && i < 42) return 1;\r\n    if (i >= 42 && i < 60) return 2;\r\n    if (i >= 60 && i < 76) return 3;\r\n    if (i >= 76 && i < 81) return 4;\r\n    if (i >= 81 && i < 87) return 5;\r\n    if (i >= 87 && i < 99) return 6;\r\n    if (i >= 99 && i < 109) return 7;\r\n    if (i >= 109 && i < 112) return 8;\r\n    if (i >= 112 && i < 126) return 9;\r\n    if (i >= 126 && i < 147) return 10;\r\n    if (i >= 147 && i < 150) return 11;\r\n    if (i >= 150 && i < 155) return 12;\r\n    if (i >= 155 && i < 159) return 13;\r\n    if (i >= 159 && i < 163) return 14;\r\n    if (i >= 163 && i < 167) return 15;\r\n    if (i >= 167 && i < 171) return 16;\r\n    if (i >= 171 && i < 174) return 17;\r\n    if (i >= 174 && i < 179) return 18;\r\n    if (i >= 179 && i < 181) return 19;\r\n    if (i >= 181 && i < 184) return 20;\r\n    if (i >= 184 && i < 193) return 21;\r\n};\r\nconst returnPreRowNull = (i) => {\r\n    if (\r\n        i === 0 ||\r\n        i === 1 ||\r\n        i === 20 ||\r\n        i === 42 ||\r\n        i === 60 ||\r\n        i === 76 ||\r\n        i === 81 ||\r\n        i === 87 ||\r\n        i === 99 ||\r\n        i === 109 ||\r\n        i === 112 ||\r\n        i === 126 ||\r\n        i === 147 ||\r\n        i === 150 ||\r\n        i === 155 ||\r\n        i === 159 ||\r\n        i === 163 ||\r\n        i === 167 ||\r\n        i === 171 ||\r\n        i === 174 ||\r\n        i === 179 ||\r\n\r\n        i === 181 ||\r\n        i === 184\r\n    ) {\r\n        return true;\r\n    } else return false;\r\n};","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\constants\\index.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\PanelCalendar.jsx",["176","177"],"import { Calendar, Radio } from 'antd';\r\nimport React from 'react';\r\n\r\n\r\nconst { Group, Button } = Radio;\r\n\r\n\r\nconst PanelCalendar = ({ pickDate }) => {\r\n\r\n    return (\r\n        <div style={{ width: 300 }}>\r\n            <Calendar\r\n                fullscreen={false}\r\n                onSelect={pickDate}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default PanelCalendar;\r\n","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\ReorderColumnForm.jsx",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\ColorizedForm.jsx",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\TableDrawingDetail.jsx",["178","179","180"],"\r\nimport Axios from 'axios';\r\nimport React, { useContext, useEffect, useState } from 'react';\r\nimport BaseTable, { AutoResizer } from 'react-base-table';\r\nimport styled from 'styled-components';\r\nimport { colorType, SERVER_URL } from '../../constants';\r\nimport { Context as ProjectContext } from '../../contexts/projectContext';\r\nimport { Context as RowContext } from '../../contexts/rowContext';\r\nimport { getHeaderWidth, mongoObjectId } from '../../utils';\r\n\r\n\r\nconst Table = (props) => {\r\n    return (\r\n        <AutoResizer>\r\n            {({ width, height }) => {\r\n                return (\r\n                    <BaseTable\r\n                        {...props}\r\n                        width={width}\r\n                        height={height}\r\n                    />\r\n                );\r\n            }}\r\n        </AutoResizer>\r\n    );\r\n};\r\n\r\n\r\nconst TableDrawingDetail = (props) => {\r\n\r\n\r\n    const { rowData } = props;\r\n    const { state: stateProject } = useContext(ProjectContext);\r\n    const { state: stateRow } = useContext(RowContext);\r\n\r\n    const [rowsHistoryDatabase, setRowsHistoryDatabase] = useState(null);\r\n    const [rowsHistoryPrevious, setRowsHistoryPrevious] = useState([]);\r\n    const [rowCurrent, setRowCurrent] = useState(null);\r\n\r\n\r\n    useEffect(() => {\r\n        const fetchRowsHistory = async () => {\r\n            try {\r\n                const res = await Axios.get(`${SERVER_URL}/row/history/${stateProject.allDataOneSheet._id}/${rowData.id}`);\r\n                let rowsHistory = [];\r\n                res.data.map((r, i) => {\r\n                    const { history } = r;\r\n                    const { headers } = stateProject.allDataOneSheet.publicSettings;\r\n                    let data = { id: mongoObjectId() };\r\n                    Object.keys(history).map(key => {\r\n                        const hdText = headers.find(hd => hd.key === key).text;\r\n                        data[hdText] = history[key];\r\n                    });\r\n                    rowsHistory.push(data);\r\n                });\r\n                setRowsHistoryDatabase(rowsHistory);\r\n\r\n\r\n                let rowsHistoryPrevious = [];\r\n                if (stateRow.rowsVersionsToSave) {\r\n                    rowsHistoryPrevious = stateRow.rowsVersionsToSave.filter(r => r.id === rowData.id);\r\n                    rowsHistoryPrevious.forEach((r, i) => {\r\n                        r.id = mongoObjectId();\r\n                    });\r\n                    setRowsHistoryPrevious(rowsHistoryPrevious);\r\n                };\r\n\r\n\r\n                setRowCurrent({\r\n                    ...rowData,\r\n                    key: rowsHistory.length + rowsHistoryPrevious.length + 1\r\n                });\r\n\r\n\r\n\r\n            } catch (err) {\r\n                console.log(err);\r\n            };\r\n        };\r\n        fetchRowsHistory();\r\n    }, []);\r\n\r\n    let data;\r\n    if (rowsHistoryDatabase && rowCurrent) {\r\n        data = [\r\n            ...rowsHistoryDatabase,\r\n            ...rowsHistoryPrevious,\r\n            rowCurrent\r\n        ];\r\n    };\r\n\r\n    const panelWidth = window.innerWidth * 0.8;\r\n    const panelHeight = window.innerHeight * 0.8;\r\n\r\n\r\n    return (\r\n        <div style={{\r\n            height: panelHeight,\r\n            background: 'white',\r\n            padding: 10,\r\n            display: 'flex',\r\n            justifyContent: 'center',\r\n            flexDirection: 'column',\r\n        }}>\r\n\r\n            {rowsHistoryDatabase && rowCurrent && (\r\n                <>\r\n                    <div style={{\r\n                        width: panelWidth,\r\n                        height: 100 + data.length * 30,\r\n                        margin: '0 auto',\r\n                        textAlign: 'center'\r\n                    }}>\r\n                        <div style={{ fontSize: 20, fontWeight: 'bold' }}>DRAWING HISTORY</div>\r\n                        <TableStyled\r\n                            fixed\r\n                            columns={generateColumns(getHeadersText(stateProject.allDataOneSheet.publicSettings.headers))}\r\n                            data={data}\r\n                            rowHeight={28}\r\n                        />\r\n\r\n                    </div>\r\n\r\n                    <div style={{\r\n                        margin: '0 auto',\r\n                        textAlign: 'center',\r\n                        marginTop: 100\r\n                    }}>\r\n                        <img src='./img/timeline.JPG' alt='visualize' height={panelHeight - (100 + data.length * 30) - 100} />\r\n                    </div>\r\n                </>\r\n            )}\r\n\r\n\r\n\r\n        </div>\r\n\r\n    );\r\n};\r\n\r\nexport default TableDrawingDetail;\r\n\r\n\r\nconst generateColumns = (headers) => headers.map((column, columnIndex) => ({\r\n\r\n    key: column,\r\n    dataKey: column,\r\n    title: column,\r\n    resizable: true,\r\n    width: getHeaderWidth(column),\r\n}));\r\n\r\nconst getHeadersText = (headersData) => {\r\n    return headersData.map(hd => {\r\n        return hd.text;\r\n    });\r\n};\r\n\r\n\r\n\r\n\r\nconst TableStyled = styled(Table)`\r\n\r\n    .BaseTable__table .BaseTable__body {\r\n\r\n        -webkit-touch-callout: none;\r\n        -webkit-user-select: none;\r\n        -khtml-user-select: none;\r\n        -moz-user-select: none;\r\n        -ms-user-select: none;\r\n        user-select: none;\r\n\r\n        ::-webkit-scrollbar {\r\n            -webkit-appearance: none;\r\n            background-color: #e3e3e3;\r\n        }\r\n\r\n        ::-webkit-scrollbar:vertical {\r\n            width: 15px;\r\n        }\r\n\r\n        ::-webkit-scrollbar:horizontal {\r\n            height: 15px;\r\n        }\r\n\r\n        ::-webkit-scrollbar-thumb {\r\n            border-radius: 10px;\r\n            border: 2px solid #e3e3e3;\r\n            background-color: #999;\r\n\r\n            &:hover {\r\n                background-color: #666;\r\n            }\r\n        }\r\n\r\n        ::-webkit-resizer {\r\n            display: none;\r\n        }\r\n\r\n        .BaseTable__row-cell-text {\r\n            color: black\r\n        }\r\n    }\r\n\r\n    .BaseTable__header-cell {\r\n        padding: 10px;\r\n        border-right: 1px solid #DCDCDC;\r\n\r\n        background: ${colorType.grey1};\r\n        color: black\r\n    }\r\n\r\n    .BaseTable__row-cell {\r\n        padding: 10px;\r\n        border-right: 1px solid #DCDCDC;\r\n\r\n        overflow: visible !important;\r\n    }\r\n\r\n\r\n\r\n\r\n`;\r\n\r\n","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\TableCellHistory.jsx",["181","182"],"import { List } from 'antd';\r\nimport Axios from 'axios';\r\nimport React, { useContext, useEffect, useState } from 'react';\r\nimport { SERVER_URL } from '../../constants';\r\nimport { Context as ProjectContext } from '../../contexts/projectContext';\r\nimport { Context as RowContext } from '../../contexts/rowContext';\r\n\r\n\r\nconst TableCellHistory = (props) => {\r\n\r\n    const { rowData, column } = props;\r\n\r\n    const {\r\n        state: stateProject\r\n    } = useContext(ProjectContext);\r\n\r\n    const {\r\n        state: stateRow\r\n    } = useContext(RowContext);\r\n\r\n    const projectId = stateProject.allDataOneSheet.projectId;\r\n    const headers = stateProject.allDataOneSheet.publicSettings.headers;\r\n    const headerKey = headers.find(hd => hd.text === column.key).key;\r\n\r\n\r\n    const [history, setHistory] = useState()\r\n\r\n    useEffect(() => {\r\n        const fetchCellHistory = async () => {\r\n            try {\r\n\r\n                const res = await Axios.get(`${SERVER_URL}/cell/history/${projectId}/${rowData.id}/${headerKey}`);\r\n\r\n                setHistory(res.data.histories.reverse());\r\n\r\n            } catch (err) {\r\n                console.log(err);\r\n            };\r\n        };\r\n        fetchCellHistory();\r\n    }, [])\r\n\r\n\r\n    return (\r\n        <div style={{ width: '100%', padding: 15 }}>\r\n            <List\r\n                size='small'\r\n                header={null}\r\n                footer={null}\r\n                bordered\r\n                dataSource={history}\r\n                renderItem={item => (\r\n                    <List.Item>\r\n                        <div>\r\n                            <div>{`${item.username}`}</div>\r\n                            <div style={{ fontSize: 12, color: 'grey' }}>{item.createdAt}</div>\r\n                            <div style={{ fontWeight: 'bold' }}>{item.text}</div>\r\n                        </div>\r\n                    </List.Item>\r\n                )}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default TableCellHistory;\r\n","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\InputSearch.jsx",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\IconTable.jsx",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\CellIndex.jsx",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\FormSort.jsx",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\FormFilter.jsx",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\FormGroup.jsx",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\TableActivityHistory.jsx",["183","184","185","186","187","188","189","190"],"import { Button, Input } from 'antd';\r\nimport Axios from 'axios';\r\nimport React, { useContext, useEffect, useState } from 'react';\r\nimport BaseTable, { AutoResizer } from 'react-base-table';\r\nimport styled from 'styled-components';\r\nimport { colorType, SERVER_URL } from '../../constants';\r\nimport { Context as ProjectContext } from '../../contexts/projectContext';\r\nimport { Context as RowContext } from '../../contexts/rowContext';\r\nimport { convertHistoryData, mongoObjectId } from '../../utils';\r\n\r\n\r\n\r\nconst Table = (props) => {\r\n    return (\r\n        <AutoResizer>\r\n            {({ width, height }) => {\r\n                return (\r\n                    <BaseTable\r\n                        {...props}\r\n                        width={width}\r\n                        height={height}\r\n                    />\r\n                );\r\n            }}\r\n        </AutoResizer>\r\n    );\r\n};\r\n\r\nconst panelWidth = window.innerWidth * 0.8;\r\nconst panelHeight = window.innerHeight * 0.8;\r\n\r\nconst TableActivityHistory = (props) => {\r\n\r\n    const { rowData } = props;\r\n    const { state: stateProject } = useContext(ProjectContext);\r\n    const { state: stateRow } = useContext(RowContext);\r\n\r\n    const projectId = stateProject.allDataOneSheet.projectId;\r\n    const headers = stateProject.allDataOneSheet.publicSettings.headers;\r\n\r\n    const [historyAll, setHistoryAll] = useState(null);\r\n\r\n\r\n    const headersShown = [\r\n        'Drawing Number',\r\n        'Drawing Name',\r\n        'Column',\r\n        'Value',\r\n        'User',\r\n        'Created At',\r\n        'Action'\r\n    ];\r\n\r\n    useEffect(() => {\r\n        const fetchRowsAndCellHistory = async () => {\r\n            try {\r\n                const resRows = await Axios.get(`${SERVER_URL}/row/history/${projectId}`);\r\n                const resCells = await Axios.get(`${SERVER_URL}/cell/history/${projectId}`);\r\n                // console.log(resRows.data, resCells.data);\r\n\r\n                const rowsOutput = resRows.data.map(row => {\r\n                    const { history } = row;\r\n                    const revKey = headers.find(hd => hd.text === 'Rev').key;\r\n                    const statusKey = headers.find(hd => hd.text === 'Status').key;\r\n                    const dwgNumber = headers.find(hd => hd.text === 'Drawing Number').key;\r\n                    const dwgName = headers.find(hd => hd.text === 'Drawing Name').key;\r\n\r\n                    return {\r\n                        'Drawing Number': history[dwgNumber],\r\n                        'Drawing Name': history[dwgName],\r\n                        'Column': 'Rev & Status',\r\n                        'Value': `${history[revKey]} - ${history[statusKey]}`,\r\n                        'User': row.username || 'n/a',\r\n                        'Created At': row.createdAt,\r\n                        'Action': 'Save Drawing Version',\r\n                        id: mongoObjectId()\r\n                    }\r\n                });\r\n\r\n                const cellsOutput = convertHistoryData(resCells.data).map(cell => {\r\n\r\n                    const row = stateRow.rowsAll.find(r => r.id === cell.row);\r\n\r\n                    return {\r\n                        'Drawing Number': row['Drawing Number'],\r\n                        'Drawing Name': row['Drawing Name'],\r\n                        'Column': headers.find(hd => hd.key === cell.headerKey).text,\r\n                        'Value': cell.text,\r\n                        'User': cell.username || 'n/a',\r\n                        'Created At': cell.createdAt,\r\n                        'Action': 'Edit Cell',\r\n                        id: mongoObjectId()\r\n                    };\r\n                });\r\n\r\n                const dummy = [\r\n                    {\r\n                        'Drawing Number': 'HAN_WH_A_CS_KP_01S_01',\r\n                        'Drawing Name': 'Level 2 Column and Wall Setting Out Keyplan',\r\n                        'User': 'user...',\r\n                        'Created At': '12/11/2020',\r\n                        'Action': 'Delete Drawing',\r\n                        id: mongoObjectId()\r\n                    },\r\n                    {\r\n                        'Drawing Number': 'HAN_WH_A_CS_KP_01S_34',\r\n                        'Drawing Name': 'Level 8 Column and Wall',\r\n                        'User': 'user...',\r\n                        'Created At': '13/10/2020',\r\n                        'Action': 'Delete Drawing',\r\n                        id: mongoObjectId()\r\n                    },\r\n                ];\r\n\r\n\r\n                let outputArr = [...rowsOutput, ...dummy, ...cellsOutput].sort((b, a) => a['Created At'] > b['Created At'] ? 1 : b['Created At'] > a['Created At'] ? -1 : 0);\r\n\r\n                setHistoryAll(outputArr);\r\n\r\n            } catch (err) {\r\n                console.log(err);\r\n            };\r\n        };\r\n        fetchRowsAndCellHistory();\r\n    }, []);\r\n\r\n\r\n    const [historyData, setHistoryData] = useState([]);\r\n\r\n    const [data, setData] = useState([]);\r\n\r\n    const [valueStart, setValueStart] = useState('12/01/20');\r\n    const [valueEnd, setValueEnd] = useState('22/05/21');\r\n\r\n    const onClick = () => {\r\n        // let start = moment(moment(valueStart,'DD/MM/YY').format('MM/DD/YY')).toDate();\r\n        // let end = moment(moment(valueEnd,'DD/MM/YY').format('MM/DD/YY')).toDate();\r\n\r\n        // if (start > end) return;\r\n\r\n        // let filterCells = convertHistoryData(historyData).filter(cell => {\r\n        //     let createdAt = moment(cell.createdAt).toDate()\r\n        //     return createdAt >= start && createdAt <= end;\r\n        // });\r\n\r\n        // setData(filterCells.map(cell => {\r\n        //     let drawingData = getDrawingName(\r\n        //         stateProject.allDataOneSheet.publicSettings.headers,\r\n        //         stateRow.rowsAll,\r\n        //         cell.row,\r\n        //         cell.headerKey\r\n        //     );\r\n        //     let obj = {\r\n        //         id: mongoObjectId(),\r\n        //         'Drawing Name': drawingData.drawingName,\r\n        //         'Drawing Number': drawingData.drawingNumber,\r\n        //         Column: drawingData.headerText,\r\n        //         Value: cell.text,\r\n        //         'Created At': moment(cell.createdAt).format('DD/MM/YY HH:mm:ss'),\r\n        //         User: cell.username\r\n        //     };\r\n        //     return obj;\r\n        // }));\r\n\r\n    };\r\n\r\n\r\n\r\n    return (\r\n        <>\r\n            {historyAll && (\r\n                <div style={{\r\n                    height: panelHeight,\r\n                    background: 'white',\r\n                    padding: 10,\r\n                    display: 'flex',\r\n                    justifyContent: 'center',\r\n                    flexDirection: 'column',\r\n                }}>\r\n                    <div style={{ display: 'flex', marginBottom: 10 }}>\r\n                        <Input\r\n                            placeholder='From Date...'\r\n                            onChange={(e) => setValueStart(e.target.value)}\r\n                            value={valueStart}\r\n                            style={{}}\r\n                        />\r\n                        <Input\r\n                            placeholder='To Date...'\r\n                            onChange={(e) => setValueEnd(e.target.value)}\r\n                            value={valueEnd}\r\n                            style={{}}\r\n                        />\r\n                        <Button type='primary' onClick={onClick}>Check</Button>\r\n                    </div>\r\n                    <div style={{ display: 'flex', justifyContent: 'space-between', marginBottom: 20, width: '35%' }}>\r\n                        <Button>Last 7 Days</Button>\r\n                        <Button>Last 14 Days</Button>\r\n                        <Button>This Month</Button>\r\n                    </div>\r\n\r\n                    <div style={{\r\n                        width: panelWidth,\r\n                        height: '100%',\r\n                        margin: '0 auto',\r\n                        textAlign: 'center'\r\n                    }}>\r\n                        <TableStyled\r\n                            fixed\r\n                            columns={generateColumns(headersShown)}\r\n                            data={historyAll}\r\n                            rowHeight={28}\r\n                        />\r\n                    </div>\r\n                </div>\r\n            )}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default TableActivityHistory;\r\n\r\n\r\nconst generateColumns = (headers) => headers.map((column, columnIndex) => ({\r\n\r\n    key: column,\r\n    dataKey: column,\r\n    title: column,\r\n    resizable: true,\r\n    width: getHeaderWidth2(column),\r\n}));\r\nconst getHeaderWidth2 = (header) => {\r\n    if (header === 'Drawing Number') return 300;\r\n    if (header === 'Drawing Name') return 300;\r\n    if (header === 'Column') return 200;\r\n    if (header === 'Value') return 300;\r\n    if (header === 'User') return 200;\r\n    if (header === 'Created At') return 200;\r\n    if (header === 'Action') return 200;\r\n};\r\nconst getHeadersText = (headersData) => {\r\n    return headersData.map(hd => {\r\n        return hd.text;\r\n    });\r\n};\r\n\r\nconst getDrawingName = (headers, rowsAll, rowId, headerId) => {\r\n\r\n    let row = rowsAll.find(r => r.id === rowId);\r\n    let headerText = headers.find(hd => hd.key === headerId)['text'];\r\n\r\n    return {\r\n        headerText,\r\n        drawingName: row['Drawing Name'],\r\n        drawingNumber: row['Drawing Number'],\r\n    }\r\n};\r\n\r\n\r\nconst TableStyled = styled(Table)`\r\n\r\n    .BaseTable__table .BaseTable__body {\r\n\r\n        -webkit-touch-callout: none;\r\n        -webkit-user-select: none;\r\n        -khtml-user-select: none;\r\n        -moz-user-select: none;\r\n        -ms-user-select: none;\r\n        user-select: none;\r\n\r\n        ::-webkit-scrollbar {\r\n            -webkit-appearance: none;\r\n            background-color: #e3e3e3;\r\n        }\r\n\r\n        ::-webkit-scrollbar:vertical {\r\n            width: 15px;\r\n        }\r\n\r\n        ::-webkit-scrollbar:horizontal {\r\n            height: 15px;\r\n        }\r\n\r\n        ::-webkit-scrollbar-thumb {\r\n            border-radius: 10px;\r\n            border: 2px solid #e3e3e3;\r\n            background-color: #999;\r\n\r\n            &:hover {\r\n                background-color: #666;\r\n            }\r\n        }\r\n\r\n        ::-webkit-resizer {\r\n            display: none;\r\n        }\r\n\r\n        .BaseTable__row-cell-text {\r\n            color: black\r\n        }\r\n    }\r\n\r\n    .BaseTable__header-cell {\r\n        padding: 10px;\r\n        border-right: 1px solid #DCDCDC;\r\n\r\n        background: ${colorType.grey1};\r\n        color: black\r\n    }\r\n\r\n    .BaseTable__row-cell {\r\n        padding: 10px;\r\n        border-right: 1px solid #DCDCDC;\r\n\r\n        overflow: visible !important;\r\n    }\r\n\r\n\r\n\r\n\r\n`;\r\n\r\n\r\n\r\n\r\n","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\FormDateAutomation.jsx",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\ButtonStyle.jsx",["191"],"import { Button } from 'antd';\r\nimport React from 'react';\r\n\r\nconst ButtonStyle = ({\r\n    colorText,\r\n    marginRight,\r\n    borderColor,\r\n    marginBottom,\r\n    background,\r\n    name,\r\n    onClick\r\n}) => {\r\n\r\n    return (\r\n        <Button \r\n            style={{\r\n                borderRadius: 0,\r\n                background: background,\r\n                color: colorText,\r\n                border: 'none',\r\n                marginRight,\r\n                marginBottom,\r\n                border: `1px solid ${borderColor || background}`\r\n            }}\r\n            onClick={onClick}\r\n        >\r\n            {name}\r\n        </Button>\r\n    );\r\n};\r\n\r\nexport default ButtonStyle;\r\n\r\n\r\n","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\ButtonGroupComp.jsx",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\PanelConfirm.jsx",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\FormDrawingTypeOrder.jsx",["192","193"],"import { Icon } from 'antd';\r\nimport React, { useContext, useEffect, useRef, useState } from 'react';\r\nimport { DraggableArea } from 'react-draggable-tags';\r\nimport styled from 'styled-components';\r\nimport { colorType } from '../../constants';\r\nimport { Context as ProjectContext } from '../../contexts/projectContext';\r\nimport { Context as RowContext } from '../../contexts/rowContext';\r\nimport { mongoObjectId } from '../../utils';\r\nimport ButtonGroupComp from './ButtonGroupComp';\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst FormDrawingTypeOrder = ({ onClickCancelModal, applyFolderOrganize }) => {\r\n\r\n   const { state: stateProject } = useContext(ProjectContext);\r\n   const { state: stateRow } = useContext(RowContext);\r\n\r\n   const folders = stateRow.rowsAll\r\n      .filter(r => r._rowLevel === 0);\r\n\r\n\r\n   const getTags = () => {\r\n      let arr = [];\r\n      folders.forEach((row) => {\r\n         arr.push({\r\n            id: row.id,\r\n            header: row['Drawing Number'],\r\n         });\r\n      });\r\n      return arr;\r\n   };\r\n\r\n   const [tags, setTags] = useState(getTags());\r\n\r\n   const addNewFolder = ({ index }) => {\r\n      let newTags = [...tags];\r\n      newTags.splice(index + 1, 0, {\r\n         id: mongoObjectId(),\r\n         header: 'New Drawing Type',\r\n      });\r\n      setTags(newTags);\r\n   };\r\n\r\n\r\n   const updateFolderName = (tag, index, value) => {\r\n      tags[index].header = value;\r\n      setTags(tags);\r\n   };\r\n\r\n\r\n   const onClickApply = () => {\r\n      applyFolderOrganize(tags);\r\n   };\r\n\r\n\r\n   return (\r\n      <Container>\r\n\r\n         <PanelStyled>\r\n\r\n            <ButtonFolder>\r\n               <Icon type='folder' style={{ transform: 'translate(0, 3px)', marginRight: 5, color: 'grey' }} />\r\n               <div>{stateProject.allDataOneSheet.projectName.toUpperCase()}</div>\r\n            </ButtonFolder>\r\n\r\n            <DraggableArea\r\n               isList\r\n               tags={tags}\r\n               render={(props) => {\r\n                  const { tag, index } = props;\r\n                  return (\r\n                     <ButtonFolder style={{\r\n                        float: 'right'\r\n                     }}>\r\n                        <Icon type='folder' style={{ fontSize: 15, transform: 'translate(0, 2px)', marginRight: 5, color: 'grey' }} />\r\n\r\n                        <InputComp tag={tag} index={index} updateFolderName={updateFolderName} />\r\n\r\n                        <div style={{ float: 'right' }}>\r\n                           <Icon type='plus-circle' style={{ fontSize: 15, marginRight: 5, color: 'grey' }} onClick={() => addNewFolder(props)} />\r\n                           <Icon type='delete' style={{ fontSize: 15, marginRight: 5, color: 'grey' }} />\r\n                        </div>\r\n                     </ButtonFolder>\r\n                  );\r\n               }}\r\n               style={{\r\n                  padding: 0,\r\n                  width: '100%',\r\n               }}\r\n               onChange={(tags) => setTags(tags)}\r\n            />\r\n\r\n         </PanelStyled>\r\n\r\n         <div style={{ padding: 20, display: 'flex', flexDirection: 'row-reverse' }}>\r\n            <ButtonGroupComp\r\n               onClickCancel={onClickCancelModal}\r\n               onClickApply={onClickApply}\r\n            />\r\n         </div>\r\n      </Container>\r\n   );\r\n};\r\n\r\nexport default FormDrawingTypeOrder;\r\n\r\n\r\nconst InputComp = ({ tag, updateFolderName, index }) => {\r\n\r\n   const [value, setValue] = useState(tag.header);\r\n   const [isDoubleClick, setIsDoubleClick] = useState(false);\r\n\r\n   const inputReff = useRef();\r\n\r\n\r\n   useEffect(() => {\r\n      if (isDoubleClick) {\r\n         inputReff.current.focus();\r\n      };\r\n\r\n   }, [isDoubleClick]);\r\n\r\n   return (\r\n      <div\r\n         onDoubleClick={() => setIsDoubleClick(true)}\r\n         onBlur={() => {\r\n            setIsDoubleClick(false);\r\n            updateFolderName(tag, index, value);\r\n         }}\r\n         style={{\r\n            width: '75%',\r\n            overflow: 'hidden',\r\n            textOverflow: 'ellipsis',\r\n            whiteSpace: 'nowrap'\r\n         }}\r\n      >\r\n         {isDoubleClick ? (\r\n            <input \r\n               ref={inputReff}\r\n               value={value} \r\n               onChange={(e) => setValue(e.target.value)} \r\n               style={{ \r\n                  width: '100%',\r\n                  border: 'none'\r\n                }}\r\n            />\r\n         ) : (\r\n               <div>{tag.header}</div>\r\n            )\r\n         }\r\n\r\n      </div>\r\n\r\n   );\r\n\r\n};\r\n\r\nconst addZero = (num) => {\r\n   if (num < 10) return '0' + num;\r\n   return num;\r\n};\r\n\r\nconst Container = styled.div`\r\n   height: ${`${window.innerHeight * 0.8}` + 'px'};\r\n   width: 100%;\r\n   \r\n   display: flex;\r\n   flex-direction: column;\r\n`;\r\n\r\n\r\nconst ButtonFolder = styled.div`\r\n   background: white;\r\n   padding: 4px;\r\n   margin: 4px;\r\n   color: black;\r\n   font-size: 13px;\r\n   border: 1px solid ${colorType.grey1};\r\n   width: 70%;\r\n   display: flex;\r\n   cursor: pointer;\r\n   \r\n   -webkit-box-shadow: 0px 6px 19px 5px rgba(0,0,0,0.04); \r\n   box-shadow: 0px 6px 19px 5px rgba(0,0,0,0.04);\r\n\r\n`;\r\n\r\n\r\nconst PanelStyled = styled.div`\r\n\r\n    width: 100%;\r\n    float: right;\r\n    overflow-x: hidden;\r\n    border-bottom: 1px solid ${colorType.grey4};\r\n\r\n    ::-webkit-scrollbar {\r\n        -webkit-appearance: none;\r\n        background-color: #e3e3e3;\r\n    }\r\n\r\n    ::-webkit-scrollbar:vertical {\r\n        width: 15px;\r\n    }\r\n\r\n    ::-webkit-scrollbar:horizontal {\r\n        height: 15px;\r\n    }\r\n\r\n    ::-webkit-scrollbar-thumb {\r\n        border-radius: 10px;\r\n        border: 2px solid #e3e3e3;\r\n        background-color: #999;\r\n\r\n        &:hover {\r\n            background-color: #666;\r\n        }\r\n    }\r\n`;","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\FormCellColorizedCheck.jsx",["194","195","196"],{"ruleId":"197","replacedBy":"198"},{"ruleId":"199","replacedBy":"200"},{"ruleId":"201","severity":1,"message":"202","line":69,"column":8,"nodeType":"203","endLine":69,"endColumn":10,"suggestions":"204"},{"ruleId":"201","severity":1,"message":"205","line":433,"column":8,"nodeType":"203","endLine":433,"endColumn":10,"suggestions":"206"},{"ruleId":"207","severity":1,"message":"208","line":440,"column":29,"nodeType":"209","messageId":"210","endLine":440,"endColumn":47},{"ruleId":"207","severity":1,"message":"211","line":444,"column":12,"nodeType":"209","messageId":"210","endLine":444,"endColumn":24},{"ruleId":"207","severity":1,"message":"212","line":444,"column":26,"nodeType":"209","messageId":"210","endLine":444,"endColumn":41},{"ruleId":"207","severity":1,"message":"213","line":448,"column":13,"nodeType":"209","messageId":"210","endLine":448,"endColumn":31},{"ruleId":"214","severity":1,"message":"215","line":4,"column":1,"nodeType":"216","endLine":23,"endColumn":3},{"ruleId":"207","severity":1,"message":"217","line":633,"column":7,"nodeType":"209","messageId":"210","endLine":633,"endColumn":19},{"ruleId":"207","severity":1,"message":"218","line":672,"column":7,"nodeType":"209","messageId":"210","endLine":672,"endColumn":19},{"ruleId":"207","severity":1,"message":"219","line":713,"column":7,"nodeType":"209","messageId":"210","endLine":713,"endColumn":29},{"ruleId":"207","severity":1,"message":"220","line":6,"column":13,"nodeType":"209","messageId":"210","endLine":6,"endColumn":22},{"ruleId":"207","severity":1,"message":"221","line":6,"column":32,"nodeType":"209","messageId":"210","endLine":6,"endColumn":39},{"ruleId":"207","severity":1,"message":"222","line":6,"column":41,"nodeType":"209","messageId":"210","endLine":6,"endColumn":52},{"ruleId":"207","severity":1,"message":"223","line":6,"column":79,"nodeType":"209","messageId":"210","endLine":6,"endColumn":90},{"ruleId":"207","severity":1,"message":"224","line":6,"column":92,"nodeType":"209","messageId":"210","endLine":6,"endColumn":101},{"ruleId":"207","severity":1,"message":"225","line":43,"column":23,"nodeType":"209","messageId":"210","endLine":43,"endColumn":35},{"ruleId":"201","severity":1,"message":"226","line":60,"column":8,"nodeType":"203","endLine":60,"endColumn":30,"suggestions":"227"},{"ruleId":"228","severity":1,"message":"229","line":194,"column":21,"nodeType":"230","messageId":"231","endLine":194,"endColumn":26},{"ruleId":"207","severity":1,"message":"232","line":334,"column":7,"nodeType":"209","messageId":"210","endLine":334,"endColumn":20},{"ruleId":"207","severity":1,"message":"233","line":371,"column":7,"nodeType":"209","messageId":"210","endLine":371,"endColumn":36},{"ruleId":"234","severity":1,"message":"235","line":103,"column":33,"nodeType":"236","messageId":"231","endLine":103,"endColumn":35},{"ruleId":"234","severity":1,"message":"235","line":129,"column":19,"nodeType":"236","messageId":"231","endLine":129,"endColumn":21},{"ruleId":"207","severity":1,"message":"237","line":155,"column":7,"nodeType":"209","messageId":"210","endLine":155,"endColumn":17},{"ruleId":"207","severity":1,"message":"238","line":235,"column":7,"nodeType":"209","messageId":"210","endLine":235,"endColumn":20},{"ruleId":"207","severity":1,"message":"239","line":240,"column":7,"nodeType":"209","messageId":"210","endLine":240,"endColumn":19},{"ruleId":"234","severity":1,"message":"235","line":278,"column":26,"nodeType":"236","messageId":"231","endLine":278,"endColumn":28},{"ruleId":"234","severity":1,"message":"235","line":280,"column":26,"nodeType":"236","messageId":"231","endLine":280,"endColumn":28},{"ruleId":"240","severity":1,"message":"241","line":319,"column":33,"nodeType":"242","messageId":"243","endLine":319,"endColumn":88},{"ruleId":"234","severity":1,"message":"235","line":319,"column":62,"nodeType":"236","messageId":"231","endLine":319,"endColumn":64},{"ruleId":"240","severity":1,"message":"244","line":330,"column":25,"nodeType":"242","messageId":"243","endLine":330,"endColumn":80},{"ruleId":"234","severity":1,"message":"235","line":330,"column":54,"nodeType":"236","messageId":"231","endLine":330,"endColumn":56},{"ruleId":"240","severity":1,"message":"245","line":341,"column":17,"nodeType":"242","messageId":"243","endLine":341,"endColumn":66},{"ruleId":"234","severity":1,"message":"235","line":341,"column":46,"nodeType":"236","messageId":"231","endLine":341,"endColumn":48},{"ruleId":"207","severity":1,"message":"246","line":366,"column":7,"nodeType":"209","messageId":"210","endLine":366,"endColumn":21},{"ruleId":"207","severity":1,"message":"247","line":5,"column":9,"nodeType":"209","messageId":"210","endLine":5,"endColumn":14},{"ruleId":"207","severity":1,"message":"248","line":5,"column":16,"nodeType":"209","messageId":"210","endLine":5,"endColumn":22},{"ruleId":"249","severity":1,"message":"250","line":46,"column":37,"nodeType":"242","messageId":"251","endLine":46,"endColumn":39},{"ruleId":"249","severity":1,"message":"250","line":50,"column":50,"nodeType":"242","messageId":"251","endLine":50,"endColumn":52},{"ruleId":"201","severity":1,"message":"252","line":81,"column":8,"nodeType":"203","endLine":81,"endColumn":10,"suggestions":"253"},{"ruleId":"207","severity":1,"message":"254","line":18,"column":16,"nodeType":"209","messageId":"210","endLine":18,"endColumn":24},{"ruleId":"201","severity":1,"message":"255","line":41,"column":8,"nodeType":"203","endLine":41,"endColumn":10,"suggestions":"256"},{"ruleId":"207","severity":1,"message":"257","line":34,"column":13,"nodeType":"209","messageId":"210","endLine":34,"endColumn":20},{"ruleId":"201","severity":1,"message":"258","line":125,"column":8,"nodeType":"203","endLine":125,"endColumn":10,"suggestions":"259"},{"ruleId":"207","severity":1,"message":"260","line":128,"column":12,"nodeType":"209","messageId":"210","endLine":128,"endColumn":23},{"ruleId":"207","severity":1,"message":"261","line":128,"column":25,"nodeType":"209","messageId":"210","endLine":128,"endColumn":39},{"ruleId":"207","severity":1,"message":"262","line":130,"column":12,"nodeType":"209","messageId":"210","endLine":130,"endColumn":16},{"ruleId":"207","severity":1,"message":"263","line":130,"column":18,"nodeType":"209","messageId":"210","endLine":130,"endColumn":25},{"ruleId":"207","severity":1,"message":"264","line":240,"column":7,"nodeType":"209","messageId":"210","endLine":240,"endColumn":21},{"ruleId":"207","severity":1,"message":"265","line":246,"column":7,"nodeType":"209","messageId":"210","endLine":246,"endColumn":21},{"ruleId":"228","severity":1,"message":"266","line":23,"column":17,"nodeType":"230","messageId":"231","endLine":23,"endColumn":23},{"ruleId":"207","severity":1,"message":"267","line":161,"column":7,"nodeType":"209","messageId":"210","endLine":161,"endColumn":14},{"ruleId":"268","severity":1,"message":"269","line":167,"column":44,"nodeType":"236","messageId":"270","endLine":167,"endColumn":45},{"ruleId":"207","severity":1,"message":"254","line":20,"column":16,"nodeType":"209","messageId":"210","endLine":20,"endColumn":24},{"ruleId":"201","severity":1,"message":"271","line":38,"column":8,"nodeType":"203","endLine":38,"endColumn":10,"suggestions":"272"},{"ruleId":"234","severity":1,"message":"235","line":70,"column":64,"nodeType":"236","messageId":"231","endLine":70,"endColumn":66},"no-native-reassign",["273"],"no-negated-in-lhs",["274"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'EventKeyDown'. Either include it or remove the dependency array.","ArrayExpression",["275"],"React Hook useEffect has missing dependencies: 'email', 'fetchDataOneSheet', 'getSheetRows', 'projectId', 'projectName', 'role', 'setUserData', and 'username'. Either include them or remove the dependency array.",["276"],"no-unused-vars","'setExpandColumnKey' is assigned a value but never used.","Identifier","unusedVar","'rowFoldedIds' is assigned a value but never used.","'setRowFoldedIds' is assigned a value but never used.","'foldedRowsSettings' is assigned a value but never used.","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","'columnSet_01' is assigned a value but never used.","'columnSet_02' is assigned a value but never used.","'newRevisionDrawingData' is assigned a value but never used.","'className' is assigned a value but never used.","'columns' is assigned a value but never used.","'columnIndex' is assigned a value but never used.","'headerIndex' is assigned a value but never used.","'container' is assigned a value but never used.","'setInitValue' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'column', 'columnIndex', 'inputRender', 'rowIndex', and 'stateProject.allDataOneSheet.role'. Either include them or remove the dependency array.",["277"],"no-dupe-keys","Duplicate key 'color'.","ObjectExpression","unexpected","'colorizedRows' is assigned a value but never used.","'checkIfCellsRangeContainsCell' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","'returnDate' is assigned a value but never used.","'getRndInteger' is assigned a value but never used.","'findHeaderId' is assigned a value but never used.","no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'preSubRowLv2'.","ArrowFunctionExpression","unsafeRefs","Function declared in a loop contains unsafe references to variable(s) 'preSubRowLv1'.","Function declared in a loop contains unsafe references to variable(s) 'preRow'.","'saveRandomRows' is assigned a value but never used.","'Group' is assigned a value but never used.","'Button' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","expectedInside","React Hook useEffect has missing dependencies: 'rowData', 'stateProject.allDataOneSheet._id', 'stateProject.allDataOneSheet.publicSettings', and 'stateRow.rowsVersionsToSave'. Either include them or remove the dependency array.",["278"],"'stateRow' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'headerKey', 'projectId', and 'rowData.id'. Either include them or remove the dependency array.",["279"],"'rowData' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'headers', 'projectId', and 'stateRow.rowsAll'. Either include them or remove the dependency array.",["280"],"'historyData' is assigned a value but never used.","'setHistoryData' is assigned a value but never used.","'data' is assigned a value but never used.","'setData' is assigned a value but never used.","'getHeadersText' is assigned a value but never used.","'getDrawingName' is assigned a value but never used.","Duplicate key 'border'.","'addZero' is assigned a value but never used.","no-useless-concat","Unexpected string concatenation of literals.","unexpectedConcat","React Hook useEffect has a missing dependency: 'projectId'. Either include it or remove the dependency array.",["281"],"no-global-assign","no-unsafe-negation",{"desc":"282","fix":"283"},{"desc":"284","fix":"285"},{"desc":"286","fix":"287"},{"desc":"288","fix":"289"},{"desc":"290","fix":"291"},{"desc":"292","fix":"293"},{"desc":"294","fix":"295"},"Update the dependencies array to be: [EventKeyDown]",{"range":"296","text":"297"},"Update the dependencies array to be: [email, fetchDataOneSheet, getSheetRows, projectId, projectName, role, setUserData, username]",{"range":"298","text":"299"},"Update the dependencies array to be: [column, columnIndex, inputRender, rowIndex, stateCell.cellActive, stateProject.allDataOneSheet.role]",{"range":"300","text":"301"},"Update the dependencies array to be: [rowData, stateProject.allDataOneSheet._id, stateProject.allDataOneSheet.publicSettings, stateRow.rowsVersionsToSave]",{"range":"302","text":"303"},"Update the dependencies array to be: [headerKey, projectId, rowData.id]",{"range":"304","text":"305"},"Update the dependencies array to be: [headers, projectId, stateRow.rowsAll]",{"range":"306","text":"307"},"Update the dependencies array to be: [projectId]",{"range":"308","text":"309"},[2436,2438],"[EventKeyDown]",[17860,17862],"[email, fetchDataOneSheet, getSheetRows, projectId, projectName, role, setUserData, username]",[2078,2100],"[column, columnIndex, inputRender, rowIndex, stateCell.cellActive, stateProject.allDataOneSheet.role]",[2802,2804],"[rowData, stateProject.allDataOneSheet._id, stateProject.allDataOneSheet.publicSettings, stateRow.rowsVersionsToSave]",[1214,1216],"[headerKey, projectId, rowData.id]",[4810,4812],"[headers, projectId, stateRow.rowsAll]",[1136,1138],"[projectId]"]
[{"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\index.js":"1","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\App.js":"2","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\reportWebVitals.js":"3","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\contexts\\cellContext.js":"4","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\contexts\\rowContext.js":"5","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\contexts\\projectContext.js":"6","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\contexts\\_createDataContext.js":"7","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\utils\\index.js":"8","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\constants\\index.js":"9","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\_dashboardComp\\utils\\functionDashboard.js":"10","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\_dashboardComp\\assets\\constantDashboard.js":"11","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\_dashboardComp\\PageDashboard.js":"12","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\PageSpreadsheet.js":"13","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\_dashboardComp\\componentsDashboard\\_ChartBarDrawing.js":"14","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\_dashboardComp\\componentsDashboard\\CardPanelProject.js":"15","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\_dashboardComp\\componentsDashboard\\_ChartBarDrawingLate.js":"16","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\_dashboardComp\\componentsDashboard\\_ChartBarStack.js":"17","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\_dashboardComp\\componentsDashboard\\_ChartProgress.js":"18","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\_dashboardComp\\componentsDashboard\\_ChartPieDrawing.js":"19","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\CellIndex.js":"20","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\_dashboardComp\\componentsDashboard\\_FormPivot.js":"21","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\_dashboardComp\\componentsDashboard\\_TableDrawingList.js":"22","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\CellHeader.js":"23","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\Cell.js":"24","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\IconTable.js":"25","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\InputSearch.js":"26","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\PanelFunction.js":"27","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\PanelSetting.js":"28","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\_dashboardComp\\componentsDashboard\\CardPanel.js":"29","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\_dashboardComp\\componentsDashboard\\PanelRightClick.js":"30","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\_dashboardComp\\componentsDashboard\\ChartBarRecordPanel.js":"31","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\PanelCalendar.js":"32","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\TableCellHistory.js":"33","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\TableDrawingDetail.js":"34","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\TableActivityHistory.js":"35","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\ReorderColumnForm.js":"36","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\PanelConfirm.js":"37","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\FormSort.js":"38","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\FormFilter.js":"39","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\FormGroup.js":"40","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\FormCellColorizedCheck.js":"41","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\FormDrawingTypeOrder.js":"42","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\FormDateAutomation.js":"43","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\ButtonGroupComp.js":"44","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\ColorizedForm.js":"45","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\_dashboardComp\\componentsDashboard\\ChartBarRecord.js":"46","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\FormFilterActivityHistory.js":"47","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\PanelCalendarDuration.js":"48","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\ButtonStyle.js":"49","D:\\994 WOH HUP 2020\\Projects\\deploy-meeting\\client\\src\\index.js":"50","D:\\994 WOH HUP 2020\\Projects\\deploy-meeting\\client\\src\\App.js":"51","D:\\994 WOH HUP 2020\\Projects\\deploy-meeting\\client\\src\\reportWebVitals.js":"52","D:\\994 WOH HUP 2020\\Projects\\deploy-meeting\\client\\src\\contexts\\projectContext.js":"53","D:\\994 WOH HUP 2020\\Projects\\deploy-meeting\\client\\src\\contexts\\cellContext.js":"54","D:\\994 WOH HUP 2020\\Projects\\deploy-meeting\\client\\src\\contexts\\rowContext.js":"55","D:\\994 WOH HUP 2020\\Projects\\deploy-meeting\\client\\src\\layouts\\PageSpreadsheet.js":"56","D:\\994 WOH HUP 2020\\Projects\\deploy-meeting\\client\\src\\_dashboardComp\\PageDashboard.js":"57","D:\\994 WOH HUP 2020\\Projects\\deploy-meeting\\client\\src\\contexts\\_createDataContext.js":"58","D:\\994 WOH HUP 2020\\Projects\\deploy-meeting\\client\\src\\layouts\\pageSpreadsheet\\Cell.js":"59","D:\\994 WOH HUP 2020\\Projects\\deploy-meeting\\client\\src\\layouts\\pageSpreadsheet\\CellHeader.js":"60","D:\\994 WOH HUP 2020\\Projects\\deploy-meeting\\client\\src\\layouts\\pageSpreadsheet\\PanelFunction.js":"61","D:\\994 WOH HUP 2020\\Projects\\deploy-meeting\\client\\src\\layouts\\pageSpreadsheet\\InputSearch.js":"62","D:\\994 WOH HUP 2020\\Projects\\deploy-meeting\\client\\src\\layouts\\pageSpreadsheet\\IconTable.js":"63","D:\\994 WOH HUP 2020\\Projects\\deploy-meeting\\client\\src\\layouts\\pageSpreadsheet\\PanelSetting.js":"64","D:\\994 WOH HUP 2020\\Projects\\deploy-meeting\\client\\src\\_dashboardComp\\assets\\constantDashboard.js":"65","D:\\994 WOH HUP 2020\\Projects\\deploy-meeting\\client\\src\\layouts\\pageSpreadsheet\\CellIndex.js":"66","D:\\994 WOH HUP 2020\\Projects\\deploy-meeting\\client\\src\\_dashboardComp\\componentsDashboard\\_ChartBarDrawingLate.js":"67","D:\\994 WOH HUP 2020\\Projects\\deploy-meeting\\client\\src\\_dashboardComp\\componentsDashboard\\_ChartBarDrawing.js":"68","D:\\994 WOH HUP 2020\\Projects\\deploy-meeting\\client\\src\\_dashboardComp\\componentsDashboard\\CardPanelProject.js":"69","D:\\994 WOH HUP 2020\\Projects\\deploy-meeting\\client\\src\\_dashboardComp\\componentsDashboard\\_ChartProgress.js":"70","D:\\994 WOH HUP 2020\\Projects\\deploy-meeting\\client\\src\\_dashboardComp\\componentsDashboard\\_ChartBarStack.js":"71","D:\\994 WOH HUP 2020\\Projects\\deploy-meeting\\client\\src\\_dashboardComp\\componentsDashboard\\_TableDrawingList.js":"72","D:\\994 WOH HUP 2020\\Projects\\deploy-meeting\\client\\src\\_dashboardComp\\componentsDashboard\\_ChartPieDrawing.js":"73","D:\\994 WOH HUP 2020\\Projects\\deploy-meeting\\client\\src\\_dashboardComp\\componentsDashboard\\_FormPivot.js":"74","D:\\994 WOH HUP 2020\\Projects\\deploy-meeting\\client\\src\\constants\\index.js":"75","D:\\994 WOH HUP 2020\\Projects\\deploy-meeting\\client\\src\\utils\\index.js":"76","D:\\994 WOH HUP 2020\\Projects\\deploy-meeting\\client\\src\\layouts\\pageSpreadsheet\\PanelCalendar.js":"77","D:\\994 WOH HUP 2020\\Projects\\deploy-meeting\\client\\src\\layouts\\pageSpreadsheet\\ButtonGroupComp.js":"78","D:\\994 WOH HUP 2020\\Projects\\deploy-meeting\\client\\src\\layouts\\pageSpreadsheet\\ColorizedForm.js":"79","D:\\994 WOH HUP 2020\\Projects\\deploy-meeting\\client\\src\\layouts\\pageSpreadsheet\\FormDateAutomation.js":"80","D:\\994 WOH HUP 2020\\Projects\\deploy-meeting\\client\\src\\layouts\\pageSpreadsheet\\FormCellColorizedCheck.js":"81","D:\\994 WOH HUP 2020\\Projects\\deploy-meeting\\client\\src\\layouts\\pageSpreadsheet\\FormFilter.js":"82","D:\\994 WOH HUP 2020\\Projects\\deploy-meeting\\client\\src\\layouts\\pageSpreadsheet\\FormDrawingTypeOrder.js":"83","D:\\994 WOH HUP 2020\\Projects\\deploy-meeting\\client\\src\\layouts\\pageSpreadsheet\\FormGroup.js":"84","D:\\994 WOH HUP 2020\\Projects\\deploy-meeting\\client\\src\\layouts\\pageSpreadsheet\\TableActivityHistory.js":"85","D:\\994 WOH HUP 2020\\Projects\\deploy-meeting\\client\\src\\layouts\\pageSpreadsheet\\PanelConfirm.js":"86","D:\\994 WOH HUP 2020\\Projects\\deploy-meeting\\client\\src\\layouts\\pageSpreadsheet\\FormSort.js":"87","D:\\994 WOH HUP 2020\\Projects\\deploy-meeting\\client\\src\\layouts\\pageSpreadsheet\\ReorderColumnForm.js":"88","D:\\994 WOH HUP 2020\\Projects\\deploy-meeting\\client\\src\\layouts\\pageSpreadsheet\\TableCellHistory.js":"89","D:\\994 WOH HUP 2020\\Projects\\deploy-meeting\\client\\src\\layouts\\pageSpreadsheet\\TableDrawingDetail.js":"90","D:\\994 WOH HUP 2020\\Projects\\deploy-meeting\\client\\src\\_dashboardComp\\componentsDashboard\\CardPanel.js":"91","D:\\994 WOH HUP 2020\\Projects\\deploy-meeting\\client\\src\\_dashboardComp\\componentsDashboard\\PanelRightClick.js":"92","D:\\994 WOH HUP 2020\\Projects\\deploy-meeting\\client\\src\\_dashboardComp\\componentsDashboard\\ChartBarRecordPanel.js":"93","D:\\994 WOH HUP 2020\\Projects\\deploy-meeting\\client\\src\\_dashboardComp\\utils\\functionDashboard.js":"94","D:\\994 WOH HUP 2020\\Projects\\deploy-meeting\\client\\src\\layouts\\pageSpreadsheet\\ButtonStyle.js":"95","D:\\994 WOH HUP 2020\\Projects\\deploy-meeting\\client\\src\\layouts\\pageSpreadsheet\\PanelCalendarDuration.js":"96","D:\\994 WOH HUP 2020\\Projects\\deploy-meeting\\client\\src\\layouts\\pageSpreadsheet\\FormFilterActivityHistory.js":"97","D:\\994 WOH HUP 2020\\Projects\\deploy-meeting\\client\\src\\_dashboardComp\\componentsDashboard\\ChartBarRecord.js":"98"},{"size":507,"mtime":1607175136833,"results":"99","hashOfConfig":"100"},{"size":1928,"mtime":1610941864285,"results":"101","hashOfConfig":"100"},{"size":362,"mtime":1606274463595,"results":"102","hashOfConfig":"100"},{"size":1435,"mtime":1609840744275,"results":"103","hashOfConfig":"100"},{"size":582,"mtime":1609148593298,"results":"104","hashOfConfig":"100"},{"size":964,"mtime":1609149456727,"results":"105","hashOfConfig":"100"},{"size":613,"mtime":1604905406752,"results":"106","hashOfConfig":"100"},{"size":26240,"mtime":1610864544619,"results":"107","hashOfConfig":"100"},{"size":789,"mtime":1609170899693,"results":"108","hashOfConfig":"100"},{"size":14744,"mtime":1610213520087,"results":"109","hashOfConfig":"100"},{"size":3440,"mtime":1610292716572,"results":"110","hashOfConfig":"100"},{"size":10781,"mtime":1610945156223,"results":"111","hashOfConfig":"100"},{"size":34804,"mtime":1610946171499,"results":"112","hashOfConfig":"100"},{"size":6472,"mtime":1610184143931,"results":"113","hashOfConfig":"100"},{"size":1103,"mtime":1610275307316,"results":"114","hashOfConfig":"100"},{"size":3969,"mtime":1610864500428,"results":"115","hashOfConfig":"100"},{"size":5941,"mtime":1610213542808,"results":"116","hashOfConfig":"100"},{"size":3282,"mtime":1610944938938,"results":"117","hashOfConfig":"100"},{"size":2971,"mtime":1610189356028,"results":"118","hashOfConfig":"100"},{"size":758,"mtime":1609775818433,"results":"119","hashOfConfig":"100"},{"size":5568,"mtime":1610202412471,"results":"120","hashOfConfig":"100"},{"size":20209,"mtime":1610213506355,"results":"121","hashOfConfig":"100"},{"size":530,"mtime":1609861179935,"results":"122","hashOfConfig":"100"},{"size":12178,"mtime":1610868950801,"results":"123","hashOfConfig":"100"},{"size":2924,"mtime":1610288396584,"results":"124","hashOfConfig":"100"},{"size":4007,"mtime":1610945816071,"results":"125","hashOfConfig":"100"},{"size":2644,"mtime":1610808655443,"results":"126","hashOfConfig":"100"},{"size":29260,"mtime":1610946031083,"results":"127","hashOfConfig":"100"},{"size":1002,"mtime":1610175003252,"results":"128","hashOfConfig":"100"},{"size":1139,"mtime":1610175167433,"results":"129","hashOfConfig":"100"},{"size":1724,"mtime":1610197653543,"results":"130","hashOfConfig":"100"},{"size":381,"mtime":1608382149906,"results":"131","hashOfConfig":"100"},{"size":2136,"mtime":1610703654957,"results":"132","hashOfConfig":"100"},{"size":5334,"mtime":1610849777416,"results":"133","hashOfConfig":"100"},{"size":12233,"mtime":1610851825770,"results":"134","hashOfConfig":"100"},{"size":6021,"mtime":1610295435799,"results":"135","hashOfConfig":"100"},{"size":756,"mtime":1610863855133,"results":"136","hashOfConfig":"100"},{"size":6079,"mtime":1609942695103,"results":"137","hashOfConfig":"100"},{"size":5786,"mtime":1610862140657,"results":"138","hashOfConfig":"100"},{"size":4397,"mtime":1610862334014,"results":"139","hashOfConfig":"100"},{"size":3639,"mtime":1610851945652,"results":"140","hashOfConfig":"100"},{"size":10121,"mtime":1610851698477,"results":"141","hashOfConfig":"100"},{"size":4382,"mtime":1610850706426,"results":"142","hashOfConfig":"100"},{"size":751,"mtime":1608563473295,"results":"143","hashOfConfig":"100"},{"size":3547,"mtime":1610276241014,"results":"144","hashOfConfig":"100"},{"size":3348,"mtime":1610175605402,"results":"145","hashOfConfig":"100"},{"size":5448,"mtime":1610862224883,"results":"146","hashOfConfig":"100"},{"size":798,"mtime":1610259509164,"results":"147","hashOfConfig":"100"},{"size":723,"mtime":1609943027873,"results":"148","hashOfConfig":"100"},{"size":507,"mtime":1610946530000,"results":"149","hashOfConfig":"150"},{"size":1923,"mtime":1611129699706,"results":"151","hashOfConfig":"150"},{"size":362,"mtime":1610946530000,"results":"152","hashOfConfig":"150"},{"size":917,"mtime":1610946530000,"results":"153","hashOfConfig":"150"},{"size":1369,"mtime":1610946530000,"results":"154","hashOfConfig":"150"},{"size":549,"mtime":1610946530000,"results":"155","hashOfConfig":"150"},{"size":33807,"mtime":1611144231091,"results":"156","hashOfConfig":"150"},{"size":10496,"mtime":1610946530000,"results":"157","hashOfConfig":"150"},{"size":590,"mtime":1610946530000,"results":"158","hashOfConfig":"150"},{"size":11771,"mtime":1611143525631,"results":"159","hashOfConfig":"150"},{"size":508,"mtime":1610946530000,"results":"160","hashOfConfig":"150"},{"size":2542,"mtime":1610946530000,"results":"161","hashOfConfig":"150"},{"size":3869,"mtime":1610946530000,"results":"162","hashOfConfig":"150"},{"size":2837,"mtime":1610946530000,"results":"163","hashOfConfig":"150"},{"size":29149,"mtime":1611124228412,"results":"164","hashOfConfig":"150"},{"size":3472,"mtime":1611119481462,"results":"165","hashOfConfig":"150"},{"size":722,"mtime":1610946530000,"results":"166","hashOfConfig":"150"},{"size":3851,"mtime":1610946530000,"results":"167","hashOfConfig":"150"},{"size":6282,"mtime":1610946530000,"results":"168","hashOfConfig":"150"},{"size":1063,"mtime":1610946530000,"results":"169","hashOfConfig":"150"},{"size":3173,"mtime":1610946530000,"results":"170","hashOfConfig":"150"},{"size":5762,"mtime":1610946530000,"results":"171","hashOfConfig":"150"},{"size":19584,"mtime":1610946530000,"results":"172","hashOfConfig":"150"},{"size":2866,"mtime":1610946530000,"results":"173","hashOfConfig":"150"},{"size":5403,"mtime":1610946530000,"results":"174","hashOfConfig":"150"},{"size":1419,"mtime":1611143231896,"results":"175","hashOfConfig":"150"},{"size":25261,"mtime":1611146084772,"results":"176","hashOfConfig":"150"},{"size":361,"mtime":1610946530000,"results":"177","hashOfConfig":"150"},{"size":722,"mtime":1610946530000,"results":"178","hashOfConfig":"150"},{"size":3437,"mtime":1610946530000,"results":"179","hashOfConfig":"150"},{"size":4218,"mtime":1610946530000,"results":"180","hashOfConfig":"150"},{"size":3534,"mtime":1610946530000,"results":"181","hashOfConfig":"150"},{"size":5594,"mtime":1610946530000,"results":"182","hashOfConfig":"150"},{"size":9793,"mtime":1610946530000,"results":"183","hashOfConfig":"150"},{"size":4280,"mtime":1611145281220,"results":"184","hashOfConfig":"150"},{"size":11888,"mtime":1610946530000,"results":"185","hashOfConfig":"150"},{"size":727,"mtime":1610946530000,"results":"186","hashOfConfig":"150"},{"size":5910,"mtime":1610946530000,"results":"187","hashOfConfig":"150"},{"size":5788,"mtime":1610946530000,"results":"188","hashOfConfig":"150"},{"size":2068,"mtime":1610946530000,"results":"189","hashOfConfig":"150"},{"size":5145,"mtime":1611143243208,"results":"190","hashOfConfig":"150"},{"size":965,"mtime":1610946530000,"results":"191","hashOfConfig":"150"},{"size":1089,"mtime":1610946530000,"results":"192","hashOfConfig":"150"},{"size":1665,"mtime":1610946530000,"results":"193","hashOfConfig":"150"},{"size":14233,"mtime":1610946530000,"results":"194","hashOfConfig":"150"},{"size":687,"mtime":1610946530000,"results":"195","hashOfConfig":"150"},{"size":753,"mtime":1610946530000,"results":"196","hashOfConfig":"150"},{"size":5267,"mtime":1610946530000,"results":"197","hashOfConfig":"150"},{"size":3267,"mtime":1610946530000,"results":"198","hashOfConfig":"150"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"201"},"utwymk",{"filePath":"202","messages":"203","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"201"},{"filePath":"204","messages":"205","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"201"},{"filePath":"206","messages":"207","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"201"},{"filePath":"208","messages":"209","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"201"},{"filePath":"210","messages":"211","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"201"},{"filePath":"212","messages":"213","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"214","usedDeprecatedRules":"201"},{"filePath":"215","messages":"216","errorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"217","usedDeprecatedRules":"201"},{"filePath":"218","messages":"219","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"201"},{"filePath":"220","messages":"221","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"222","usedDeprecatedRules":"201"},{"filePath":"223","messages":"224","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"201"},{"filePath":"225","messages":"226","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"227","messages":"228","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"229","messages":"230","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"231","messages":"232","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"233","messages":"234","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"235","messages":"236","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"237","messages":"238","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"239","messages":"240","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"241","messages":"242","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"243","messages":"244","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"245","messages":"246","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"247","messages":"248","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"249","messages":"250","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"251","messages":"252","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"253","messages":"254","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"255","messages":"256","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"257","messages":"258","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"259","messages":"260","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"261","messages":"262","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"263","messages":"264","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"265","messages":"266","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"267","messages":"268","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"269","messages":"270","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"271","messages":"272","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"273","messages":"274","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"275","messages":"276","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"277","messages":"278","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"279","messages":"280","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"281","messages":"282","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"283","messages":"284","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"285","messages":"286","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"287","messages":"288","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"289","messages":"290","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"291","messages":"292","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"293","messages":"294","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"295","messages":"296","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"297","messages":"298","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"299","messages":"300","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"301","messages":"302","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"303"},"ijqcxb",{"filePath":"304","messages":"305","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"303"},{"filePath":"306","messages":"307","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"303"},{"filePath":"308","messages":"309","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"303"},{"filePath":"310","messages":"311","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"303"},{"filePath":"312","messages":"313","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"303"},{"filePath":"314","messages":"315","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"316","messages":"317","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"318","usedDeprecatedRules":"303"},{"filePath":"319","messages":"320","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"321","usedDeprecatedRules":"303"},{"filePath":"322","messages":"323","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"324","messages":"325","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"326","usedDeprecatedRules":"303"},{"filePath":"327","messages":"328","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"303"},{"filePath":"329","messages":"330","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"303"},{"filePath":"331","messages":"332","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"303"},{"filePath":"333","messages":"334","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"335","usedDeprecatedRules":"303"},{"filePath":"336","messages":"337","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"303"},{"filePath":"338","messages":"339","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"303"},{"filePath":"340","messages":"341","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"303"},{"filePath":"342","messages":"343","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"344","usedDeprecatedRules":"303"},{"filePath":"345","messages":"346","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"303"},{"filePath":"347","messages":"348","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"303"},{"filePath":"349","messages":"350","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"303"},{"filePath":"351","messages":"352","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"353","usedDeprecatedRules":"303"},{"filePath":"354","messages":"355","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"303"},{"filePath":"356","messages":"357","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"303"},{"filePath":"358","messages":"359","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"360","messages":"361","errorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"362","messages":"363","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"364","usedDeprecatedRules":"303"},{"filePath":"365","messages":"366","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"303"},{"filePath":"367","messages":"368","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"303"},{"filePath":"369","messages":"370","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"303"},{"filePath":"371","messages":"372","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"373","usedDeprecatedRules":"303"},{"filePath":"374","messages":"375","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"303"},{"filePath":"376","messages":"377","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"378","usedDeprecatedRules":"303"},{"filePath":"379","messages":"380","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"381","messages":"382","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"383","usedDeprecatedRules":"303"},{"filePath":"384","messages":"385","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"303"},{"filePath":"386","messages":"387","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"303"},{"filePath":"388","messages":"389","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"303"},{"filePath":"390","messages":"391","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"392","usedDeprecatedRules":"303"},{"filePath":"393","messages":"394","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"395","messages":"396","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"303"},{"filePath":"397","messages":"398","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"303"},{"filePath":"399","messages":"400","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"303"},{"filePath":"401","messages":"402","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"403","usedDeprecatedRules":"303"},{"filePath":"404","messages":"405","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"406","usedDeprecatedRules":"303"},{"filePath":"407","messages":"408","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"303"},{"filePath":"409","messages":"410","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"303"},{"filePath":"411","messages":"412","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"303"},"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\index.js",[],["413","414"],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\App.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\reportWebVitals.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\contexts\\cellContext.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\contexts\\rowContext.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\contexts\\projectContext.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\contexts\\_createDataContext.js",["415"],"import React, { createContext, useReducer } from 'react';\r\n\r\n\r\nexport default (reducer, actions, initValue) => {\r\n\r\n    const Context = createContext();\r\n\r\n    const Provider = ({ children }) => {\r\n        const [state, dispatch] = useReducer(reducer, initValue);\r\n\r\n        const boundActions = {};\r\n        for (let key in actions) {\r\n            boundActions[key] = actions[key](dispatch);\r\n        };\r\n\r\n        return (\r\n            <Context.Provider value={{ state, ...boundActions }}>\r\n                {children}\r\n            </Context.Provider>\r\n        );\r\n    };\r\n    return { Context, Provider };\r\n};\r\n","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\utils\\index.js",["416","417","418","419","420","421","422","423","424","425","426","427","428","429","430","431","432"],"import _ from 'lodash';\r\n\r\n\r\nexport const colorTypeStatus = {\r\n    yellow: '#fff200',\r\n    dark: '#1e272e',\r\n    grey0: '#ecf0f1',\r\n    grey1: '#bdc3c7',\r\n    grey2: '#636e72',\r\n    grey3: '#dfe4ea',\r\n    grey4: '#f1f2f6',\r\n    red: '#FA8072',\r\n    green: '#009432',\r\n    blue: '#0984e3',\r\n    orange: '#cc8e35',\r\n    purple: '#303952',\r\n    rose: '#e84118',\r\n    black: 'black',\r\n    orange2: '#f1c40f',\r\n    pp: '#9b59b6',\r\n    pp2: '#10ac84',\r\n};\r\n\r\n\r\n\r\nexport const randomColorRangeStatus = {\r\n    'Approved with comments, to Resubmit': colorTypeStatus.purple,\r\n    'Approved with Comment, no submission Required': colorTypeStatus.blue,\r\n    'Approved for Construction': colorTypeStatus.green,\r\n    'Consultant reviewing': colorTypeStatus.grey2,\r\n    'Not Started': colorTypeStatus.orange,\r\n    'Revise In-Progress': colorTypeStatus.yellow,\r\n    '1st cut of drawing in-progress': colorTypeStatus.pp2,\r\n    '1st cut of model in-progress': colorTypeStatus.pp,\r\n    'Pending design': colorTypeStatus.orange2,\r\n    'Reject and resubmit': colorTypeStatus.red,\r\n\r\n    'Consultant review and reply': colorTypeStatus.blue,\r\n    'Create update drawing': colorTypeStatus.orange,\r\n    'Create update model': colorTypeStatus.green,\r\n};\r\nexport const randomColorRange = [\r\n    '#FFDEAD',\r\n    '#98FB98',\r\n    '#e74c3c',\r\n    '#9b59b6',\r\n    '#1abc9c',\r\n    '#95a5a6'\r\n];\r\n\r\n\r\nexport const formatStringNameToId = (str) => {\r\n    let mystring = str\r\n        .replace(/ /g, '')\r\n        .replace(/\\(|\\)/g, '')\r\n        .replace(/\\//g, '');\r\n\r\n    return mystring.charAt(0).toLowerCase() + mystring.slice(1);\r\n};\r\n\r\nexport const genId = (xxx) => {\r\n    let arr = [];\r\n    for (let i = 0; i < xxx; i++) {\r\n        arr.push(mongoObjectId());\r\n    };\r\n    return arr;\r\n};\r\n\r\nexport const debounceFnc = (func, delay) => {\r\n    let timeout;\r\n    return function (...args) {\r\n        const context = this;\r\n        if (timeout) clearTimeout(timeout);\r\n        timeout = setTimeout(() => {\r\n            timeout = null;\r\n            func.apply(context, args);\r\n        }, delay);\r\n    };\r\n};\r\n\r\nexport const extractCellInfo = (key) => {\r\n    return {\r\n        rowId: key.slice(0, 24),\r\n        headerName: key.slice(25, key.length)\r\n    }\r\n};\r\n\r\n\r\nexport const mongoObjectId = () => {\r\n    var timestamp = (new Date().getTime() / 1000 | 0).toString(16);\r\n    return timestamp + 'xxxxxxxxxxxxxxxx'.replace(/[x]/g, function () {\r\n        return (Math.random() * 16 | 0).toString(16);\r\n    }).toLowerCase();\r\n};\r\n\r\n\r\nexport const getHeadersText = (headers) => {\r\n    if (!headers) return [];\r\n    let arr = [];\r\n    headers.forEach(hd => {\r\n        arr.push(hd.text);\r\n    });\r\n    return arr;\r\n};\r\n\r\nexport const getHeaderKey = (headers, headerText) => {\r\n    if (!headers) return;\r\n    return headers.find(hd => hd.text === headerText).key;\r\n};\r\n\r\n\r\n\r\nexport const groupRowsBy = (array, key) => {\r\n\r\n    return array.reduce((result, currentValue) => {\r\n        (result[currentValue[key]] = result[currentValue[key]] || []).push(\r\n            currentValue\r\n        );\r\n\r\n        return result;\r\n    }, {});\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport const mapSubRows = (rows) => {\r\n\r\n    if (!rows) return;\r\n\r\n    let rowsArr = rows.filter(r => r._rowLevel === 0);\r\n\r\n    if (rowsArr.length < 1) return rows;\r\n\r\n    let rowsSubArr = rows.filter(r => r._rowLevel === 1);\r\n    if (rowsSubArr.length < 1) return rows;\r\n\r\n    const rowsDataOutput = rowsArr.map(r => {\r\n        let subR = rowsSubArr.filter(rSub => rSub._parentRow === r.id);\r\n        return {\r\n            ...r, children: subR\r\n        }\r\n    });\r\n    return rowsDataOutput;\r\n};\r\n\r\n\r\n\r\n\r\nexport const groupByHeaders = (data, headers) => {\r\n    let res = [];\r\n    let _map = {};\r\n    // push all rowIds have children in here\r\n    let parentIdsArr = [];\r\n    let _mapParentIds = {};\r\n\r\n    for (let item of data) {\r\n        let _prevLevelKey = '';\r\n        let _prevLevelParent = null;\r\n        for (let i = 0, level = headers.length * (-1) + 1; i < headers.length; i++, level++) {\r\n            let arrayParent = i == 0 ? res : _prevLevelParent.children;\r\n\r\n            let header = headers[i];\r\n            let value = String(item[header]).trim() || '';\r\n\r\n            let levelKey = `${_prevLevelKey}_._${value}`;\r\n            let levelParentIndex = _map[levelKey];\r\n            let levelParent = arrayParent[levelParentIndex];\r\n\r\n            if (!levelParent) {\r\n                let iddd = mongoObjectId();\r\n                levelParent = _newParent(item, header, level, iddd);\r\n\r\n                _map[levelKey] = arrayParent.length;\r\n                arrayParent.push(levelParent);\r\n            };\r\n\r\n            levelParent.count++;\r\n            // levelParent[header] = `${item[header]}: (${levelParent.count} nos)`;\r\n            levelParent['Drawing Number'] = `${String(item[header]).toUpperCase()}: (${levelParent.count} nos)`;\r\n\r\n            if (!_mapParentIds[levelParent.id]) { // levelParent id not yet been push to parentIdsArr\r\n                parentIdsArr.push(levelParent.id);\r\n                _mapParentIds[levelParent.id] = true;\r\n            }\r\n\r\n            if (i == headers.length - 1) {\r\n                levelParent.children.push(item);\r\n            } else {\r\n                _prevLevelKey = levelKey;\r\n                _prevLevelParent = levelParent;\r\n            };\r\n        };\r\n    };\r\n    return {\r\n        rows: res,\r\n        expandedRows: parentIdsArr\r\n    };\r\n};\r\nfunction _newParent(item, header, level, iddd) {\r\n    return {\r\n        id: iddd,\r\n        _rowLevel: level,\r\n        _src_header: item[header],\r\n        count: 0,\r\n        children: []\r\n    };\r\n};\r\n\r\n\r\n\r\nexport const convertCellTempToHistory = (\r\n    cellsModifiedTemp,\r\n    stateProject\r\n) => {\r\n    const { email, publicSettings } = stateProject.allDataOneSheet;\r\n    const cellsHistoryData = Object.keys(cellsModifiedTemp).map(key => {\r\n        const { rowId, headerName } = extractCellInfo(key);\r\n        const dataOut = {\r\n            rowId,\r\n            headerKey: getHeaderKey(publicSettings.headers, headerName),\r\n            history: {\r\n                text: cellsModifiedTemp[key],\r\n                email,\r\n                createdAt: new Date(),\r\n            }\r\n        };\r\n        return dataOut;\r\n    });\r\n    return cellsHistoryData;\r\n};\r\n\r\nexport const convertDrawingVersionToHistory = (\r\n    rowsHistory,\r\n    stateProject\r\n) => {\r\n    const { publicSettings } = stateProject.allDataOneSheet;\r\n\r\n    const rowsHistoryOutput = rowsHistory.map(rowsH => {\r\n        let obj = {};\r\n        publicSettings.headers.forEach(hd => {\r\n            if (rowsH[hd.text]) obj = { ...obj || {}, [hd.key]: rowsH[hd.text] };\r\n        });\r\n        return {\r\n            row: rowsH.id,\r\n            history: obj,\r\n        };\r\n    });\r\n    return rowsHistoryOutput;\r\n};\r\n\r\n\r\n\r\n\r\nexport const convertHistoryData = (data) => {\r\n    let arr = [];\r\n    data.forEach(ch => {\r\n        const { histories, headerKey, row } = ch;\r\n        histories.forEach(dt => {\r\n            arr.push({\r\n                ...dt,\r\n                headerKey, row\r\n            });\r\n        });\r\n    });\r\n    return arr\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport const addZero = (num) => {\r\n    if (num < 10) return '0' + num;\r\n    return num;\r\n};\r\n\r\nconst getRndInteger = (min, max) => {\r\n    return Math.floor(Math.random() * (max - min)) + min;\r\n};\r\n\r\n\r\nconst findHeaderId = (headers, headerName) => {\r\n    let header = headers.find(hd => hd.text === headerName);\r\n    return header.key;\r\n};\r\n\r\n\r\n\r\nexport const convertHeadersTextToKeyArray = (headersText, headers) => {\r\n\r\n    return headersText.map(hdText => {\r\n        let hdObj = headers.find(hd => hd.text === hdText);\r\n\r\n        return hdObj.key\r\n    });\r\n};\r\n\r\n\r\n\r\n\r\nconst _groupSubRowsByParentId = (subRows) => {\r\n    let groups = {};\r\n    for (let subRow of subRows) {\r\n        let parentId = subRow._parentRow;\r\n        let group = groups[parentId] || [];\r\n        groups[parentId] = group;\r\n        group.push(subRow);\r\n    };\r\n    return groups;\r\n};\r\nconst _filterRows = (rowsData) => {\r\n    let rows = [];\r\n    let subRowsLv1 = [];\r\n    let subRowsLv2 = [];\r\n\r\n    for (let rowData of rowsData) {\r\n        let level = rowData._rowLevel;\r\n        if (level === 0) {\r\n            rows.push(rowData);\r\n        } else if (level == 1) {\r\n            subRowsLv1.push(rowData);\r\n        } else if (level == 2) {\r\n            subRowsLv2.push(rowData);\r\n        };\r\n    };\r\n    return [rows, subRowsLv1, subRowsLv2];\r\n};\r\nexport const sortRowsReorder = (rowsData) => {\r\n    let [rows, subRowsLv1, subRowsLv2] = _filterRows(rowsData);\r\n    let rowsProcessed = [];\r\n    let groupSubRowsLv1 = _groupSubRowsByParentId(subRowsLv1);\r\n    let groupSubRowsLv2 = _groupSubRowsByParentId(subRowsLv2);\r\n\r\n    let firstRowIndex = rows.findIndex((row) => row._preRow === null);\r\n    if (firstRowIndex >= 0) {\r\n        let preRow = rows.splice(firstRowIndex, 1)[0];\r\n        while (preRow) {\r\n            rowsProcessed.push(preRow);\r\n\r\n            // sort & format subRowsLv1\r\n            let subRowsLv1 = groupSubRowsLv1[preRow.id] || [];\r\n            let firstSubRowLv1Index = subRowsLv1.findIndex(\r\n                (sr1) => sr1._preRow == null\r\n            );\r\n            if (firstSubRowLv1Index >= 0) {\r\n                let preSubRowLv1 = subRowsLv1.splice(firstSubRowLv1Index, 1)[0];\r\n                while (preSubRowLv1) {\r\n                    rowsProcessed.push(preSubRowLv1);\r\n\r\n                    // sort & format subRowsLv2\r\n                    let subRowsLv2 = groupSubRowsLv2[preSubRowLv1.id] || [];\r\n                    let firstSubRowLv2Index = subRowsLv2.findIndex(\r\n                        (sr2) => sr2._preRow == null\r\n                    );\r\n                    if (firstSubRowLv2Index >= 0) {\r\n                        let preSubRowLv2 = subRowsLv2.splice(firstSubRowLv2Index, 1)[0];\r\n                        while (preSubRowLv2) {\r\n                            rowsProcessed.push(preSubRowLv2);\r\n\r\n                            let nextSubRowLv2Index = subRowsLv2.findIndex(\r\n                                (sr2) => String(sr2._preRow) == String(preSubRowLv2.id)\r\n                            );\r\n                            if (nextSubRowLv2Index >= 0) {\r\n                                preSubRowLv2 = subRowsLv2.splice(nextSubRowLv2Index, 1)[0];\r\n                            } else {\r\n                                preSubRowLv2 = null;\r\n                            };\r\n                        };\r\n                    };\r\n\r\n                    let nextSubRowLv1Index = subRowsLv1.findIndex(\r\n                        (sr1) => String(sr1._preRow) == String(preSubRowLv1.id)\r\n                    );\r\n                    if (nextSubRowLv1Index >= 0) {\r\n                        preSubRowLv1 = subRowsLv1.splice(nextSubRowLv1Index, 1)[0];\r\n                    } else {\r\n                        preSubRowLv1 = null;\r\n                    };\r\n                };\r\n            };\r\n\r\n            let nextRowIndex = rows.findIndex(\r\n                (row) => String(row._preRow) == String(preRow.id)\r\n            );\r\n            if (nextRowIndex >= 0) {\r\n                preRow = rows.splice(nextRowIndex, 1)[0];\r\n            } else {\r\n                preRow = null;\r\n            };\r\n        };\r\n    };\r\n\r\n    return rowsProcessed;\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// WORKING WITH SMARTHSHEET ..................................................................\r\n\r\nexport const getDataConvertedSmartsheet = (projectArray) => {\r\n\r\n    let dataOutput = {};\r\n    for (let i = 0; i < projectArray.length; i++) {\r\n\r\n        // get the column header\r\n        const project = projectArray[i];\r\n        const categoryArray = _.map(project.columns, 'title');\r\n        let columnsIndexArray = {};\r\n        categoryArray.forEach(cate => {\r\n            project.columns.forEach(cl => {\r\n                if (cl.title === cate) columnsIndexArray[cate] = cl.index;\r\n            });\r\n        });\r\n\r\n        let allDrawings = [];\r\n\r\n        for (let i = 0; i < project.rows.length; i++) {\r\n            const dwg = project.rows[i];\r\n            allDrawings.push([...dwg.cells]);\r\n        };\r\n\r\n        dataOutput[project.name.slice(0, project.name.length - 17)] = {\r\n            allDrawings,\r\n            allDrawingsSorted: pickDataToTable(allDrawings, columnsIndexArray)\r\n        };\r\n    };\r\n\r\n    return dataOutput;\r\n};\r\n\r\nconst pickDataToTable = (drawings, columnsIndexArray) => {\r\n    let arrayDrw = [];\r\n    drawings.forEach(dwg => {\r\n        let objDwg = {};\r\n        Object.keys(columnsIndexArray).forEach(header => {\r\n            if (header === 'Rev') {\r\n                objDwg[checkSpelling(header)] = dwg[columnsIndexArray[header]].displayValue;\r\n            } else {\r\n                if (dwg[columnsIndexArray[header]].value) {\r\n                    objDwg[checkSpelling(header)] = dwg[columnsIndexArray[header]].value;\r\n                };\r\n            };\r\n        });\r\n        arrayDrw.push(objDwg);\r\n    });\r\n    return arrayDrw;\r\n};\r\n\r\n\r\nconst checkSpelling = (header) => {\r\n    if (header === 'Construction issuance date') return 'Construction Issuance Date';\r\n    if (header === 'Drg to Consultant (T)') return 'Drg To Consultant (T)';\r\n    if (header === 'Drg to Consultant (A)') return 'Drg To Consultant (A)';\r\n    if (header === 'get Approval (A)') return 'Get Approval (A)';\r\n    if (header === 'get Approval (T)') return 'Get Approval (T)';\r\n    return header;\r\n};\r\n\r\n\r\n\r\nexport const getHeaderWidth = (header) => {\r\n\r\n    if (header === 'RFA Ref') return 170;\r\n    else if (\r\n        header === 'Block/Zone' ||\r\n        header === 'Level' || header === 'Unit/CJ' ||\r\n        header === 'Drg Type' || header === 'Use For' ||\r\n        header === 'Coordinator In Charge' || header === 'Modeller' ||\r\n        header === 'Model Progress' || header === 'Drawing Progress' ||\r\n        header === 'Construction Start'\r\n    ) return 100;\r\n    else if (header === 'Construction Issuance Date') return 120;\r\n    else if (header === 'Drawing') return 100;\r\n\r\n    else if (\r\n        header === 'Drg To Consultant (A)' ||\r\n        header === 'Drg To Consultant (T)' ||\r\n        header === 'Get Approval (A)' ||\r\n        header === 'Get Approval (T)'\r\n    ) return 120;\r\n\r\n    else if (header.includes('(A)') || header.includes('(T)')) return 90;\r\n\r\n\r\n\r\n\r\n    else if (header === 'Rev') return 60;\r\n    else if (header === 'Status') return 280;\r\n    else if (header === 'Remark') return 120;\r\n    else if (header === 'Drawing Number') return 350;\r\n    else if (header === 'Drawing Name') return 450;\r\n    else return 300;\r\n\r\n};\r\n\r\nexport const rowClassNameGetColumnsValue = (rows, headers) => {\r\n    let valueObj = {};\r\n    headers.forEach(hd => {\r\n        let valueArr = rows.map(row => row[hd.text] || '');\r\n        valueArr = [...new Set(valueArr)].filter(e => e);\r\n        valueArr.sort((a, b) => a > b ? 1 : (b > a ? -1 : 0));\r\n        if (valueArr.length > 0) valueObj[hd.text] = valueArr;\r\n    });\r\n    return valueObj;\r\n};\r\nexport const getActionName = (type) => {\r\n    if (type === 'filter-ICON') return 'Create New Filter';\r\n    if (type === 'reorderColumn-ICON') return 'Columns Layout';\r\n    if (type === 'group-ICON') return 'Group Data';\r\n    if (type === 'sort-ICON') return 'Sort Data';\r\n    if (type === 'swap-ICON') return 'Clear Filter/Sort/Group/Search';\r\n    if (type === 'addDrawingType-ICON') return 'Drawing Type Organization';\r\n    if (type === 'color-cell-history-ICON') return 'Check Data Changed';\r\n    if (type === 'View Cell History') return 'Cell History';\r\n    if (type === 'Delete Drawing') return 'Delete Drawing';\r\n    // if (type === 'history-ICON') return 'Activity History';\r\n    if (type === 'colorized-ICON') return 'Drawing Colorization';\r\n    if (type && type.includes('Insert Drawings')) return 'Nos Of Drawings';\r\n\r\n    else return '';\r\n};\r\nexport const getModalWidth = (type) => {\r\n    if (type === 'history-ICON') return window.innerWidth * 0.8 + 20;\r\n    else return 520;\r\n};\r\n\r\n\r\n\r\n\r\nconst createParentRows = (arr) => {\r\n    let newRows = [];\r\n    arr.forEach((title, i) => {\r\n        newRows.push({\r\n            id: mongoObjectId(),\r\n            _rowLevel: 0,\r\n            expanded: true,\r\n            'Drawing Number': title\r\n        });\r\n    });\r\n    return newRows;\r\n};\r\nconst getParentRowsHandy = () => {\r\n    let arrParentTitle = [\r\n        'COLUMN AND WALL SETTING OUT Keyplan',\r\n        'UNIT TYPE LAYOUT TSO Plan',\r\n        'STAIRCASES and LIFT LOBBIES',\r\n        'ANCILLARY STRUCTURES',\r\n        'No Name 1',\r\n        'No Name 2',\r\n        'PBU Tile layout',\r\n        'Tile layout',\r\n        'Clubhouse',\r\n        'RCP',\r\n        'RCP Unit type',\r\n        'RCP Clubhouse',\r\n        'Swimming Pool',\r\n        'External Sections/ Elevations',\r\n        'Driveway/ Pavement',\r\n        'No Name 3',\r\n        'No Name 4',\r\n        'Carpark Details',\r\n        'M&E Details',\r\n        'FAÇADE Maintenance',\r\n        'No Name 5',\r\n        'TOILETS Details',\r\n    ];\r\n    let rows = createParentRows(arrParentTitle);\r\n    return rows;\r\n};\r\nconst getParent_IdHandy = (i) => {\r\n    if (i >= 3 && i <= 47) return 0;\r\n    if (i >= 49 && i <= 94) return 1;\r\n    if (i >= 96 && i <= 147) return 2;\r\n    if (i >= 149 && i <= 162) return 3;\r\n    if (i >= 164 && i <= 168) return 4;\r\n\r\n    if (i >= 170 && i <= 175) return 5;\r\n    if (i >= 177 && i <= 191) return 6;\r\n    if (i >= 193 && i <= 202) return 7;\r\n    if (i >= 204 && i <= 209) return 8;\r\n    if (i >= 211 && i <= 224) return 9;\r\n\r\n    if (i >= 226 && i <= 246) return 10;\r\n    if (i >= 248 && i <= 250) return 11;\r\n    if (i >= 252 && i <= 259) return 12;\r\n    if (i >= 261 && i <= 264) return 13;\r\n    if (i >= 266 && i <= 269) return 14;\r\n\r\n    if (i >= 271 && i <= 274) return 15;\r\n    if (i >= 276 && i <= 279) return 16;\r\n    if (i >= 281 && i <= 283) return 17;\r\n    if (i >= 285 && i <= 289) return 18;\r\n    if (i >= 291 && i <= 292) return 19;\r\n\r\n    if (i >= 294 && i <= 296) return 20;\r\n    if (i >= 298 && i <= 306) return 21;\r\n};\r\nconst getParentRowsSumang = () => {\r\n    let arrParentTitle = [\r\n        'GRID LINE',\r\n        'PRE-COMPUTATION',\r\n        'SUBSTATION',\r\n        'BASEMENT',\r\n        'EDECK',\r\n        'WSO (WALL SETTING-OUT PLANS) - BLK 42(11)',\r\n        'WSO (WALL SETTING-OUT PLANS) - BLK 44(12)',\r\n        'WSO (WALL SETTING-OUT PLANS) - BLK 22(1)',\r\n        'WSO (WALL SETTING-OUT PLANS) - BLK 24(3)',\r\n        'WSO (WALL SETTING-OUT PLANS) - BLK 26(4)',\r\n        'WSO (WALL SETTING-OUT PLANS) - BLK 32(6)',\r\n        'WSO (WALL SETTING-OUT PLANS) - BLK 34(7)',\r\n        'WSO (WALL SETTING-OUT PLANS) - BLK 28(5)',\r\n        'WSO (WALL SETTING-OUT PLANS) - BLK 46(13)',\r\n        'WSO (WALL SETTING-OUT PLANS) - BLK 36(8)',\r\n        'WSO (WALL SETTING-OUT PLANS) - BLK 30(2)',\r\n        'WSO (WALL SETTING-OUT PLANS) - BLK 38(9)',\r\n        'WSO (WALL SETTING-OUT PLANS) - BLK 40(10)',\r\n        'OVERALL FINISHING LAYOUT',\r\n        'SSS (STAIRCASE STOREY SHELTER)',\r\n        'REFLECTED CEILING PLAN',\r\n        'LIFT LOBBY',\r\n    ];\r\n    let rows = createParentRows(arrParentTitle);\r\n    return rows;\r\n};\r\nconst getParent_IdSumang = (i) => {\r\n    if (i >= 3 && i <= 4) return 0;\r\n    if (i >= 6 && i <= 6) return 1;\r\n    if (i >= 8 && i <= 9) return 2;\r\n    if (i >= 11 && i <= 20) return 3;\r\n    if (i >= 22 && i <= 35) return 4;\r\n\r\n    if (i >= 38 && i <= 43) return 5;\r\n    if (i >= 45 && i <= 50) return 6;\r\n    if (i >= 52 && i <= 59) return 7;\r\n    if (i >= 61 && i <= 70) return 8;\r\n    if (i >= 72 && i <= 78) return 9;\r\n\r\n    if (i >= 80 && i <= 85) return 10;\r\n    if (i >= 87 && i <= 92) return 11;\r\n    if (i >= 94 && i <= 100) return 12;\r\n    if (i >= 102 && i <= 107) return 13;\r\n    if (i >= 109 && i <= 114) return 14;\r\n\r\n    if (i >= 116 && i <= 121) return 15;\r\n    if (i >= 123 && i <= 128) return 16;\r\n    if (i >= 130 && i <= 135) return 17;\r\n    if (i >= 137 && i <= 175) return 18;\r\n    if (i >= 177 && i <= 211) return 19;\r\n\r\n    if (i >= 213 && i <= 213) return 20;\r\n    if (i >= 216 && i <= 254) return 21;\r\n};\r\n\r\nexport const getCurrentAndHistoryDrawings = (allProjects, headers) => {\r\n    let final = {};\r\n    Object.keys(allProjects).forEach(prj => {\r\n\r\n        let drawingTypeTree = prj === 'Sumang' ? getParentRowsSumang() : getParentRowsHandy();\r\n        drawingTypeTree.forEach(r => {\r\n            let headerKeyDrawingNumber = headers.find(hd => hd.text === 'Drawing Number').key;\r\n            r[headerKeyDrawingNumber] = r['Drawing Number'];\r\n            delete r['Drawing Number'];\r\n        });\r\n\r\n        let rows = prj === 'Sumang' ? allProjects['Sumang'].allDrawingsSorted : allProjects['Handy'].allDrawingsSorted;\r\n\r\n        let objChildren = {};\r\n        rows.forEach((r, i) => {\r\n            const parentIndex = prj === 'Sumang' ? getParent_IdSumang(i + 1) : getParent_IdHandy(i + 1);\r\n            objChildren[parentIndex] = [...objChildren[parentIndex] || [], r];\r\n        });\r\n\r\n        let historyOutput = [];\r\n        let rowsAllCurrentOutput = [];\r\n        Object.keys(objChildren).forEach(index => {\r\n            if (index !== 'undefined') {\r\n                let allRowsInEachFolder = objChildren[index];\r\n                let obj = {};\r\n                allRowsInEachFolder.forEach(r => {\r\n                    const key = `${r['Drawing Number'] || ''}-${r['Drawing Name'] || ''}`;\r\n                    obj[key] = [...obj[key] || [], r];\r\n                });\r\n\r\n                let rowCurrentOutput = [];\r\n                Object.keys(obj).forEach((key, i) => {\r\n                    const arr = obj[key];\r\n                    arr.sort((a, b) => ((a['Rev'] || '').toLowerCase() > (b['Rev'] || '').toLowerCase()) ? 1 : (((b['Rev'] || '').toLowerCase() > (a['Rev'] || '').toLowerCase()) ? -1 : 0));\r\n                    let rowsHistory = arr.filter((r, index) => index < arr.length - 1);\r\n                    let rowId = mongoObjectId();\r\n                    if (rowsHistory.length > 0) {\r\n                        let rowsHistoryOutput = rowsHistory.map(r => {\r\n                            let rowDataObj = { row: rowId };\r\n                            headers.forEach(hd => {\r\n                                if (r[hd.text]) rowDataObj.history = { ...rowDataObj.history || {}, [hd.key]: r[hd.text] };\r\n                            });\r\n                            return rowDataObj;\r\n                        });\r\n                        historyOutput = [...historyOutput, ...rowsHistoryOutput];\r\n                    };\r\n\r\n                    let rowCurrent = arr[arr.length - 1];\r\n                    let rowCurrentObj = {};\r\n\r\n                    headers.forEach(hd => {\r\n                        if (rowCurrent[hd.text]) rowCurrentObj.data = { ...rowCurrentObj.data || {}, [hd.key]: rowCurrent[hd.text] };\r\n                    });\r\n                    rowCurrentObj._id = rowId;\r\n                    rowCurrentObj.parentRow = drawingTypeTree[parseInt(index)].id;\r\n                    rowCurrentObj.level = 1;\r\n                    rowCurrentOutput.push(rowCurrentObj);\r\n                });\r\n                rowCurrentOutput.forEach((r, i) => {\r\n                    r.preRow = i === 0 ? null : rowCurrentOutput[i - 1]._id;\r\n                });\r\n                rowsAllCurrentOutput = [...rowsAllCurrentOutput, ...rowCurrentOutput];\r\n            };\r\n        });\r\n        final[prj] = {\r\n            rows: rowsAllCurrentOutput,\r\n            historyRows: historyOutput,\r\n            drawingTypeTree\r\n        };\r\n    });\r\n\r\n    return final;\r\n};\r\nconst getParentIdHandy = (i) => {\r\n    if (i >= 1 && i < 20) return 0;\r\n    if (i >= 20 && i < 42) return 1;\r\n    if (i >= 42 && i < 60) return 2;\r\n    if (i >= 60 && i < 76) return 3;\r\n    if (i >= 76 && i < 81) return 4;\r\n    if (i >= 81 && i < 87) return 5;\r\n    if (i >= 87 && i < 99) return 6;\r\n    if (i >= 99 && i < 109) return 7;\r\n    if (i >= 109 && i < 112) return 8;\r\n    if (i >= 112 && i < 126) return 9;\r\n    if (i >= 126 && i < 147) return 10;\r\n    if (i >= 147 && i < 150) return 11;\r\n    if (i >= 150 && i < 155) return 12;\r\n    if (i >= 155 && i < 159) return 13;\r\n    if (i >= 159 && i < 163) return 14;\r\n    if (i >= 163 && i < 167) return 15;\r\n    if (i >= 167 && i < 171) return 16;\r\n    if (i >= 171 && i < 174) return 17;\r\n    if (i >= 174 && i < 179) return 18;\r\n    if (i >= 179 && i < 181) return 19;\r\n    if (i >= 181 && i < 184) return 20;\r\n    if (i >= 184 && i < 193) return 21;\r\n};\r\n\r\nconst returnPreRowNullSumang = (i) => {\r\n    if (\r\n        i === 0 ||\r\n        i === 1 ||\r\n        i === 20 ||\r\n        i === 42 ||\r\n        i === 60 ||\r\n        i === 76 ||\r\n        i === 81 ||\r\n        i === 87 ||\r\n        i === 99 ||\r\n        i === 109 ||\r\n        i === 112 ||\r\n        i === 126 ||\r\n        i === 147 ||\r\n        i === 150 ||\r\n        i === 155 ||\r\n        i === 159 ||\r\n        i === 163 ||\r\n        i === 167 ||\r\n        i === 171 ||\r\n        i === 174 ||\r\n        i === 179 ||\r\n\r\n        i === 181 ||\r\n        i === 184\r\n    ) {\r\n        return true;\r\n    } else return false;\r\n};\r\nconst returnPreRowNullHandy = (i) => {\r\n    if (\r\n        i === 0 ||\r\n        i === 1 ||\r\n        i === 20 ||\r\n        i === 42 ||\r\n        i === 60 ||\r\n        i === 76 ||\r\n        i === 81 ||\r\n        i === 87 ||\r\n        i === 99 ||\r\n        i === 109 ||\r\n        i === 112 ||\r\n        i === 126 ||\r\n        i === 147 ||\r\n        i === 150 ||\r\n        i === 155 ||\r\n        i === 159 ||\r\n        i === 163 ||\r\n        i === 167 ||\r\n        i === 171 ||\r\n        i === 174 ||\r\n        i === 179 ||\r\n\r\n        i === 181 ||\r\n        i === 184\r\n    ) {\r\n        return true;\r\n    } else return false;\r\n};\r\n\r\n\r\n\r\nexport const reorderRowsFnc = (data) => {\r\n    let rows = [...data];\r\n    let rowsProcessed = [];\r\n    let firstRowIndex = rows.findIndex(row => row._preRow === null);\r\n    while (firstRowIndex >= 0) {\r\n        let preRow = rows.splice(firstRowIndex, 1)[0];\r\n        while (preRow) {\r\n            rowsProcessed.push(preRow);\r\n            let nextRowIndex = rows.findIndex(row => String(row._preRow) == String(preRow.id));\r\n            if (nextRowIndex >= 0) {\r\n                preRow = rows.splice(nextRowIndex, 1)[0];\r\n            } else {\r\n                preRow = null;\r\n            };\r\n        };\r\n        firstRowIndex = rows.findIndex((row) => row._preRow === null);\r\n    };\r\n    return rowsProcessed;\r\n};","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\constants\\index.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\_dashboardComp\\utils\\functionDashboard.js",["433"],"import Axios from 'axios';\r\nimport _ from 'lodash';\r\nimport moment from 'moment';\r\nimport { _SelectColumnFilter } from '../componentsDashboard/_TableDrawingList';\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport const api = Axios.create({\r\n    baseURL: '/api',\r\n    headers: {\r\n        'Content-Type': 'application/json'\r\n    }\r\n});\r\n\r\n\r\n\r\nexport const removeUnwantedHeaders = (columnsIndexArray) => {\r\n\r\n    const unwantedHeader = [\r\n        'Delta_Date',\r\n        'Delta_IT_CT',\r\n        'Delta_Issue',\r\n        'Delta_KTP'\r\n    ];\r\n    unwantedHeader.forEach(hd => {\r\n        delete columnsIndexArray[hd];\r\n    });\r\n    return columnsIndexArray;\r\n};\r\n\r\n\r\n\r\n\r\nexport const getDataConverted = (projectArray) => {\r\n    let dataOutput = {};\r\n    for (let i = 0; i < projectArray.length; i++) {\r\n\r\n        // get the column header\r\n        const project = projectArray[i];\r\n        const categoryArray = _.map(project.columns, 'title');\r\n        let columnsIndexArray = {};\r\n        categoryArray.forEach(cate => {\r\n            project.columns.forEach(cl => {\r\n                if (cl.title === cate) columnsIndexArray[cate] = cl.index;\r\n            });\r\n        });\r\n\r\n        const indexDrawingName = columnsIndexArray['Drawing Name'];\r\n        const indexRev = columnsIndexArray['Rev'];\r\n\r\n        let allDrawings = [];\r\n        let allDrawingsLatestRevision = [];\r\n\r\n        for (let i = 0; i < project.rows.length; i++) {\r\n            const dwg = project.rows[i];\r\n            if (dwg.cells[indexDrawingName].value === undefined) continue; // make sure all drawing name is keyed in\r\n            allDrawings.push([...dwg.cells]);\r\n\r\n            if (dwg.cells[indexRev].value === undefined) {\r\n                allDrawingsLatestRevision.push([...dwg.cells]);\r\n                continue;\r\n            };\r\n\r\n            let found = false;\r\n            for (let j = 0; j < allDrawingsLatestRevision.length; j++) {\r\n                if (allDrawingsLatestRevision[j][indexDrawingName].value === dwg.cells[indexDrawingName].value) {\r\n                    found = true;\r\n                    if (String(allDrawingsLatestRevision[j][indexRev].value) < String(dwg.cells[indexRev].value)) {\r\n                        allDrawingsLatestRevision.splice(j, 1);\r\n                        allDrawingsLatestRevision.push([...dwg.cells]);\r\n                    };\r\n                    break;\r\n                };\r\n            };\r\n            if (!found) allDrawingsLatestRevision.push([...dwg.cells]);\r\n        };\r\n\r\n        dataOutput[project.name.slice(0, project.name.length - 17)] = {\r\n            columnsIndexArray: removeUnwantedHeaders(columnsIndexArray),\r\n            allDrawings,\r\n            allDrawingsLatestRevision\r\n        };\r\n    };\r\n    return dataOutput;\r\n};\r\n\r\n\r\n\r\nexport const getAllDrawingSameValueInOneColumn = (data, column, dataType) => {\r\n\r\n    const { columnsIndexArray, allDrawings, allDrawingsLatestRevision } = data;\r\n\r\n    const drawings = dataType === 'all' ? allDrawings : allDrawingsLatestRevision;\r\n    const indexCategory = columnsIndexArray[column];\r\n\r\n    let drawingCount = {};\r\n    let drawingList = {};\r\n\r\n    drawings.forEach(dwg => {\r\n        const { value } = dwg[indexCategory];\r\n\r\n        drawingCount[value] = (drawingCount[value] || 0) + 1;\r\n        drawingList[value] = [...drawingList[value] || [], dwg];\r\n    });\r\n\r\n    return {\r\n        drawingCount,\r\n        drawingList\r\n    };\r\n};\r\n\r\n\r\n\r\nexport const getDrawingLateNow = (data, type) => {\r\n\r\n    const { allDrawingsLatestRevision, columnsIndexArray } = data;\r\n\r\n    const dwgsLateNow = [];\r\n    const columnHeader = type === 'getApproval' ? 'get Approval'\r\n        : type === 'drgToConsultant' ? 'Drg to Consultant' : null;\r\n\r\n    allDrawingsLatestRevision.forEach(dwg => {\r\n        const status = dwg[columnsIndexArray['Status']].value;\r\n        // make sure drawing is not approved or consultant reviewing\r\n        if (status && (status.includes('Approved') || status === 'Consultant reviewing')) return;\r\n\r\n        const dateT = dwg[columnsIndexArray[`${columnHeader} (T)`]].value;\r\n        const dateA = dwg[columnsIndexArray[`${columnHeader} (A)`]].value;\r\n        if (dateT === undefined || dateA !== undefined) return;\r\n\r\n        const diff = moment(dateT).diff(moment(), 'days');\r\n        if (diff < 0) dwgsLateNow.push([...dwg]);\r\n    });\r\n    return dwgsLateNow;\r\n};\r\n\r\nexport const getDrawingLateNow1 = (drawings, type) => {\r\n\r\n    const dwgsLateNow = [];\r\n    drawings.forEach(dwg => {\r\n        const status = dwg['Status'];\r\n        // make sure drawing is not approved or consultant reviewing\r\n        if (status && (status.includes('Approved') || status === 'Consultant reviewing')) return;\r\n\r\n        const dateT = dwg[`${type} (T)`];\r\n        const dateA = dwg[`${type} (A)`];\r\n        if (dateT === undefined || dateA !== undefined) return;\r\n\r\n        const diff = moment(dateT).diff(moment(), 'days');\r\n        if (diff < 0) dwgsLateNow.push(dwg);\r\n    });\r\n    return dwgsLateNow;\r\n};\r\n\r\n\r\n\r\nexport const mergeUndefined = ({ drawingCount, drawingList }, mergeWith, columnsIndexArray, columnHeader) => {\r\n    if (drawingCount['undefined'] === undefined) return;\r\n\r\n    drawingCount[mergeWith] = (drawingCount[mergeWith] || 0) + drawingCount['undefined'];\r\n    delete drawingCount['undefined'];\r\n\r\n    drawingList[mergeWith] = [...drawingList[mergeWith] || [], ...drawingList['undefined']];\r\n    delete drawingList['undefined'];\r\n\r\n    return {\r\n        drawingCount,\r\n        drawingList\r\n    };\r\n};\r\n\r\n\r\nexport const formatStringNameToId = (str) => {\r\n    let mystring = str.replace(/ /g, '').replace(/\\(|\\)/g, '');\r\n    return mystring.charAt(0).toLowerCase() + mystring.slice(1);\r\n};\r\n\r\n\r\nexport const pickDataToTable = (drawings, columnsIndexArray) => {\r\n    let arr = [];\r\n    drawings.forEach(dwg => {\r\n        let obj = {};\r\n        Object.keys(columnsIndexArray).forEach(header => {\r\n            obj[formatStringNameToId(header)] = dwg[columnsIndexArray[header]].value || '. ';\r\n        });\r\n        arr.push(obj);\r\n    });\r\n    return arr;\r\n};\r\n\r\n\r\nexport const convertDataToStackedChart = (data) => {\r\n    let dataChart = [];\r\n    let allKeys = [];\r\n    data && Object.keys(data).forEach(project => {\r\n        const { drawingCount } = mergeUndefined(getAllDrawingSameValueInOneColumn(data[project], 'Status'), 'Not Started');\r\n        dataChart.push({ ...drawingCount, name: project });\r\n        allKeys = [...allKeys, ...Object.keys(drawingCount)];\r\n    });\r\n    const itemArr = [...new Set(allKeys)];\r\n\r\n    itemArr.forEach(key => {\r\n        dataChart.forEach(projectData => {\r\n            if (key in projectData) return;\r\n            projectData[key] = 0;\r\n        });\r\n    });\r\n\r\n    return {\r\n        dataChart,\r\n        itemArr\r\n    };\r\n};\r\n\r\n\r\n\r\nexport const sortStatusOrder = (data) => {\r\n\r\n    const statusArr = [...data];\r\n    const inputStackData = [\r\n        'Not Started',\r\n        '1st cut of model in-progress',\r\n        '1st cut of drawing in-progress',\r\n        'Pending design',\r\n        'Consultant reviewing',\r\n        'Reject and resubmit',\r\n        'Approved with comments, to Resubmit',\r\n        'Revise In-Progress',\r\n        'Approved with Comment, no submission Required',\r\n        'Approved for Construction',\r\n    ];\r\n    let arr = [];\r\n    inputStackData.forEach(element => {\r\n        statusArr.forEach(e => {\r\n            if (element === e) arr.push(element);\r\n        });\r\n    });\r\n    if (arr.length === 0) return statusArr;\r\n    return arr;\r\n};\r\n\r\n\r\n\r\nexport const randomInteger = (min, max) => {\r\n    return Math.floor(Math.random() * (max - min + 1)) + min;\r\n};\r\n\r\n\r\nexport const createDummyRecords = () => {\r\n\r\n    let categoryArr = [\r\n        'drawingLateApproval',\r\n        'drawingLateSubmission',\r\n        'drawingLateConstruction',\r\n        'drawingApprovedForConstruction',\r\n        'drawingApprovedWithCommentNoSubmissionRequired',\r\n        'drawingApprovedWithCommentsToResubmit',\r\n        // 'drawingReviseInProgress',\r\n        // 'drawingConsultantReviewing',\r\n        // 'drawing1stCutOfDrawingInProgress',\r\n        // 'drawingNotStarted',\r\n    ];\r\n\r\n    let recordArray = {};\r\n\r\n    categoryArr.forEach(cate => {\r\n        let arr = {};\r\n        for (let i = 0; i < 100; i++) {\r\n            arr[moment(new Date(2020, 6, 21)).add(i, 'day')._d] = randomInteger(1, 15);\r\n        };\r\n        recordArray[cate] = arr;\r\n    });\r\n\r\n    return recordArray;\r\n};\r\n\r\n\r\nconst getColumnWidth = (rows, accessor, headerText) => {\r\n    const maxWidth = 400;\r\n    const magicSpacing = 10;\r\n    const cellLength = Math.max(\r\n        ...rows.map(row => (`${row[accessor]}` || '').length),\r\n        headerText.length,\r\n    );\r\n\r\n    return Math.min(maxWidth, cellLength * magicSpacing);\r\n};\r\n\r\n\r\n\r\n\r\nconst getHeaderWidth = (header) => {\r\n\r\n    if (header === 'RFA Ref') return 270;\r\n    else if (\r\n        header === 'Block/Zone' ||\r\n        header === 'Level' || header === 'Unit/CJ' ||\r\n        header === 'Drg Type' || header === 'Use For' ||\r\n        header === 'Coordinator In Charge' || header === 'Modeller' ||\r\n        header === 'Model Progress' || header === 'Drawing Progress' ||\r\n        header === 'Construction Start'\r\n    ) return 200;\r\n    else if (header === 'Construction Issuance Date') return 220;\r\n    else if (header === 'Drawing') return 200;\r\n\r\n    else if (\r\n        header === 'Drg To Consultant (A)' ||\r\n        header === 'Drg To Consultant (T)' ||\r\n        header === 'Get Approval (A)' ||\r\n        header === 'Get Approval (T)'\r\n    ) return 220;\r\n\r\n    else if (header.includes('(A)') || header.includes('(T)')) return 190;\r\n\r\n\r\n\r\n\r\n    else if (header === 'Rev') return 150;\r\n    else if (header === 'Status') return 380;\r\n    else if (header === 'Remark') return 350;\r\n    else if (header === 'Drawing Number') return 300;\r\n    else if (header === 'Drawing Name') return 350;\r\n    else return 300;\r\n\r\n};\r\n\r\n\r\n\r\n\r\nexport const getColumnsHeader1 = (columnsIndexArray) => {\r\n\r\n    let columnsName = [\r\n        {\r\n            Header: '',\r\n            id: 'index',\r\n            accessor: (row, i) => i + 1,\r\n            width: 50,\r\n        },\r\n    ];\r\n\r\n    const filterSelect = (key) => {\r\n        if (\r\n            key === 'Status' ||\r\n            key === 'Rev' ||\r\n            key === 'Modeller' ||\r\n            key === 'Remark' ||\r\n            key === 'Coordinator In Charge' ||\r\n            key === 'Drg Type' ||\r\n            key === 'Use For' ||\r\n            key === 'Block/Zone' ||\r\n            key === 'Level' ||\r\n            key === 'Unit/CJ' ||\r\n            key === 'RFA Ref'\r\n        ) {\r\n            return true;\r\n        };\r\n    };\r\n\r\n    columnsIndexArray.forEach(hd => {\r\n        const width = getHeaderWidth(hd);\r\n\r\n        // const accessor = formatStringNameToId(hd);\r\n        const accessor = hd;\r\n\r\n        if (filterSelect(hd)) {\r\n            columnsName.push({\r\n                Header: hd,\r\n                Filter: _SelectColumnFilter,\r\n                accessor,\r\n                width,\r\n            });\r\n        } else {\r\n            columnsName.push({\r\n                Header: hd,\r\n                accessor,\r\n                width,\r\n            });\r\n        };\r\n    });\r\n    return columnsName;\r\n};\r\n\r\n\r\n\r\nexport const getHeaderSorted = (columnsData, columnsHeader) => {\r\n\r\n    let arr = [];\r\n    columnsData.forEach(headerData => {\r\n        if (headerData.Header === '') {\r\n            arr.push(headerData);\r\n            return;\r\n        };\r\n        columnsHeader.forEach(header => {\r\n            if (headerData.Header === header) arr.push(headerData);\r\n        });\r\n    });\r\n    return arr;\r\n};\r\nexport const getHeaderSorted1 = (columnsData, columnsHeader) => {\r\n    let arr = [];\r\n    columnsData.forEach(headerData => {\r\n        if (headerData.Header === '') {\r\n            arr.push(headerData);\r\n            return;\r\n        };\r\n        columnsHeader.forEach(header => {\r\n            if (headerData.Header === header) arr.push(headerData);\r\n        });\r\n    });\r\n    return arr;\r\n};\r\n\r\n\r\nexport const countAverage = (nums) => nums.reduce((a, b) => (a + b)) / nums.length;\r\n\r\n\r\nexport const recordGetAllMonth = (data, category) => {\r\n    let arr = [];\r\n    Object.keys(data[category]).forEach(item => {\r\n        arr.push(moment(item).add(-1, 'day').format('MM/YY'));\r\n    });\r\n    return [...new Set(arr)];\r\n};\r\n\r\n\r\n\r\nexport const recordDataToChartDaily = (data, category, month) => {\r\n    let arr = [];\r\n    Object.keys(data[category]).forEach(item => {\r\n        const date = moment(item).add(-1, 'day');\r\n        if (date.format('MM/YY') === month) {\r\n            arr.push({\r\n                date: date.format('DD'),\r\n                value: data[category][item]\r\n            });\r\n        };\r\n    });\r\n    return arr;\r\n};\r\n\r\n\r\nexport const recordDataToChartWeekly = (data, category) => {\r\n    let arr = [];\r\n    Object.keys(data[category]).forEach(item => {\r\n        const date = moment(item).add(-1, 'day');\r\n        arr.push({\r\n            week: date.format('W'),\r\n            month: date.format('MM'),\r\n            year: date.format('YY'),\r\n            value: data[category][item]\r\n        });\r\n    });\r\n    let groups = {};\r\n    for (let i = 0; i < arr.length; i++) {\r\n        let weekName = `W${arr[i].week} ${arr[i].month}/${arr[i].year}`;\r\n        if (!groups[weekName]) {\r\n            groups[weekName] = [];\r\n        };\r\n        groups[weekName].push(arr[i].value);\r\n    };\r\n    let arrOutput = [];\r\n    for (let week in groups) {\r\n        arrOutput.push({ week, value: Math.round(countAverage(groups[week])) });\r\n    };\r\n    return arrOutput;\r\n};\r\n\r\n\r\nexport const recordDataToChartMonthly = (data, category) => {\r\n    let arr = [];\r\n    Object.keys(data[category]).forEach(item => {\r\n        const date = moment(item).add(-1, 'day');\r\n        arr.push({\r\n            week: date.format('W'),\r\n            month: date.format('MM'),\r\n            year: date.format('YY'),\r\n            value: data[category][item]\r\n        });\r\n    });\r\n    let groups = {};\r\n    for (let i = 0; i < arr.length; i++) {\r\n        let monthName = `${arr[i].month}/${arr[i].year}`;\r\n        if (!groups[monthName]) {\r\n            groups[monthName] = [];\r\n        };\r\n        groups[monthName].push(arr[i].value);\r\n    };\r\n    let arrOutput = [];\r\n    for (let month in groups) {\r\n        arrOutput.push({ month, value: Math.round(countAverage(groups[month])) });\r\n    };\r\n    return arrOutput;\r\n};\r\n\r\n\r\n\r\n\r\nexport const changeColumnOrder = (arr, accessor, leftOrRight, to) => {\r\n    const array = [...arr];\r\n    let cl = array.find(item => item.accessor === accessor);\r\n    const index = array.indexOf(cl);\r\n    const f = array.splice(index, 1)[0];\r\n    if (leftOrRight) {\r\n        array.splice(index + leftOrRight, 0, f);\r\n    } else {\r\n        array.splice(to, 0, f);\r\n    };\r\n    return array;\r\n};","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\_dashboardComp\\assets\\constantDashboard.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\_dashboardComp\\PageDashboard.js",["434","435","436","437","438","439","440","441","442","443"],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\PageSpreadsheet.js",["444","445","446","447","448","449"],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\_dashboardComp\\componentsDashboard\\_ChartBarDrawing.js",["450"],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\_dashboardComp\\componentsDashboard\\CardPanelProject.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\_dashboardComp\\componentsDashboard\\_ChartBarDrawingLate.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\_dashboardComp\\componentsDashboard\\_ChartBarStack.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\_dashboardComp\\componentsDashboard\\_ChartProgress.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\_dashboardComp\\componentsDashboard\\_ChartPieDrawing.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\CellIndex.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\_dashboardComp\\componentsDashboard\\_FormPivot.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\_dashboardComp\\componentsDashboard\\_TableDrawingList.js",["451","452","453","454"],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\CellHeader.js",["455","456","457","458","459","460"],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\Cell.js",["461","462"],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\IconTable.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\InputSearch.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\PanelFunction.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\PanelSetting.js",["463","464","465","466","467","468","469","470","471"],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\_dashboardComp\\componentsDashboard\\CardPanel.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\_dashboardComp\\componentsDashboard\\PanelRightClick.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\_dashboardComp\\componentsDashboard\\ChartBarRecordPanel.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\PanelCalendar.js",["472","473"],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\TableCellHistory.js",["474","475"],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\TableDrawingDetail.js",["476"],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\TableActivityHistory.js",["477","478","479","480","481","482"],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\ReorderColumnForm.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\PanelConfirm.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\FormSort.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\FormFilter.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\FormGroup.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\FormCellColorizedCheck.js",["483","484"],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\FormDrawingTypeOrder.js",["485","486"],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\FormDateAutomation.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\ButtonGroupComp.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\ColorizedForm.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\_dashboardComp\\componentsDashboard\\ChartBarRecord.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\FormFilterActivityHistory.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\PanelCalendarDuration.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\ButtonStyle.js",["487"],"D:\\994 WOH HUP 2020\\Projects\\deploy-meeting\\client\\src\\index.js",[],["488","489"],"D:\\994 WOH HUP 2020\\Projects\\deploy-meeting\\client\\src\\App.js",[],"D:\\994 WOH HUP 2020\\Projects\\deploy-meeting\\client\\src\\reportWebVitals.js",[],"D:\\994 WOH HUP 2020\\Projects\\deploy-meeting\\client\\src\\contexts\\projectContext.js",[],"D:\\994 WOH HUP 2020\\Projects\\deploy-meeting\\client\\src\\contexts\\cellContext.js",[],"D:\\994 WOH HUP 2020\\Projects\\deploy-meeting\\client\\src\\contexts\\rowContext.js",[],"D:\\994 WOH HUP 2020\\Projects\\deploy-meeting\\client\\src\\layouts\\PageSpreadsheet.js",["490","491","492","493","494","495","496"],"D:\\994 WOH HUP 2020\\Projects\\deploy-meeting\\client\\src\\_dashboardComp\\PageDashboard.js",["497","498","499","500","501","502","503","504","505","506"],"import { Col, Divider, Modal, Row, Skeleton } from 'antd';\nimport Axios from 'axios';\nimport React, { useEffect, useState } from 'react';\nimport { SERVER_URL } from './assets/constantDashboard';\nimport CardPanelProject from './componentsDashboard/CardPanelProject';\nimport _ChartBarDrawing from './componentsDashboard/_ChartBarDrawing';\nimport _ChartBarDrawingLate from './componentsDashboard/_ChartBarDrawingLate';\nimport _ChartBarStack from './componentsDashboard/_ChartBarStack';\nimport _ChartPieDrawing from './componentsDashboard/_ChartPieDrawing';\nimport _ChartProgress from './componentsDashboard/_ChartProgress';\nimport _FormPivot from './componentsDashboard/_FormPivot';\nimport _TableDrawingList from './componentsDashboard/_TableDrawingList';\n\n\n\n\nconst convertDataFromDB = (data, projectsArray) => {\n    \n    let output = {};\n\n    data.forEach(projectData => {\n        const { publicSettings: { headers }, rows, _id } = projectData;\n        if (rows.length <= 20) return;\n        \n        let projectName = projectsArray.find(dt => dt.id === _id).name;\n\n        let headersArr = headers.map(hd => hd.text);\n\n        rows.forEach(r => {\n            if (!r.Rev) r.Rev = '0';\n            if (!r.Status) r.Status = 'Not Started';\n        });\n\n        const getUniqueValueByColumns = (rows, header) => {\n            let valueArr = [];\n            rows.forEach(row => valueArr.push(row[header]));\n            return [...new Set(valueArr)];\n        };\n        let revArr = getUniqueValueByColumns(rows, 'Rev');\n        let inputStack = getUniqueValueByColumns(rows, 'Status');\n        let drawingCountSubStatus = [];\n        let drawingListSubStatus = {};\n        revArr.forEach(rev => {\n            let rowsFilter = rows.filter(r => r['Rev'] === rev);\n            let obj = {};\n            let objDwgs = {};\n            rowsFilter.forEach(r => {\n                obj[r.Status] = (obj[r.Status] || 0) + 1;\n                objDwgs[r.Status] = [...objDwgs[r.Status] || [], r];\n            });\n            obj.name = rev;\n            drawingCountSubStatus.push(obj);\n            drawingListSubStatus[rev] = objDwgs;\n        });\n\n\n        let drawingCountStatus = {};\n        let drawingsListStatus = {};\n        inputStack.forEach(stt => {\n            let rrrArr = rows.filter(r => r.Status === stt);\n            rrrArr.forEach(r => {\n                drawingCountStatus[stt] = (drawingCountStatus[stt] || 0) + 1;\n            });\n            drawingsListStatus[stt] = rrrArr;\n        });\n        const dataPieChartStatus = Object.keys(drawingCountStatus).map(key => ({ name: key, value: drawingCountStatus[key] }));\n\n        output[projectName] = {\n            rowsAll: rows,\n            drawingCountSubStatus,\n            drawingListSubStatus,\n            inputStack,\n            headers: headersArr,\n            drawingCountStatus,\n            drawingsListStatus,\n            dataPieChartStatus,\n            projectsCount: data.length\n        };\n    });\n    return output;\n};\n\n\nconst PageDashboard = ({ projectsArray, token }) => {\n\n    const [dataDB, setDataDB] = useState(null);\n    const [loading, setLoading] = useState(false);\n    const [dummy, setDummy] = useState({});\n\n\n    useEffect(() => {\n\n        const loadData = async () => {\n            setLoading(true);\n            try {\n                setDummy(dummyData);\n\n                const resDB = await Axios.post(`${SERVER_URL}/sheet/find-many`, { token, sheetIds: projectsArray.map(x => x.id) });\n                setDataDB(convertDataFromDB(resDB.data, projectsArray));\n\n                setLoading(false);\n\n            } catch (err) {\n                console.log(err);\n                setLoading(false);\n            };\n        };\n        loadData();\n    }, []);\n\n\n\n    const [_drawingTableVisible, set_DrawingTableVisible] = useState(false);\n    const [_drawingTableData, set_DrawingTableData] = useState(null);\n    const _openDrawingTable = (projectName, title, drawings, headers, columnsHeaderSorted, isSelectedShownOnly) => {\n        set_DrawingTableData({ projectName, title, drawings, headers, columnsHeaderSorted, isSelectedShownOnly });\n        set_DrawingTableVisible(true);\n    };\n    const _closeTableAndReset = () => {\n        set_DrawingTableVisible(false);\n        set_DrawingTableData(null);\n    };\n\n\n    return (\n        <div style={{ marginTop: 60 }}>\n            <Row justify='space-around' style={{ margin: '25px 0 5px 0' }}>\n                {dataDB && Object.keys(dataDB).length > 1 && (\n                    <>\n                        <_ChartBarDrawingLate data={dummy.dummyLateConstruction} title='No Of Drawing Late Construction' />\n                        <_ChartBarDrawingLate data={dataDB} title='No Of Drawing Late Approval' />\n                        <_ChartBarStack data={dataDB} title='Drawing Status' />\n                        <_ChartBarStack data={dummy.productivityDummy} title='Productivity - (days per drawing)' />\n                    </>\n                )}\n            </Row>\n\n            {!loading && dataDB ? (\n                <div style={{ padding: '0 12px' }}>\n                    {Object.keys(dataDB).map(projectName => {\n                        return (\n                            <CardPanelProject\n                                title={projectName.toUpperCase()}\n                                key={projectName}\n                                projectsCount={dataDB[projectName].projectsCount}\n                            >\n                                <ChartPanel title='Overdue submissions'>\n                                    <_ChartProgress\n                                        data={dataDB[projectName]}\n                                        openDrawingTable={_openDrawingTable}\n                                        projectName={projectName}\n\n                                    />\n                                </ChartPanel>\n\n                                <ChartPanel title='Drawing Status'>\n                                    <_ChartPieDrawing\n                                        data={dataDB[projectName]}\n                                        openDrawingTable={_openDrawingTable}\n                                        projectName={projectName}\n                                    />\n                                </ChartPanel>\n\n                                <ChartPanel title='Nos of drawing per revision'>\n                                    <_ChartBarDrawing\n                                        data={dataDB[projectName]}\n                                        openDrawingTable={_openDrawingTable}\n                                        projectName={projectName}\n                                    />\n                                </ChartPanel>\n\n                                <ChartPanel title='Sorted table by category'>\n                                    <_FormPivot\n                                        data={dataDB[projectName]}\n                                        openDrawingTable={_openDrawingTable}\n                                        projectName={projectName}\n                                    />\n                                </ChartPanel>\n\n                            </CardPanelProject>\n                        )\n                    })}\n\n                </div>\n            ) : <SkeletonCard />}\n\n\n            {_drawingTableData && (\n                <Modal\n                    title={_drawingTableData.projectName}\n                    visible={_drawingTableVisible}\n                    footer={false}\n                    onCancel={_closeTableAndReset}\n                    width={0.9 * window.innerWidth}\n                    height={0.7 * window.innerHeight}\n                    // centered={true}\n                    style={{\n                        // justifyContent: 'center',\n                        // alignItems: 'center'\n                    }}\n                    bodyStyle={{\n                        paddingTop: 10\n                    }}\n                >\n                    <div style={{ display: 'flex' }}>\n                        <h3 style={{ padding: '0 0 10px 0' }}>{_drawingTableData.title.type}</h3>\n                        <Divider type='vertical' style={{ height: 25 }} />\n                        <h3 style={{ padding: '0 10px' }}>{_drawingTableData.title.category}</h3>\n                        <Divider type='vertical' style={{ height: 25 }} />\n                        <h3 style={{ padding: '0 10px' }}>{_drawingTableData.drawings.length + ' drawings'}</h3>\n                    </div>\n\n                    <_TableDrawingList\n                        data={_drawingTableData}\n                        title={_drawingTableData.title}\n                    />\n\n                </Modal>\n            )}\n        </div>\n\n    );\n};\n\nexport default PageDashboard;\n\n\n\nconst ChartPanel = ({ title, children }) => {\n    return (\n        <Col style={{ marginBottom: 10 }} xs={24} md={12} xl={6}>\n            <div style={{ fontSize: '18px', textAlign: 'center', fontWeight: 'bold' }}>{title}</div>\n            {children}\n        </Col>\n    );\n};\n\n\nconst SkeletonCard = () => {\n    return (\n        <div style={{ padding: '0 12px' }}>\n            <CardPanelProject title='Project loading ...'>\n                <div style={{ padding: '0 3px' }}>\n                    <Skeleton paragraph={{ rows: 14 }} active />\n                </div>\n            </CardPanelProject>\n        </div>\n    );\n};\n\n\n\nconst dummyData = {\n    productivityDummy: {\n        inputData: [\n            {\n                // 'Consultant review and reply': 4,\n                // 'Create update drawing': 3,\n                // 'Create update model': 7,\n                // 'name': 'Sumang',\n                'Consultant review and reply': 0,\n                'Create update drawing': 0,\n                'Create update model': 0,\n                'name': '..'\n            },\n            {\n                // 'Consultant review and reply': 5,\n                // 'Create update drawing': 4,\n                // 'Create update model': 6,\n                // 'name': 'Handy',\n                'Consultant review and reply': 0,\n                'Create update drawing': 0,\n                'Create update model': 0,\n                'name': '.',\n            }\n        ],\n        inputStack: ['Consultant review and reply', 'Create update drawing', 'Create update model']\n    },\n    dummyLateConstruction: [\n        // { name: 'Handy', value: 6 },\n        // { name: 'Sumang', value: 15 },\n        { name: '.', value: 0 },\n        { name: '..', value: 0 },\n    ]\n};\n","D:\\994 WOH HUP 2020\\Projects\\deploy-meeting\\client\\src\\contexts\\_createDataContext.js",["507"],"import React, { createContext, useReducer } from 'react';\n\n\nexport default (reducer, actions, initValue) => {\n\n    const Context = createContext();\n\n    const Provider = ({ children }) => {\n        const [state, dispatch] = useReducer(reducer, initValue);\n\n        const boundActions = {};\n        for (let key in actions) {\n            boundActions[key] = actions[key](dispatch);\n        };\n\n        return (\n            <Context.Provider value={{ state, ...boundActions }}>\n                {children}\n            </Context.Provider>\n        );\n    };\n    return { Context, Provider };\n};\n","D:\\994 WOH HUP 2020\\Projects\\deploy-meeting\\client\\src\\layouts\\pageSpreadsheet\\Cell.js",["508","509"],"D:\\994 WOH HUP 2020\\Projects\\deploy-meeting\\client\\src\\layouts\\pageSpreadsheet\\CellHeader.js",["510","511","512","513","514","515"],"import React from 'react';\n\n\nconst CellHeader = (props) => {\n\n    const { className, column, columns, columnIndex, onMouseDownColumnHeader, headerIndex, container } = props;\n\n    return (\n        <div\n            style={{\n                height: '100%',\n                width: '100%',\n                verticalAlign: 'middle',\n            }}\n            // onMouseDown={(e) => onMouseDownColumnHeader(e, column.title)}\n        >\n            {column.title}\n        </div>\n    );\n};\n\nexport default CellHeader;\n","D:\\994 WOH HUP 2020\\Projects\\deploy-meeting\\client\\src\\layouts\\pageSpreadsheet\\PanelFunction.js",[],"D:\\994 WOH HUP 2020\\Projects\\deploy-meeting\\client\\src\\layouts\\pageSpreadsheet\\InputSearch.js",[],"D:\\994 WOH HUP 2020\\Projects\\deploy-meeting\\client\\src\\layouts\\pageSpreadsheet\\IconTable.js",[],"D:\\994 WOH HUP 2020\\Projects\\deploy-meeting\\client\\src\\layouts\\pageSpreadsheet\\PanelSetting.js",["516","517","518","519","520","521","522","523","524","525"],"import { Input } from 'antd';\nimport Axios from 'axios';\nimport moment from 'moment';\nimport React, { useContext, useState } from 'react';\nimport { SERVER_URL } from '../../constants';\nimport { Context as CellContext } from '../../contexts/cellContext';\nimport { Context as ProjectContext } from '../../contexts/projectContext';\nimport { Context as RowContext } from '../../contexts/rowContext';\nimport { convertCellTempToHistory, convertDrawingVersionToHistory, debounceFnc, extractCellInfo, genId, reorderRowsFnc } from '../../utils';\nimport { reorderDrawingsByDrawingTypeTree } from '../PageSpreadsheet';\nimport ButtonGroupComp from './ButtonGroupComp';\nimport ColorizedForm from './ColorizedForm';\nimport FormCellColorizedCheck from './FormCellColorizedCheck';\nimport FormDateAutomation from './FormDateAutomation';\nimport FormDrawingTypeOrder from './FormDrawingTypeOrder';\nimport FormFilter from './FormFilter';\nimport FormGroup from './FormGroup';\nimport FormSort from './FormSort';\nimport PanelConfirm from './PanelConfirm';\nimport ReorderColumnForm from './ReorderColumnForm';\nimport TableActivityHistory from './TableActivityHistory';\nimport TableCellHistory from './TableCellHistory';\nimport TableDrawingDetail from './TableDrawingDetail';\n\n\n\nconst PanelSetting = (props) => {\n\n   const { state: stateRow } = useContext(RowContext);\n   const { state: stateProject } = useContext(ProjectContext);\n   const { state: stateCell, getCellModifiedTemp, OverwriteCellsModified } = useContext(CellContext);\n\n   const { panelType, panelSettingType, commandAction, onClickCancelModal, setLoading } = props;\n\n\n   const applyReorderColumns = (data) => commandAction({ type: 'reorder-columns', data });\n\n   const applyFilter = (data) => commandAction({ type: 'filter-by-columns', data });\n\n   const applyResetFilter = () => commandAction({ type: 'reset-filter-sort' });\n\n   const applyGroup = (data) => commandAction({ type: 'group-columns', data });\n\n   const applyColorization = (data) => commandAction({ type: 'drawing-colorized', data });\n\n   const setCellHistoryArr = debounceFnc((data) => commandAction({ type: 'highlight-cell-history', data }), 1);\n\n   const applySort = ({ type, rowsOutput: data }) => {\n      commandAction({\n         type: type === 'Sort Rows In Drawing Type' ? 'sort-data-drawing-type' : 'sort-data-project',\n         data,\n      });\n   };\n\n   const onClickInsertRow = (nosOfRows) => {\n      let { rowsAll, idRowsNew, rowsUpdatePreRowOrParentRow } = stateRow;\n\n      let idsArr = genId(nosOfRows);\n      idRowsNew = [...idRowsNew, ...idsArr];\n\n      let newRows = [];\n      let rowBelow;\n      if (panelSettingType === 'Insert Drawings Below') {\n         let rowAbove = panelType.cellProps.rowData;\n         newRows = idsArr.map((id, i) => {\n            return ({\n               id,\n               _rowLevel: 1,\n               _parentRow: rowAbove._parentRow,\n               _preRow: i === 0 ? rowAbove.id : idsArr[i - 1]\n            });\n         });\n\n         rowBelow = rowsAll.find(r => r._preRow === rowAbove.id);\n         if (rowBelow) {\n            rowBelow._preRow = idsArr[idsArr.length - 1];\n         };\n\n      } else if (panelSettingType === 'Insert Drawings Above') {\n         rowBelow = rowsAll.find(r => r.id === panelType.cellProps.rowData.id);\n\n         newRows = idsArr.map((id, i) => {\n            return ({\n               id,\n               _rowLevel: 1,\n               _parentRow: rowBelow._parentRow,\n               _preRow: i === 0 ? rowBelow._preRow : idsArr[i - 1]\n            });\n         });\n\n         rowBelow._preRow = idsArr[idsArr.length - 1];\n      };\n\n      if (rowBelow) {\n         rowsUpdatePreRowOrParentRow[rowBelow.id] = {\n            _preRow: rowBelow._preRow, _parentRow: rowBelow._parentRow, id: rowBelow.id\n         };\n      };\n      newRows.forEach(r => {\n         rowsUpdatePreRowOrParentRow[r.id] = {\n            _preRow: r._preRow, _parentRow: r._parentRow, id: r.id\n         };\n      });\n      rowsAll = [...rowsAll, ...newRows];\n\n      commandAction({\n         type: 'insert-drawings',\n         data: {\n            rowsAll: reorderRowsFnc(rowsAll),\n            rowsUpdatePreRowOrParentRow,\n            idRowsNew\n         }\n      });\n   };\n\n   const onClickFolderInsertSubRows = (nosOfRows) => {\n      let { rowsAll, idRowsNew, rowsUpdatePreRowOrParentRow } = stateRow;\n      let idsArr = genId(nosOfRows);\n      idRowsNew = [...idRowsNew, ...idsArr];\n      let newRows = idsArr.map((id, i) => {\n         return ({\n            id,\n            _rowLevel: 1,\n            _parentRow: panelType.cellProps.rowData.id,\n            _preRow: i === 0 ? null : idsArr[i - 1]\n         });\n      });\n      newRows.forEach(r => {\n         rowsUpdatePreRowOrParentRow[r.id] = {\n            _preRow: r._preRow, _parentRow: r._parentRow, id: r.id\n         };\n      });\n      let rowBelow = rowsAll.find(r => r._parentRow === panelType.cellProps.rowData.id && r._preRow === null);\n      if (rowBelow) {\n         rowBelow._preRow = idsArr[idsArr.length - 1];\n         rowsUpdatePreRowOrParentRow[rowBelow.id] = {\n            _preRow: rowBelow._preRow, _parentRow: rowBelow._parentRow, id: rowBelow.id\n         };\n      };\n      rowsAll = [...rowsAll, ...newRows];\n      commandAction({\n         type: 'insert-drawings-by-folder',\n         data: {\n            rowsAll: reorderRowsFnc(rowsAll),\n            rowsUpdatePreRowOrParentRow,\n            idRowsNew\n         }\n      });\n   };\n\n   const applyDateAutomation = (dateAutomation) => {\n      let { rowsAll } = stateRow;\n      const rowId = panelType.cellProps.rowData.id;\n      let row = rowsAll.find(r => r.id === rowId);\n\n      Object.keys(dateAutomation).forEach(key => {\n         const cellTempId = `${rowId}-${key}`;\n         const dateConverted = moment(dateAutomation[key]).format('DD/MM/YY');\n         getCellModifiedTemp({ [cellTempId]: dateConverted });\n         row[key] = dateConverted;\n      });\n\n      commandAction({\n         type: 'drawing-data-automation',\n         data: rowsAll\n      });\n   };\n\n   const createNewDrawingRevision = () => {\n      const arrHeadersGoBlank = [\n         'Model Start (T)', 'Model Start (A)', 'Model Finish (T)', 'Model Finish (A)', 'Drawing Start (T)', 'Drawing Start (A)',\n         'Drawing Finish (T)', 'Drawing Finish (A)', 'Drg To Consultant (T)', 'Drg To Consultant (A)', 'Consultant Reply (T)',\n         'Consultant Reply (A)', 'Get Approval (T)', 'Get Approval (A)', 'Construction Issuance Date', 'Construction Start', 'Rev', 'Status'\n      ];\n\n      let { rowsAll } = stateRow;\n      const rowId = panelType.cellProps.rowData.id;\n      let row = rowsAll.find(r => r.id === rowId);\n      let rowOldVersiontoSave = { ...row };\n\n      arrHeadersGoBlank.forEach(hd => {\n         const cellTempId = `${rowId}-${hd}`;\n         getCellModifiedTemp({ [cellTempId]: '' });\n         row[hd] = '';\n      });\n\n      commandAction({\n         type: 'create-new-drawing-revisions',\n         data: {\n            rowsAll,\n            rowsVersionsToSave: [...stateRow.rowsVersionsToSave || [], rowOldVersiontoSave]\n         }\n      });\n   };\n\n   const deleteDrawing = () => {\n      let { rowsAll, idRowsNew, rowsUpdatePreRowOrParentRow, rowsDeleted } = stateRow;\n      const { cellsModifiedTemp } = stateCell;\n      const rowId = panelType.cellProps.rowData.id;\n\n      let rowBelow = rowsAll.find(r => r._preRow === rowId);\n      if (rowBelow) {\n         rowBelow._preRow = panelType.cellProps.rowData._preRow;\n         rowsUpdatePreRowOrParentRow[rowBelow.id] = {\n            _preRow: rowBelow._preRow, _parentRow: rowBelow._parentRow, id: rowBelow.id\n         };\n      };\n\n      if (rowId in rowsUpdatePreRowOrParentRow) delete rowsUpdatePreRowOrParentRow[rowId];\n      rowsAll = rowsAll.filter(r => r.id !== rowId);\n\n      if (idRowsNew.indexOf(rowId) === -1) {\n         rowsDeleted = [...rowsDeleted, panelType.cellProps.rowData];\n      } else {\n         idRowsNew.splice(idRowsNew.indexOf(rowId), 1);\n      };\n\n      Object.keys(cellsModifiedTemp).forEach(key => {\n         if (key.slice(0, 24) === rowId) {  // deleted cells modified temporary...\n            delete cellsModifiedTemp[key];\n         };\n      });\n      OverwriteCellsModified({ ...cellsModifiedTemp });\n\n      commandAction({\n         type: 'delete-drawing',\n         data: {\n            rowsAll,\n            rowsUpdatePreRowOrParentRow,\n            rowsDeleted,\n            idRowsNew,\n         }\n      });\n   };\n\n   const applyFolderOrganize = (drawingTypeTreeNew) => {\n      let { drawingTypeTree, rowsAll, rowsDeleted, idRowsNew, rowsUpdatePreRowOrParentRow } = stateRow;\n\n      drawingTypeTree.forEach(r => { // find deleted folder\n         let folder = drawingTypeTreeNew.find(row => row.id === r.id);\n         if (!folder && r._rowLevel === 0) { // save to deleted rows\n            let rowsChildren = rowsAll.filter(row => row._parentRow === r.id);\n            rowsChildren.forEach(rrr => {\n               if (idRowsNew.indexOf(rrr.id) === -1) {\n                  rowsDeleted = [...rowsDeleted, rrr];\n               } else {\n                  idRowsNew.splice(idRowsNew.indexOf(rrr.id), 1);\n               };\n               if (rrr.id in rowsUpdatePreRowOrParentRow) delete rowsUpdatePreRowOrParentRow[rrr.id];\n            });\n            rowsAll = rowsAll.filter(r => r._parentRow !== r.id);\n         };\n      });\n\n      // new drawings\n      const drawingTypeL0New = drawingTypeTreeNew.filter(r => !drawingTypeTree.find(row => row.id === r.id));\n\n      drawingTypeL0New.forEach(row => {\n         let idsArr = genId(5);\n         idRowsNew = [...idRowsNew, ...idsArr];\n         const newRows = idsArr.map((id, i) => {\n            return ({\n               id,\n               _rowLevel: 1,\n               _parentRow: row.id,\n               _preRow: i === 0 ? null : idsArr[i - 1]\n            });\n         });\n         newRows.forEach(r => {\n            rowsUpdatePreRowOrParentRow[r.id] = {\n               _preRow: r._preRow, _parentRow: r._parentRow, id: r.id\n            };\n         });\n         rowsAll = [...rowsAll, ...newRows];\n      });\n\n      commandAction({\n         type: 'drawing-folder-organization',\n         data: {\n            rowsAll: reorderDrawingsByDrawingTypeTree(rowsAll, drawingTypeTreeNew),\n            rowsUpdatePreRowOrParentRow,\n            rowsDeleted,\n            idRowsNew,\n            drawingTypeTree: drawingTypeTreeNew,\n         }\n      });\n   };\n\n   const saveDataToServer = async () => {\n\n      const { email, projectId, token, role } = stateProject.allDataOneSheet;\n      const { headersShown, headersHidden, nosColumnFixed, colorization } = stateProject.userData;\n      const { headers } = stateProject.allDataOneSheet.publicSettings;\n      let { cellsModifiedTemp } = stateCell;\n      let {\n         rowsVersionsToSave,\n         rowsUpdatePreRowOrParentRow,\n         drawingTypeTreeInit,\n         drawingTypeTree,\n         rowsDeleted,\n      } = stateRow;\n\n      try {\n         setLoading(true);\n         commandAction({ type: 'confirm-save-data' });\n\n         \n\n         const resDB = await Axios.get(`${SERVER_URL}/sheet/`, { params: { token, projectId, email } });\n         const resCellsHistory = await Axios.get(`${SERVER_URL}/cell/history/`, { params: { token, projectId } });\n\n         \n         let { publicSettings: publicSettingsFromDB, rows: rowsFromDBInit } = resDB.data;\n         let { drawingTypeTree: drawingTypeTreeFromDB, activityRecorded: activityRecordedFromDB } = publicSettingsFromDB;\n\n         let rowsFromDB = rowsFromDBInit.map(r => ({ id: r.id, _preRow: r._preRow, _parentRow: r._parentRow }));\n\n         // check if row deleted by other users\n         let rowsUpdatePreRowOrParentRowArray = Object.values(rowsUpdatePreRowOrParentRow)\n            .filter(row => !activityRecordedFromDB.find(r => r.id === row.id && r.action === 'Delete Drawing') &&\n               !activityRecordedFromDB.find(r => r.id === row._parentRow && r.action === 'Delete Drawing Type'));\n\n         let arrID = [];\n         rowsFromDB.forEach(r => {\n            if (rowsUpdatePreRowOrParentRowArray.find(row => row.id === r.id)) {\n               arrID.push(r.id);\n               let rowBelow = rowsFromDB.find(rrr => rrr._preRow === r.id);\n               if (rowBelow) rowBelow._preRow = r._preRow;\n            };\n         });\n         rowsFromDB = rowsFromDB.filter(r => arrID.indexOf(r.id) === -1);\n\n\n         let rowsInNewParent = rowsUpdatePreRowOrParentRowArray.filter(r => !drawingTypeTreeFromDB.find(tr => tr.id === r._parentRow && tr._rowLevel === 0));\n         let rowsInOldParent = rowsUpdatePreRowOrParentRowArray.filter(r => drawingTypeTreeFromDB.find(tr => tr.id === r._parentRow && tr._rowLevel === 0));\n\n         let rowsInOldParentOutput = _processChainRows2([...rowsInOldParent]);\n\n         rowsInOldParentOutput.forEach(arrChain => {\n            let rowFirst = arrChain[0];\n            let rowAbove = rowsFromDB.find(r => r.id === rowFirst._preRow);\n            let parentRowInDB = drawingTypeTreeFromDB.find(tr => tr.id === arrChain[0]._parentRow && tr._rowLevel === 0);\n\n            if (rowAbove) {\n               if (rowAbove._parentRow !== rowFirst._parentRow) {\n                  let lastRowInParent = rowsFromDB.find(r => r._parentRow === parentRowInDB.id && !rowsFromDB.find(x => x._preRow === r.id));\n                  rowFirst._preRow = lastRowInParent ? lastRowInParent.id : null;\n                  rowsFromDB = [...rowsFromDB, ...arrChain];\n               } else {\n                  let rowBelowRowAbove = rowsFromDB.find(r => r._preRow === rowAbove.id);\n                  if (rowBelowRowAbove) rowBelowRowAbove._preRow = arrChain[arrChain.length - 1].id;\n                  rowFirst._preRow = rowAbove.id;\n                  rowsFromDB = [...rowsFromDB, ...arrChain];\n               };\n            } else {\n               if (rowFirst._preRow === null) {\n                  let firstRowInParent = rowsFromDB.find(r => r._parentRow === parentRowInDB.id && r._preRow === null);\n                  if (firstRowInParent) { // if firstRowInParent undefined means Drawing type has 0 drawing currently...\n                     firstRowInParent._preRow = arrChain[arrChain.length - 1].id;\n                  };\n                  rowsFromDB = [...rowsFromDB, ...arrChain];\n               } else {\n                  let lastRowInParent = rowsFromDB.find(r => r._parentRow === parentRowInDB.id && !rowsFromDB.find(x => x._preRow === r.id));\n                  rowFirst._preRow = lastRowInParent ? lastRowInParent.id : null;\n                  rowsFromDB = [...rowsFromDB, ...arrChain];\n               }\n            };\n         });\n\n\n         let idsNewParentArray = [...new Set(rowsInNewParent.map(r => r._parentRow))];\n\n         idsNewParentArray.forEach(idP => {\n            let arrInput = rowsInNewParent.filter(r => r._parentRow === idP);\n            let rowsChildren = _processRows1([...arrInput]);\n            rowsChildren.forEach((r, i) => {\n               r._preRow = i === 0 ? null : rowsChildren[i - 1].id;\n            });\n            rowsFromDB = [...rowsFromDB, ...rowsChildren];\n         });\n\n\n         // DELETE ROWS\n         let rowDeletedFinal = [];\n         rowsDeleted.forEach(row => {\n            let rowInDB = rowsFromDB.find(r => r.id === row.id);\n            if (rowInDB) {\n               let rowBelow = rowsFromDB.find(r => r._preRow === rowInDB.id);\n               if (rowBelow) rowBelow._preRow = rowInDB._preRow;\n               rowDeletedFinal.push(row);\n            };\n         });\n         \n\n         // SAVE CELL HISTORY\n         if (Object.keys(cellsModifiedTemp).length > 0) {\n            let objCellHistory = {};\n            resCellsHistory.data.map(cell => {\n               const headerText = headers.find(hd => hd.key === cell.headerKey).text;\n               let latestHistoryText = cell.histories[cell.histories.length - 1].text;\n               objCellHistory[`${cell.row}-${headerText}`] = latestHistoryText;\n            });\n\n            Object.keys(cellsModifiedTemp).forEach(key => {\n               if (objCellHistory[key] && objCellHistory[key] === cellsModifiedTemp[key]) {\n                  delete cellsModifiedTemp[key];\n               } else {\n                  let rowId = key.slice(0, 24);\n                  if (activityRecordedFromDB.find(x => x.id === rowId && x.action === 'Delete Drawing')) {\n                     delete cellsModifiedTemp[key];\n                  };\n               };\n            });\n\n            await Axios.post(`${SERVER_URL}/cell/history/`, { token, projectId, cellsHistory: convertCellTempToHistory(cellsModifiedTemp, stateProject) });\n         };\n\n         // SAVE DRAWINGS NEW VERSION\n         rowsVersionsToSave = rowsVersionsToSave.filter(row => !activityRecordedFromDB.find(r => r.id === row.id && r.action === 'Delete Drawing'));\n         if (rowsVersionsToSave.length > 0) {\n            await Axios.post(`${SERVER_URL}/row/history/`, { token, projectId, email, rowsHistory: convertDrawingVersionToHistory(rowsVersionsToSave, stateProject) });\n         };\n\n\n\n         const headerKeyDrawingNumber = headers.find(hd => hd.text === 'Drawing Number').key;\n         const headerKeyDrawingName = headers.find(hd => hd.text === 'Drawing Name').key;\n         // SAVE PUBLIC SETTINGS RECORDED\n         let activityRecordedArr = [];\n         drawingTypeTree.forEach(fd => {\n            if (!drawingTypeTreeInit.find(e => e.id === fd.id)) {\n               activityRecordedArr.push({\n                  id: fd.id, email, createdAt: new Date(), action: 'Create Drawing Type',\n                  [headerKeyDrawingNumber]: fd['Drawing Number'],\n               });\n            };\n         });\n         drawingTypeTreeInit.forEach(fd => {\n            if (\n               !drawingTypeTree.find(e => e.id === fd.id) &&\n               !activityRecordedFromDB.find(e => e.id === fd.id && e.action === 'Delete Drawing Type')\n            ) {\n               activityRecordedArr.push({\n                  id: fd.id, email, createdAt: new Date(), action: 'Delete Drawing Type',\n                  [headerKeyDrawingNumber]: fd['Drawing Number'],\n               });\n            };\n         });\n         activityRecordedArr.forEach(rc => {\n            let newRowsAddedByPreviousUserButParentDeletedByCurrentUser = rowsFromDB.filter(e => e._parentRow === rc.id && rc.action === 'Delete Drawing Type');\n            rowDeletedFinal = [...rowDeletedFinal, ...newRowsAddedByPreviousUserButParentDeletedByCurrentUser];\n         });\n         rowDeletedFinal.forEach(r => {\n            activityRecordedArr.push({\n               id: r.id, email, createdAt: new Date(), action: 'Delete Drawing',\n               [headerKeyDrawingNumber]: r['Drawing Number'],\n               [headerKeyDrawingName]: r['Drawing Name'],\n            });\n         });\n         // SAVE PUBLIC DRAWING TYPE\n         drawingTypeTreeFromDB.forEach(fd => {\n            if (!drawingTypeTreeInit.find(e => e.id === fd.id)) {\n               drawingTypeTree.push(fd); // new from DB, added by other user\n            };\n         });\n         drawingTypeTree.forEach(fd => { // check in recorded if some folder deleted\n            if (activityRecordedFromDB.find(r => r.id === fd.id && r.action === 'Delete Drawing Type')) {\n               drawingTypeTree = drawingTypeTree.filter(e => e.id !== fd.id);\n            };\n         });\n         drawingTypeTree.forEach(tr => {\n            headers.forEach(hd => {\n               if (hd.text in tr) {\n                  tr[hd.key] = tr[hd.text];\n                  delete tr[hd.text];\n               };\n            });\n         });\n         const publicSettingsUpdated = {\n            drawingTypeTree,\n            activityRecorded: [...activityRecordedFromDB, ...activityRecordedArr]\n         };\n         await Axios.post(`${SERVER_URL}/sheet/update-setting-public/`, { token, projectId, email, publicSettings: publicSettingsUpdated });\n         \n         const userSettingsUpdated = {\n            headersShown: headersShown.map(hd => headers.find(h => h.text === hd).key),\n            headersHidden: headersHidden.map(hd => headers.find(h => h.text === hd).key),\n            nosColumnFixed, colorization,\n         };\n         await Axios.post(`${SERVER_URL}/sheet/update-setting-user/`, { token, projectId, email, userSettings: userSettingsUpdated });\n\n\n         // ROWS FROM DB BEFORE SAVE ...\n         rowsFromDB = rowsFromDB.filter(r => !rowDeletedFinal.find(x => x.id === r.id));\n         // DELTE MOVE TO HERE...\n         if (rowDeletedFinal.length > 0) {\n            await Axios.post(`${SERVER_URL}/sheet/delete-rows/`, { token, projectId, email, rowIdsArray: rowDeletedFinal.map(r => r.id) });\n         };\n\n\n\n\n\n         let rowsFromDBFinalToSave = rowsFromDB.map(r => {\n            let row = {\n               _id: r.id,\n               parentRow: r._parentRow,\n               preRow: r._preRow,\n            };\n            Object.keys(cellsModifiedTemp).forEach(key => {\n               const { rowId, headerName } = extractCellInfo(key);\n               let headerKey = headers.find(hd => hd.text === headerName).key;\n               if (rowId === row._id) {\n                  row.data = { ...row.data || {}, [headerKey]: cellsModifiedTemp[key] }\n               };\n            });\n            return row;\n         });\n         if (role !== 'manager' || role !== 'viewer') {\n            await Axios.post(`${SERVER_URL}/sheet/update-rows/`, { token, projectId, rows: rowsFromDBFinalToSave });\n         };\n\n         commandAction({ type: 'save-data-successfully' });\n\n         const res = await Axios.get(`${SERVER_URL}/sheet/`, { params: { token, projectId, email } });\n\n         commandAction({ type: 'reload-data-from-server', data: res.data });\n\n      } catch (err) {\n         commandAction({ type: 'save-data-failure' });\n         console.log(err);\n      };\n   };\n\n\n\n\n   return (\n      <>\n         {panelSettingType === 'save-ICON' && (\n            <PanelConfirm\n               onClickCancel={onClickCancelModal}\n               onClickApply={saveDataToServer}\n               content='Do you want to save ?'\n            />\n         )}\n\n         {panelSettingType === 'filter-ICON' && (\n            <FormFilter applyFilter={applyFilter} onClickCancelModal={onClickCancelModal} />\n         )}\n\n         {panelSettingType === 'swap-ICON' && (\n            <PanelConfirm\n               onClickCancel={onClickCancelModal}\n               onClickApply={applyResetFilter}\n            />\n         )}\n\n         {panelSettingType === 'reorderColumn-ICON' && (\n            <ReorderColumnForm\n               applyReorderColumns={applyReorderColumns}\n               onClickCancelModal={onClickCancelModal}\n            />\n         )}\n\n\n\n         {panelSettingType === 'sort-ICON' && (\n            <FormSort applySort={applySort} onClickCancel={onClickCancelModal} />\n         )}\n\n\n         {panelSettingType === 'group-ICON' && (\n            <FormGroup applyGroup={applyGroup} onClickCancelModal={onClickCancelModal} />\n         )}\n\n\n         {(panelSettingType === 'Insert Drawings Below' || panelSettingType === 'Insert Drawings Above') && (\n            <PanelPickNumber\n               onClickCancelModal={onClickCancelModal}\n               onClickApply={onClickInsertRow}\n            />\n         )}\n\n         {panelSettingType === 'history-ICON' && (\n            <TableActivityHistory />\n         )}\n\n         {panelSettingType === 'color-cell-history-ICON' && (\n            <FormCellColorizedCheck setCellHistoryArr={setCellHistoryArr} />\n         )}\n\n\n         {panelSettingType === 'Date Automation' && (\n            <FormDateAutomation applyDateAutomation={applyDateAutomation} />\n         )}\n\n         {panelSettingType === 'Create New Drawing Revision' && (\n            <PanelConfirm\n               onClickCancel={onClickCancelModal}\n               onClickApply={createNewDrawingRevision}\n               content={`Are you sure to create a new revision of this drawing: ${panelType.cellProps.rowData['Drawing Number'] || ' '} - ${panelType.cellProps.rowData['Drawing Name'] || ' '} ?`}\n            />\n         )}\n\n         {panelSettingType === 'View Drawing Revision' && (\n            <TableDrawingDetail {...panelType.cellProps} />\n         )}\n\n         {panelSettingType === 'addDrawingType-ICON' && (\n            <FormDrawingTypeOrder applyFolderOrganize={applyFolderOrganize} onClickCancelModal={onClickCancelModal} />\n         )}\n\n         {panelSettingType === 'View Cell History' && (\n            <TableCellHistory {...panelType.cellProps} />\n         )}\n\n\n         {panelSettingType === 'Delete Drawing' && (\n            <PanelConfirm\n               onClickCancel={onClickCancelModal}\n               onClickApply={deleteDrawing}\n               content={`Are you sure to delete the: ${panelType.cellProps.rowData['Drawing Number'] || ' '} - ${panelType.cellProps.rowData['Drawing Name'] || ' '} ?`}\n            />\n         )}\n\n         {panelSettingType === 'colorized-ICON' && (\n            <ColorizedForm applyColorization={applyColorization} onClickCancelModal={onClickCancelModal} />\n         )}\n\n         {panelSettingType === 'Insert Drawings By Type' && (\n            <PanelPickNumber\n               onClickCancelModal={onClickCancelModal}\n               onClickApply={onClickFolderInsertSubRows}\n            />\n         )}\n      </>\n   );\n};\n\nexport default PanelSetting;\n\n\nconst PanelPickNumber = ({ onClickCancelModal, onClickApply }) => {\n   const [nosOfRows, setNosOfRows] = useState(1);\n   return (\n      <div style={{ padding: 20 }}>\n         <Input\n            placeholder='Enter Number Of Drawings...'\n            type='number' min='1'\n            value={nosOfRows}\n            onChange={(e) => setNosOfRows(e.target.value)}\n            style={{\n               marginBottom: 20,\n               borderRadius: 0\n            }}\n         />\n         <div style={{ padding: 20, display: 'flex', flexDirection: 'row-reverse' }}>\n            <ButtonGroupComp\n               onClickCancel={onClickCancelModal}\n               onClickApply={() => onClickApply(nosOfRows)}\n            />\n         </div>\n      </div>\n   );\n};\n\n\n\n\n\nfunction _processRows1(rows) {\n   let rowsProcessed = []\n\n   if (!(rows instanceof Array) || !rows.length) {\n      return rowsProcessed\n   };\n\n   // sort & format rows\n   let firstRowIndex = rows.findIndex((row) => !row._preRow)\n   while (firstRowIndex >= 0) {\n      let preRow = rows.splice(firstRowIndex, 1)[0]\n      while (preRow) {\n         rowsProcessed.push(preRow)\n\n         let nextRowIndex = rows.findIndex(\n            (row) => String(row._preRow) == String(preRow.id)\n         )\n         if (nextRowIndex >= 0) {\n            preRow = rows.splice(nextRowIndex, 1)[0]\n         } else {\n            preRow = null\n         }\n      }\n      firstRowIndex = rows.findIndex((row) => !row._preRow)\n   }\n\n   _processRowsLossHead1(rows, rowsProcessed)\n\n   return rowsProcessed\n};\nfunction _processRowsLossHead1(rows, rowsProcessed) {\n   if (!rows.length) {\n      return\n   }\n\n   let firstRowIndex = rows.findIndex((r) => _filterRowLossPreRow(r, rows))\n   while (firstRowIndex >= 0) {\n      let preRow = rows.splice(firstRowIndex, 1)[0]\n      while (preRow) {\n         rowsProcessed.push(preRow)\n\n         let nextRowIndex = rows.findIndex(\n            (row) => String(row._preRow) == String(preRow.id)\n         )\n         if (nextRowIndex >= 0) {\n            preRow = rows.splice(nextRowIndex, 1)[0]\n         } else {\n            preRow = null\n         }\n      }\n      firstRowIndex = rows.findIndex((r) => _filterRowLossPreRow(r, rows))\n   }\n};\nfunction _processChainRows2(rows) {\n   let rowsProcessed = []\n\n   if (!(rows instanceof Array) || !rows.length) {\n      return rowsProcessed\n   }\n\n   // sort & format rows\n   let firstRowIndex = rows.findIndex((row) => !row._preRow)\n   while (firstRowIndex >= 0) {\n      let preRow = rows.splice(firstRowIndex, 1)[0]\n      let chain = []\n      while (preRow) {\n         chain.push(preRow)\n\n         let nextRowIndex = rows.findIndex(\n            (row) => String(row._preRow) == String(preRow.id)\n         )\n         if (nextRowIndex >= 0) {\n            preRow = rows.splice(nextRowIndex, 1)[0]\n         } else {\n            preRow = null\n         }\n      }\n      rowsProcessed.push(chain)\n      firstRowIndex = rows.findIndex((row) => !row._preRow)\n   }\n\n   _processChainRowsLossHead2(rows, rowsProcessed)\n\n   return rowsProcessed\n};\nfunction _processChainRowsLossHead2(rows, rowsProcessed) {\n   if (!rows.length) {\n      return\n   }\n\n   let firstRowIndex = rows.findIndex((r) => _filterRowLossPreRow(r, rows))\n   while (firstRowIndex >= 0) {\n      let preRow = rows.splice(firstRowIndex, 1)[0]\n      let chain = []\n      while (preRow) {\n         chain.push(preRow)\n\n         let nextRowIndex = rows.findIndex(\n            (row) => String(row._preRow) == String(preRow.id)\n         )\n         if (nextRowIndex >= 0) {\n            preRow = rows.splice(nextRowIndex, 1)[0]\n         } else {\n            preRow = null\n         }\n      }\n      rowsProcessed.push(chain)\n      firstRowIndex = rows.findIndex((r) => _filterRowLossPreRow(r, rows))\n   };\n};\nfunction _filterRowLossPreRow(row, rows) {\n   return rows.every(r => String(row._preRow) != String(r.id));\n};","D:\\994 WOH HUP 2020\\Projects\\deploy-meeting\\client\\src\\_dashboardComp\\assets\\constantDashboard.js",[],"D:\\994 WOH HUP 2020\\Projects\\deploy-meeting\\client\\src\\layouts\\pageSpreadsheet\\CellIndex.js",[],"D:\\994 WOH HUP 2020\\Projects\\deploy-meeting\\client\\src\\_dashboardComp\\componentsDashboard\\_ChartBarDrawingLate.js",[],"D:\\994 WOH HUP 2020\\Projects\\deploy-meeting\\client\\src\\_dashboardComp\\componentsDashboard\\_ChartBarDrawing.js",["526"],"import { Badge } from 'antd';\nimport React, { useState } from 'react';\nimport { Bar, BarChart, CartesianGrid, LabelList, Tooltip, XAxis, YAxis } from 'recharts';\nimport styled from 'styled-components';\nimport { pieChartColors2 } from '../assets/constantDashboard';\nimport { getAllDrawingSameValueInOneColumn, sortStatusOrder } from '../utils/functionDashboard';\n\n\n\nconst getSubDrawingByStatus = (drawingList, columnsIndexArray) => {\n\n    let drawingCountSubStatus = [];\n    let drawingListSubStatus = {};\n    let inputStack = [];\n\n    for (const key in drawingList) {\n        const result = getAllDrawingSameValueInOneColumn({\n            allDrawingsLatestRevision: drawingList[key],\n            columnsIndexArray\n        }, 'Status');\n\n        const drawingCountArr = result.drawingCount;\n        const drawingListArr = result.drawingList;\n\n\n        if ('undefined' in drawingCountArr) {\n            drawingCountArr['Not Started'] = drawingCountArr['undefined'] + drawingCountArr['Not Started'] || 0;\n            delete drawingCountArr['undefined'];\n        };\n\n        if ('undefined' in drawingListArr) {\n            drawingListArr['Not Started'] = [...drawingListArr['undefined'], drawingListArr['Not Started'] || []];\n            delete drawingListArr['undefined'];\n        };\n\n        for (const key in drawingCountArr) {\n            if (key !== 'undefined') inputStack.push(key);\n        };\n\n        drawingCountArr['name'] = key;\n        drawingCountSubStatus.push(drawingCountArr);\n        drawingListSubStatus[key] = drawingListArr;\n    };\n\n    return {\n        drawingCountSubStatus,\n        drawingListSubStatus,\n        inputStack: [...new Set(inputStack)]\n    };\n};\n\n\nconst _ChartBarDrawing = ({ data, openDrawingTable, projectName }) => {\n\n    const { drawingCountSubStatus, drawingListSubStatus, inputStack, headers } = data;\n\n\n    const onClick = (e, item) => {\n        openDrawingTable(\n            projectName,\n            { type: 'Drawings by revision', category: `Revision: ${e.name} - Status: ${item}` },\n            drawingListSubStatus[e.name][item],\n            headers\n        );\n    };\n\n    const LabelCustomStacked = (props) => {\n        const { x, y, value, height } = props;\n        const fontSize = 13;\n        return (\n            <text\n                style={{ fontSize: fontSize, boxShadow: '5px 15px 24px 5px black', }}\n                x={x + 24}\n                y={y + height / 2}\n                fill='#2c3e50'\n                dominantBaseline='central'\n            >\n                {height + 3 < fontSize ? null : value}\n            </text>\n        );\n    };\n\n    const LabelCustomStackedTotal = (props) => {\n        const { x, y, value, topBar } = props;\n        return (\n            <>\n                <text\n                    style={{ fontSize: 17, fontWeight: 'bold' }}\n                    x={x - 2}\n                    y={y - 10}\n                    fill='black'\n                    dominantBaseline='central'\n\n                >\n                    {topBar ? value : null}\n                </text>\n            </>\n        );\n    };\n    const [tooltip, setTooltip] = useState(false);\n    const TooltipCustom = (props) => {\n        const { active, payload } = props;\n        if (!active || !tooltip) return null;\n        for (const bar of payload)\n            if (bar.dataKey === tooltip) {\n                return (\n                    <div style={{\n                        backgroundColor: 'white',\n                        color: bar.fill,\n                        fontSize: 14,\n                        border: `1px solid ${bar.fill}`,\n                        padding: '3px',\n                        maxWidth: '170px'\n                    }}>\n                        {bar.name}\n                        <br />\n                        <mark style={{ backgroundColor: bar.fill }}>\n                            ({bar.value})\n                        </mark>\n                    </div>\n                );\n            };\n        return null;\n    };\n\n\n    return (\n        <div style={{ margin: '0 auto', display: 'table' }}>\n            <BarChart\n                width={350}\n                height={350}\n                data={drawingCountSubStatus.sort((a, b) => {\n                    if (a.name < b.name) return -1;\n                    if (a.name > b.name) return 1;\n                    return 0;\n                })}\n                margin={{ top: 35, right: 15, left: 0, bottom: 20 }}\n                padding={{ top: 5 }}\n                barSize={23}\n            >\n                <CartesianGrid strokeDasharray='3 3' />\n                <XAxis tickSize={3} dataKey='name' textAnchor='middle' interval={0} scale='point' padding={{ left: 35, right: 35 }} />\n                <YAxis />\n                <Tooltip content={<TooltipCustom />} />\n                {sortStatusOrder(inputStack).map((item, i) => {\n                    return (\n                        <Bar\n                            key={item}\n                            dataKey={item}\n                            stackId='a'\n                            fill={pieChartColors2[item]}\n                            isAnimationActive={false}\n                            onClick={(e) => onClick(e, item)}\n                            onMouseOver={() => setTooltip(item)}\n                            label={<LabelCustomStackedTotal topBar={i === inputStack.length - 1} />}\n                        >\n                            <LabelList dataKey={item} position='left' content={<LabelCustomStacked item={item} />} />\n                        </Bar>\n                    )\n                })}\n\n            </BarChart>\n\n            <div style={{ paddingLeft: 50, height: 180 }}>\n\n                {sortStatusOrder(inputStack).reverse().map((key, i) => (\n                    <div key={key} style={{ display: 'flex' }}>\n                        <StyledBadge\n                            size='small'\n                            color={pieChartColors2[key]}\n                            text={key}\n                        />\n                    </div>\n                ))}\n                \n            </div>\n        </div>\n\n    );\n};\n\nexport default _ChartBarDrawing;\n\nconst StyledBadge = styled(Badge)`\n    .ant-badge-status-dot {\n        width: 15px;\n        height: 15px;\n        border-radius: 0;\n    }\n`;\n","D:\\994 WOH HUP 2020\\Projects\\deploy-meeting\\client\\src\\_dashboardComp\\componentsDashboard\\CardPanelProject.js",[],"D:\\994 WOH HUP 2020\\Projects\\deploy-meeting\\client\\src\\_dashboardComp\\componentsDashboard\\_ChartProgress.js",[],"D:\\994 WOH HUP 2020\\Projects\\deploy-meeting\\client\\src\\_dashboardComp\\componentsDashboard\\_ChartBarStack.js",[],"D:\\994 WOH HUP 2020\\Projects\\deploy-meeting\\client\\src\\_dashboardComp\\componentsDashboard\\_TableDrawingList.js",["527","528","529","530"],"import { Button, Icon, Input } from 'antd';\nimport React, { useCallback, useEffect, useMemo, useRef, useState } from 'react';\nimport {\n    useBlockLayout,\n    useColumnOrder,\n    useExpanded,\n    useFilters,\n    useFlexLayout,\n    useGlobalFilter,\n    useGroupBy,\n    useResizeColumns,\n    useRowSelect,\n    useSortBy,\n    useTable\n} from 'react-table';\nimport { FixedSizeList } from 'react-window';\nimport styled from 'styled-components';\nimport { colorType } from '../assets/constantDashboard';\nimport { changeColumnOrder, formatStringNameToId, getColumnsHeader1, getHeaderSorted1 } from '../utils/functionDashboard';\nimport PanelRightClick from './PanelRightClick';\n\n\n\nconst scrollbarWidth = () => {\n    const scrollDiv = document.createElement('div');\n    scrollDiv.setAttribute(\n        'style',\n        'width: 100px; height: 100px; overflow: scroll; position: absolute; top: -9999px;'\n    );\n    document.body.appendChild(scrollDiv);\n    const scrollbarWidth = scrollDiv.offsetWidth - scrollDiv.clientWidth;\n    document.body.removeChild(scrollDiv);\n    return scrollbarWidth;\n};\n\nconst headerProps = (props, { column }) => {\n    return getStyles(props, column.align);\n};\n\nconst checkCellFix = (cell) => (\n    !cell.isAggregated &&\n    !cell.isGrouped &&\n    cell.isRepeatedValue &&\n    cell.row.subRows.length !== 0 &&\n    // cell.row.depth === 0\n    cell.row.groupByID !== cell.column.id\n);\n\nconst cellProps = (props, { cell }) => {\n\n    const colorFix = checkCellFix(cell) && '#f6e58d';\n\n    props.style.background = colorFix || (cell.isGrouped ? '#7ed6df' :\n        cell.isAggregated ? '#f6e58d' :\n            cell.isPlaceholder ? '#ff000042' :\n                'white');\n    return getStyles(props, cell.column.align);\n};\n\nconst getStyles = (props, align = 'left') => [props,\n    {\n        style: {\n            justifyContent: align === 'right' ? 'flex-end' : 'flex-start',\n            alignItems: 'flex-start',\n            display: 'flex',\n        },\n    },\n];\n\nconst headerWithNoGroupFunction = (column) => {\n    const arr = [\n        'Drawing Number', 'Drawing Name'\n    ];\n    return arr.indexOf(column) !== -1;\n};\n\nexport const DefaultColumnFilter = ({\n    column: { filterValue, preFilteredRows, setFilter },\n}) => {\n    const count = preFilteredRows.length;\n\n    const [btnActive, setBtnActive] = useState(false);\n    const toggleBtn = () => {\n        setBtnActive(!btnActive);\n        setFilter(undefined);\n    };\n\n    return (\n        <div style={{ display: 'flex' }}>\n            <div onClick={toggleBtn} style={{ cursor: 'pointer' }}>\n                {btnActive ? <IconTable type='search' color='green' /> : <IconTable type='search' />}\n            </div>\n            {btnActive && (\n                <input\n                    value={filterValue || ''}\n                    onChange={e => {\n                        setFilter(e.target.value || undefined) // Set undefined to remove the filter entirely\n                    }}\n                    placeholder={`Search ${count} records...`}\n                    style={{ height: 21, margin: 0 }}\n                />\n            )}\n        </div>\n    );\n};\n\nexport const _SelectColumnFilter = ({\n    column: { filterValue, setFilter, preFilteredRows, id }\n}) => {\n\n    const options = useMemo(() => {\n        const options = new Set();\n\n        preFilteredRows.forEach(row => {\n            options.add(row.values[id]);\n        });\n\n        return [...options.values()];\n    }, [id, preFilteredRows]);\n\n    const [btnActive, setBtnActive] = useState(false);\n\n    const toggleBtn = () => {\n        setBtnActive(!btnActive);\n        setFilter(undefined);\n    };\n\n    return (\n        <div style={{ display: 'flex' }}>\n\n            <div onClick={toggleBtn} style={{ cursor: 'pointer' }}>\n                {btnActive\n                    ? <IconTable type='search' color='green' />\n                    : <IconTable type='search' />\n                }\n            </div>\n\n            {btnActive && (\n                <select\n                    value={filterValue}\n                    onChange={e => setFilter(e.target.value || undefined)}\n                    style={{ height: 21, width: 40, margin: 0 }}\n                >\n                    <option value=''>All</option>\n                    {options.map((option, i) => (\n                        <option key={i} value={option}>\n                            {option}\n                        </option>\n                    ))}\n                </select>\n            )}\n        </div>\n    );\n};\n\nexport const GlobalFilter = ({ filter, setFilter }) => {\n\n    const [value, setValue] = useState(filter);\n\n    const onChange = value => {\n        setTimeout(() => {\n            setFilter(value || undefined);\n        }, 1000);\n    };\n\n    return (\n        <Input.Search\n            placeholder='Search ...'\n            value={value || ''}\n            onChange={e => {\n                setValue(e.target.value);\n                onChange(e.target.value);\n            }}\n            style={{ width: 200 }}\n        />\n    );\n};\n\n\n\nconst _TableDrawingList = ({ data }) => {\n\n    const [openAllColumn, setOpenAllColumn] = useState(false);\n    const { title, drawings, headers, columnsHeaderSorted, isSelectedShownOnly } = data;\n\n    const tableDataInput = drawings;\n    const columnsName = getColumnsHeader1(headers);\n\n\n    const columns = useMemo(() => {\n        return columnsHeaderSorted && !openAllColumn && isSelectedShownOnly ?\n            getHeaderSorted1(columnsName, columnsHeaderSorted) :\n            columnsName;\n    }, [columnsHeaderSorted, columnsName, openAllColumn, isSelectedShownOnly]);\n\n\n    const [reorderColumns, setReorderColumns] = useState(false);\n    const columnsInput = reorderColumns ? reorderColumns : columns;\n\n\n    const openAllColumnTable = () => {\n        setOpenAllColumn(true);\n    };\n\n    const moveColumnLocation = (value, columnActive) => {\n        if (value === 1 || value === -1) {\n            setReorderColumns(changeColumnOrder(columnsInput, columnActive.id, value));\n        };\n    };\n\n\n    return (\n        <Table\n            title={title}\n            columns={columnsInput}\n            data={tableDataInput}\n            openAllColumnTable={openAllColumnTable}\n            moveColumnLocation={moveColumnLocation}\n            columnsHeaderSorted={columnsHeaderSorted}\n            hiddenColumnsArray={columns.filter(\n                cl => cl.Header.includes('(A)') ||\n                    cl.Header.includes('(T)') ||\n                    cl.Header === 'Model Progress' ||\n                    cl.Header === 'Drawing Progress'\n            ).map(x => x.accessor)}\n\n        />\n    );\n};\nexport default _TableDrawingList;\n\n\n\nconst Table = ({\n    columns,\n    data,\n    hiddenColumnsArray,\n    openAllColumnTable,\n    title,\n    moveColumnLocation,\n    columnsHeaderSorted\n}) => {\n\n    const listRef = useRef();\n    const defaultColumn = useMemo(() => ({\n        // minWidth: 30, // minWidth is only used as a limit for resizing\n        // width: 150, // width is used for both the flex-basis and flex-grow\n        // maxWidth: 200, // maxWidth is only used as a limit for resizing\n        Filter: DefaultColumnFilter,\n    }), []);\n\n    const scrollBarSize = useMemo(() => scrollbarWidth(), []);\n\n    const reactTable = useTable(\n        {\n            columns,\n            data,\n            defaultColumn,\n            initialState: {\n                hiddenColumns: hiddenColumnsArray\n            },\n            autoResetExpanded: false,\n        },\n        useFilters,\n        useGlobalFilter,\n        useGroupBy,\n        useExpanded,\n        useSortBy,\n        useResizeColumns,\n        useFlexLayout,\n        useRowSelect,\n        useBlockLayout,\n        useColumnOrder,\n        hooks => {\n            hooks.useInstanceBeforeDimensions.push(({ headerGroups }) => {\n                // fix the parent group of the selection button to not be resizable\n                const selectionGroupHeader = headerGroups[0].headers[0];\n                selectionGroupHeader.canResize = true;\n            })\n        },\n    );\n\n    const {\n        getTableProps,\n        getTableBodyProps,\n        headerGroups,\n        rows,\n        totalColumnsWidth,\n        prepareRow,\n        disableMultiSort,\n        isMultiSortEvent = (e) => e.shiftKey,\n        state,\n        setGlobalFilter,\n        toggleHideAllColumns,\n        toggleGroupBy,\n        toggleExpanded,\n        expandedRows\n\n    } = reactTable;\n\n    const { globalFilter, expanded } = state;\n    const [panelFunctionVisible, setPanelFunctionVisible] = useState(false);\n    const [topPanelFunction, setTopPanelFunction] = useState(0);\n    const [leftPanelFunction, setLeftPanelFunction] = useState(0);\n\n\n\n\n    useEffect(() => {\n        columnsHeaderSorted && columnsHeaderSorted.forEach(name => {\n            if (name !== 'Drawing Name' && name !== 'Drawing Number') {\n                toggleGroupBy(formatStringNameToId(name), true);\n            };\n        });\n    }, []);\n\n    const [maxRowExpand, setMaxRowExpand] = useState(0);\n    useEffect(() => {\n        setMaxRowExpand(Object.values(expanded).length);\n\n        if (Object.values(expanded).length >= maxRowExpand) {\n            expandedRows.forEach(row => {\n                toggleExpanded(row.id, true);\n            });\n        };\n    }, [expandedRows]);\n\n\n    const handleMouseDown = (e) => {\n        if (e.button === 0) setPanelFunctionVisible(false);\n    };\n    useEffect(() => {\n        document.addEventListener('mousedown', handleMouseDown);\n        return () => document.removeEventListener('mousedown', handleMouseDown);\n    }, []);\n\n    const panelFunction = (e, column) => {\n        setColumnActive(column);\n        setPanelFunctionVisible(true);\n        const clickX = e.clientX;\n        const clickY = e.clientY;\n        const screenW = window.innerWidth;\n        const screenH = window.innerHeight;\n\n        const right = (screenW - clickX) > 179;\n        const left = !right;\n        const top = (screenH - clickY) > 379;\n        const bottom = !top;\n\n        if (right) {\n            setLeftPanelFunction(`${clickX + 5}px`);\n        };\n        if (left) {\n            setLeftPanelFunction(`${clickX - 179 - 5}px`);\n        };\n        if (top) {\n            setTopPanelFunction(`${clickY + 5}px`);\n        };\n        if (bottom) {\n            setTopPanelFunction(`${clickY - 379 - 5}px`);\n        };\n    };\n\n    const [columnActive, setColumnActive] = useState(false);\n    const buttonPanelFunction = (btn) => {\n        if (btn === 'Hide this column') {\n            columnActive.toggleHidden(true);\n        } else if (btn === 'Unhide all') {\n            toggleHideAllColumns(false);\n        } else if (btn === 'Move to left') {\n            moveColumnLocation(-1, columnActive);\n        } else if (btn === 'Move to right') {\n            moveColumnLocation(1, columnActive);\n        } else if (btn === 'Move to ...') {\n            return;\n        };\n    };\n\n\n\n    const RenderRow = useCallback(args => {\n        const { index, style } = args;\n        const row = rows[index];\n        prepareRow(row);\n\n        return (\n            <div {...row.getRowProps({ style })} className='tr'>\n                {row.cells.map(cell => {\n                    return (\n                        <div {...cell.getCellProps(cellProps)} className='td'>\n                            {cell.isGrouped ? (\n                                <>\n                                    <span {...row.getExpandedToggleProps()}>\n                                        {row.isExpanded ? <IconTable type='up-circle' color='grey' /> : <IconTable type='down-circle' color='grey' />}\n                                    </span>{' '}\n                                    {cell.render('Cell')} ({row.subRows.length + ' nos'})\n                                </>\n                            ) : cell.isAggregated ? cell.render('Aggregated')\n                                    : cell.isPlaceholder ? null\n                                        : checkCellFix(cell) ? null\n                                            : cell.render('Cell')}\n                        </div>\n                    );\n                })}\n            </div>\n        );\n    }, [prepareRow, rows]);\n\n\n\n\n    return (\n        <>\n            <div style={{ display: 'flex', marginBottom: 15 }}>\n                <GlobalFilter filter={globalFilter} setFilter={setGlobalFilter} />\n\n                {title.type === 'Sorted table' && (\n                    <Button onClick={openAllColumnTable} style={{ marginLeft: 15, background: colorType.grey4 }}>View all drawings</Button>\n                )}\n\n            </div>\n\n\n            <Container>\n                <div {...getTableProps()} className='table'>\n                    <div className='thead'>\n                        {headerGroups.map(headerGroup => (\n                            <div className='tr' {...headerGroup.getHeaderGroupProps()}>\n                                {headerGroup.headers.map(column => {\n                                    return (\n                                        <div\n                                            className='th'\n                                            {...column.getHeaderProps(headerProps)}\n                                        >\n                                            {column.canResize && (\n                                                <div {...column.getResizerProps()}\n                                                    className={`resizer ${column.isResizing ? 'isResizing' : ''}`}\n                                                />\n                                            )}\n\n                                            <div style={{ fontWeight: 'bold', marginRight: 10 }}>\n                                                {column.render('Header')}\n                                            </div>\n\n                                            {column.canGroupBy && column.Header !== '' && (\n                                                <span {...column.getGroupByToggleProps()}>\n                                                    {headerWithNoGroupFunction(column.Header) ? null\n                                                        : column.isGrouped ? <IconTable type='stop' color='red' />\n                                                            : <IconTable type='plus-circle' />\n                                                    }\n                                                </span>\n                                            )}\n\n                                            <span {...column.getSortByToggleProps()}\n                                                onClick={\n                                                    column.canSort ? (e) => {\n                                                        e.persist();\n                                                        column.toggleSortBy(undefined, !disableMultiSort && isMultiSortEvent(e));\n                                                        listRef.current.scrollToItem(0);\n                                                    } : undefined\n                                                }\n                                            >\n                                                {column.isSorted\n                                                    ? (column.isSortedDesc\n                                                        ? <IconTable type='sort-ascending' color='green' />\n                                                        : <IconTable type='sort-descending' color='green' />)\n                                                    : <IconTable type='ordered-list' />}\n                                            </span>\n\n                                            <span>\n                                                {column.canFilter && column.Header !== ''\n                                                    ? column.render('Filter') : null\n                                                }\n                                            </span>\n\n\n                                        </div>\n                                    )\n                                })}\n                            </div>\n                        ))}\n                    </div>\n\n                    <div {...getTableBodyProps()} className='tbody'>\n                        <FixedSizeList\n                            ref={listRef}\n                            height={500}\n                            itemCount={rows.length}\n                            itemSize={25}\n                            width={totalColumnsWidth}\n                            // width={3500}\n                            style={{ overflowX: 'hidden' }}\n                        >\n                            {RenderRow}\n                        </FixedSizeList>\n                    </div>\n\n                </div>\n            </Container>\n\n            {panelFunctionVisible && (\n                <PanelRightClick\n                    left={leftPanelFunction} top={topPanelFunction}\n                    buttonPanelFunction={buttonPanelFunction}\n                />\n            )}\n\n        </>\n    );\n};\n\nconst borderLine = `1px solid ${colorType.grey2}`\n\nconst Container = styled.div`\n\n    white-space: nowrap;\n    height: ${0.6 * window.innerHeight}px;\n    display: block;\n    overflow: scroll;\n    overflow-y: hidden;\n    border: ${borderLine};\n\n\n    .table {\n\n        border-spacing: 0;\n        position: relative;\n\n        .thead {\n            position: absolute;\n            z-index: 1000;\n            background-color: ${colorType.grey1};\n            top: 0;\n        }\n\n        .tbody {\n            padding-top: 36px;\n            overflow-y: auto;\n            overflow-x: hidden;\n            height: ${0.7 * window.innerHeight}px;\n            /* width: ${props => props.totalWidth}px; */\n            /* .tr:first-child {\n                padding-top: 100px; // shift down the first row of body\n            } */\n        }\n\n        .tr {\n            :last-child {\n                .td {\n                    /* border-bottom: 0; */\n                }\n            }\n        }\n\n    \n        /* .tr:nth-child(even) {\n            background-color: ${colorType.grey4};\n        } */\n        \n        .th, .td {\n            color: black;\n            margin: 0;\n            padding: 0.1rem;\n            padding-left: 0.3rem;\n            border-right: ${borderLine};\n            border-bottom: ${borderLine};\n            /* In this example we use an absolutely position resizer, so this is required. */\n            position: relative;\n\n            white-space: nowrap;\n            overflow: hidden;\n            text-overflow: ellipsis;\n\n            \n            :last-child {\n                border-right: 0;\n            }\n            .resizer {\n                right: 0;\n                background: ${colorType.grey1};\n                width: 5px;\n                height: 100%;\n                position: absolute;\n                top: 0;\n                z-index: 1;\n                /* prevents from scrolling while dragging on touch devices */\n                touch-action :none;\n                &.isResizing {\n                    background: ${colorType.grey2};\n                }\n            }\n        }\n\n        .th {\n            padding: 0.4rem;\n        }\n\n        \n    }\n`;\n\n\n\nconst IconTable = ({ type, color }) => {\n    return (\n        <IconStyle color={color || colorType.black} type={type} />\n    );\n};\n\nconst IconStyle = styled(Icon)`\n   font-size: 16px;\n   margin-right: 5px;\n   color: ${props => props.color};\n   padding: 2px;\n   border-radius: 3px;\n   border: 0.5px solid ${colorType.grey4};\n   :hover {\n      background: ${colorType.grey4}\n   }\n`;\n\n\n\n\n\n","D:\\994 WOH HUP 2020\\Projects\\deploy-meeting\\client\\src\\_dashboardComp\\componentsDashboard\\_ChartPieDrawing.js",[],"D:\\994 WOH HUP 2020\\Projects\\deploy-meeting\\client\\src\\_dashboardComp\\componentsDashboard\\_FormPivot.js",[],"D:\\994 WOH HUP 2020\\Projects\\deploy-meeting\\client\\src\\constants\\index.js",[],"D:\\994 WOH HUP 2020\\Projects\\deploy-meeting\\client\\src\\utils\\index.js",["531","532","533","534","535","536","537","538","539","540","541","542","543","544","545","546","547"],"D:\\994 WOH HUP 2020\\Projects\\deploy-meeting\\client\\src\\layouts\\pageSpreadsheet\\PanelCalendar.js",["548","549"],"import { Calendar, Radio } from 'antd';\nimport React from 'react';\n\n\nconst { Group, Button } = Radio;\n\n\nconst PanelCalendar = ({ pickDate }) => {\n\n    return (\n        <div style={{ width: 300 }}>\n            <Calendar\n                fullscreen={false}\n                onSelect={pickDate}\n            />\n        </div>\n    );\n};\n\nexport default PanelCalendar;\n","D:\\994 WOH HUP 2020\\Projects\\deploy-meeting\\client\\src\\layouts\\pageSpreadsheet\\ButtonGroupComp.js",[],"D:\\994 WOH HUP 2020\\Projects\\deploy-meeting\\client\\src\\layouts\\pageSpreadsheet\\ColorizedForm.js",[],"D:\\994 WOH HUP 2020\\Projects\\deploy-meeting\\client\\src\\layouts\\pageSpreadsheet\\FormDateAutomation.js",[],"D:\\994 WOH HUP 2020\\Projects\\deploy-meeting\\client\\src\\layouts\\pageSpreadsheet\\FormCellColorizedCheck.js",["550","551"],"import Axios from 'axios';\nimport moment from 'moment';\nimport React, { useContext, useEffect, useState } from 'react';\nimport { SERVER_URL } from '../../constants';\nimport { Context as ProjectContext } from '../../contexts/projectContext';\nimport { convertHistoryData } from '../../utils';\nimport ButtonStyle from './ButtonStyle';\nimport PanelCalendarDuration from './PanelCalendarDuration';\n\n\n\n\nconst FormCellColorizedCheck = ({ setCellHistoryArr }) => {\n\n   const { state: stateProject } = useContext(ProjectContext);\n\n   const { projectId, token } = stateProject.allDataOneSheet;\n   const headersArr = stateProject.allDataOneSheet.publicSettings.headers;\n\n   useEffect(() => {\n      const fetchProjectHistory = async () => {\n         try {\n            const res = await Axios.get(`${SERVER_URL}/cell/history/`, { params: { token, projectId } });\n            setHistoryData(res.data);\n         } catch (err) {\n            console.log(err);\n         };\n      };\n      fetchProjectHistory();\n   }, []);\n\n   const [historyData, setHistoryData] = useState([]);\n\n   const [dateRange, setDateRange] = useState(null);\n   const onClickCheck = ({ start, end }) => {\n      let filterCells = convertHistoryData(historyData).filter(cell => {\n         let createdAt = moment(cell.createdAt).toDate();\n         return createdAt >= start && createdAt <= end;\n      });\n      const cellArr = filterCells.map(ch => {\n         const { row: rowId, headerKey } = ch;\n         let headerText = headersArr.find(hd => hd.key === headerKey).text;\n         return {\n            rowId,\n            header: headerText\n         }\n      });\n      let unique = cellArr.reduce((res, itm) => {\n         let result = res.find(item => JSON.stringify(item) == JSON.stringify(itm));\n         if (!result) return res.concat(itm);\n         return res;\n      }, []);\n\n      setCellHistoryArr(unique);\n   };\n   const checkCellWithinDates = (nos) => {\n      const addDays = (date, days) => {\n         let result = new Date(date);\n         result.setDate(result.getDate() + days);\n         return result;\n      };\n      let today = new Date();\n      let dateBefore = addDays(today, nos);\n      return {\n         start: dateBefore,\n         end: today\n      };\n   };\n\n\n   return (\n      <div style={{\n         padding: 15\n      }}>\n         <div style={{ display: 'flex', marginBottom: 10 }}>\n            <PanelCalendarDuration pickRangeDate={(e) => setDateRange(e)} />\n            <ButtonStyle\n               onClick={() => dateRange && onClickCheck({ start: dateRange[0], end: dateRange[1] })}\n               marginLeft={5}\n               name='Check Data Changed'\n            />\n         </div>\n         <div style={{ display: 'flex', marginBottom: 20, width: '100%' }}>\n            <ButtonStyle marginRight={5} name='Today'\n               onClick={() => onClickCheck(checkCellWithinDates(-1))}\n            />\n            <ButtonStyle marginRight={5} name='Last 3 Days'\n               onClick={() => onClickCheck(checkCellWithinDates(-3))}\n            />\n            <ButtonStyle marginRight={5} name='Last 7 Days'\n               onClick={() => onClickCheck(checkCellWithinDates(-7))}\n            />\n            <ButtonStyle marginRight={5} name='Last 14 Days'\n               onClick={() => onClickCheck(checkCellWithinDates(-14))}\n            />\n            <ButtonStyle marginRight={5} name='This Month'\n               onClick={() => onClickCheck(checkCellWithinDates(-31))}\n            />\n         </div>\n      </div>\n   );\n};\n\nexport default FormCellColorizedCheck;\n\n","D:\\994 WOH HUP 2020\\Projects\\deploy-meeting\\client\\src\\layouts\\pageSpreadsheet\\FormFilter.js",[],"D:\\994 WOH HUP 2020\\Projects\\deploy-meeting\\client\\src\\layouts\\pageSpreadsheet\\FormDrawingTypeOrder.js",["552","553"],"import { Icon, Input, Modal } from 'antd';\nimport React, { useContext, useEffect, useState } from 'react';\nimport SortableTree from 'react-sortable-tree';\nimport 'react-sortable-tree/style.css';\nimport styled from 'styled-components';\nimport { colorType } from '../../constants';\nimport { Context as ProjectContext } from '../../contexts/projectContext';\nimport { Context as RowContext } from '../../contexts/rowContext';\nimport { mongoObjectId } from '../../utils';\nimport ButtonGroupComp from './ButtonGroupComp';\n\n\n\n\n\nconst FormDrawingTypeOrder = ({ onClickCancelModal, applyFolderOrganize }) => {\n\n   const { state: stateRow } = useContext(RowContext);\n   const { state: stateProject } = useContext(ProjectContext);\n\n   const [input, setInput] = useState(addProjectLevel(stateRow.drawingTypeTree, stateProject.allDataOneSheet.projectName));\n   const [data, setData] = useState(arrangeDrawingType(input));\n\n\n\n   useEffect(() => {\n      setData(arrangeDrawingType(input));\n   }, [input]);\n\n   const onClickApply = () => {\n      input.splice(0, 1); // remove projectName Row\n      applyFolderOrganize(input);\n   };\n\n\n   const addFolderBelow = (node) => {\n      let nodeIndex;\n      input.forEach((nd, i) => {\n         if (nd.id === node.id) nodeIndex = i;\n      });\n\n      let newNodeIndex;\n      for (let i = 0; i < input.length; i++) {\n         if (input[i]._rowLevel - 1 === node._rowLevel && i > nodeIndex) {\n            if (!newNodeIndex) newNodeIndex = i;\n         };\n      };\n      for (let i = 0; i < Math.abs(node._rowLevel); i++) {\n         input.splice(newNodeIndex + i, 0, {\n            id: mongoObjectId(),\n            'Drawing Number': 'NEW DRAWING TYPE...',\n            _rowLevel: node._rowLevel + i + 1,\n            expanded: true,\n         });\n      };\n      setInput([...input]);\n   };\n\n   const [modalShown, setModalShown] = useState(false);\n   const [modalTitle, setModalTitle] = useState(null);\n   const [value, setValue] = useState(null);\n   const [item, setItem] = useState(null);\n\n   const deleteFolder = (node) => {\n      setItem(node);\n      setModalTitle('Delete Drawing Type');\n      setModalShown(true);\n   };\n   const editFolderName = (node) => {\n      setValue(node.title);\n      setItem(node);\n      setModalTitle('Edit Drawing Type Name');\n      setModalShown(true);\n   };\n   const onClickApplyModal = () => {\n\n      if (modalTitle === 'Delete Drawing Type') {\n\n         let removeArr = [...item.children || [], item];\n         const removeIdsArr = removeArr.map(e => e.id);\n         let arr = input.filter(e => removeIdsArr.indexOf(e.id) === -1);\n         setInput([...arr]);\n\n         setModalShown(false);\n         setModalTitle(null);\n         setValue(null);\n         setItem(null);\n      } else {\n         input.find(e => e.id === item.id)['Drawing Number'] = value;\n         setInput([...input]);\n\n         setModalShown(false);\n         setModalTitle(null);\n         setValue(null);\n         setItem(null);\n      };\n   };\n\n   const fileAdd = () => {\n      let projectLevel = input[0]._rowLevel;\n      input[0]._rowLevel = projectLevel - 1;\n      input.splice(1, 0, {\n         id: mongoObjectId(),\n         'Drawing Number': 'NEW DRAWING TYPE...',\n         _rowLevel: projectLevel,\n         expanded: true,\n      });\n      setInput([...input]);\n   };\n\n\n   const findChildData = (node) => {\n      let rowsChild = stateRow.rowsAll.filter(r => r._parentRow === node.id);\n      return {\n         parentName: node.title,\n         rowsChild: rowsChild\n      }\n   };\n\n   return (\n      <Container>\n         <PanelStyled>\n            <SortableTreeStyled\n               treeData={data}\n               onChange={treeData => {\n                  // setData(treeData);\n               }}\n               canDrop={(props) => {\n                  const { nextParent, node } = props;\n                  return nextParent && nextParent._rowLevel === node._rowLevel - 1;\n               }}\n               onMoveNode={({ prevTreeIndex, nextTreeIndex }) => {\n                  let item = input[prevTreeIndex];\n                  input.splice(prevTreeIndex, 1);\n                  input.splice(nextTreeIndex, 0, item);\n                  setInput([...input]);\n               }}\n               isVirtualized={false}\n               generateNodeProps={(props) => {\n                  const { node, parentNode } = props;\n                  return ({\n                     buttons: parentNode === null ? [\n                        // <IconBtn type='file-add' onClick={() => fileAdd()} />,\n                        <IconBtn type='plus' onClick={() => addFolderBelow(node)} />,\n                     ] : [\n                           <IconBtn type='edit' onClick={() => editFolderName(node)} />,\n                           <IconBtn type='delete' onClick={() => deleteFolder(node)} />\n                        ],\n                  })\n               }}\n            />\n         </PanelStyled>\n\n         <div style={{ padding: 20, display: 'flex', flexDirection: 'row-reverse' }}>\n            <ButtonGroupComp\n               onClickCancel={onClickCancelModal}\n               onClickApply={onClickApply}\n            />\n         </div>\n\n         {modalShown && (\n            <ModalStyledSetting\n               title={modalTitle}\n               visible={modalShown}\n               footer={null}\n               onCancel={() => {\n                  setModalShown(false);\n                  setValue(null);\n                  setModalTitle(null);\n               }}\n               destroyOnClose={true}\n               centered={true}\n               width={window.innerWidth * 0.6}\n            >\n               <div style={{ padding: 20, width: '100%', maxHeight: window.innerHeight * 0.7 }}>\n                  {modalTitle === 'Delete Drawing Type' ? (\n                     <div style={{  }}>\n                        <div>{`Are you sure to delete the drawing type ${findChildData(item).parentName} ?`}</div>\n                        <div>All the following <span style={{ fontWeight: 'bold' }}>{findChildData(item).rowsChild.length}</span> drawings will be deleted:</div>\n                        <br />\n                        <div style={{ maxHeight: 300, overflowY: 'scroll' }}>\n                           {findChildData(item).rowsChild.map((dr, i) => (\n                              <div key={i}>({i + 1}) - {dr['Drawing Number']} - {dr['Drawing Name']}</div>\n                           ))}\n                        </div>\n                     </div>\n                  ) : (\n                        <Input\n                           placeholder='Enter new name...'\n                           style={{ width: '100%' }}\n                           value={value}\n                           onChange={(e) => setValue(e.target.value)}\n                        />\n                     )}\n\n                  <div style={{ padding: 20, display: 'flex', flexDirection: 'row-reverse' }}>\n                     <ButtonGroupComp\n                        onClickCancel={() => {\n                           setModalShown(false);\n                           setValue(null);\n                           setModalTitle(null);\n                        }}\n                        onClickApply={onClickApplyModal}\n                     />\n                  </div>\n               </div>\n            </ModalStyledSetting>\n         )}\n      </Container>\n   );\n};\n\nexport default FormDrawingTypeOrder;\n\n\n\nconst SortableTreeStyled = styled(SortableTree)`\n\n   .rst__node {\n      height: 50px !important;\n   }\n\n   .rst__rowWrapper {\n      /* padding: 10px; */\n   }\n\n   .rst__row {\n      /* height: 35px; */\n   }\n   .rst__rowWrapper {\n      /* height: 50px; */\n   }\n   .rst__nodeContent {\n      /* height: 50px; */\n   }\n\n   .rst__rowContents {\n      min-width: fit-content;\n   }\n\n`;\n\nconst IconBtn = ({ type, onClick }) => {\n   return (\n      <IconStyle type={type} onClick={onClick} />\n   );\n};\n\nconst IconStyle = styled(Icon)`\n   font-size: 14px;\n   margin: 2px;\n   padding: 4px;\n   &:hover {\n      background-color: ${colorType.grey0};\n   };\n`;\nconst ModalStyledSetting = styled(Modal)`\n    .ant-modal-content {\n        border-radius: 0;\n    }\n   .ant-modal-close {\n      display: none;\n   }\n   .ant-modal-header {\n      padding: 10px;\n   }\n   .ant-modal-title {\n        padding-left: 10px;\n        font-size: 20px;\n        font-weight: bold;\n   }\n   .ant-modal-body {\n      padding: 0;\n      display: flex;\n      justify-content: center;\n   }\n`;\n\nconst addProjectLevel = (drawingTypeTree, projectName) => {\n\n   let data = drawingTypeTree.map(e => ({ ...e }));\n   let levelArray = [...new Set(data.map(r => r._rowLevel))].sort((a, b) => b - a);\n\n   let projectLevel = levelArray[levelArray.length - 1] - 1;\n\n   data.unshift({\n      'Drawing Number': projectName,\n      id: mongoObjectId(),\n      _rowLevel: projectLevel,\n      expanded: true\n   });\n   return data;\n};\n\nconst arrangeDrawingType = (args) => {\n\n   let data = args.map(e => ({ ...e }));\n   let levelArray = [...new Set(data.map(r => r._rowLevel))].sort((a, b) => b - a);\n\n   levelArray.forEach(lvl => {\n      data.forEach((row, index) => {\n         if (row._rowLevel === lvl) {\n            row.title = row['Drawing Number'];\n            delete row['Drawing Number'];\n\n            let arr = data.filter((r, i) => r._rowLevel === lvl - 1 && i < index);\n            let parentRow = arr[arr.length - 1];\n            if (parentRow) parentRow.children = [...parentRow.children || [], row];\n         };\n      });\n   });\n   return data.filter(r => r._rowLevel === levelArray[levelArray.length - 1]);\n};\n\n\n\nconst Container = styled.div`\n   height: ${`${window.innerHeight * 0.8}` + 'px'};\n   width: 100%;\n   display: flex;\n   flex-direction: column;\n`;\n\nconst PanelStyled = styled.div`\n   width: 100%;\n   float: right;\n   overflow-x: hidden;\n   border-bottom: 1px solid ${colorType.grey4};\n`;","D:\\994 WOH HUP 2020\\Projects\\deploy-meeting\\client\\src\\layouts\\pageSpreadsheet\\FormGroup.js",[],"D:\\994 WOH HUP 2020\\Projects\\deploy-meeting\\client\\src\\layouts\\pageSpreadsheet\\TableActivityHistory.js",["554","555","556","557","558","559"],"import { Modal } from 'antd';\nimport Axios from 'axios';\nimport moment from 'moment';\nimport React, { useContext, useEffect, useState } from 'react';\nimport BaseTable, { AutoResizer } from 'react-base-table';\nimport styled from 'styled-components';\nimport { colorType, SERVER_URL } from '../../constants';\nimport { Context as ProjectContext } from '../../contexts/projectContext';\nimport { Context as RowContext } from '../../contexts/rowContext';\nimport { convertHistoryData, mongoObjectId } from '../../utils';\nimport ButtonStyle from './ButtonStyle';\nimport FormFilterActivityHistory from './FormFilterActivityHistory';\nimport IconTable from './IconTable';\nimport PanelCalendarDuration from './PanelCalendarDuration';\n\nconst Table = (props) => {\n    return (\n        <AutoResizer>\n            {({ width, height }) => {\n                return (\n                    <BaseTable\n                        {...props}\n                        width={width}\n                        height={height}\n                    />\n                );\n            }}\n        </AutoResizer>\n    );\n};\n\nconst panelWidth = window.innerWidth * 0.8;\nconst panelHeight = window.innerHeight * 0.8;\n\nconst TableActivityHistory = (props) => {\n\n    const { state: stateProject } = useContext(ProjectContext);\n    const { state: stateRow } = useContext(RowContext);\n    const { allDataOneSheet: { publicSettings: { activityRecorded } } } = stateProject;\n\n\n\n    const { projectId, token } = stateProject.allDataOneSheet;\n    const { headers } = stateProject.allDataOneSheet.publicSettings;\n\n    const [historyAll, setHistoryAll] = useState(null);\n    const [historyAllInit, setHistoryAllInit] = useState(null);\n\n\n    const headersShown = [\n        'Drawing Number',\n        'Drawing Name',\n        'Column',\n        'Value',\n        'User',\n        'Created At',\n        'Action'\n    ];\n\n    const revKey = headers.find(hd => hd.text === 'Rev').key;\n    const statusKey = headers.find(hd => hd.text === 'Status').key;\n    const dwgNumber = headers.find(hd => hd.text === 'Drawing Number').key;\n    const dwgName = headers.find(hd => hd.text === 'Drawing Name').key;\n\n    useEffect(() => {\n        const fetchRowsAndCellHistory = async () => {\n            try {\n                const resRows = await Axios.get(`${SERVER_URL}/row/history/`, { params: { token, projectId } });\n                const resCells = await Axios.get(`${SERVER_URL}/cell/history/`, { params: { token, projectId } });\n\n                let rowsOutput = [];\n                resRows.data.forEach(row => {\n                    const { history } = row;\n                    if (history) rowsOutput.push({\n                        'Drawing Number': history[dwgNumber],\n                        'Drawing Name': history[dwgName],\n                        'Column': 'Rev & Status',\n                        'Value': `${history[revKey]} - ${history[statusKey]}`,\n                        'User': row.userId || 'n/a',\n                        'Created At': moment(row.createdAt).format('DD/MM/YY - HH:mm'),\n                        'Action': 'Save Drawing Version',\n                        id: mongoObjectId()\n                    });\n                });\n\n                let cellsOutput = [];\n                convertHistoryData(resCells.data).forEach(cell => {\n                    const row = stateRow.rowsAll.find(r => r.id === cell.row);\n                    if (row) cellsOutput.push({\n                        'Drawing Number': row['Drawing Number'],\n                        'Drawing Name': row['Drawing Name'],\n                        'Column': headers.find(hd => hd.key === cell.headerKey).text,\n                        'Value': cell.text,\n                        'User': cell.email || 'n/a',\n                        'Created At': moment(cell.createdAt).format('DD/MM/YY - HH:mm'),\n                        'Action': 'Edit Cell',\n                        id: mongoObjectId()\n                    });\n                });\n\n                const activityRecordedData = activityRecorded.map(r => {\n                    return {\n                        'Drawing Number': r[dwgNumber],\n                        'Drawing Name': r[dwgName],\n                        'Column': undefined,\n                        'Value': undefined,\n                        'User': r.email || 'n/a',\n                        'Created At': moment(r.createdAt).format('DD/MM/YY - HH:mm'),\n                        'Action': r.action,\n                        id: mongoObjectId()\n                    };\n                });\n                let outputArr = [...rowsOutput, ...cellsOutput, ...activityRecordedData];\n\n                setHistoryAll(sortDataBeforePrint(outputArr));\n                setHistoryAllInit(sortDataBeforePrint(outputArr));\n\n            } catch (err) {\n                console.log(err);\n            };\n        };\n        fetchRowsAndCellHistory();\n    }, []);\n\n\n    const [modalFilter, setModalFilter] = useState(false);\n\n    const applyFilter = (data) => {\n        setHistoryAll(data);\n        setModalFilter(false);\n    };\n\n    const sortDataBeforePrint = (data) => {\n        return data.sort((b, a) => {\n            let aa = moment(a['Created At'], 'DD/MM/YY - HH:mm').toDate();\n            let bb = moment(b['Created At'], 'DD/MM/YY - HH:mm').toDate();\n            return aa > bb ? 1 : bb > aa ? -1 : 0\n        });\n    };\n\n\n    const [dateRange, setDateRange] = useState(null);\n    const onClick = () => {\n        if (!dateRange) return;\n        let newData = historyAll.filter(r => {\n            let xxx = moment(r['Created At'], 'DD/MM/YY - HH:mm').toDate();\n            return xxx <= dateRange[1] && xxx >= dateRange[0];\n        });\n        setHistoryAll(sortDataBeforePrint(newData));\n    };\n    const resetDataFilter = () => {\n        setHistoryAll(sortDataBeforePrint(historyAllInit));\n    };\n\n    const checkDataWithinDays = (nos) => {\n        const addDays = (date, days) => {\n            let result = new Date(date);\n            result.setDate(result.getDate() + days);\n            return result;\n        };\n\n        let today = new Date();\n        let dateBefore = addDays(today, nos);\n        let newData = historyAllInit.filter(r => {\n            let xxx = moment(r['Created At'], 'DD/MM/YY - HH:mm').toDate();\n            return xxx <= today && xxx >= dateBefore;\n        });\n        setHistoryAll(sortDataBeforePrint(newData));\n    };\n\n\n\n    return (\n        <>\n            {historyAll && (\n                <div style={{\n                    height: panelHeight,\n                    background: 'white',\n                    padding: 10,\n                    display: 'flex',\n                    justifyContent: 'center',\n                    flexDirection: 'column',\n                }}>\n                    <div style={{ paddingBottom: 10, fontSize: 20, fontWeight: 'bold', textAlign: 'center' }}>ACTIVITY HISTORY</div>\n                    <div style={{ display: 'flex', marginBottom: 10 }}>\n                        <PanelCalendarDuration pickRangeDate={(e) => setDateRange(e)} />\n                        <ButtonStyle\n                            onClick={onClick}\n                            marginLeft={5}\n                            name='Check History'\n                        />\n                    </div>\n                    <div style={{ display: 'flex', marginBottom: 10 }}>\n                        <div style={{ marginRight: 10, display: 'flex' }}>\n                            <IconTable type='filter' onClick={() => setModalFilter(true)} />\n                            <IconTable type='swap' onClick={resetDataFilter} />\n                        </div>\n\n                        <ButtonStyle\n                            onClick={() => { }}\n                            marginRight={5}\n                            name='Today'\n                            onClick={() => checkDataWithinDays(-1)}\n                        />\n                        <ButtonStyle\n                            onClick={() => { }}\n                            marginRight={5}\n                            name='Last 3 Days'\n                            onClick={() => checkDataWithinDays(-3)}\n                        />\n\n                        <ButtonStyle\n                            onClick={() => { }}\n                            marginRight={5}\n                            name='Last 7 Days'\n                            onClick={() => checkDataWithinDays(-7)}\n                        />\n                        <ButtonStyle\n                            onClick={() => { }}\n                            marginRight={5}\n                            name='Last 14 Days'\n                            onClick={() => checkDataWithinDays(-14)}\n                        />\n                        <ButtonStyle\n                            onClick={() => { }}\n                            marginRight={5}\n                            name='This Month'\n                            onClick={() => checkDataWithinDays(-31)}\n                        />\n                    </div>\n\n                    <div style={{\n                        width: panelWidth,\n                        height: '100%',\n                        margin: '0 auto',\n                        textAlign: 'center'\n                    }}>\n                        <TableStyled\n                            fixed\n                            columns={generateColumns(headersShown)}\n                            data={historyAll}\n                            rowHeight={28}\n                        />\n                    </div>\n                </div>\n            )}\n\n            {modalFilter && (\n                <ModalStyledSetting\n                    title='Filter Data Activity History'\n                    visible={modalFilter}\n                    footer={null}\n                    onCancel={() => {\n                        setModalFilter(false);\n                    }}\n                    destroyOnClose={true}\n                    centered={true}\n                >\n                    <FormFilterActivityHistory\n                        applyFilter={applyFilter}\n                        onClickCancelModal={() => setModalFilter(false)}\n                        rowsAll={historyAll}\n                        headers={headersShown}\n                    />\n                </ModalStyledSetting>\n            )}\n        </>\n    );\n};\n\nexport default TableActivityHistory;\n\n\nconst generateColumns = (headers) => headers.map((column, columnIndex) => ({\n\n    key: column,\n    dataKey: column,\n    title: column,\n    resizable: true,\n    width: getHeaderWidth2(column),\n}));\nconst getHeaderWidth2 = (header) => {\n    if (header === 'Drawing Number') return 300;\n    if (header === 'Drawing Name') return 300;\n    if (header === 'Column') return 200;\n    if (header === 'Value') return 300;\n    if (header === 'User') return 200;\n    if (header === 'Created At') return 200;\n    if (header === 'Action') return 200;\n};\n\nconst ModalStyledSetting = styled(Modal)`\n    .ant-modal-content {\n        border-radius: 0;\n    }\n   .ant-modal-close {\n      display: none;\n   }\n   .ant-modal-header {\n      padding: 10px;\n   }\n   .ant-modal-title {\n        padding-left: 10px;\n        font-size: 20px;\n        font-weight: bold;\n   }\n   .ant-modal-body {\n      padding: 0;\n      display: flex;\n      justify-content: center;\n   }\n`;\nconst TableStyled = styled(Table)`\n\n\n    .BaseTable__row-cell-text {\n        color: black\n    }\n\n    .BaseTable__table .BaseTable__body {\n      -webkit-touch-callout: none;\n      -webkit-user-select: none;\n      -khtml-user-select: none;\n      -moz-user-select: none;\n      -ms-user-select: none;\n      user-select: none;\n   }\n\n    .BaseTable__header-cell {\n        padding: 10px;\n        border-right: 1px solid #DCDCDC;\n        background: ${colorType.grey1};\n        color: black\n    }\n\n    .BaseTable__row-cell {\n        padding: 10px;\n        border-right: 1px solid #DCDCDC;\n        overflow: visible !important;\n    }\n`;\n\n\n\n\n","D:\\994 WOH HUP 2020\\Projects\\deploy-meeting\\client\\src\\layouts\\pageSpreadsheet\\PanelConfirm.js",[],"D:\\994 WOH HUP 2020\\Projects\\deploy-meeting\\client\\src\\layouts\\pageSpreadsheet\\FormSort.js",[],"D:\\994 WOH HUP 2020\\Projects\\deploy-meeting\\client\\src\\layouts\\pageSpreadsheet\\ReorderColumnForm.js",[],"D:\\994 WOH HUP 2020\\Projects\\deploy-meeting\\client\\src\\layouts\\pageSpreadsheet\\TableCellHistory.js",["560","561"],"import { List } from 'antd';\nimport Axios from 'axios';\nimport moment from 'moment';\nimport React, { useContext, useEffect, useState } from 'react';\nimport { SERVER_URL } from '../../constants';\nimport { Context as ProjectContext } from '../../contexts/projectContext';\nimport { Context as RowContext } from '../../contexts/rowContext';\n\n\n\nconst TableCellHistory = (props) => {\n\n    const { rowData: { id: rowId }, column } = props;\n\n    const {\n        state: stateProject\n    } = useContext(ProjectContext);\n\n    const {\n        state: stateRow\n    } = useContext(RowContext);\n\n    const { projectId, token } = stateProject.allDataOneSheet;\n    const headers = stateProject.allDataOneSheet.publicSettings.headers;\n    const headerKey = headers.find(hd => hd.text === column.key).key;\n\n\n    const [history, setHistory] = useState()\n\n    useEffect(() => {\n        const fetchCellHistory = async () => {\n            try {\n\n                const res = await Axios.get(`${SERVER_URL}/cell/history/one-cell/`, { params: { token, projectId, rowId, headerKey } });\n\n                setHistory(res.data.histories.reverse());\n\n            } catch (err) {\n                console.log(err);\n            };\n        };\n        fetchCellHistory();\n    }, [])\n\n\n    return (\n        <div style={{ width: '100%', padding: 15, maxHeight: window.innerHeight * 0.7, overflowY: 'scroll' }}>\n            <List\n                size='small'\n                header={null}\n                footer={null}\n                bordered\n                dataSource={history}\n                renderItem={item => (\n                    <List.Item>\n                        <div>\n                            <div>{`${item.email}`}</div>\n                            <div style={{ fontSize: 12, color: 'grey' }}>{moment(item.createdAt).format('DD/MM/YY - HH:mm')}</div>\n                            <div style={{ fontWeight: 'bold' }}>{item.text}</div>\n                        </div>\n                    </List.Item>\n                )}\n            />\n        </div>\n    );\n};\n\nexport default TableCellHistory;\n","D:\\994 WOH HUP 2020\\Projects\\deploy-meeting\\client\\src\\layouts\\pageSpreadsheet\\TableDrawingDetail.js",["562"],"D:\\994 WOH HUP 2020\\Projects\\deploy-meeting\\client\\src\\_dashboardComp\\componentsDashboard\\CardPanel.js",[],"D:\\994 WOH HUP 2020\\Projects\\deploy-meeting\\client\\src\\_dashboardComp\\componentsDashboard\\PanelRightClick.js",[],"D:\\994 WOH HUP 2020\\Projects\\deploy-meeting\\client\\src\\_dashboardComp\\componentsDashboard\\ChartBarRecordPanel.js",[],"D:\\994 WOH HUP 2020\\Projects\\deploy-meeting\\client\\src\\_dashboardComp\\utils\\functionDashboard.js",["563"],"import Axios from 'axios';\nimport _ from 'lodash';\nimport moment from 'moment';\nimport { _SelectColumnFilter } from '../componentsDashboard/_TableDrawingList';\n\n\n\n\n\n\nexport const api = Axios.create({\n    baseURL: '/api',\n    headers: {\n        'Content-Type': 'application/json'\n    }\n});\n\n\n\nexport const removeUnwantedHeaders = (columnsIndexArray) => {\n\n    const unwantedHeader = [\n        'Delta_Date',\n        'Delta_IT_CT',\n        'Delta_Issue',\n        'Delta_KTP'\n    ];\n    unwantedHeader.forEach(hd => {\n        delete columnsIndexArray[hd];\n    });\n    return columnsIndexArray;\n};\n\n\n\n\nexport const getDataConverted = (projectArray) => {\n    let dataOutput = {};\n    for (let i = 0; i < projectArray.length; i++) {\n\n        // get the column header\n        const project = projectArray[i];\n        const categoryArray = _.map(project.columns, 'title');\n        let columnsIndexArray = {};\n        categoryArray.forEach(cate => {\n            project.columns.forEach(cl => {\n                if (cl.title === cate) columnsIndexArray[cate] = cl.index;\n            });\n        });\n\n        const indexDrawingName = columnsIndexArray['Drawing Name'];\n        const indexRev = columnsIndexArray['Rev'];\n\n        let allDrawings = [];\n        let allDrawingsLatestRevision = [];\n\n        for (let i = 0; i < project.rows.length; i++) {\n            const dwg = project.rows[i];\n            if (dwg.cells[indexDrawingName].value === undefined) continue; // make sure all drawing name is keyed in\n            allDrawings.push([...dwg.cells]);\n\n            if (dwg.cells[indexRev].value === undefined) {\n                allDrawingsLatestRevision.push([...dwg.cells]);\n                continue;\n            };\n\n            let found = false;\n            for (let j = 0; j < allDrawingsLatestRevision.length; j++) {\n                if (allDrawingsLatestRevision[j][indexDrawingName].value === dwg.cells[indexDrawingName].value) {\n                    found = true;\n                    if (String(allDrawingsLatestRevision[j][indexRev].value) < String(dwg.cells[indexRev].value)) {\n                        allDrawingsLatestRevision.splice(j, 1);\n                        allDrawingsLatestRevision.push([...dwg.cells]);\n                    };\n                    break;\n                };\n            };\n            if (!found) allDrawingsLatestRevision.push([...dwg.cells]);\n        };\n\n        dataOutput[project.name.slice(0, project.name.length - 17)] = {\n            columnsIndexArray: removeUnwantedHeaders(columnsIndexArray),\n            allDrawings,\n            allDrawingsLatestRevision\n        };\n    };\n    return dataOutput;\n};\n\n\n\nexport const getAllDrawingSameValueInOneColumn = (data, column, dataType) => {\n\n    const { columnsIndexArray, allDrawings, allDrawingsLatestRevision } = data;\n\n    const drawings = dataType === 'all' ? allDrawings : allDrawingsLatestRevision;\n    const indexCategory = columnsIndexArray[column];\n\n    let drawingCount = {};\n    let drawingList = {};\n\n    drawings.forEach(dwg => {\n        const { value } = dwg[indexCategory];\n\n        drawingCount[value] = (drawingCount[value] || 0) + 1;\n        drawingList[value] = [...drawingList[value] || [], dwg];\n    });\n\n    return {\n        drawingCount,\n        drawingList\n    };\n};\n\n\n\nexport const getDrawingLateNow = (data, type) => {\n\n    const { allDrawingsLatestRevision, columnsIndexArray } = data;\n\n    const dwgsLateNow = [];\n    const columnHeader = type === 'getApproval' ? 'get Approval'\n        : type === 'drgToConsultant' ? 'Drg to Consultant' : null;\n\n    allDrawingsLatestRevision.forEach(dwg => {\n        const status = dwg[columnsIndexArray['Status']].value;\n        // make sure drawing is not approved or consultant reviewing\n        if (status && (status.includes('Approved') || status === 'Consultant reviewing')) return;\n\n        const dateT = dwg[columnsIndexArray[`${columnHeader} (T)`]].value;\n        const dateA = dwg[columnsIndexArray[`${columnHeader} (A)`]].value;\n        if (dateT === undefined || dateA !== undefined) return;\n\n        const diff = moment(dateT).diff(moment(), 'days');\n        if (diff < 0) dwgsLateNow.push([...dwg]);\n    });\n    return dwgsLateNow;\n};\n\nexport const getDrawingLateNow1 = (drawings, type) => {\n\n    const dwgsLateNow = [];\n    drawings.forEach(dwg => {\n        const status = dwg['Status'];\n        // make sure drawing is not approved or consultant reviewing\n        if (status && (status.includes('Approved') || status === 'Consultant reviewing')) return;\n\n        const dateT = dwg[`${type} (T)`];\n        const dateA = dwg[`${type} (A)`];\n        if (dateT === undefined || dateA !== undefined) return;\n\n        const diff = moment(dateT).diff(moment(), 'days');\n        if (diff < 0) dwgsLateNow.push(dwg);\n    });\n    return dwgsLateNow;\n};\n\n\n\nexport const mergeUndefined = ({ drawingCount, drawingList }, mergeWith, columnsIndexArray, columnHeader) => {\n    if (drawingCount['undefined'] === undefined) return;\n\n    drawingCount[mergeWith] = (drawingCount[mergeWith] || 0) + drawingCount['undefined'];\n    delete drawingCount['undefined'];\n\n    drawingList[mergeWith] = [...drawingList[mergeWith] || [], ...drawingList['undefined']];\n    delete drawingList['undefined'];\n\n    return {\n        drawingCount,\n        drawingList\n    };\n};\n\n\nexport const formatStringNameToId = (str) => {\n    let mystring = str.replace(/ /g, '').replace(/\\(|\\)/g, '');\n    return mystring.charAt(0).toLowerCase() + mystring.slice(1);\n};\n\n\nexport const pickDataToTable = (drawings, columnsIndexArray) => {\n    let arr = [];\n    drawings.forEach(dwg => {\n        let obj = {};\n        Object.keys(columnsIndexArray).forEach(header => {\n            obj[formatStringNameToId(header)] = dwg[columnsIndexArray[header]].value || '. ';\n        });\n        arr.push(obj);\n    });\n    return arr;\n};\n\n\nexport const convertDataToStackedChart = (data) => {\n    let dataChart = [];\n    let allKeys = [];\n    data && Object.keys(data).forEach(project => {\n        const { drawingCount } = mergeUndefined(getAllDrawingSameValueInOneColumn(data[project], 'Status'), 'Not Started');\n        dataChart.push({ ...drawingCount, name: project });\n        allKeys = [...allKeys, ...Object.keys(drawingCount)];\n    });\n    const itemArr = [...new Set(allKeys)];\n\n    itemArr.forEach(key => {\n        dataChart.forEach(projectData => {\n            if (key in projectData) return;\n            projectData[key] = 0;\n        });\n    });\n\n    return {\n        dataChart,\n        itemArr\n    };\n};\n\n\n\nexport const sortStatusOrder = (data) => {\n\n    const statusArr = [...data];\n    const inputStackData = [\n        'Not Started',\n        '1st cut of model in-progress',\n        '1st cut of drawing in-progress',\n        'Pending design',\n        'Consultant reviewing',\n        'Reject and resubmit',\n        'Approved with comments, to Resubmit',\n        'Revise In-Progress',\n        'Approved with Comment, no submission Required',\n        'Approved for Construction',\n    ];\n    let arr = [];\n    inputStackData.forEach(element => {\n        statusArr.forEach(e => {\n            if (element === e) arr.push(element);\n        });\n    });\n    if (arr.length === 0) return statusArr;\n    return arr;\n};\n\n\n\nexport const randomInteger = (min, max) => {\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n};\n\n\nexport const createDummyRecords = () => {\n\n    let categoryArr = [\n        'drawingLateApproval',\n        'drawingLateSubmission',\n        'drawingLateConstruction',\n        'drawingApprovedForConstruction',\n        'drawingApprovedWithCommentNoSubmissionRequired',\n        'drawingApprovedWithCommentsToResubmit',\n        // 'drawingReviseInProgress',\n        // 'drawingConsultantReviewing',\n        // 'drawing1stCutOfDrawingInProgress',\n        // 'drawingNotStarted',\n    ];\n\n    let recordArray = {};\n\n    categoryArr.forEach(cate => {\n        let arr = {};\n        for (let i = 0; i < 100; i++) {\n            arr[moment(new Date(2020, 6, 21)).add(i, 'day')._d] = randomInteger(1, 15);\n        };\n        recordArray[cate] = arr;\n    });\n\n    return recordArray;\n};\n\n\nconst getColumnWidth = (rows, accessor, headerText) => {\n    const maxWidth = 400;\n    const magicSpacing = 10;\n    const cellLength = Math.max(\n        ...rows.map(row => (`${row[accessor]}` || '').length),\n        headerText.length,\n    );\n\n    return Math.min(maxWidth, cellLength * magicSpacing);\n};\n\n\n\n\nconst getHeaderWidth = (header) => {\n\n    if (header === 'RFA Ref') return 270;\n    else if (\n        header === 'Block/Zone' ||\n        header === 'Level' || header === 'Unit/CJ' ||\n        header === 'Drg Type' || header === 'Use For' ||\n        header === 'Coordinator In Charge' || header === 'Modeller' ||\n        header === 'Model Progress' || header === 'Drawing Progress' ||\n        header === 'Construction Start'\n    ) return 200;\n    else if (header === 'Construction Issuance Date') return 220;\n    else if (header === 'Drawing') return 200;\n\n    else if (\n        header === 'Drg To Consultant (A)' ||\n        header === 'Drg To Consultant (T)' ||\n        header === 'Get Approval (A)' ||\n        header === 'Get Approval (T)'\n    ) return 220;\n\n    else if (header.includes('(A)') || header.includes('(T)')) return 190;\n\n\n\n\n    else if (header === 'Rev') return 150;\n    else if (header === 'Status') return 380;\n    else if (header === 'Remark') return 350;\n    else if (header === 'Drawing Number') return 300;\n    else if (header === 'Drawing Name') return 350;\n    else return 300;\n\n};\n\n\n\n\nexport const getColumnsHeader1 = (columnsIndexArray) => {\n\n    let columnsName = [\n        {\n            Header: '',\n            id: 'index',\n            accessor: (row, i) => i + 1,\n            width: 50,\n        },\n    ];\n\n    const filterSelect = (key) => {\n        if (\n            key === 'Status' ||\n            key === 'Rev' ||\n            key === 'Modeller' ||\n            key === 'Remark' ||\n            key === 'Coordinator In Charge' ||\n            key === 'Drg Type' ||\n            key === 'Use For' ||\n            key === 'Block/Zone' ||\n            key === 'Level' ||\n            key === 'Unit/CJ' ||\n            key === 'RFA Ref'\n        ) {\n            return true;\n        };\n    };\n\n    columnsIndexArray.forEach(hd => {\n        const width = getHeaderWidth(hd);\n\n        // const accessor = formatStringNameToId(hd);\n        const accessor = hd;\n\n        if (filterSelect(hd)) {\n            columnsName.push({\n                Header: hd,\n                Filter: _SelectColumnFilter,\n                accessor,\n                width,\n            });\n        } else {\n            columnsName.push({\n                Header: hd,\n                accessor,\n                width,\n            });\n        };\n    });\n    return columnsName;\n};\n\n\n\nexport const getHeaderSorted = (columnsData, columnsHeader) => {\n\n    let arr = [];\n    columnsData.forEach(headerData => {\n        if (headerData.Header === '') {\n            arr.push(headerData);\n            return;\n        };\n        columnsHeader.forEach(header => {\n            if (headerData.Header === header) arr.push(headerData);\n        });\n    });\n    return arr;\n};\nexport const getHeaderSorted1 = (columnsData, columnsHeader) => {\n    let arr = [];\n    columnsData.forEach(headerData => {\n        if (headerData.Header === '') {\n            arr.push(headerData);\n            return;\n        };\n        columnsHeader.forEach(header => {\n            if (headerData.Header === header) arr.push(headerData);\n        });\n    });\n    return arr;\n};\n\n\nexport const countAverage = (nums) => nums.reduce((a, b) => (a + b)) / nums.length;\n\n\nexport const recordGetAllMonth = (data, category) => {\n    let arr = [];\n    Object.keys(data[category]).forEach(item => {\n        arr.push(moment(item).add(-1, 'day').format('MM/YY'));\n    });\n    return [...new Set(arr)];\n};\n\n\n\nexport const recordDataToChartDaily = (data, category, month) => {\n    let arr = [];\n    Object.keys(data[category]).forEach(item => {\n        const date = moment(item).add(-1, 'day');\n        if (date.format('MM/YY') === month) {\n            arr.push({\n                date: date.format('DD'),\n                value: data[category][item]\n            });\n        };\n    });\n    return arr;\n};\n\n\nexport const recordDataToChartWeekly = (data, category) => {\n    let arr = [];\n    Object.keys(data[category]).forEach(item => {\n        const date = moment(item).add(-1, 'day');\n        arr.push({\n            week: date.format('W'),\n            month: date.format('MM'),\n            year: date.format('YY'),\n            value: data[category][item]\n        });\n    });\n    let groups = {};\n    for (let i = 0; i < arr.length; i++) {\n        let weekName = `W${arr[i].week} ${arr[i].month}/${arr[i].year}`;\n        if (!groups[weekName]) {\n            groups[weekName] = [];\n        };\n        groups[weekName].push(arr[i].value);\n    };\n    let arrOutput = [];\n    for (let week in groups) {\n        arrOutput.push({ week, value: Math.round(countAverage(groups[week])) });\n    };\n    return arrOutput;\n};\n\n\nexport const recordDataToChartMonthly = (data, category) => {\n    let arr = [];\n    Object.keys(data[category]).forEach(item => {\n        const date = moment(item).add(-1, 'day');\n        arr.push({\n            week: date.format('W'),\n            month: date.format('MM'),\n            year: date.format('YY'),\n            value: data[category][item]\n        });\n    });\n    let groups = {};\n    for (let i = 0; i < arr.length; i++) {\n        let monthName = `${arr[i].month}/${arr[i].year}`;\n        if (!groups[monthName]) {\n            groups[monthName] = [];\n        };\n        groups[monthName].push(arr[i].value);\n    };\n    let arrOutput = [];\n    for (let month in groups) {\n        arrOutput.push({ month, value: Math.round(countAverage(groups[month])) });\n    };\n    return arrOutput;\n};\n\n\n\n\nexport const changeColumnOrder = (arr, accessor, leftOrRight, to) => {\n    const array = [...arr];\n    let cl = array.find(item => item.accessor === accessor);\n    const index = array.indexOf(cl);\n    const f = array.splice(index, 1)[0];\n    if (leftOrRight) {\n        array.splice(index + leftOrRight, 0, f);\n    } else {\n        array.splice(to, 0, f);\n    };\n    return array;\n};","D:\\994 WOH HUP 2020\\Projects\\deploy-meeting\\client\\src\\layouts\\pageSpreadsheet\\ButtonStyle.js",["564"],"import { Button } from 'antd';\nimport React from 'react';\n\nconst ButtonStyle = ({\n    colorText,\n    marginRight,\n    marginLeft,\n    borderColor,\n    marginBottom,\n    background,\n    name,\n    onClick\n}) => {\n\n    return (\n        <Button \n            style={{\n                borderRadius: 0,\n                background: background,\n                color: colorText,\n                border: 'none',\n                marginRight,\n                marginBottom,\n                marginLeft,\n                border: `1px solid ${borderColor || background}`\n            }}\n            onClick={onClick}\n        >\n            {name}\n        </Button>\n    );\n};\n\nexport default ButtonStyle;\n\n\n","D:\\994 WOH HUP 2020\\Projects\\deploy-meeting\\client\\src\\layouts\\pageSpreadsheet\\PanelCalendarDuration.js",[],"D:\\994 WOH HUP 2020\\Projects\\deploy-meeting\\client\\src\\layouts\\pageSpreadsheet\\FormFilterActivityHistory.js",[],"D:\\994 WOH HUP 2020\\Projects\\deploy-meeting\\client\\src\\_dashboardComp\\componentsDashboard\\ChartBarRecord.js",[],{"ruleId":"565","replacedBy":"566"},{"ruleId":"567","replacedBy":"568"},{"ruleId":"569","severity":1,"message":"570","line":4,"column":1,"nodeType":"571","endLine":23,"endColumn":3},{"ruleId":"572","severity":1,"message":"573","line":165,"column":33,"nodeType":"574","messageId":"575","endLine":165,"endColumn":35},{"ruleId":"572","severity":1,"message":"573","line":191,"column":19,"nodeType":"574","messageId":"575","endLine":191,"endColumn":21},{"ruleId":"576","severity":1,"message":"577","line":285,"column":7,"nodeType":"578","messageId":"579","endLine":285,"endColumn":20},{"ruleId":"576","severity":1,"message":"580","line":290,"column":7,"nodeType":"578","messageId":"579","endLine":290,"endColumn":19},{"ruleId":"572","severity":1,"message":"573","line":328,"column":26,"nodeType":"574","messageId":"575","endLine":328,"endColumn":28},{"ruleId":"572","severity":1,"message":"573","line":330,"column":26,"nodeType":"574","messageId":"575","endLine":330,"endColumn":28},{"ruleId":"581","severity":1,"message":"582","line":369,"column":33,"nodeType":"583","messageId":"584","endLine":369,"endColumn":88},{"ruleId":"572","severity":1,"message":"573","line":369,"column":62,"nodeType":"574","messageId":"575","endLine":369,"endColumn":64},{"ruleId":"581","severity":1,"message":"585","line":380,"column":25,"nodeType":"583","messageId":"584","endLine":380,"endColumn":80},{"ruleId":"572","severity":1,"message":"573","line":380,"column":54,"nodeType":"574","messageId":"575","endLine":380,"endColumn":56},{"ruleId":"581","severity":1,"message":"586","line":391,"column":17,"nodeType":"583","messageId":"584","endLine":391,"endColumn":66},{"ruleId":"572","severity":1,"message":"573","line":391,"column":46,"nodeType":"574","messageId":"575","endLine":391,"endColumn":48},{"ruleId":"576","severity":1,"message":"587","line":740,"column":7,"nodeType":"578","messageId":"579","endLine":740,"endColumn":23},{"ruleId":"576","severity":1,"message":"588","line":765,"column":7,"nodeType":"578","messageId":"579","endLine":765,"endColumn":29},{"ruleId":"576","severity":1,"message":"589","line":795,"column":7,"nodeType":"578","messageId":"579","endLine":795,"endColumn":28},{"ruleId":"581","severity":1,"message":"586","line":836,"column":47,"nodeType":"583","messageId":"584","endLine":836,"endColumn":94},{"ruleId":"572","severity":1,"message":"573","line":836,"column":74,"nodeType":"574","messageId":"575","endLine":836,"endColumn":76},{"ruleId":"576","severity":1,"message":"590","line":281,"column":7,"nodeType":"578","messageId":"579","endLine":281,"endColumn":21},{"ruleId":"591","severity":1,"message":"592","line":109,"column":8,"nodeType":"593","endLine":109,"endColumn":10,"suggestions":"594"},{"ruleId":"595","severity":1,"message":"596","line":130,"column":25,"nodeType":"597","endLine":130,"endColumn":124},{"ruleId":"595","severity":1,"message":"596","line":131,"column":25,"nodeType":"597","endLine":131,"endColumn":99},{"ruleId":"595","severity":1,"message":"598","line":132,"column":25,"nodeType":"597","endLine":132,"endColumn":80},{"ruleId":"595","severity":1,"message":"598","line":133,"column":25,"nodeType":"597","endLine":133,"endColumn":116},{"ruleId":"595","severity":1,"message":"599","line":148,"column":37,"nodeType":"597","endLine":153,"endColumn":39},{"ruleId":"595","severity":1,"message":"600","line":157,"column":37,"nodeType":"597","endLine":161,"endColumn":39},{"ruleId":"595","severity":1,"message":"601","line":165,"column":37,"nodeType":"597","endLine":169,"endColumn":39},{"ruleId":"595","severity":1,"message":"602","line":173,"column":37,"nodeType":"597","endLine":177,"endColumn":39},{"ruleId":"595","severity":1,"message":"603","line":213,"column":21,"nodeType":"597","endLine":216,"endColumn":23},{"ruleId":"591","severity":1,"message":"604","line":84,"column":7,"nodeType":"593","endLine":84,"endColumn":9,"suggestions":"605"},{"ruleId":"591","severity":1,"message":"606","line":465,"column":7,"nodeType":"593","endLine":465,"endColumn":9,"suggestions":"607"},{"ruleId":"576","severity":1,"message":"608","line":482,"column":28,"nodeType":"578","messageId":"579","endLine":482,"endColumn":46},{"ruleId":"609","severity":1,"message":"610","line":702,"column":13,"nodeType":"611","endLine":702,"endColumn":75},{"ruleId":"612","severity":1,"message":"613","line":770,"column":19,"nodeType":"583","messageId":"614","endLine":770,"endColumn":21},{"ruleId":"612","severity":1,"message":"615","line":935,"column":33,"nodeType":"583","messageId":"616","endLine":935,"endColumn":35},{"ruleId":"576","severity":1,"message":"617","line":10,"column":7,"nodeType":"578","messageId":"579","endLine":10,"endColumn":28},{"ruleId":"576","severity":1,"message":"618","line":252,"column":11,"nodeType":"578","messageId":"579","endLine":252,"endColumn":24},{"ruleId":"591","severity":1,"message":"619","line":315,"column":8,"nodeType":"593","endLine":315,"endColumn":10,"suggestions":"620"},{"ruleId":"591","severity":1,"message":"621","line":326,"column":8,"nodeType":"593","endLine":326,"endColumn":22,"suggestions":"622"},{"ruleId":"576","severity":1,"message":"623","line":337,"column":11,"nodeType":"578","messageId":"579","endLine":337,"endColumn":24},{"ruleId":"576","severity":1,"message":"624","line":6,"column":13,"nodeType":"578","messageId":"579","endLine":6,"endColumn":22},{"ruleId":"576","severity":1,"message":"625","line":6,"column":32,"nodeType":"578","messageId":"579","endLine":6,"endColumn":39},{"ruleId":"576","severity":1,"message":"626","line":6,"column":41,"nodeType":"578","messageId":"579","endLine":6,"endColumn":52},{"ruleId":"576","severity":1,"message":"627","line":6,"column":54,"nodeType":"578","messageId":"579","endLine":6,"endColumn":77},{"ruleId":"576","severity":1,"message":"628","line":6,"column":79,"nodeType":"578","messageId":"579","endLine":6,"endColumn":90},{"ruleId":"576","severity":1,"message":"629","line":6,"column":92,"nodeType":"578","messageId":"579","endLine":6,"endColumn":101},{"ruleId":"576","severity":1,"message":"630","line":56,"column":22,"nodeType":"578","messageId":"579","endLine":56,"endColumn":34},{"ruleId":"591","severity":1,"message":"631","line":73,"column":7,"nodeType":"593","endLine":73,"endColumn":29,"suggestions":"632"},{"ruleId":"581","severity":1,"message":"586","line":674,"column":13,"nodeType":"583","messageId":"584","endLine":674,"endColumn":62},{"ruleId":"572","severity":1,"message":"573","line":674,"column":42,"nodeType":"574","messageId":"575","endLine":674,"endColumn":44},{"ruleId":"581","severity":1,"message":"586","line":701,"column":13,"nodeType":"583","messageId":"584","endLine":701,"endColumn":62},{"ruleId":"572","severity":1,"message":"573","line":701,"column":42,"nodeType":"574","messageId":"575","endLine":701,"endColumn":44},{"ruleId":"581","severity":1,"message":"586","line":728,"column":13,"nodeType":"583","messageId":"584","endLine":728,"endColumn":62},{"ruleId":"572","severity":1,"message":"573","line":728,"column":42,"nodeType":"574","messageId":"575","endLine":728,"endColumn":44},{"ruleId":"581","severity":1,"message":"586","line":757,"column":13,"nodeType":"583","messageId":"584","endLine":757,"endColumn":62},{"ruleId":"572","severity":1,"message":"573","line":757,"column":42,"nodeType":"574","messageId":"575","endLine":757,"endColumn":44},{"ruleId":"572","severity":1,"message":"633","line":770,"column":47,"nodeType":"574","messageId":"575","endLine":770,"endColumn":49},{"ruleId":"576","severity":1,"message":"634","line":5,"column":9,"nodeType":"578","messageId":"579","endLine":5,"endColumn":14},{"ruleId":"576","severity":1,"message":"635","line":5,"column":16,"nodeType":"578","messageId":"579","endLine":5,"endColumn":22},{"ruleId":"576","severity":1,"message":"636","line":20,"column":16,"nodeType":"578","messageId":"579","endLine":20,"endColumn":24},{"ruleId":"591","severity":1,"message":"637","line":43,"column":8,"nodeType":"593","endLine":43,"endColumn":10,"suggestions":"638"},{"ruleId":"591","severity":1,"message":"639","line":85,"column":7,"nodeType":"593","endLine":85,"endColumn":9,"suggestions":"640"},{"ruleId":"591","severity":1,"message":"641","line":123,"column":8,"nodeType":"593","endLine":123,"endColumn":10,"suggestions":"642"},{"ruleId":"609","severity":1,"message":"610","line":203,"column":29,"nodeType":"611","endLine":203,"endColumn":68},{"ruleId":"609","severity":1,"message":"610","line":209,"column":29,"nodeType":"611","endLine":209,"endColumn":68},{"ruleId":"609","severity":1,"message":"610","line":216,"column":29,"nodeType":"611","endLine":216,"endColumn":68},{"ruleId":"609","severity":1,"message":"610","line":222,"column":29,"nodeType":"611","endLine":222,"endColumn":69},{"ruleId":"609","severity":1,"message":"610","line":228,"column":29,"nodeType":"611","endLine":228,"endColumn":69},{"ruleId":"591","severity":1,"message":"643","line":30,"column":7,"nodeType":"593","endLine":30,"endColumn":9,"suggestions":"644"},{"ruleId":"572","severity":1,"message":"573","line":49,"column":61,"nodeType":"574","messageId":"575","endLine":49,"endColumn":63},{"ruleId":"576","severity":1,"message":"645","line":99,"column":10,"nodeType":"578","messageId":"579","endLine":99,"endColumn":17},{"ruleId":"646","severity":1,"message":"647","line":318,"column":44,"nodeType":"574","messageId":"648","endLine":318,"endColumn":45},{"ruleId":"649","severity":1,"message":"650","line":25,"column":17,"nodeType":"651","messageId":"575","endLine":25,"endColumn":23},{"ruleId":"565","replacedBy":"652"},{"ruleId":"567","replacedBy":"653"},{"ruleId":"591","severity":1,"message":"604","line":84,"column":7,"nodeType":"593","endLine":84,"endColumn":9,"suggestions":"654"},{"ruleId":"576","severity":1,"message":"655","line":391,"column":18,"nodeType":"578","messageId":"579","endLine":391,"endColumn":26},{"ruleId":"591","severity":1,"message":"606","line":463,"column":7,"nodeType":"593","endLine":463,"endColumn":9,"suggestions":"656"},{"ruleId":"576","severity":1,"message":"608","line":480,"column":28,"nodeType":"578","messageId":"579","endLine":480,"endColumn":46},{"ruleId":"609","severity":1,"message":"610","line":700,"column":13,"nodeType":"611","endLine":700,"endColumn":75},{"ruleId":"612","severity":1,"message":"613","line":770,"column":19,"nodeType":"583","messageId":"614","endLine":770,"endColumn":21},{"ruleId":"612","severity":1,"message":"615","line":936,"column":33,"nodeType":"583","messageId":"616","endLine":936,"endColumn":35},{"ruleId":"591","severity":1,"message":"592","line":109,"column":8,"nodeType":"593","endLine":109,"endColumn":10,"suggestions":"657"},{"ruleId":"595","severity":1,"message":"596","line":130,"column":25,"nodeType":"597","endLine":130,"endColumn":124},{"ruleId":"595","severity":1,"message":"596","line":131,"column":25,"nodeType":"597","endLine":131,"endColumn":99},{"ruleId":"595","severity":1,"message":"598","line":132,"column":25,"nodeType":"597","endLine":132,"endColumn":80},{"ruleId":"595","severity":1,"message":"598","line":133,"column":25,"nodeType":"597","endLine":133,"endColumn":116},{"ruleId":"595","severity":1,"message":"599","line":148,"column":37,"nodeType":"597","endLine":153,"endColumn":39},{"ruleId":"595","severity":1,"message":"600","line":157,"column":37,"nodeType":"597","endLine":161,"endColumn":39},{"ruleId":"595","severity":1,"message":"601","line":165,"column":37,"nodeType":"597","endLine":169,"endColumn":39},{"ruleId":"595","severity":1,"message":"602","line":173,"column":37,"nodeType":"597","endLine":177,"endColumn":39},{"ruleId":"595","severity":1,"message":"603","line":213,"column":21,"nodeType":"597","endLine":216,"endColumn":23},{"ruleId":"569","severity":1,"message":"570","line":4,"column":1,"nodeType":"571","endLine":23,"endColumn":3},{"ruleId":"576","severity":1,"message":"658","line":55,"column":8,"nodeType":"578","messageId":"579","endLine":55,"endColumn":10},{"ruleId":"591","severity":1,"message":"631","line":70,"column":7,"nodeType":"593","endLine":70,"endColumn":29,"suggestions":"659"},{"ruleId":"576","severity":1,"message":"624","line":6,"column":13,"nodeType":"578","messageId":"579","endLine":6,"endColumn":22},{"ruleId":"576","severity":1,"message":"625","line":6,"column":32,"nodeType":"578","messageId":"579","endLine":6,"endColumn":39},{"ruleId":"576","severity":1,"message":"626","line":6,"column":41,"nodeType":"578","messageId":"579","endLine":6,"endColumn":52},{"ruleId":"576","severity":1,"message":"627","line":6,"column":54,"nodeType":"578","messageId":"579","endLine":6,"endColumn":77},{"ruleId":"576","severity":1,"message":"628","line":6,"column":79,"nodeType":"578","messageId":"579","endLine":6,"endColumn":90},{"ruleId":"576","severity":1,"message":"629","line":6,"column":92,"nodeType":"578","messageId":"579","endLine":6,"endColumn":101},{"ruleId":"612","severity":1,"message":"613","line":398,"column":43,"nodeType":"583","messageId":"614","endLine":398,"endColumn":45},{"ruleId":"581","severity":1,"message":"586","line":687,"column":13,"nodeType":"583","messageId":"584","endLine":687,"endColumn":62},{"ruleId":"572","severity":1,"message":"573","line":687,"column":42,"nodeType":"574","messageId":"575","endLine":687,"endColumn":44},{"ruleId":"581","severity":1,"message":"586","line":714,"column":13,"nodeType":"583","messageId":"584","endLine":714,"endColumn":62},{"ruleId":"572","severity":1,"message":"573","line":714,"column":42,"nodeType":"574","messageId":"575","endLine":714,"endColumn":44},{"ruleId":"581","severity":1,"message":"586","line":741,"column":13,"nodeType":"583","messageId":"584","endLine":741,"endColumn":62},{"ruleId":"572","severity":1,"message":"573","line":741,"column":42,"nodeType":"574","messageId":"575","endLine":741,"endColumn":44},{"ruleId":"581","severity":1,"message":"586","line":770,"column":13,"nodeType":"583","messageId":"584","endLine":770,"endColumn":62},{"ruleId":"572","severity":1,"message":"573","line":770,"column":42,"nodeType":"574","messageId":"575","endLine":770,"endColumn":44},{"ruleId":"572","severity":1,"message":"633","line":783,"column":47,"nodeType":"574","messageId":"575","endLine":783,"endColumn":49},{"ruleId":"576","severity":1,"message":"617","line":10,"column":7,"nodeType":"578","messageId":"579","endLine":10,"endColumn":28},{"ruleId":"576","severity":1,"message":"618","line":252,"column":11,"nodeType":"578","messageId":"579","endLine":252,"endColumn":24},{"ruleId":"591","severity":1,"message":"619","line":315,"column":8,"nodeType":"593","endLine":315,"endColumn":10,"suggestions":"660"},{"ruleId":"591","severity":1,"message":"621","line":326,"column":8,"nodeType":"593","endLine":326,"endColumn":22,"suggestions":"661"},{"ruleId":"576","severity":1,"message":"623","line":337,"column":11,"nodeType":"578","messageId":"579","endLine":337,"endColumn":24},{"ruleId":"572","severity":1,"message":"573","line":164,"column":33,"nodeType":"574","messageId":"575","endLine":164,"endColumn":35},{"ruleId":"572","severity":1,"message":"573","line":190,"column":19,"nodeType":"574","messageId":"575","endLine":190,"endColumn":21},{"ruleId":"576","severity":1,"message":"577","line":283,"column":7,"nodeType":"578","messageId":"579","endLine":283,"endColumn":20},{"ruleId":"576","severity":1,"message":"580","line":288,"column":7,"nodeType":"578","messageId":"579","endLine":288,"endColumn":19},{"ruleId":"572","severity":1,"message":"573","line":326,"column":26,"nodeType":"574","messageId":"575","endLine":326,"endColumn":28},{"ruleId":"572","severity":1,"message":"573","line":328,"column":26,"nodeType":"574","messageId":"575","endLine":328,"endColumn":28},{"ruleId":"581","severity":1,"message":"582","line":367,"column":33,"nodeType":"583","messageId":"584","endLine":367,"endColumn":88},{"ruleId":"572","severity":1,"message":"573","line":367,"column":62,"nodeType":"574","messageId":"575","endLine":367,"endColumn":64},{"ruleId":"581","severity":1,"message":"585","line":378,"column":25,"nodeType":"583","messageId":"584","endLine":378,"endColumn":80},{"ruleId":"572","severity":1,"message":"573","line":378,"column":54,"nodeType":"574","messageId":"575","endLine":378,"endColumn":56},{"ruleId":"581","severity":1,"message":"586","line":389,"column":17,"nodeType":"583","messageId":"584","endLine":389,"endColumn":66},{"ruleId":"572","severity":1,"message":"573","line":389,"column":46,"nodeType":"574","messageId":"575","endLine":389,"endColumn":48},{"ruleId":"576","severity":1,"message":"587","line":738,"column":7,"nodeType":"578","messageId":"579","endLine":738,"endColumn":23},{"ruleId":"576","severity":1,"message":"588","line":763,"column":7,"nodeType":"578","messageId":"579","endLine":763,"endColumn":29},{"ruleId":"576","severity":1,"message":"589","line":793,"column":7,"nodeType":"578","messageId":"579","endLine":793,"endColumn":28},{"ruleId":"581","severity":1,"message":"586","line":834,"column":47,"nodeType":"583","messageId":"584","endLine":834,"endColumn":94},{"ruleId":"572","severity":1,"message":"573","line":834,"column":74,"nodeType":"574","messageId":"575","endLine":834,"endColumn":76},{"ruleId":"576","severity":1,"message":"634","line":5,"column":9,"nodeType":"578","messageId":"579","endLine":5,"endColumn":14},{"ruleId":"576","severity":1,"message":"635","line":5,"column":16,"nodeType":"578","messageId":"579","endLine":5,"endColumn":22},{"ruleId":"591","severity":1,"message":"643","line":30,"column":7,"nodeType":"593","endLine":30,"endColumn":9,"suggestions":"662"},{"ruleId":"572","severity":1,"message":"573","line":49,"column":61,"nodeType":"574","messageId":"575","endLine":49,"endColumn":63},{"ruleId":"576","severity":1,"message":"645","line":99,"column":10,"nodeType":"578","messageId":"579","endLine":99,"endColumn":17},{"ruleId":"646","severity":1,"message":"647","line":318,"column":44,"nodeType":"574","messageId":"648","endLine":318,"endColumn":45},{"ruleId":"591","severity":1,"message":"641","line":123,"column":8,"nodeType":"593","endLine":123,"endColumn":10,"suggestions":"663"},{"ruleId":"609","severity":1,"message":"610","line":203,"column":29,"nodeType":"611","endLine":203,"endColumn":68},{"ruleId":"609","severity":1,"message":"610","line":209,"column":29,"nodeType":"611","endLine":209,"endColumn":68},{"ruleId":"609","severity":1,"message":"610","line":216,"column":29,"nodeType":"611","endLine":216,"endColumn":68},{"ruleId":"609","severity":1,"message":"610","line":222,"column":29,"nodeType":"611","endLine":222,"endColumn":69},{"ruleId":"609","severity":1,"message":"610","line":228,"column":29,"nodeType":"611","endLine":228,"endColumn":69},{"ruleId":"576","severity":1,"message":"636","line":20,"column":16,"nodeType":"578","messageId":"579","endLine":20,"endColumn":24},{"ruleId":"591","severity":1,"message":"637","line":43,"column":8,"nodeType":"593","endLine":43,"endColumn":10,"suggestions":"664"},{"ruleId":"591","severity":1,"message":"639","line":85,"column":7,"nodeType":"593","endLine":85,"endColumn":9,"suggestions":"665"},{"ruleId":"576","severity":1,"message":"590","line":281,"column":7,"nodeType":"578","messageId":"579","endLine":281,"endColumn":21},{"ruleId":"649","severity":1,"message":"650","line":25,"column":17,"nodeType":"651","messageId":"575","endLine":25,"endColumn":23},"no-native-reassign",["666"],"no-negated-in-lhs",["667"],"import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-unused-vars","'getRndInteger' is assigned a value but never used.","Identifier","unusedVar","'findHeaderId' is assigned a value but never used.","no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'preSubRowLv2'.","ArrowFunctionExpression","unsafeRefs","Function declared in a loop contains unsafe references to variable(s) 'preSubRowLv1'.","Function declared in a loop contains unsafe references to variable(s) 'preRow'.","'getParentIdHandy' is assigned a value but never used.","'returnPreRowNullSumang' is assigned a value but never used.","'returnPreRowNullHandy' is assigned a value but never used.","'getColumnWidth' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'projectsArray' and 'token'. Either include them or remove the dependency array. If 'setDataDB' needs the current value of 'projectsArray', you can also switch to useReducer instead of useState and read 'projectsArray' in the reducer.","ArrayExpression",["668"],"react/jsx-pascal-case","Imported JSX component _ChartBarDrawingLate must be in PascalCase or SCREAMING_SNAKE_CASE","JSXOpeningElement","Imported JSX component _ChartBarStack must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component _ChartProgress must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component _ChartPieDrawing must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component _ChartBarDrawing must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component _FormPivot must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component _TableDrawingList must be in PascalCase or SCREAMING_SNAKE_CASE","React Hook useEffect has a missing dependency: 'EventKeyDown'. Either include it or remove the dependency array.",["669"],"React Hook useEffect has missing dependencies: 'email', 'fetchDataOneSheet', 'getSheetRows', 'projectId', 'projectName', 'role', 'setUserData', and 'token'. Either include them or remove the dependency array.",["670"],"'setExpandColumnKey' is assigned a value but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","array-callback-return","Array.prototype.map() expects a return value from arrow function.","expectedInside","Array.prototype.map() expects a value to be returned at the end of arrow function.","expectedAtEnd","'getSubDrawingByStatus' is assigned a value but never used.","'scrollBarSize' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'columnsHeaderSorted' and 'toggleGroupBy'. Either include them or remove the dependency array.",["671"],"React Hook useEffect has missing dependencies: 'expanded', 'maxRowExpand', and 'toggleExpanded'. Either include them or remove the dependency array.",["672"],"'panelFunction' is assigned a value but never used.","'className' is assigned a value but never used.","'columns' is assigned a value but never used.","'columnIndex' is assigned a value but never used.","'onMouseDownColumnHeader' is assigned a value but never used.","'headerIndex' is assigned a value but never used.","'container' is assigned a value but never used.","'setInitValue' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'columnIndex', 'inputRender', 'isLockedCell', and 'rowIndex'. Either include them or remove the dependency array.",["673"],"Expected '!==' and instead saw '!='.","'Group' is assigned a value but never used.","'Button' is assigned a value but never used.","'stateRow' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'headerKey', 'projectId', 'rowId', and 'token'. Either include them or remove the dependency array.",["674"],"React Hook useEffect has missing dependencies: 'headers', 'projectId', 'rowData', 'rowId', 'stateRow.rowsVersionsToSave', and 'token'. Either include them or remove the dependency array.",["675"],"React Hook useEffect has missing dependencies: 'activityRecorded', 'dwgName', 'dwgNumber', 'headers', 'projectId', 'revKey', 'stateRow.rowsAll', 'statusKey', and 'token'. Either include them or remove the dependency array.",["676"],"React Hook useEffect has missing dependencies: 'projectId' and 'token'. Either include them or remove the dependency array.",["677"],"'fileAdd' is assigned a value but never used.","no-useless-concat","Unexpected string concatenation of literals.","unexpectedConcat","no-dupe-keys","Duplicate key 'border'.","ObjectExpression",["666"],["667"],["678"],"'setstate' is assigned a value but never used.",["679"],["680"],"'ff' is assigned a value but never used.",["681"],["682"],["683"],["684"],["685"],["686"],["687"],"no-global-assign","no-unsafe-negation",{"desc":"688","fix":"689"},{"desc":"690","fix":"691"},{"desc":"692","fix":"693"},{"desc":"694","fix":"695"},{"desc":"696","fix":"697"},{"desc":"698","fix":"699"},{"desc":"700","fix":"701"},{"desc":"702","fix":"703"},{"desc":"704","fix":"705"},{"desc":"706","fix":"707"},{"desc":"690","fix":"708"},{"desc":"692","fix":"709"},{"desc":"688","fix":"710"},{"desc":"698","fix":"711"},{"desc":"694","fix":"712"},{"desc":"696","fix":"713"},{"desc":"706","fix":"714"},{"desc":"704","fix":"715"},{"desc":"700","fix":"716"},{"desc":"702","fix":"717"},"Update the dependencies array to be: [projectsArray, token]",{"range":"718","text":"719"},"Update the dependencies array to be: [EventKeyDown]",{"range":"720","text":"721"},"Update the dependencies array to be: [email, fetchDataOneSheet, getSheetRows, projectId, projectName, role, setUserData, token]",{"range":"722","text":"723"},"Update the dependencies array to be: [columnsHeaderSorted, toggleGroupBy]",{"range":"724","text":"725"},"Update the dependencies array to be: [expanded, expandedRows, maxRowExpand, toggleExpanded]",{"range":"726","text":"727"},"Update the dependencies array to be: [columnIndex, inputRender, isLockedCell, rowIndex, stateCell.cellActive]",{"range":"728","text":"729"},"Update the dependencies array to be: [headerKey, projectId, rowId, token]",{"range":"730","text":"731"},"Update the dependencies array to be: [headers, projectId, rowData, rowId, stateRow.rowsVersionsToSave, token]",{"range":"732","text":"733"},"Update the dependencies array to be: [activityRecorded, dwgName, dwgNumber, headers, projectId, revKey, stateRow.rowsAll, statusKey, token]",{"range":"734","text":"735"},"Update the dependencies array to be: [projectId, token]",{"range":"736","text":"737"},{"range":"738","text":"721"},{"range":"739","text":"723"},{"range":"740","text":"719"},{"range":"741","text":"729"},{"range":"742","text":"725"},{"range":"743","text":"727"},{"range":"744","text":"737"},{"range":"745","text":"735"},{"range":"746","text":"731"},{"range":"747","text":"733"},[3826,3828],"[projectsArray, token]",[2707,2709],"[EventKeyDown]",[18858,18860],"[email, fetchDataOneSheet, getSheetRows, projectId, projectName, role, setUserData, token]",[9246,9248],"[columnsHeaderSorted, toggleGroupBy]",[9584,9598],"[expanded, expandedRows, maxRowExpand, toggleExpanded]",[2429,2451],"[columnIndex, inputRender, isLockedCell, rowIndex, stateCell.cellActive]",[1284,1286],"[headerKey, projectId, rowId, token]",[2771,2773],"[headers, projectId, rowData, rowId, stateRow.rowsVersionsToSave, token]",[4982,4984],"[activityRecorded, dwgName, dwgNumber, headers, projectId, revKey, stateRow.rowsAll, statusKey, token]",[1028,1030],"[projectId, token]",[2559,2561],[18345,18347],[3718,3720],[2369,2391],[8932,8934],[9259,9273],[999,1001],[4860,4862],[1242,1244],[2696,2698]]
[{"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\index.js":"1","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\App.js":"2","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\reportWebVitals.js":"3","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\contexts\\cellContext.js":"4","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\contexts\\rowContext.js":"5","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\contexts\\projectContext.js":"6","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\utils\\index.js":"7","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\constants\\index.js":"8","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\_dashboardComp\\utils\\functionDashboard.js":"9","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\_dashboardComp\\assets\\constantDashboard.js":"10","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\_dashboardComp\\PageDashboard.js":"11","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\PageSpreadsheet.js":"12","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\_dashboardComp\\componentsDashboard\\CardPanelProject.js":"13","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\CellIndex.js":"14","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\Cell.js":"15","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\PanelFunction.js":"16","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\PanelSetting.js":"17","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\_dashboardComp\\componentsDashboard\\CardPanel.js":"18","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\_dashboardComp\\componentsDashboard\\ChartBarRecordPanel.js":"19","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\TableCellHistory.js":"20","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\TableDrawingDetail.js":"21","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\TableActivityHistory.js":"22","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\FormCellColorizedCheck.js":"23","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\FormDrawingTypeOrder.js":"24","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\FormDateAutomation.js":"25","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\ColorizedForm.js":"26","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\_dashboardComp\\componentsDashboard\\ChartBarRecord.js":"27","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\ButtonAdminUploadData.js":"28","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\ButtonAdminUploadDataPDD.js":"29","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\ButtonAdminCreateAndUpdateRows.js":"30","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\ButtonAdminDeleteRowsHistory.js":"31","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\ButtonAdminCreateAndUpdateRowsHistory.js":"32","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\ExcelExport.js":"33","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\contexts\\createDataContext.js":"34","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\generalComponents\\ButtonColumnTag.js":"35","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\generalComponents\\ButtonGroupComp.js":"36","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\generalComponents\\ButtonStyle.js":"37","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\generalComponents\\CellHeader.js":"38","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\generalComponents\\FormFilter.js":"39","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\generalComponents\\FormFilterActivityHistory.js":"40","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\generalComponents\\FormSort.js":"41","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\generalComponents\\FormGroup.js":"42","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\generalComponents\\IconTable.js":"43","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\generalComponents\\InputSearch.js":"44","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\generalComponents\\PanelCalendar.js":"45","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\generalComponents\\PanelCalendarDuration.js":"46","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\generalComponents\\PanelConfirm.js":"47","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\generalComponents\\PanelConfirmResetMode.js":"48","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\generalComponents\\PanelPickNumber.js":"49","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\generalComponents\\ReorderColumnForm.js":"50","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\generalComponents\\ViewTemplateSelect.js":"51","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\PageDataEntrySheet.js":"52","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageDataEntrySheet\\CellIndex2.js":"53","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageDataEntrySheet\\Cell2.js":"54","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageDataEntrySheet\\ExcelExport2.js":"55","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageDataEntrySheet\\FormDrawingTypeOrder2.js":"56","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageDataEntrySheet\\PanelFunction2.js":"57","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageDataEntrySheet\\TableActivityHistory2.js":"58","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageDataEntrySheet\\TableCellHistory2.js":"59","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageDataEntrySheet\\FormCellColorizedCheck2.js":"60","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageDataEntrySheet\\PanelSetting2.js":"61","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageDataEntrySheet\\ColorizedForm2.js":"62","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\_dashboardComp\\componentsDashboard\\ChartPieDrawing.js":"63","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\_dashboardComp\\componentsDashboard\\ChartBarDrawing.js":"64","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\_dashboardComp\\componentsDashboard\\ChartProgress.js":"65","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\_dashboardComp\\componentsDashboard\\FormPivot.js":"66","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\_dashboardComp\\componentsDashboard\\TableDrawingList.js":"67","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\_dashboardComp\\componentsDashboard\\PanelSettingDashboard.js":"68","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\_dashboardComp\\componentsDashboard\\ChartBarDrawingLate.js":"69","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\_dashboardComp\\componentsDashboard\\ChartBarStack.js":"70"},{"size":507,"mtime":1616043237000,"results":"71","hashOfConfig":"72"},{"size":897599,"mtime":1616331425923,"results":"73","hashOfConfig":"72"},{"size":362,"mtime":1616043237000,"results":"74","hashOfConfig":"72"},{"size":1858,"mtime":1616043237000,"results":"75","hashOfConfig":"72"},{"size":548,"mtime":1616043237000,"results":"76","hashOfConfig":"72"},{"size":916,"mtime":1616043237000,"results":"77","hashOfConfig":"72"},{"size":9848,"mtime":1616328807098,"results":"78","hashOfConfig":"72"},{"size":3429,"mtime":1616328922366,"results":"79","hashOfConfig":"72"},{"size":21862,"mtime":1616331463950,"results":"80","hashOfConfig":"72"},{"size":3195,"mtime":1616232842109,"results":"81","hashOfConfig":"72"},{"size":11316,"mtime":1616331431344,"results":"82","hashOfConfig":"72"},{"size":44528,"mtime":1616331516371,"results":"83","hashOfConfig":"72"},{"size":1063,"mtime":1616043237000,"results":"84","hashOfConfig":"72"},{"size":1633,"mtime":1616043237000,"results":"85","hashOfConfig":"72"},{"size":21209,"mtime":1616329080565,"results":"86","hashOfConfig":"72"},{"size":5604,"mtime":1616043237000,"results":"87","hashOfConfig":"72"},{"size":38623,"mtime":1616226692006,"results":"88","hashOfConfig":"72"},{"size":1187,"mtime":1616124930845,"results":"89","hashOfConfig":"72"},{"size":3117,"mtime":1616317129329,"results":"90","hashOfConfig":"72"},{"size":2068,"mtime":1616043237000,"results":"91","hashOfConfig":"72"},{"size":5150,"mtime":1616043237000,"results":"92","hashOfConfig":"72"},{"size":11334,"mtime":1616329776930,"results":"93","hashOfConfig":"72"},{"size":3572,"mtime":1616043237000,"results":"94","hashOfConfig":"72"},{"size":33413,"mtime":1616043237000,"results":"95","hashOfConfig":"72"},{"size":4218,"mtime":1616043237000,"results":"96","hashOfConfig":"72"},{"size":3523,"mtime":1616043237000,"results":"97","hashOfConfig":"72"},{"size":3191,"mtime":1616317345385,"results":"98","hashOfConfig":"72"},{"size":2333,"mtime":1616043237000,"results":"99","hashOfConfig":"72"},{"size":2216,"mtime":1616043237000,"results":"100","hashOfConfig":"72"},{"size":1936,"mtime":1616043237000,"results":"101","hashOfConfig":"72"},{"size":2143,"mtime":1616043237000,"results":"102","hashOfConfig":"72"},{"size":1971,"mtime":1616043237000,"results":"103","hashOfConfig":"72"},{"size":2781,"mtime":1616330235653,"results":"104","hashOfConfig":"72"},{"size":590,"mtime":1616043237000,"results":"105","hashOfConfig":"72"},{"size":2483,"mtime":1616043237000,"results":"106","hashOfConfig":"72"},{"size":722,"mtime":1616043237000,"results":"107","hashOfConfig":"72"},{"size":729,"mtime":1616043237000,"results":"108","hashOfConfig":"72"},{"size":451,"mtime":1616043237000,"results":"109","hashOfConfig":"72"},{"size":7159,"mtime":1616077902672,"results":"110","hashOfConfig":"72"},{"size":5267,"mtime":1616043237000,"results":"111","hashOfConfig":"72"},{"size":3559,"mtime":1616079827987,"results":"112","hashOfConfig":"72"},{"size":3901,"mtime":1616121524238,"results":"113","hashOfConfig":"72"},{"size":4548,"mtime":1616329426673,"results":"114","hashOfConfig":"72"},{"size":2595,"mtime":1616330992318,"results":"115","hashOfConfig":"72"},{"size":361,"mtime":1616043237000,"results":"116","hashOfConfig":"72"},{"size":753,"mtime":1616043237000,"results":"117","hashOfConfig":"72"},{"size":1464,"mtime":1616043237000,"results":"118","hashOfConfig":"72"},{"size":2186,"mtime":1616121066142,"results":"119","hashOfConfig":"72"},{"size":904,"mtime":1616043237000,"results":"120","hashOfConfig":"72"},{"size":3909,"mtime":1616043237000,"results":"121","hashOfConfig":"72"},{"size":4223,"mtime":1616043237000,"results":"122","hashOfConfig":"72"},{"size":41495,"mtime":1616331480204,"results":"123","hashOfConfig":"72"},{"size":1291,"mtime":1616043237000,"results":"124","hashOfConfig":"72"},{"size":11649,"mtime":1616043237000,"results":"125","hashOfConfig":"72"},{"size":3065,"mtime":1616330284956,"results":"126","hashOfConfig":"72"},{"size":21746,"mtime":1616043237000,"results":"127","hashOfConfig":"72"},{"size":3955,"mtime":1616043237000,"results":"128","hashOfConfig":"72"},{"size":11597,"mtime":1616043237000,"results":"129","hashOfConfig":"72"},{"size":2017,"mtime":1616043237000,"results":"130","hashOfConfig":"72"},{"size":3784,"mtime":1616043237000,"results":"131","hashOfConfig":"72"},{"size":38403,"mtime":1616121738462,"results":"132","hashOfConfig":"72"},{"size":3543,"mtime":1616043237000,"results":"133","hashOfConfig":"72"},{"size":1994,"mtime":1616331436329,"results":"134","hashOfConfig":"72"},{"size":6132,"mtime":1616330641852,"results":"135","hashOfConfig":"72"},{"size":3176,"mtime":1616255156189,"results":"136","hashOfConfig":"72"},{"size":5059,"mtime":1616075048350,"results":"137","hashOfConfig":"72"},{"size":14693,"mtime":1616331452116,"results":"138","hashOfConfig":"72"},{"size":3538,"mtime":1616121760854,"results":"139","hashOfConfig":"72"},{"size":3398,"mtime":1616330674217,"results":"140","hashOfConfig":"72"},{"size":5854,"mtime":1616330763352,"results":"141","hashOfConfig":"72"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},"utwymk",{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"159","messages":"160","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"165","messages":"166","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"171","usedDeprecatedRules":"144"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"174","messages":"175","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"176","usedDeprecatedRules":"144"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"179","usedDeprecatedRules":"144"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"186","usedDeprecatedRules":"144"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"189","usedDeprecatedRules":"144"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"192","messages":"193","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"194","usedDeprecatedRules":"144"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"197","usedDeprecatedRules":"144"},{"filePath":"198","messages":"199","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"200","messages":"201","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"202","messages":"203","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"204","messages":"205","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"206","messages":"207","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"208","messages":"209","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"210","messages":"211","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"212","messages":"213","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"214","messages":"215","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"216","messages":"217","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"218","usedDeprecatedRules":"144"},{"filePath":"219","messages":"220","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"221","usedDeprecatedRules":"144"},{"filePath":"222","messages":"223","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"224","messages":"225","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"226","usedDeprecatedRules":"144"},{"filePath":"227","messages":"228","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"229","messages":"230","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"231","usedDeprecatedRules":"144"},{"filePath":"232","messages":"233","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"234","messages":"235","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"236","messages":"237","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"238","messages":"239","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"240","messages":"241","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"242","messages":"243","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"244","usedDeprecatedRules":"144"},{"filePath":"245","messages":"246","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"247","messages":"248","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"249","usedDeprecatedRules":"144"},{"filePath":"250","messages":"251","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"252","messages":"253","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"254","messages":"255","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"256","messages":"257","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"258","messages":"259","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"260","messages":"261","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"262","usedDeprecatedRules":"144"},{"filePath":"263","messages":"264","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"265","usedDeprecatedRules":"144"},{"filePath":"266","messages":"267","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"268","messages":"269","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"270","usedDeprecatedRules":"144"},{"filePath":"271","messages":"272","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"273","messages":"274","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"275","usedDeprecatedRules":"144"},{"filePath":"276","messages":"277","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"278","usedDeprecatedRules":"144"},{"filePath":"279","messages":"280","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"281","usedDeprecatedRules":"144"},{"filePath":"282","messages":"283","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"284","usedDeprecatedRules":"144"},{"filePath":"285","messages":"286","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"287","messages":"288","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"289","messages":"290","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"291","messages":"292","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"293","messages":"294","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"295","usedDeprecatedRules":"144"},{"filePath":"296","messages":"297","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"298","messages":"299","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"300","usedDeprecatedRules":"144"},{"filePath":"301","messages":"302","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"303","messages":"304","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\index.js",[],["305","306"],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\App.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\reportWebVitals.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\contexts\\cellContext.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\contexts\\rowContext.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\contexts\\projectContext.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\utils\\index.js",["307","308","309","310"],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\constants\\index.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\_dashboardComp\\utils\\functionDashboard.js",["311","312","313","314","315","316","317","318","319","320","321","322","323"],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\_dashboardComp\\assets\\constantDashboard.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\_dashboardComp\\PageDashboard.js",["324"],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\PageSpreadsheet.js",["325","326","327","328","329","330"],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\_dashboardComp\\componentsDashboard\\CardPanelProject.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\CellIndex.js",["331"],"import React, { useContext } from 'react';\nimport styled from 'styled-components';\nimport { Context as CellContext } from '../../contexts/cellContext';\nimport { Context as ProjectContext } from '../../contexts/projectContext';\nimport { Context as RowContext } from '../../contexts/rowContext';\nimport { addZero } from '../../utils';\nimport { rowLocked } from './Cell';\n\n\nconst CellIndex = ({ rowData }) => {\n\n   const { state: stateRow, getSheetRows } = useContext(RowContext);\n   const { state: stateCell, setCellActive } = useContext(CellContext);\n   const { state: stateProject } = useContext(ProjectContext);\n\n   const { drawingTypeTree, rowsAll, modeGroup, rowsSelected } = stateRow;\n   const { roleTradeCompany } = stateProject.allDataOneSheet;\n\n   const isLockedRow = rowLocked(roleTradeCompany, rowData, modeGroup, drawingTypeTree);\n\n\n   const onClickCellIndex = () => {\n      setCellActive(null);\n      if (isLockedRow) return;\n      const row = rowsAll.find(x => x.id === rowData.id);\n      if (!rowsSelected.find(x => x.id === rowData.id) && rowData._rowLevel === 1) {\n         getSheetRows({\n            ...stateRow,\n            rowsSelected: [...rowsSelected, row],\n            rowsSelectedToMove: []\n         });\n      };\n   };\n\n   return (\n      <Styled onClick={onClickCellIndex}>\n         {rowData._rowLevel === 1 ? addZero(rowsAll.indexOf(rowsAll.find(r => r.id === rowData.id)) + 1) : ''}\n      </Styled>\n   );\n};\n\nexport default CellIndex;\n\n\n\nconst Styled = styled.div`\n    color: grey;\n    font-size: 12px;\n\n    width: 100%;\n    height: 100%;\n    padding: 5px;\n    padding-right: 8px;\n    text-align: right\n\n`;\n\n","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\Cell.js",["332","333"],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\PanelFunction.js",["334"],"import React, { useContext } from 'react';\nimport styled from 'styled-components';\nimport { colorType } from '../../constants';\nimport { Context as ProjectContext } from '../../contexts/projectContext';\nimport { Context as RowContext } from '../../contexts/rowContext';\nimport { columnLocked, getCompanyNameTextFnc, getTradeNameTextFnc, rowLocked } from './Cell';\n\n\n\nconst PanelFunction = (props) => {\n\n   const { buttonPanelFunction, panelType } = props;\n\n   const { state: stateRow } = useContext(RowContext);\n   const { state: stateProject } = useContext(ProjectContext);\n\n   const { roleTradeCompany } = stateProject.allDataOneSheet;\n\n   const { rowsSelectedToMove, rowsSelected, drawingTypeTree, modeGroup } = stateRow;\n\n   const { rowData, column } = panelType.cellProps;\n\n   const isLockedColumn = columnLocked(roleTradeCompany, rowData, modeGroup, column.key);\n   const isLockedRow = rowLocked(roleTradeCompany, rowData, modeGroup, drawingTypeTree);\n\n   const dwgType = drawingTypeTree.find(x => x.id === rowData.id);\n\n   let company, trade;\n   if (rowData.treeLevel >= 1) {\n      company = getCompanyNameTextFnc(dwgType, drawingTypeTree);\n   };\n   if (rowData.treeLevel >= 2) {\n      trade = getTradeNameTextFnc(dwgType, drawingTypeTree);\n   };\n\n   const isLockedByCompanyOrTrade =\n      roleTradeCompany.role === 'Document Controller' && roleTradeCompany.company === 'Woh Hup Private Ltd'\n         ? false\n         : roleTradeCompany.company === 'Woh Hup Private Ltd'\n            ? (company !== roleTradeCompany.company || trade !== roleTradeCompany.trade)\n            : company !== roleTradeCompany.company;\n\n\n   const listButton = (rowData._rowLevel && rowData._rowLevel === 1 && !isLockedColumn && !isLockedRow) ? [\n      'View Drawing Revision',\n      'Create New Drawing Revision',\n      'Date Automation',\n      'View Cell History',\n      'Duplicate Drawings',\n      'Insert Drawings Below',\n      'Insert Drawings Above',\n      'Move Drawings',\n      'Paste Drawings',\n      'Delete Drawing'\n\n   ] : (rowData._rowLevel && rowData._rowLevel === 1 && (isLockedColumn || isLockedRow)) ? [\n      'View Drawing Revision',\n      'View Cell History',\n\n   ] : (rowData.treeLevel) ? [\n      'Paste Drawings',\n      'Insert Drawings By Type'\n\n   ] : [];\n\n\n   const onClickBtn = (btn) => {\n      buttonPanelFunction(btn);\n   };\n\n\n   return (\n      <div\n         style={{\n            border: `1px solid ${colorType.grey1}`,\n            background: 'white',\n         }}\n      >\n         {listButton.map(btn => (\n            <Container\n               key={btn}\n               onMouseDown={() => onClickBtn(btn)}\n               style={disabledBtn(\n                  props,\n                  btn,\n                  rowsSelectedToMove,\n                  roleTradeCompany,\n                  isLockedByCompanyOrTrade,\n                  rowsSelected,\n                  drawingTypeTree\n               )}\n            >\n               {btn}\n            </Container>\n\n         ))}\n      </div>\n   );\n};\n\nexport default PanelFunction;\n\nconst Container = styled.div`\n    padding: 7px;\n    padding-left: 25px;\n    \n    cursor: pointer;\n    color: black;\n    &:hover {\n        background: ${colorType.grey0};\n    };\n\n`;\n\n\nconst disabledBtn = ({ panelType }, btn, rowsSelectedToMove, roleTradeCompany, isLockedByCompanyOrTrade, rowsSelected, drawingTypeTree) => {\n   const { rowData } = panelType.cellProps;\n   const { _rowLevel, children, treeLevel, id } = rowData;\n\n\n   if (\n      (rowsSelectedToMove.length === 0 && btn === 'Paste Drawings') ||\n      (_rowLevel === 1 && roleTradeCompany.role === 'Modeller' && btnLocked_1.indexOf(btn) !== -1) ||\n\n      (_rowLevel === 1 && rowsSelected.length > 0 && rowsSelectedToMove.length === 0 && btn !== 'Move Drawings') ||\n      (_rowLevel === 1 && rowsSelected.length > 0 && rowsSelectedToMove.length > 0 && btn !== 'Paste Drawings') ||\n      (_rowLevel === 1 && (roleTradeCompany.role === 'View-Only User' || roleTradeCompany.role === 'Production') && btnLocked_2.indexOf(btn) !== -1) ||\n\n      (treeLevel === 1 && rowData['Drawing Number'] === 'Woh Hup Private Ltd' && (btn === 'Paste Drawings' || btn === 'Insert Drawings By Type')) ||\n      (treeLevel > 1 && drawingTypeTree.find(x => x.parentId === id) && (btn === 'Paste Drawings' || btn === 'Insert Drawings By Type')) ||\n      (treeLevel > 1 && !drawingTypeTree.find(x => x.parentId === id) && rowsSelectedToMove.length === 0 && btn === 'Paste Drawings')\n      ||\n      (treeLevel >= 1 && isLockedByCompanyOrTrade)\n\n   ) return {\n      pointerEvents: 'none',\n      color: 'grey'\n   };\n};\n\n\nconst btnLocked_1 = [\n   'Create New Drawing Revision',\n   'Date Automation',\n];\n\nconst btnLocked_2 = [\n   'Create New Drawing Revision',\n   'Date Automation',\n   'Duplicate Drawings',\n   'Insert Drawings Below',\n   'Insert Drawings Above',\n   'Move Drawings',\n   'Paste Drawings',\n   'Delete Drawing',\n   'Insert Drawings By Type'\n];\n\n\nexport const getPanelPosition = ({ x: clickX, y: clickY }) => {\n   const screenW = window.innerWidth;\n   const screenH = window.innerHeight;\n\n   const right = (screenW - clickX) < 200;\n   const left = clickX < 200;\n   const top = clickY < 200;\n   const bottom = (screenH - clickY) < 200;\n\n   return { \n      x: right && top ? clickX - 250 :\n         right && bottom ? clickX - 250 :\n         left && bottom ? clickX :\n         left && top ? clickX :\n         right ? clickX - 250 : clickX,\n      y: right && top ? clickY :\n         right && bottom ? clickY - 300 :\n         left && bottom ? clickY - 300 :\n         left && top ? clickY :\n         bottom ? clickY - 300 : clickY\n   };\n};","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\PanelSetting.js",["335","336","337","338","339","340","341","342","343","344","345","346"],"import Axios from 'axios';\nimport moment from 'moment';\nimport React, { useContext } from 'react';\nimport { SERVER_URL } from '../../constants';\nimport { Context as CellContext } from '../../contexts/cellContext';\nimport { Context as ProjectContext } from '../../contexts/projectContext';\nimport { Context as RowContext } from '../../contexts/rowContext';\nimport { convertCellTempToHistory, convertDrawingVersionToHistory, debounceFnc, extractCellInfo, genId, mongoObjectId } from '../../utils';\nimport FormFilter from '../generalComponents/FormFilter';\nimport FormGroup from '../generalComponents/FormGroup';\nimport FormSort from '../generalComponents/FormSort';\nimport PanelConfirm from '../generalComponents/PanelConfirm';\nimport PanelConfirmResetMode from '../generalComponents/PanelConfirmResetMode';\nimport PanelPickNumber from '../generalComponents/PanelPickNumber';\nimport ReorderColumnForm from '../generalComponents/ReorderColumnForm';\nimport { getOutputRowsAllSorted } from '../PageSpreadsheet';\nimport ColorizedForm from './ColorizedForm';\nimport FormCellColorizedCheck from './FormCellColorizedCheck';\nimport FormDateAutomation from './FormDateAutomation';\nimport FormDrawingTypeOrder, { compareCurrentTreeAndTreeFromDB, flattenAllTreeChildNode1, getTreeFlattenOfNodeInArray } from './FormDrawingTypeOrder';\nimport TableActivityHistory from './TableActivityHistory';\nimport TableCellHistory from './TableCellHistory';\nimport TableDrawingDetail from './TableDrawingDetail';\n\n\n\n\nconst PanelSetting = (props) => {\n\n   const { state: stateRow } = useContext(RowContext);\n   const { state: stateProject } = useContext(ProjectContext);\n   const { state: stateCell, getCellModifiedTemp, OverwriteCellsModified } = useContext(CellContext);\n\n   const { panelType, panelSettingType, commandAction, onClickCancelModal, setLoading } = props;\n\n   const applyReorderColumns = (data) => commandAction({ type: 'reorder-columns', data });\n\n   const applyFilter = (filter) => commandAction({ type: 'filter-by-columns', data: { modeFilter: filter } });\n\n   const applyResetMode = (modeReset) => {\n      const modeResetObj = {};\n      modeReset.forEach(type => {\n         if (type.header === 'Filter' && type.mode === 'hidden') modeResetObj.modeFilter = [];\n         if (type.header === 'Sort' && type.mode === 'hidden') modeResetObj.modeSort = {};\n         if (type.header === 'Search' && type.mode === 'hidden') modeResetObj.modeSearch = {};\n      });\n      return commandAction({\n         type: 'reset-filter-sort',\n         data: {\n            rowsAll: stateRow.rowsAll,\n            ...modeResetObj\n         }\n      });\n   };\n   const applyQuitGroupingMode = () => {\n      return commandAction({\n         type: 'reset-filter-sort',\n         data: { modeGroup: [], modeSearch: {} }\n      });\n   };\n\n\n   const applyGroup = (data) => commandAction({ type: 'group-columns', data: { modeGroup: data } });\n\n   const applyColorization = (data) => commandAction({ type: 'drawing-colorized', data });\n\n   const setCellHistoryArr = debounceFnc((data) => commandAction({ type: 'highlight-cell-history', data }), 1);\n\n   const applySort = (data) => commandAction({ type: 'sort-data', data: { modeSort: data } });\n\n   const applyViewTemplate = (name) => {\n      let { allDataOneSheet: { publicSettings: { headers } }, userData: { headersShown, headersHidden, nosColumnFixed, colorization } } = stateProject;\n      const { viewTemplateNodeId, viewTemplates, modeFilter, modeSort } = stateRow;\n\n      headersShown = headersShown.map(hd => headers.find(x => x.text === hd).key);\n      headersHidden = headersHidden.map(hd => headers.find(x => x.text === hd).key);\n\n      commandAction({\n         type: 'add-view-templates',\n         data: {\n            viewTemplates: [...viewTemplates, {\n               id: mongoObjectId(),\n               name,\n               headersShown,\n               headersHidden,\n               nosColumnFixed,\n               colorization,\n               viewTemplateNodeId,\n               modeFilter,\n               modeSort\n            }]\n         }\n      });\n   };\n\n\n   const onClickInsertRow = (nosOfRows) => {\n      let { rowsAll, idRowsNew, rowsUpdatePreRowOrParentRow } = stateRow;\n\n      const idsArr = genId(nosOfRows);\n      idRowsNew = [...idRowsNew, ...idsArr];\n\n      let newRows = [];\n      let rowBelow;\n      if (panelSettingType === 'Insert Drawings Below') {\n         let rowAbove = panelType.cellProps.rowData;\n         newRows = idsArr.map((id, i) => {\n            return ({\n               id, _rowLevel: 1,\n               _parentRow: rowAbove._parentRow,\n               _preRow: i === 0 ? rowAbove.id : idsArr[i - 1]\n            });\n         });\n         rowBelow = rowsAll.find(r => r._preRow === rowAbove.id);\n         if (rowBelow) {\n            rowBelow._preRow = idsArr[idsArr.length - 1];\n         };\n\n      } else if (panelSettingType === 'Insert Drawings Above') {\n         rowBelow = rowsAll.find(r => r.id === panelType.cellProps.rowData.id);\n\n         newRows = idsArr.map((id, i) => {\n            return ({\n               id, _rowLevel: 1,\n               _parentRow: rowBelow._parentRow,\n               _preRow: i === 0 ? rowBelow._preRow : idsArr[i - 1]\n            });\n         });\n         rowBelow._preRow = idsArr[idsArr.length - 1];\n      };\n\n      if (rowBelow) {\n         updatePreRowParentRowToState(rowsUpdatePreRowOrParentRow, rowBelow);\n      };\n      newRows.forEach(row => {\n         updatePreRowParentRowToState(rowsUpdatePreRowOrParentRow, row);\n      });\n      rowsAll = [...rowsAll, ...newRows];\n\n      const rowsOutput = _processRowsChainNoGroupFnc1([...rowsAll]);\n      commandAction({\n         type: 'insert-drawings',\n         data: {\n            rowsAll: rowsOutput,\n            rowsUpdatePreRowOrParentRow,\n            idRowsNew\n         }\n      });\n   };\n   const onClickFolderInsertSubRows = (nosOfRows) => {\n      let { rowsAll, idRowsNew, rowsUpdatePreRowOrParentRow } = stateRow;\n\n      let idsArr = genId(nosOfRows);\n      idRowsNew = [...idRowsNew, ...idsArr];\n\n      let newRows = idsArr.map((id, i) => {\n         return ({\n            id, _rowLevel: 1,\n            _parentRow: panelType.cellProps.rowData.id,\n            _preRow: i === 0 ? null : idsArr[i - 1]\n         });\n      });\n      newRows.forEach(row => {\n         updatePreRowParentRowToState(rowsUpdatePreRowOrParentRow, row);\n      });\n      let rowBelow = rowsAll.find(r => r._parentRow === panelType.cellProps.rowData.id && r._preRow === null);\n      if (rowBelow) {\n         rowBelow._preRow = idsArr[idsArr.length - 1];\n         updatePreRowParentRowToState(rowsUpdatePreRowOrParentRow, rowBelow);\n      };\n      rowsAll = [...rowsAll, ...newRows];\n\n      const rowsOutput = _processRowsChainNoGroupFnc1([...rowsAll]);\n      commandAction({\n         type: 'insert-drawings-by-folder',\n         data: {\n            rowsAll: rowsOutput,\n            rowsUpdatePreRowOrParentRow,\n            idRowsNew\n         }\n      });\n   };\n   const onClickDuplicateRows = (nosOfRows) => {\n      let { rowsAll, idRowsNew, rowsUpdatePreRowOrParentRow } = stateRow;\n      const { headers } = stateProject.allDataOneSheet.publicSettings;\n\n      let idsArr = genId(nosOfRows);\n      idRowsNew = [...idRowsNew, ...idsArr];\n\n      const rowAbove = panelType.cellProps.rowData;\n\n      const newRows = idsArr.map((id, i) => ({\n         ...rowAbove, id,\n         _preRow: i === 0 ? rowAbove.id : idsArr[i - 1]\n      }));\n\n      const rowBelow = rowsAll.find(r => r._preRow === rowAbove.id);\n      if (rowBelow) {\n         rowBelow._preRow = idsArr[idsArr.length - 1];\n         updatePreRowParentRowToState(rowsUpdatePreRowOrParentRow, rowBelow);\n      };\n\n      let cellsModifiedTempObj = {};\n      newRows.forEach(row => {\n         headers.forEach(hd => {\n            if (row[hd.text]) {\n               cellsModifiedTempObj[`${row.id}-${hd.text}`] = row[hd.text];\n            };\n         });\n         updatePreRowParentRowToState(rowsUpdatePreRowOrParentRow, row);\n      });\n      OverwriteCellsModified({ ...stateCell.cellsModifiedTemp, ...cellsModifiedTempObj });\n      rowsAll = [...rowsAll, ...newRows];\n\n      const rowsOutput = _processRowsChainNoGroupFnc1([...rowsAll]);\n      commandAction({\n         type: 'duplicate-drawings',\n         data: {\n            rowsAll: rowsOutput,\n            rowsUpdatePreRowOrParentRow,\n            idRowsNew\n         }\n      });\n   };\n   const deleteDrawing = () => {\n      let { rowsAll, idRowsNew, rowsUpdatePreRowOrParentRow, rowsDeleted } = stateRow;\n      const { cellsModifiedTemp } = stateCell;\n      const rowId = panelType.cellProps.rowData.id;\n\n      let rowBelow = rowsAll.find(r => r._preRow === rowId);\n      if (rowBelow) {\n         rowBelow._preRow = panelType.cellProps.rowData._preRow;\n         updatePreRowParentRowToState(rowsUpdatePreRowOrParentRow, rowBelow);\n      };\n\n      if (rowId in rowsUpdatePreRowOrParentRow) delete rowsUpdatePreRowOrParentRow[rowId];\n      rowsAll = rowsAll.filter(r => r.id !== rowId);\n\n      if (idRowsNew.indexOf(rowId) === -1) {\n         rowsDeleted = [...rowsDeleted, panelType.cellProps.rowData];\n      } else {\n         idRowsNew.splice(idRowsNew.indexOf(rowId), 1);\n      };\n\n      Object.keys(cellsModifiedTemp).forEach(key => {\n         if (key.slice(0, 24) === rowId) {  // deleted cells modified temporary...\n            delete cellsModifiedTemp[key];\n         };\n      });\n      OverwriteCellsModified({ ...cellsModifiedTemp });\n\n      const rowsOutput = _processRowsChainNoGroupFnc1([...rowsAll]);\n\n      commandAction({\n         type: 'delete-drawing',\n         data: {\n            rowsAll: rowsOutput,\n            rowsUpdatePreRowOrParentRow,\n            rowsDeleted,\n            idRowsNew,\n         }\n      });\n   };\n\n   const applyFolderOrganize = (drawingTypeTreeNew, mergeList, nodeIsolated) => {\n\n      let {\n         rowsAll, rowsDeleted, idRowsNew, rowsUpdatePreRowOrParentRow,\n         drawingsTypeDeleted, drawingsTypeNewIds, drawingTypeTree, viewTemplateNodeId\n      } = stateRow;\n\n      const { cellsModifiedTemp } = stateCell;\n\n      mergeList.forEach(parentNodeId => {\n         const node = drawingTypeTree.find(x => x.id === parentNodeId);\n         const treeBranchToMerge = getTreeFlattenOfNodeInArray(drawingTypeTree, node);\n\n         const treeBranchChildren = treeBranchToMerge.filter(x => x.id !== parentNodeId);\n         let arr = [];\n         treeBranchChildren.forEach(node => {\n            const rowsChildren = rowsAll.filter(r => r._parentRow === node.id);\n            arr = [...arr, ...rowsChildren];\n         });\n         arr.forEach((row, i) => {\n            row._parentRow = parentNodeId;\n            row._preRow = i === 0 ? null : arr[i - 1].id;\n            updatePreRowParentRowToState(rowsUpdatePreRowOrParentRow, row);\n         });\n      });\n\n\n      let drawingTypeTreeUpdate = flattenAllTreeChildNode1(drawingTypeTreeNew);\n      drawingTypeTreeUpdate.forEach(item => {\n         item['Drawing Number'] = item.title;\n         delete item.title;\n         delete item.children;\n      });\n\n\n      drawingTypeTree.forEach(tr => {\n         if (!drawingTypeTreeUpdate.find(x => x.id === tr.id)) {\n            if (drawingsTypeNewIds.indexOf(tr.id) !== -1) {\n               drawingsTypeNewIds = drawingsTypeNewIds.filter(id => id !== tr.id);\n            } else {\n               drawingsTypeDeleted = [...drawingsTypeDeleted, tr];\n            };\n         };\n      });\n      drawingTypeTreeUpdate.forEach(tr => {\n         if (!drawingTypeTree.find(x => x.id === tr.id)) {\n            drawingsTypeNewIds.push(tr.id);\n         };\n      });\n\n\n      let allDrawingsParentId = [...new Set(rowsAll.map(x => x._parentRow))];\n      allDrawingsParentId.forEach(drawingParentId => {\n         const rowsChildren = rowsAll.filter(row => row._parentRow === drawingParentId);\n\n         if (!drawingTypeTreeUpdate.find(x => x.id === drawingParentId) && !mergeList.find(item => item.id === drawingParentId)) {\n            rowsChildren.forEach(rrr => {\n               if (idRowsNew.indexOf(rrr.id) === -1) {\n                  rowsDeleted = [...rowsDeleted, rrr];\n               } else {\n                  idRowsNew.splice(idRowsNew.indexOf(rrr.id), 1);\n               };\n\n               Object.keys(cellsModifiedTemp).forEach(key => {\n                  if (key.slice(0, 24) === rrr.id) {  // deleted cells modified temporary...\n                     delete cellsModifiedTemp[key];\n                  };\n               });\n               if (rrr.id in rowsUpdatePreRowOrParentRow) delete rowsUpdatePreRowOrParentRow[rrr.id];\n            });\n            rowsAll = rowsAll.filter(r => r._parentRow !== drawingParentId);\n         } else if (!drawingTypeTreeUpdate.find(x => x.id === drawingParentId) && mergeList.find(item => item.id === drawingParentId)) {\n\n\n\n         } else {\n            if (drawingTypeTreeUpdate.find(x => x.parentId === drawingParentId)) {\n               // some folders are added below drawing parent => add new type to contain\n               const nodeParentPrevious = drawingTypeTreeUpdate.find(x => x.id === drawingParentId);\n               const allTreeLevel = [...new Set(drawingTypeTreeUpdate.map(x => x.treeLevel))];\n\n               let arrayNodes = [nodeParentPrevious];\n\n               for (let i = nodeParentPrevious.treeLevel; i <= allTreeLevel.length; i++) {\n                  let arrFilter = drawingTypeTreeUpdate.filter(x => x.treeLevel === allTreeLevel[i] && arrayNodes.find(dt => dt.id === x.parentId));\n                  arrayNodes = [...arrayNodes, ...arrFilter];\n               };\n               const lowestLevel = Math.max(...arrayNodes.map(x => x.treeLevel));\n               const dwgTypeParentToShiftDrawings = arrayNodes.find(x => x.treeLevel === lowestLevel);\n\n               rowsChildren.forEach(r => {\n                  r._parentRow = dwgTypeParentToShiftDrawings.id;\n                  updatePreRowParentRowToState(rowsUpdatePreRowOrParentRow, r);\n               });\n            };\n         };\n      });\n\n      OverwriteCellsModified({ ...cellsModifiedTemp });\n\n      const rowsOutput = getOutputRowsAllSorted(drawingTypeTreeUpdate, rowsAll);\n\n      let templateObj = {};\n      if (viewTemplateNodeId !== nodeIsolated) {\n         templateObj.viewTemplateNodeId = nodeIsolated;\n      };\n\n      commandAction({\n         type: 'drawing-folder-organization',\n         data: {\n            rowsAll: rowsOutput,\n            rowsDeleted,\n            drawingTypeTree: drawingTypeTreeUpdate,\n            rowsUpdatePreRowOrParentRow,\n            drawingsTypeDeleted,\n            drawingsTypeNewIds,\n            idRowsNew,\n            ...templateObj\n         }\n      });\n   };\n   const applyDateAutomation = (dateAutomation) => {\n      let { rowsAll } = stateRow;\n      const rowId = panelType.cellProps.rowData.id;\n      let row = rowsAll.find(r => r.id === rowId);\n\n      Object.keys(dateAutomation).forEach(key => {\n         const cellTempId = `${rowId}~#&&#~${key}`;\n         const dateConverted = moment(dateAutomation[key]).format('DD/MM/YY');\n         getCellModifiedTemp({ [cellTempId]: dateConverted });\n         row[key] = dateConverted;\n      });\n\n      commandAction({\n         type: 'drawing-data-automation',\n         data: { rowsAll }\n      });\n   };\n   const createNewDrawingRevision = () => {\n      const arrHeadersGoBlank = [\n         'Model Start (T)', 'Model Start (A)', 'Model Finish (T)', 'Model Finish (A)', 'Drawing Start (T)', 'Drawing Start (A)',\n         'Drawing Finish (T)', 'Drawing Finish (A)', 'Drg To Consultant (T)', 'Drg To Consultant (A)', 'Consultant Reply (T)',\n         'Consultant Reply (A)', 'Get Approval (T)', 'Get Approval (A)', 'Construction Issuance Date', 'Construction Start', 'Rev', 'Status'\n      ];\n\n      let { rowsAll } = stateRow;\n      const rowId = panelType.cellProps.rowData.id;\n      let row = rowsAll.find(r => r.id === rowId);\n      let rowOldVersiontoSave = { ...row };\n\n      arrHeadersGoBlank.forEach(hd => {\n         const cellTempId = `${rowId}~#&&#~${hd}`;\n         getCellModifiedTemp({ [cellTempId]: '' });\n         row[hd] = '';\n      });\n\n      commandAction({\n         type: 'create-new-drawing-revisions',\n         data: {\n            rowsAll,\n            rowsVersionsToSave: [...stateRow.rowsVersionsToSave || [], rowOldVersiontoSave]\n         }\n      });\n   };\n\n   const saveDataToServer = async () => {\n      const { email, projectId, token, role, projectName } = stateProject.allDataOneSheet;\n      const { headersShown, headersHidden, nosColumnFixed, colorization } = stateProject.userData;\n      const { headers } = stateProject.allDataOneSheet.publicSettings;\n      let { cellsModifiedTemp } = stateCell;\n      let {\n         rowsVersionsToSave,\n         rowsUpdatePreRowOrParentRow,\n         drawingTypeTreeInit,\n         drawingTypeTree,\n         drawingsTypeDeleted,\n         rowsDeleted,\n\n         viewTemplateNodeId,\n         viewTemplates,\n         modeFilter,\n         modeSort,\n      } = stateRow;\n\n      try {\n         setLoading(true);\n         commandAction({ type: '' });\n\n         const resDB = await Axios.get(`${SERVER_URL}/sheet/`, { params: { token, projectId, email } });\n         const resCellsHistory = await Axios.get(`${SERVER_URL}/cell/history/`, { params: { token, projectId } });\n\n         let { publicSettings: publicSettingsFromDB, rows: rowsFromDBInit } = resDB.data;\n         let { drawingTypeTree: drawingTypeTreeFromDB, activityRecorded: activityRecordedFromDB } = publicSettingsFromDB;\n\n         const headerKeyDrawingNumber = headers.find(hd => hd.text === 'Drawing Number').key;\n         const headerKeyDrawingName = headers.find(hd => hd.text === 'Drawing Name').key;\n\n         let rowsFromDB = rowsFromDBInit.map(row => ({ ...row }));\n\n         let {\n            needToSaveTree,\n            treeDBModifiedToSave,\n            nodesToAddToDB,\n            nodesToRemoveFromDB\n         } = compareCurrentTreeAndTreeFromDB(\n            drawingTypeTreeInit,\n            drawingTypeTree,\n            drawingsTypeDeleted,\n            drawingTypeTreeFromDB,\n            activityRecordedFromDB.filter(x => x.action === 'Delete Drawing Type'),\n         );\n         let activityRecordedArr = [];\n\n\n         // check if row or its parents deleted by other users\n         const rowsUpdatePreRowOrParentRowArray = Object.values(rowsUpdatePreRowOrParentRow)\n            .filter(row => !activityRecordedFromDB.find(r => r.id === row.id && r.action === 'Delete Drawing') &&\n               !activityRecordedFromDB.find(r => r.id === row._parentRow && r.action === 'Delete Drawing Type'));\n\n\n         if (rowsUpdatePreRowOrParentRowArray.length > 0) {\n\n            let arrID = [];\n            rowsFromDB.forEach(r => { // take out temporarily all rowsUpdatePreRowOrParentRowArray from DB\n               if (rowsUpdatePreRowOrParentRowArray.find(row => row.id === r.id)) {\n                  arrID.push(r.id);\n                  const rowBelow = rowsFromDB.find(rrr => rrr._preRow === r.id);\n                  if (rowBelow) rowBelow._preRow = r._preRow;\n               };\n            });\n            rowsFromDB = rowsFromDB.filter(r => arrID.indexOf(r.id) === -1);\n\n\n\n            const rowsInOldParent = rowsUpdatePreRowOrParentRowArray.filter(r => {\n               return treeDBModifiedToSave.find(tr => tr.id === r._parentRow && !treeDBModifiedToSave.find(x => x.parentId === tr.id));\n            });\n            const rowsInOldParentDivertBranches = rowsUpdatePreRowOrParentRowArray.filter(r => {\n               return treeDBModifiedToSave.find(tr => tr.id === r._parentRow && treeDBModifiedToSave.find(x => x.parentId === tr.id));\n            });\n            const rowsInNewParent = rowsUpdatePreRowOrParentRowArray.filter(r => {\n               return !treeDBModifiedToSave.find(tr => tr.id === r._parentRow);\n            });\n\n\n\n            const rowsInOldParentOutput = _processChainRowsSplitGroupFnc2([...rowsInOldParent]);\n            rowsInOldParentOutput.forEach(arrChain => {\n               const rowFirst = arrChain[0];\n               const parentRowInDB = treeDBModifiedToSave.find(tr => tr.id === rowFirst._parentRow);\n               const rowAbove = rowsFromDB.find(r => r.id === rowFirst._preRow);\n               if (rowAbove) {\n                  if (rowAbove._parentRow !== rowFirst._parentRow) { // rowAbove move to other parent by other user\n                     const lastRowInParent = rowsFromDB.find(r => r._parentRow === parentRowInDB.id && !rowsFromDB.find(x => x._preRow === r.id));\n                     rowFirst._preRow = lastRowInParent ? lastRowInParent.id : null;\n                  } else { // rowAbove is still in the same parent\n                     const rowBelowRowAbove = rowsFromDB.find(r => r._preRow === rowAbove.id);\n                     if (rowBelowRowAbove) rowBelowRowAbove._preRow = arrChain[arrChain.length - 1].id;\n                     rowFirst._preRow = rowAbove.id;\n                  };\n               } else {\n                  if (rowFirst._preRow === null) {\n                     const firstRowInParent = rowsFromDB.find(r => r._parentRow === parentRowInDB.id && r._preRow === null);\n                     if (firstRowInParent) { // if firstRowInParent undefined means Drawing type has 0 drawing currently...\n                        firstRowInParent._preRow = arrChain[arrChain.length - 1].id;\n                     };\n                  } else {\n                     const lastRowInParent = rowsFromDB.find(r => r._parentRow === parentRowInDB.id && !rowsFromDB.find(x => x._preRow === r.id));\n                     rowFirst._preRow = lastRowInParent ? lastRowInParent.id : null;\n                  };\n               };\n               rowsFromDB = [...rowsFromDB, ...arrChain];\n            });\n\n\n\n            let idsOldParentDivertBranches = [...new Set(rowsInOldParentDivertBranches.map(r => r._parentRow))];\n            idsOldParentDivertBranches.forEach(idP => {\n               let arrInput = rowsInOldParentDivertBranches.filter(r => r._parentRow === idP);\n               let rowsChildren = _processRowsChainNoGroupFnc1([...arrInput]);\n\n               const treeNode = treeDBModifiedToSave.find(x => x.id === idP);\n               const newIdParent = mongoObjectId();\n               treeDBModifiedToSave.push({\n                  'Drawing Number': 'New Drawing Type',\n                  id: newIdParent,\n                  parentId: treeNode.id,\n                  treeLevel: treeNode.treeLevel + 1,\n                  expanded: true,\n               });\n               needToSaveTree = true;\n\n               activityRecordedArr.push({\n                  id: newIdParent, email, createdAt: new Date(), action: 'Create Drawing Type',\n                  [headerKeyDrawingNumber]: 'New Drawing Type',\n               });\n\n               rowsChildren.forEach((r, i) => {\n                  r._preRow = i === 0 ? null : rowsChildren[i - 1].id;\n                  r._parentRow = newIdParent;\n               });\n               rowsFromDB = [...rowsFromDB, ...rowsChildren];\n            });\n\n\n\n            let idsNewParentArray = [...new Set(rowsInNewParent.map(r => r._parentRow))];\n            idsNewParentArray.forEach(idP => {\n               let arrInput = rowsInNewParent.filter(r => r._parentRow === idP);\n               let rowsChildren = _processRowsChainNoGroupFnc1([...arrInput]);\n               rowsChildren.forEach((r, i) => {\n                  r._preRow = i === 0 ? null : rowsChildren[i - 1].id;\n               });\n               rowsFromDB = [...rowsFromDB, ...rowsChildren];\n            });\n         };\n\n\n         // SAVE CELL HISTORY\n         let objCellHistory = {};\n         resCellsHistory.data.map(cell => {\n            const headerText = headers.find(hd => hd.key === cell.headerKey).text;\n            if (cell.histories.length > 0) {\n               const latestHistoryText = cell.histories[cell.histories.length - 1].text;\n               objCellHistory[`${cell.row}-${headerText}`] = latestHistoryText;\n            };\n         });\n         Object.keys(cellsModifiedTemp).forEach(key => {\n            if (objCellHistory[key] && objCellHistory[key] === cellsModifiedTemp[key]) {\n               delete cellsModifiedTemp[key];\n            } else {\n               let rowId = key.slice(0, 24);\n               if (activityRecordedFromDB.find(x => x.id === rowId && x.action === 'Delete Drawing')) {\n                  delete cellsModifiedTemp[key];\n               };\n            };\n         });\n\n         if (Object.keys(cellsModifiedTemp).length > 0) {\n            await Axios.post(`${SERVER_URL}/cell/history/`, { token, projectId, cellsHistory: convertCellTempToHistory(cellsModifiedTemp, stateProject) });\n         };\n\n         // SAVE DRAWINGS NEW VERSION\n         rowsVersionsToSave = rowsVersionsToSave.filter(row => !activityRecordedFromDB.find(r => r.id === row.id && r.action === 'Delete Drawing'));\n         if (rowsVersionsToSave.length > 0) {\n            await Axios.post(`${SERVER_URL}/row/history/`, { token, projectId, email, rowsHistory: convertDrawingVersionToHistory(rowsVersionsToSave, stateProject) });\n         };\n\n\n\n\n         // DELETE ROWS\n         let rowDeletedFinal = [];\n         rowsDeleted.forEach(row => { // some rows already deleted by previous user => no need to delete anymore\n            const rowInDB = rowsFromDB.find(r => r.id === row.id);\n            if (rowInDB) {\n               const rowBelow = rowsFromDB.find(r => r._preRow === rowInDB.id);\n               if (rowBelow) {\n                  rowBelow._preRow = rowInDB._preRow;\n               };\n               rowsFromDB = rowsFromDB.filter(r => r.id !== rowInDB.id); // FIXEDDDDDDDDDDDDDDDDDDD\n               rowDeletedFinal.push(row);\n            };\n         });\n\n\n\n\n         if (nodesToRemoveFromDB.length > 0) {\n            nodesToRemoveFromDB.forEach(fd => {\n               activityRecordedArr.push({\n                  id: fd.id, email, createdAt: new Date(), action: 'Delete Drawing Type',\n                  [headerKeyDrawingNumber]: fd['Drawing Number'],\n               });\n            });\n         };\n         if (nodesToAddToDB.length > 0) {\n            nodesToAddToDB.forEach(fd => {\n               activityRecordedArr.push({\n                  id: fd.id, email, createdAt: new Date(), action: 'Create Drawing Type',\n                  [headerKeyDrawingNumber]: fd['Drawing Number'],\n               });\n            });\n         };\n\n         // SAVE PUBLIC SETTINGS RECORDED\n         activityRecordedArr.forEach(rc => {\n            const newRowsAddedByPreviousUserButParentDeletedByCurrentUser = rowsFromDB.filter(e => {\n               return e._parentRow === rc.id &&\n                  rc.action === 'Delete Drawing Type' &&\n                  !rowDeletedFinal.find(x => x.id === e.id);\n            });\n            rowDeletedFinal = [...rowDeletedFinal, ...newRowsAddedByPreviousUserButParentDeletedByCurrentUser];\n         });\n\n         rowDeletedFinal.forEach(r => {\n            activityRecordedArr.push({\n               id: r.id, email, createdAt: new Date(), action: 'Delete Drawing',\n               [headerKeyDrawingNumber]: r['Drawing Number'],\n               [headerKeyDrawingName]: r['Drawing Name'],\n            });\n         });\n\n\n         rowsFromDB = rowsFromDB.filter(r => !rowDeletedFinal.find(x => x.id === r.id));\n         // DELETE ...\n         if (rowDeletedFinal.length > 0) {\n            await Axios.post(`${SERVER_URL}/sheet/delete-rows/`, { token, projectId, email, rowIdsArray: rowDeletedFinal.map(r => r.id) });\n         };\n\n\n         treeDBModifiedToSave.forEach(tr => {\n            headers.forEach(hd => {\n               if (hd.text in tr) {\n                  tr[hd.key] = tr[hd.text];\n                  delete tr[hd.text];\n               };\n            });\n         });\n\n         let publicSettingsUpdated = { projectName };\n         if (needToSaveTree) {\n            publicSettingsUpdated = { ...publicSettingsUpdated, drawingTypeTree: treeDBModifiedToSave };\n         };\n         if (activityRecordedArr.length > 0) {\n            publicSettingsUpdated = { ...publicSettingsUpdated, activityRecorded: [...activityRecordedFromDB, ...activityRecordedArr] };\n         };\n         await Axios.post(`${SERVER_URL}/sheet/update-setting-public/`, { token, projectId, email, publicSettings: publicSettingsUpdated });\n\n         const userSettingsUpdated = {\n            headersShown: headersShown.map(hd => headers.find(h => h.text === hd).key),\n            headersHidden: headersHidden.map(hd => headers.find(h => h.text === hd).key),\n            nosColumnFixed, colorization, role, viewTemplateNodeId, viewTemplates, modeFilter, modeSort\n         };\n         await Axios.post(`${SERVER_URL}/sheet/update-setting-user/`, { token, projectId, email, userSettings: userSettingsUpdated });\n\n\n\n         // FILTER FINAL ROW TO UPDATE......\n         let rowsToUpdateFinal = [];\n         rowsFromDB.map(row => {\n            Object.keys(cellsModifiedTemp).forEach(key => {\n               const { rowId, headerName } = extractCellInfo(key);\n               if (rowId === row.id) row[headerName] = cellsModifiedTemp[key];\n            });\n\n            let rowOutput;\n            const found = rowsFromDBInit.find(r => r.id === row.id);\n            if (found) {\n               let toUpdate = false;\n               Object.keys(row).forEach(key => {\n                  if (found[key] !== row[key]) toUpdate = true;\n               });\n               if (toUpdate) rowOutput = { ...row };\n            } else {\n               rowOutput = { ...row };\n            };\n            if (rowOutput) {\n               let rowToSave = { _id: rowOutput.id, parentRow: rowOutput._parentRow, preRow: rowOutput._preRow };\n               headers.forEach(hd => {\n                  if (rowOutput[hd.text] || rowOutput[hd.text] === '') {\n                     rowToSave.data = { ...rowToSave.data || {}, [hd.key]: rowOutput[hd.text] };\n                  };\n               });\n               rowsToUpdateFinal.push(rowToSave);\n            };\n         });\n\n         if (rowsToUpdateFinal.length > 0) {\n            await Axios.post(`${SERVER_URL}/sheet/update-rows/`, { token, projectId, rows: rowsToUpdateFinal });\n         };\n         commandAction({ type: 'save-data-successfully' });\n\n      } catch (err) {\n         commandAction({ type: 'save-data-failure' });\n         console.log(err);\n      };\n   };\n\n   const saveDataToServerAndReloadData = async () => {\n      const { projectId, token, email } = stateProject.allDataOneSheet;\n      try {\n         await saveDataToServer();\n         const res = await Axios.get(`${SERVER_URL}/sheet/`, { params: { token, projectId, email } });\n         commandAction({ type: 'reload-data-from-server', data: res.data });\n\n      } catch (err) {\n         commandAction({ type: 'save-data-failure' });\n         console.log(err);\n      };\n   };\n\n\n\n   return (\n      <>\n         {panelSettingType === 'save-ICON' && (\n            <PanelConfirm\n               onClickCancel={onClickCancelModal}\n               onClickApply={saveDataToServerAndReloadData}\n               content='Do you want to save ?'\n            />\n         )}\n\n         {panelSettingType === 'filter-ICON' && (\n            <FormFilter \n               applyFilter={applyFilter} \n               onClickCancelModal={onClickCancelModal} \n               headers={stateProject.userData.headersShown}\n               modeFilter={stateRow.modeFilter}\n               rowsAll={stateRow.rowsAll}\n            />\n         )}\n\n         {panelSettingType === 'swap-ICON-1' && (\n            <PanelConfirm\n               onClickCancel={onClickCancelModal}\n               onClickApply={applyQuitGroupingMode}\n               content='Do you want to quit grouping mode ?'\n            />\n         )}\n         {panelSettingType === 'swap-ICON-2' && (\n            <PanelConfirmResetMode\n               onClickCancel={onClickCancelModal}\n               applyResetMode={applyResetMode}\n               modeFilter={stateRow.modeFilter}\n               modeSort={stateRow.modeSort}\n               modeSearch={stateRow.modeSearch}\n            />\n         )}\n\n\n         {panelSettingType === 'reorderColumn-ICON' && (\n            <ReorderColumnForm applyReorderColumns={applyReorderColumns} onClickCancelModal={onClickCancelModal} />\n         )}\n\n         {panelSettingType === 'viewTemplate-ICON' && (\n            <PanelConfirm\n               onClickApply={applyViewTemplate} onClickCancel={onClickCancelModal}\n               content='Do you want to save a new view template ?'\n            />\n         )}\n\n\n         {panelSettingType === 'sort-ICON' && (\n            <FormSort \n               applySort={applySort} \n               onClickCancel={onClickCancelModal} \n               headers={stateProject.userData.headersShown}\n               modeSort={stateRow.modeSort}\n            />\n         )}\n\n\n         {panelSettingType === 'group-ICON' && (\n            <FormGroup \n               applyGroup={applyGroup} \n               onClickCancelModal={onClickCancelModal} \n               headers={stateProject.userData.headersShown}\n            />\n         )}\n\n\n         {(panelSettingType === 'Insert Drawings Below' || panelSettingType === 'Insert Drawings Above') && (\n            <PanelPickNumber\n               onClickCancelModal={onClickCancelModal}\n               onClickApply={onClickInsertRow}\n            />\n         )}\n\n         {panelSettingType === 'Duplicate Drawings' && (\n            <PanelPickNumber\n               onClickCancelModal={onClickCancelModal}\n               onClickApply={onClickDuplicateRows}\n            />\n         )}\n\n         {panelSettingType === 'history-ICON' && (\n            <TableActivityHistory />\n         )}\n\n         {panelSettingType === 'color-cell-history-ICON' && (\n            <FormCellColorizedCheck setCellHistoryArr={setCellHistoryArr} />\n         )}\n\n\n         {panelSettingType === 'Date Automation' && (\n            <FormDateAutomation applyDateAutomation={applyDateAutomation} />\n         )}\n\n         {panelSettingType === 'Create New Drawing Revision' && (\n            <PanelConfirm\n               onClickCancel={onClickCancelModal}\n               onClickApply={createNewDrawingRevision}\n               content={`Are you sure to create a new revision of this drawing: ${panelType.cellProps.rowData['Drawing Number'] || ' '} - ${panelType.cellProps.rowData['Drawing Name'] || ' '} ?`}\n            />\n         )}\n\n         {panelSettingType === 'View Drawing Revision' && (\n            <TableDrawingDetail {...panelType.cellProps} />\n         )}\n\n         {panelSettingType === 'addDrawingType-ICON' && (\n            <FormDrawingTypeOrder applyFolderOrganize={applyFolderOrganize} onClickCancelModal={onClickCancelModal} />\n         )}\n\n         {panelSettingType === 'View Cell History' && (\n            <TableCellHistory {...panelType.cellProps} />\n         )}\n\n\n         {panelSettingType === 'Delete Drawing' && (\n            <PanelConfirm\n               onClickCancel={onClickCancelModal}\n               onClickApply={deleteDrawing}\n               content={`Are you sure to delete the: ${panelType.cellProps.rowData['Drawing Number'] || ' '} - ${panelType.cellProps.rowData['Drawing Name'] || ' '} ?`}\n            />\n         )}\n\n         {panelSettingType === 'colorized-ICON' && (\n            <ColorizedForm applyColorization={applyColorization} onClickCancelModal={onClickCancelModal} />\n         )}\n\n         {panelSettingType === 'Insert Drawings By Type' && (\n            <PanelPickNumber onClickCancelModal={onClickCancelModal} onClickApply={onClickFolderInsertSubRows} />\n         )}\n\n\n\n      </>\n   );\n};\n\nexport default PanelSetting;\n\n\n\n\n\n\n\n\nexport const _processRowsChainNoGroupFnc1 = (rows) => {\n   let rowsProcessed = [];\n\n   if (!(rows instanceof Array) || !rows.length) {\n      return rowsProcessed;\n   };\n\n   let firstRowIndex = rows.findIndex((row) => !row._preRow);\n   while (firstRowIndex >= 0) {\n      let preRow = rows.splice(firstRowIndex, 1)[0];\n      while (preRow) {\n         rowsProcessed.push(preRow);\n\n         let nextRowIndex = rows.findIndex((row) => String(row._preRow) == String(preRow.id));\n         if (nextRowIndex >= 0) preRow = rows.splice(nextRowIndex, 1)[0];\n         else preRow = null;\n      };\n      firstRowIndex = rows.findIndex((row) => !row._preRow);\n   };\n   _processRowsLossHeadFnc1(rows, rowsProcessed);\n   return rowsProcessed;\n};\nconst _processRowsLossHeadFnc1 = (rows, rowsProcessed) => {\n   if (!rows.length) return;\n\n   let firstRowIndex = rows.findIndex((r) => _filterRowLossPreRowFnc(r, rows));\n   while (firstRowIndex >= 0) {\n      let preRow = rows.splice(firstRowIndex, 1)[0];\n      while (preRow) {\n         rowsProcessed.push(preRow);\n\n         let nextRowIndex = rows.findIndex((row) => String(row._preRow) == String(preRow.id));\n         if (nextRowIndex >= 0) preRow = rows.splice(nextRowIndex, 1)[0];\n         else preRow = null;\n      };\n      firstRowIndex = rows.findIndex((r) => _filterRowLossPreRowFnc(r, rows));\n   };\n};\nconst _processChainRowsSplitGroupFnc2 = (rows) => {\n   let rowsProcessed = [];\n\n   if (!(rows instanceof Array) || !rows.length) return rowsProcessed;\n\n   let firstRowIndex = rows.findIndex((row) => !row._preRow);\n   while (firstRowIndex >= 0) {\n      let preRow = rows.splice(firstRowIndex, 1)[0];\n      let chain = [];\n      while (preRow) {\n         chain.push(preRow);\n         let nextRowIndex = rows.findIndex((row) => String(row._preRow) == String(preRow.id));\n\n         if (nextRowIndex >= 0) preRow = rows.splice(nextRowIndex, 1)[0];\n         else preRow = null;\n      };\n      rowsProcessed.push(chain);\n      firstRowIndex = rows.findIndex((row) => !row._preRow);\n   };\n   _processChainRowsLossHeadFnc2(rows, rowsProcessed);\n   return rowsProcessed;\n};\nconst _processChainRowsLossHeadFnc2 = (rows, rowsProcessed) => {\n   if (!rows.length) return;\n\n   let firstRowIndex = rows.findIndex((r) => _filterRowLossPreRowFnc(r, rows));\n   while (firstRowIndex >= 0) {\n      let preRow = rows.splice(firstRowIndex, 1)[0];\n      let chain = [];\n      while (preRow) {\n         chain.push(preRow);\n\n         let nextRowIndex = rows.findIndex((row) => String(row._preRow) == String(preRow.id));\n         if (nextRowIndex >= 0) preRow = rows.splice(nextRowIndex, 1)[0];\n         else preRow = null;\n      };\n      rowsProcessed.push(chain);\n      firstRowIndex = rows.findIndex((r) => _filterRowLossPreRowFnc(r, rows));\n   };\n};\nconst _filterRowLossPreRowFnc = (row, rows) => {\n   return rows.every(r => String(row._preRow) != String(r.id));\n};\n\n\n\nexport const updatePreRowParentRowToState = (objState, row) => {\n   objState[row.id] = {\n      id: row.id,\n      _preRow: row._preRow,\n      _parentRow: row._parentRow,\n   };\n};\n\n\n\n\n\n","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\_dashboardComp\\componentsDashboard\\CardPanel.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\_dashboardComp\\componentsDashboard\\ChartBarRecordPanel.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\TableCellHistory.js",["347","348"],"import { List } from 'antd';\nimport Axios from 'axios';\nimport moment from 'moment';\nimport React, { useContext, useEffect, useState } from 'react';\nimport { SERVER_URL } from '../../constants';\nimport { Context as ProjectContext } from '../../contexts/projectContext';\nimport { Context as RowContext } from '../../contexts/rowContext';\n\n\n\nconst TableCellHistory = (props) => {\n\n    const { rowData: { id: rowId }, column } = props;\n\n    const {\n        state: stateProject\n    } = useContext(ProjectContext);\n\n    const {\n        state: stateRow\n    } = useContext(RowContext);\n\n    const { projectId, token } = stateProject.allDataOneSheet;\n    const headers = stateProject.allDataOneSheet.publicSettings.headers;\n    const headerKey = headers.find(hd => hd.text === column.key).key;\n\n\n    const [history, setHistory] = useState()\n\n    useEffect(() => {\n        const fetchCellHistory = async () => {\n            try {\n\n                const res = await Axios.get(`${SERVER_URL}/cell/history/one-cell/`, { params: { token, projectId, rowId, headerKey } });\n\n                setHistory(res.data.histories.reverse());\n\n            } catch (err) {\n                console.log(err);\n            };\n        };\n        fetchCellHistory();\n    }, [])\n\n\n    return (\n        <div style={{ width: '100%', padding: 15, maxHeight: window.innerHeight * 0.7, overflowY: 'scroll' }}>\n            <List\n                size='small'\n                header={null}\n                footer={null}\n                bordered\n                dataSource={history}\n                renderItem={item => (\n                    <List.Item>\n                        <div>\n                            <div>{`${item.email}`}</div>\n                            <div style={{ fontSize: 12, color: 'grey' }}>{moment(item.createdAt).format('DD/MM/YY - HH:mm')}</div>\n                            <div style={{ fontWeight: 'bold' }}>{item.text}</div>\n                        </div>\n                    </List.Item>\n                )}\n            />\n        </div>\n    );\n};\n\nexport default TableCellHistory;\n","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\TableDrawingDetail.js",["349"],"\nimport Axios from 'axios';\nimport React, { useContext, useEffect, useState } from 'react';\nimport BaseTable, { AutoResizer } from 'react-base-table';\nimport styled from 'styled-components';\nimport { colorType, imgLink, SERVER_URL } from '../../constants';\nimport { Context as ProjectContext } from '../../contexts/projectContext';\nimport { Context as RowContext } from '../../contexts/rowContext';\nimport { getHeaderWidth, mongoObjectId } from '../../utils';\n\n\nconst Table = (props) => {\n   return (\n      <AutoResizer>\n         {({ width, height }) => {\n            return (\n               <BaseTable\n                  {...props}\n                  width={width}\n                  height={height}\n               />\n            );\n         }}\n      </AutoResizer>\n   );\n};\n\n\nconst TableDrawingDetail = (props) => {\n\n\n   const { rowData } = props;\n   const { id: rowId } = rowData;\n   const { state: stateProject } = useContext(ProjectContext);\n   const { state: stateRow } = useContext(RowContext);\n   const { headers } = stateProject.allDataOneSheet.publicSettings;\n   const { _id: projectId, token } = stateProject.allDataOneSheet;\n\n   const [rowsHistoryDatabase, setRowsHistoryDatabase] = useState(null);\n   const [rowsHistoryPrevious, setRowsHistoryPrevious] = useState([]);\n   const [rowCurrent, setRowCurrent] = useState(null);\n\n\n   useEffect(() => {\n      const fetchRowsHistory = async () => {\n         try {\n            const res = await Axios.get(`${SERVER_URL}/row/history/one-row/`, { params: { token, projectId, rowId } });\n\n            let rowsHistory = [];\n            res.data.forEach((r, i) => {\n               const { history } = r;\n               if (history) {\n                  let data = { id: mongoObjectId() };\n                  Object.keys(history).forEach(key => {\n                     const hdText = headers.find(hd => hd.key === key).text;\n                     data[hdText] = history[key];\n                  });\n                  rowsHistory.push(data);\n               };\n            });\n            setRowsHistoryDatabase(rowsHistory);\n\n\n            let rowsHistoryPrevious = [];\n            if (stateRow.rowsVersionsToSave) {\n               rowsHistoryPrevious = stateRow.rowsVersionsToSave.filter(r => r.id === rowId);\n               rowsHistoryPrevious.forEach((r, i) => {\n                  r.id = mongoObjectId();\n               });\n               setRowsHistoryPrevious(rowsHistoryPrevious);\n            };\n\n            setRowCurrent({\n               ...rowData,\n               key: rowsHistory.length + rowsHistoryPrevious.length + 1\n            });\n\n\n         } catch (err) {\n            console.log(err);\n         };\n      };\n      fetchRowsHistory();\n   }, []);\n\n   let data;\n   if (rowsHistoryDatabase && rowCurrent) {\n      data = [\n         ...rowsHistoryDatabase,\n         ...rowsHistoryPrevious,\n         rowCurrent\n      ];\n   };\n\n   const panelWidth = window.innerWidth * 0.8;\n   const panelHeight = window.innerHeight * 0.8;\n\n\n   return (\n      <div style={{\n         height: panelHeight,\n         background: 'white',\n         padding: 10,\n         display: 'flex',\n         justifyContent: 'center',\n         flexDirection: 'column',\n      }}>\n\n         {rowsHistoryDatabase && rowCurrent && (\n            <>\n               <div style={{\n                  width: panelWidth,\n                  height: 100 + data.length * 30,\n                  margin: '0 auto',\n                  textAlign: 'center'\n               }}>\n                  <div style={{ fontSize: 20, fontWeight: 'bold' }}>DRAWING HISTORY</div>\n                  <TableStyled\n                     fixed\n                     columns={generateColumns(getHeadersText(stateProject.allDataOneSheet.publicSettings.headers))}\n                     data={data}\n                     rowHeight={28}\n                  />\n\n               </div>\n\n               <div style={{\n                  margin: '0 auto',\n                  textAlign: 'center',\n                  marginTop: 100\n               }}>\n                  <img src={imgLink.timeline} alt='visualize' height={panelHeight - (100 + data.length * 30) - 100} />\n               </div>\n            </>\n         )}\n\n\n\n      </div>\n\n   );\n};\n\nexport default TableDrawingDetail;\n\n\nconst generateColumns = (headers) => headers.map((column, columnIndex) => ({\n\n   key: column,\n   dataKey: column,\n   title: column,\n   resizable: true,\n   width: getHeaderWidth(column),\n}));\n\nconst getHeadersText = (headersData) => {\n   return headersData.map(hd => {\n      return hd.text;\n   });\n};\n\n\n\n\nconst TableStyled = styled(Table)`\n\n\n   .BaseTable__row-cell-text {\n      color: black\n   }\n\n   .BaseTable__table .BaseTable__body {\n      /* -webkit-touch-callout: none;\n      -webkit-user-select: none;\n      -khtml-user-select: none;\n      -moz-user-select: none;\n      -ms-user-select: none;\n      user-select: none; */\n   }\n   .BaseTable__header-cell {\n      padding: 10px;\n      border-right: 1px solid #DCDCDC;\n\n      background: ${colorType.grey1};\n      color: black\n   }\n\n   .BaseTable__row-cell {\n      padding: 10px;\n      border-right: 1px solid #DCDCDC;\n\n      overflow: visible !important;\n   }\n`;\n\n","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\TableActivityHistory.js",["350","351","352","353","354","355"],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\FormCellColorizedCheck.js",["356","357"],"import Axios from 'axios';\nimport moment from 'moment';\nimport React, { useContext, useEffect, useState } from 'react';\nimport { SERVER_URL } from '../../constants';\nimport { Context as ProjectContext } from '../../contexts/projectContext';\nimport { convertHistoryData } from '../../utils';\nimport ButtonStyle from '../generalComponents/ButtonStyle';\nimport PanelCalendarDuration from '../generalComponents/PanelCalendarDuration';\n\n\n\n\nconst FormCellColorizedCheck = ({ setCellHistoryArr }) => {\n\n   const { state: stateProject } = useContext(ProjectContext);\n\n   const { projectId, token } = stateProject.allDataOneSheet;\n   const headersArr = stateProject.allDataOneSheet.publicSettings.headers;\n\n   useEffect(() => {\n      const fetchProjectHistory = async () => {\n         try {\n            const res = await Axios.get(`${SERVER_URL}/cell/history/`, { params: { token, projectId } });\n            setHistoryData(res.data);\n         } catch (err) {\n            console.log(err);\n         };\n      };\n      fetchProjectHistory();\n   }, []);\n\n   const [historyData, setHistoryData] = useState([]);\n\n   const [dateRange, setDateRange] = useState(null);\n   const onClickCheck = ({ start, end }) => {\n      let filterCells = convertHistoryData(historyData).filter(cell => {\n         let createdAt = moment(cell.createdAt).toDate();\n         return createdAt >= start && createdAt <= end;\n      });\n      const cellArr = filterCells.map(ch => {\n         const { row: rowId, headerKey } = ch;\n         let headerText = headersArr.find(hd => hd.key === headerKey).text;\n         return {\n            rowId,\n            header: headerText\n         }\n      });\n      let unique = cellArr.reduce((res, itm) => {\n         let result = res.find(item => JSON.stringify(item) == JSON.stringify(itm));\n         if (!result) return res.concat(itm);\n         return res;\n      }, []);\n\n      setCellHistoryArr(unique);\n   };\n   const checkCellWithinDates = (nos) => {\n      const addDays = (date, days) => {\n         let result = new Date(date);\n         result.setDate(result.getDate() + days);\n         return result;\n      };\n      let today = new Date();\n      let dateBefore = addDays(today, nos);\n      return {\n         start: dateBefore,\n         end: today\n      };\n   };\n\n\n   return (\n      <div style={{\n         padding: 15\n      }}>\n         <div style={{ display: 'flex', marginBottom: 10 }}>\n            <PanelCalendarDuration pickRangeDate={(e) => setDateRange(e)} />\n            <ButtonStyle\n               onClick={() => dateRange && onClickCheck({ start: dateRange[0], end: dateRange[1] })}\n               marginLeft={5}\n               name='Check Data Changed'\n            />\n         </div>\n         <div style={{ display: 'flex', marginBottom: 20, width: '100%' }}>\n            <ButtonStyle marginRight={5} name='Today'\n               onClick={() => onClickCheck(checkCellWithinDates(-1))}\n            />\n            <ButtonStyle marginRight={5} name='Last 3 Days'\n               onClick={() => onClickCheck(checkCellWithinDates(-3))}\n            />\n            <ButtonStyle marginRight={5} name='Last 7 Days'\n               onClick={() => onClickCheck(checkCellWithinDates(-7))}\n            />\n            <ButtonStyle marginRight={5} name='Last 14 Days'\n               onClick={() => onClickCheck(checkCellWithinDates(-14))}\n            />\n            <ButtonStyle marginRight={5} name='This Month'\n               onClick={() => onClickCheck(checkCellWithinDates(-31))}\n            />\n         </div>\n      </div>\n   );\n};\n\nexport default FormCellColorizedCheck;\n\n","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\FormDrawingTypeOrder.js",["358","359"],"import { Icon, Input, Modal, Tooltip } from 'antd';\nimport React, { useContext, useState } from 'react';\nimport { DraggableArea } from 'react-draggable-tags';\nimport SortableTree from 'react-sortable-tree';\nimport 'react-sortable-tree/style.css';\nimport styled from 'styled-components';\nimport { colorType } from '../../constants';\nimport { Context as ProjectContext } from '../../contexts/projectContext';\nimport { Context as RowContext } from '../../contexts/rowContext';\nimport { mongoObjectId } from '../../utils';\nimport ButtonColumnTag from '../generalComponents/ButtonColumnTag';\nimport ButtonGroupComp from '../generalComponents/ButtonGroupComp';\n\n\n\nconst FormDrawingTypeOrder = ({ onClickCancelModal, applyFolderOrganize }) => {\n\n   const { state: stateProject } = useContext(ProjectContext);\n   const { state: stateRow } = useContext(RowContext);\n\n   const { rowsAll } = stateRow;\n\n   const { companies, projectName, roleTradeCompany } = stateProject.allDataOneSheet;\n   const { drawingTypeTree, viewTemplateNodeId } = stateRow;\n\n\n   const [input, setInput] = useState(addProjectHeaderToTree(drawingTypeTree, projectName));\n\n   const [tradeAndCompanyAndType, setTradeAndCompanyAndType] = useState(null);\n   const [modalTitle, setModalTitle] = useState(null);\n   const [itemNode, setItemNode] = useState(null);\n   const [mergeList, setMergeList] = useState([]);\n\n   const onClickApplyTradeOrCompany = ({ node, itemsAdded }) => {\n      itemsAdded.forEach(item => {\n         node.children.push({\n            title: item,\n            id: mongoObjectId(),\n            parentId: node.id,\n            treeLevel: node.treeLevel + 1,\n            expanded: true,\n            children: [],\n         });\n      });\n      setInput(addProjectHeaderToTree(flattenAllTreeChildNode1(input[0].children), projectName));\n      setTradeAndCompanyAndType(null);\n   };\n   const addFolderBelow = (node) => {\n      if (node.treeLevel === 0) {\n         setTradeAndCompanyAndType({ node, dataTreeArray: companies.map(x => x.company) });\n      } else if (node.treeLevel === 1 && node.title === 'Woh Hup Private Ltd') {\n         setTradeAndCompanyAndType({ node, dataTreeArray: ['ARCHI', 'C&S', 'M&E', 'PRECAST'] });\n      } else if ((node.treeLevel >= 1 && node.title !== 'Woh Hup Private Ltd') || (node.treeLevel >= 2 && node.title === 'Woh Hup Private Ltd')) {\n         node.children.push({\n            title: 'New Drawing Type',\n            id: mongoObjectId(),\n            parentId: node.id,\n            treeLevel: node.treeLevel + 1,\n            expanded: true,\n            children: []\n         });\n         setInput(addProjectHeaderToTree(flattenAllTreeChildNode1(input[0].children), projectName));\n         setTradeAndCompanyAndType(null);\n      };\n   };\n   const deleteFolder = (node) => {\n      setItemNode(node);\n      setModalTitle('Delete Drawing Type');\n   };\n   const editFolderName = (node) => {\n      setItemNode(node);\n      setModalTitle('Edit Drawing Type Name');\n   };\n   const mergeChildDrawings = (node) => {\n      setItemNode(node);\n      setModalTitle('Merge All Child Drawings');\n   };\n   const confirmAction = (modalTitle, text) => {\n      if (modalTitle === 'Delete Drawing Type') {\n         let idsToDelete = flattenAllTreeChildNode1(itemNode.children).map(x => x.id);\n         idsToDelete.push(itemNode.id);\n\n         let currentNodeFlatten = flattenAllTreeChildNode1(input[0].children);\n         let outputArray = currentNodeFlatten.filter(x => idsToDelete.indexOf(x.id) === -1);\n         setInput(addProjectHeaderToTree(outputArray, projectName));\n\n      } else if (modalTitle === 'Merge All Child Drawings') {\n         let idsToMerge = flattenAllTreeChildNode1(itemNode.children).map(x => x.id);\n         let mergeListUpdate = [...mergeList];\n         idsToMerge.forEach(id => {\n            if (mergeList.indexOf(id) !== -1) {\n               mergeListUpdate = mergeListUpdate.filter(x => x !== id);\n            };\n         });\n         // setMergeList({ ...mergeList, [itemNode.id]: idsToMerge });\n         setMergeList([...mergeListUpdate, itemNode.id]);\n\n         let currentNodeFlatten = flattenAllTreeChildNode1(input[0].children);\n         let outputArray = currentNodeFlatten.filter(x => idsToMerge.indexOf(x.id) === -1);\n\n         setInput(addProjectHeaderToTree(outputArray, projectName));\n\n      } else if (modalTitle === 'Edit Drawing Type Name') {\n         itemNode.title = text;\n         setInput(addProjectHeaderToTree(flattenAllTreeChildNode1(input[0].children), projectName));\n      };\n      setTradeAndCompanyAndType(null);\n      setModalTitle(null);\n   };\n\n   const isDocumentController = roleTradeCompany.role === 'Document Controller' && roleTradeCompany.company === 'Woh Hup Private Ltd';\n   const treeFlatten = flattenAllTreeChildNode1(input);\n\n   let eyeShownInit;\n   if (viewTemplateNodeId) {\n      const nodeTreeFound = treeFlatten.find(x => x.id === viewTemplateNodeId);\n      if (nodeTreeFound) {\n         const br = getTreeFlattenOfNodeInArray(treeFlatten, nodeTreeFound);\n         eyeShownInit = br.map(x => x.id);\n      };\n   };\n   const [iconBtnEyeShownArr, setIconBtnEyeShownArr] = useState(eyeShownInit || []);\n   const [nodeIsolated, setNodeIsolated] = useState(viewTemplateNodeId || null);\n   const isolateView = (node) => {\n      setNodeIsolated(node.id);\n      const nodeFound = treeFlatten.find(x => x.id === node.id);\n      const branch = getTreeFlattenOfNodeInArray(treeFlatten, nodeFound);\n      setIconBtnEyeShownArr(branch.map(x => x.id));\n   };\n\n   return (\n      <Container>\n         <PanelStyled>\n            <SortableTreeStyled\n               treeData={input}\n               onChange={treeData => setInput(treeData)}\n               canDrag={({ node }) => {\n                  let companyNode;\n                  if (node.treeLevel >= 1) {\n                     const treeNode = treeFlatten.find(x => x.id === node.id);\n                     companyNode = getCompanyNameFnc(treeNode, treeFlatten);\n                  };\n                  let tradeNode;\n                  if (node.treeLevel >= 2) {\n                     const treeNode = treeFlatten.find(x => x.id === node.id);\n                     tradeNode = getTradeNameFnc(treeNode, treeFlatten);\n                  };\n\n                  if (node.treeLevel !== 0 && isDocumentController) return true;\n                  if (\n                     (node.treeLevel === 0) ||\n                     (node.treeLevel === 1 && !isDocumentController) ||\n                     (node.treeLevel >= 2 && companyNode !== roleTradeCompany.company) ||\n\n                     (roleTradeCompany.company === 'Woh Hup Private Ltd' && companyNode === roleTradeCompany.company && node.treeLevel === 2 && !isDocumentController) ||\n                     (roleTradeCompany.company === 'Woh Hup Private Ltd' && companyNode === roleTradeCompany.company && node.treeLevel >= 3 && tradeNode !== roleTradeCompany.trade && !isDocumentController) ||\n                     (roleTradeCompany.company === 'Woh Hup Private Ltd' && companyNode === roleTradeCompany.company && node.treeLevel >= 3 && roleTradeCompany.role !== 'Coordinator' && !isDocumentController)\n\n                  ) {\n                     return false;\n                  };\n\n                  return true;\n               }}\n               canDrop={(props) => {\n                  const { prevParent, nextParent, node } = props;\n\n                  let nodePrevParentInTree, nodeNextParentInTree;\n                  let companyNodePrevParent, companyNodeNextParent;\n\n                  if (prevParent && nextParent) {\n                     nodePrevParentInTree = treeFlatten.find(x => x.id === prevParent.id);\n                     nodeNextParentInTree = treeFlatten.find(x => x.id === nextParent.id);\n                  };\n\n                  if (nodePrevParentInTree && nodeNextParentInTree &&\n                     nodePrevParentInTree.treeLevel === nodeNextParentInTree.treeLevel &&\n                     nodePrevParentInTree.treeLevel >= 1\n                  ) {\n                     companyNodePrevParent = getCompanyNameFnc(nodePrevParentInTree, treeFlatten);\n                     companyNodeNextParent = getCompanyNameFnc(nodeNextParentInTree, treeFlatten);\n                  };\n\n                  if (node.treeLevel === 0 || !nextParent || !prevParent ||\n                     (nextParent && nextParent.treeLevel !== node.treeLevel - 1) ||\n                     (companyNodePrevParent !== companyNodeNextParent)\n                  ) {\n                     return false;\n                  };\n                  return true;\n               }}\n\n               onMoveNode={({ nextParentNode, node }) => {\n                  updateChildrenNode([node], nextParentNode.treeLevel + 1 - node.treeLevel);\n               }}\n\n               isVirtualized={false}\n\n               generateNodeProps={(props) => {\n\n                  const { node } = props;\n                  const treeNode = treeFlatten.find(x => x.id === node.id);\n\n                  let companyNode;\n                  if (node.treeLevel >= 1) {\n                     companyNode = getCompanyNameFnc(treeNode, treeFlatten);\n                  };\n\n                  let tradeNode;\n                  if (node.treeLevel >= 2) {\n                     tradeNode = getTradeNameFnc(treeNode, treeFlatten);\n                  };\n\n                  const isEyeShownColor = iconBtnEyeShownArr.indexOf(node.id) !== -1 ? 'black' : '#DCDCDC';\n                  const isEyeShownType = iconBtnEyeShownArr.indexOf(node.id) !== -1 ? 'eye' : 'eye-invisible';\n\n                  return ({\n                     className: 'xxx-xxx-xxx',\n                     buttons:\n                        (node.treeLevel === 0 && isDocumentController) ? [\n                           <IconBtn type='plus' onClick={() => addFolderBelow(node)} />,\n                           <IconBtn type={isEyeShownType} onClick={() => isolateView(node)} color={isEyeShownColor} />\n\n\n                        ] : (isDocumentController && companyNode === 'Woh Hup Private Ltd' && node.treeLevel === 1) ? [\n                           <IconBtn type='plus' onClick={() => addFolderBelow(node)} />,\n                           <IconBtn type='delete' onClick={() => deleteFolder(node)} />,\n                           <IconBtn type={isEyeShownType} onClick={() => isolateView(node)} color={isEyeShownColor} />\n                        ] : (isDocumentController && companyNode !== 'Woh Hup Private Ltd' && node.treeLevel === 1) ? [\n                           <IconBtn type='plus' onClick={() => addFolderBelow(node)} />,\n                           <IconBtn type='delete' onClick={() => deleteFolder(node)} />,\n                           node.children.length > 0 && <IconBtn type='shrink' onClick={() => mergeChildDrawings(node)} />,\n                           <IconBtn type={isEyeShownType} onClick={() => isolateView(node)} color={isEyeShownColor} />\n                        ] : (isDocumentController && companyNode === 'Woh Hup Private Ltd' && node.treeLevel === 2) ? [\n                           <IconBtn type='plus' onClick={() => addFolderBelow(node)} />,\n                           <IconBtn type='delete' onClick={() => deleteFolder(node)} />,\n                           node.children.length > 0 && <IconBtn type='shrink' onClick={() => mergeChildDrawings(node)} />,\n                           <IconBtn type={isEyeShownType} onClick={() => isolateView(node)} color={isEyeShownColor} />\n                        ] : (isDocumentController && (\n                           (companyNode === 'Woh Hup Private Ltd' && node.treeLevel >= 3) || (companyNode !== 'Woh Hup Private Ltd' && node.treeLevel >= 2)\n                        )) ? [\n                           <IconBtn type='plus' onClick={() => addFolderBelow(node)} />,\n                           <IconBtn type='edit' onClick={() => editFolderName(node)} />,\n                           <IconBtn type='delete' onClick={() => deleteFolder(node)} />,\n                           node.children.length > 0 && <IconBtn type='shrink' onClick={() => mergeChildDrawings(node)} />,\n                           <IconBtn type={isEyeShownType} onClick={() => isolateView(node)} color={isEyeShownColor} />\n\n\n\n\n                        ] : (roleTradeCompany.role === 'Coordinator' && companyNode === 'Woh Hup Private Ltd' && companyNode === roleTradeCompany.company && node.treeLevel === 2 && tradeNode === roleTradeCompany.trade) ? [\n                           <IconBtn type='plus' onClick={() => addFolderBelow(node)} />,\n                           node.children.length > 0 && <IconBtn type='shrink' onClick={() => mergeChildDrawings(node)} />,\n                           <IconBtn type={isEyeShownType} onClick={() => isolateView(node)} color={isEyeShownColor} />\n                        ] : (roleTradeCompany.role === 'Coordinator' && companyNode === 'Woh Hup Private Ltd' && companyNode === roleTradeCompany.company && node.treeLevel >= 3 && tradeNode === roleTradeCompany.trade) ? [\n                           <IconBtn type='plus' onClick={() => addFolderBelow(node)} />,\n                           <IconBtn type='edit' onClick={() => editFolderName(node)} />,\n                           <IconBtn type='delete' onClick={() => deleteFolder(node)} />,\n                           node.children.length > 0 && <IconBtn type='shrink' onClick={() => mergeChildDrawings(node)} />,\n                           <IconBtn type={isEyeShownType} onClick={() => isolateView(node)} color={isEyeShownColor} />\n\n\n\n\n                        ] : (companyNode !== 'Woh Hup Private Ltd' && companyNode === roleTradeCompany.company && node.treeLevel === 1) ? [\n                           <IconBtn type='plus' onClick={() => addFolderBelow(node)} />,\n                           node.children.length > 0 && <IconBtn type='shrink' onClick={() => mergeChildDrawings(node)} />,\n                           <IconBtn type={isEyeShownType} onClick={() => isolateView(node)} color={isEyeShownColor} />\n                        ] : (companyNode !== 'Woh Hup Private Ltd' && companyNode === roleTradeCompany.company && node.treeLevel >= 2) ? [\n                           <IconBtn type='plus' onClick={() => addFolderBelow(node)} />,\n                           <IconBtn type='edit' onClick={() => editFolderName(node)} />,\n                           <IconBtn type='delete' onClick={() => deleteFolder(node)} />,\n                           node.children.length > 0 && <IconBtn type='shrink' onClick={() => mergeChildDrawings(node)} />,\n                           <IconBtn type={isEyeShownType} onClick={() => isolateView(node)} color={isEyeShownColor} />\n\n\n\n                        ] : [\n                           <IconBtn type='eye' onClick={() => isolateView(node)} color={isEyeShownColor} />\n                        ]\n                  });\n               }}\n            />\n         </PanelStyled>\n\n         <div style={{ padding: 20, display: 'flex', flexDirection: 'row-reverse' }}>\n            <ButtonGroupComp\n               onClickCancel={onClickCancelModal}\n               onClickApply={() => applyFolderOrganize(input[0].children, mergeList, nodeIsolated)} // remove projectName item before apply...\n            />\n         </div>\n\n\n\n         {modalTitle && (\n            <ModalStyledSetting\n               title={modalTitle}\n               visible={modalTitle !== null ? true : false}\n               footer={null}\n               onCancel={() => setModalTitle(null)}\n               destroyOnClose={true}\n               centered={true}\n               width={window.innerWidth * 0.6}\n            >\n               <ConfirmOrEditNameModal\n                  modalTitle={modalTitle}\n                  confirmAction={confirmAction}\n                  itemNode={itemNode}\n                  input={input}\n                  rowsAll={rowsAll}\n               />\n            </ModalStyledSetting>\n         )}\n\n\n         {tradeAndCompanyAndType && (\n            <ModalStyledSetting\n               title={modalTitle}\n               visible={tradeAndCompanyAndType !== null ? true : false}\n               footer={null}\n               onCancel={() => setTradeAndCompanyAndType(null)}\n               destroyOnClose={true}\n               centered={true}\n               width={window.innerWidth * 0.6}\n            >\n               <RearrangeItemsForm\n                  tradeAndCompanyAndType={tradeAndCompanyAndType}\n                  onClickApplyTradeOrCompany={onClickApplyTradeOrCompany}\n                  onClickCancel={() => setTradeAndCompanyAndType(null)}\n               />\n            </ModalStyledSetting>\n         )}\n      </Container>\n   );\n};\n\nexport default FormDrawingTypeOrder;\n\n\nconst SortableTreeStyled = styled(SortableTree)`\n   .dddddd {\n      /* background-color: grey !important; */\n   }\n   .rst__node {\n      height: 45px !important;\n   }\n   .rst__rowContents {\n      min-width: fit-content;\n      background-color: transparent !important;\n   }\n`;\nconst IconStyle = styled(Icon)`\n   font-size: 14px;\n   margin: 2px;\n   padding: 4px;\n   &:hover {\n      background-color: ${colorType.grey0};\n   };\n`;\nconst ModalStyledSetting = styled(Modal)`\n    .ant-modal-content {\n        border-radius: 0;\n    }\n   .ant-modal-close {\n      display: none;\n   }\n   .ant-modal-header {\n      padding: 10px;\n   }\n   .ant-modal-title {\n        padding-left: 10px;\n        font-size: 20px;\n        font-weight: bold;\n   }\n   .ant-modal-body {\n      padding: 0;\n      display: flex;\n      justify-content: center;\n   }\n`;\nconst Container = styled.div`\n   height: ${`${window.innerHeight * 0.8}` + 'px'};\n   width: 100%;\n   display: flex;\n   flex-direction: column;\n`;\nconst PanelStyled = styled.div`\n   width: 100%;\n   float: right;\n   overflow-x: hidden;\n   border-bottom: 1px solid ${colorType.grey4};\n`;\nconst IconBtn = ({ type, onClick, color }) => {\n\n   const text = type === 'plus' ? 'Add Sub Drawing Type'\n      : type === 'delete' ? 'Delete Drawing Type'\n         : type === 'edit' ? 'Edit Name'\n            : type === 'eye' ? 'Isolate View'\n               : type === 'eye-invisible' ? 'Isolate View'\n                  : 'Merge All Sub Drawing Type'\n\n   return (\n      <Tooltip title={text}>\n         <IconStyle type={type} onClick={onClick} style={{ color: color || 'black' }} />\n      </Tooltip>\n   );\n};\nconst RearrangeItemsForm = ({ tradeAndCompanyAndType, onClickApplyTradeOrCompany, onClickCancel }) => {\n\n   const { dataTreeArray, node } = tradeAndCompanyAndType;\n\n   const onClickApply = () => {\n      let itemsAdded = tags.filter(x => x.mode === 'shown').map(x => x.header);\n      onClickApplyTradeOrCompany({ node, itemsAdded });\n   };\n\n   const setMode = (obj) => {\n      tags.forEach(tg => {\n         if (tg.header === obj.header) tg.mode = obj.mode;\n      });\n   };\n\n   const getTags = () => {\n      const arrItem = node.children.map(x => x.title);\n      const items = dataTreeArray.filter(x => arrItem.indexOf(x) === -1);\n\n      let arr = [];\n      items.forEach((header, index) => {\n         arr.push({ id: index, header, mode: 'hidden' });\n      });\n      return arr;\n   };\n\n   const [tags, setTags] = useState(getTags());\n\n   return (\n      <div style={{ width: '100%', height: '100%' }}>\n         <PanelItemsStyled>\n            <div style={{ fontSize: 11, paddingLeft: 20 }}>Click to add items</div>\n            <div style={{ width: '100%', paddingTop: 20 }}>\n               <DraggableArea\n                  isList\n                  tags={tags}\n                  render={({ tag }) => <ButtonColumnTag tag={tag} setMode={setMode} actionType='rearrange-drawing-type-tree-action' />}\n                  onChange={(tags) => setTags(tags)}\n               />\n            </div>\n         </PanelItemsStyled>\n         <div style={{ padding: 20, display: 'flex', flexDirection: 'row-reverse' }}>\n            <ButtonGroupComp\n               onClickCancel={onClickCancel}\n               onClickApply={onClickApply}\n            />\n         </div>\n      </div>\n   );\n};\nconst PanelItemsStyled = styled.div`\n   height: 60vh;\n   width: 100%;\n   overflow-y: scroll;\n   overflow-x: hidden;\n   border-bottom: 1px solid ${colorType.grey4};\n`;\nconst ConfirmOrEditNameModal = ({ modalTitle, confirmAction, itemNode, input, rowsAll }) => {\n\n   let dwgsToWarn = [];\n   if (modalTitle === 'Delete Drawing Type') {\n      const currentTree = flattenAllTreeChildNode1(input[0].children);\n      const currentTreeNode = currentTree.find(x => x.id === itemNode.id);\n      const nodeArray = getTreeFlattenOfNodeInArray(currentTree, currentTreeNode);\n      nodeArray.forEach(nd => {\n         dwgsToWarn = [...dwgsToWarn, ...rowsAll.filter(x => x._parentRow === nd.id)];\n      });\n   };\n\n\n   const [value, setValue] = useState(null);\n   const onClickApplyModal = () => {\n      if (modalTitle === 'Delete Drawing Type') {\n         confirmAction(modalTitle);\n      } else if (modalTitle === 'Edit Drawing Type Name') {\n         confirmAction(modalTitle, value);\n      } else if (modalTitle === 'Merge All Child Drawings') {\n         confirmAction(modalTitle);\n      };\n   };\n   return (\n      <div style={{ padding: 20, width: '100%', maxHeight: window.innerHeight * 0.7 }}>\n         {modalTitle === 'Delete Drawing Type' ? (\n            <div>\n               <div>Are you sure to delete the drawing type <span style={{ fontWeight: 'bold' }}>{itemNode.title}</span>?</div>\n               <div>All the following <span style={{ fontWeight: 'bold' }}>{dwgsToWarn.length}</span> drawings will be deleted accordingly:</div>\n               <br />\n               <div style={{ maxHeight: 300, overflowY: 'scroll' }}>\n                  {dwgsToWarn.map((dr, i) => (\n                     <div key={i}>({i + 1}) - {dr['Drawing Number']} - {dr['Drawing Name']}</div>\n                  ))}\n               </div>\n            </div>\n         ) : modalTitle === 'Merge All Child Drawings' ? (\n            <div>Are you sure to delete all sub folders and retains all drawings</div>\n         ) : (\n            <Input\n               placeholder='Enter new name...'\n               style={{ width: '100%' }}\n               value={value || itemNode.title}\n               onChange={(e) => setValue(e.target.value)}\n            />\n         )}\n\n         <div style={{ padding: 20, display: 'flex', flexDirection: 'row-reverse' }}>\n            <ButtonGroupComp\n               onClickCancel={() => { }}\n               onClickApply={onClickApplyModal}\n            />\n         </div>\n      </div>\n   );\n};\nconst getCompanyNameFnc = (dwgType, drawingTypeTreeClone) => {\n   if (dwgType.treeLevel === 1) return dwgType.title;\n   let result;\n   const getCompanyFnc = (dwgType, drawingTypeTreeClone) => {\n      const parent = drawingTypeTreeClone.find(x => x.id === dwgType.parentId);\n      if (parent.treeLevel === 1) {\n         result = parent.title;\n      } else {\n         getCompanyFnc(parent, drawingTypeTreeClone);\n      };\n      return result;\n   };\n   getCompanyFnc(dwgType, drawingTypeTreeClone);\n   return result;\n};\nconst getTradeNameFnc = (dwgType, drawingTypeTreeClone) => {\n   const tree = drawingTypeTreeClone.filter(x => x.treeLevel !== 1);\n   if (dwgType.treeLevel === 2) return dwgType.title;\n   let result;\n   const getTradeFnc = (dwgType, dwgTypeTree) => {\n      const parent = dwgTypeTree.find(x => x.id === dwgType.parentId);\n      if (parent.treeLevel === 2) {\n         result = parent.title;\n      } else {\n         getTradeFnc(parent, dwgTypeTree);\n      };\n      return result;\n   };\n   getTradeFnc(dwgType, tree);\n   return result;\n};\n\n\n\nexport const flattenAllTreeChildNode1 = (root) => {\n   let temp = [];\n   let queue = [...root];\n   while (queue.length > 0) {\n      let node = queue.shift();\n      if (node.children) {\n         let childNode = [];\n         node.children.forEach(nd => {\n            childNode.push({ ...nd, parentId: node.id });\n         });\n         queue = [...queue, ...childNode];\n         let nodeObj = { ...node };\n         delete nodeObj.children;\n         temp.push(nodeObj);\n      } else {\n         let nodeObj = { ...node };\n         delete nodeObj.children;\n         temp.push(nodeObj);\n      };\n   };\n   return temp;\n};\nexport const convertFlattenArraytoTree1 = (list) => {\n   let map = {}, node, roots = [], i;\n   for (i = 0; i < list.length; i += 1) {\n      map[list[i].id] = i;\n      if (list[i]._rowLevel !== 1) {\n         list[i].children = list[i].children || [];\n      };\n   };\n\n\n   let arrayOfTreeLevel = [];\n   list.forEach(tr => {\n      arrayOfTreeLevel.push(tr.treeLevel);\n   });\n   const treeLevelOfTopTree = Math.min(...arrayOfTreeLevel);\n\n   for (i = 0; i < list.length; i++) {\n      node = list[i];\n      if (node.treeLevel > treeLevelOfTopTree) {\n         list[map[node.parentId]].children.push(node);\n      } else {\n         roots.push(node);\n      };\n   };\n   return roots;\n};\nconst addProjectHeaderToTree = (tree, projectName) => {\n   const treeOutput = tree.map(item => {\n      let itemOutput = { ...item };\n      if (itemOutput['Drawing Number']) {\n         itemOutput.title = itemOutput['Drawing Number'];\n         delete itemOutput['Drawing Number'];\n      };\n      return itemOutput;\n   });\n   return [{\n      title: projectName,\n      id: projectName,\n      treeLevel: 0,\n      expanded: true,\n      children: convertFlattenArraytoTree1(treeOutput)\n   }];\n};\nconst updateChildrenNode = (arr, n) => {\n   arr.forEach(i => {\n      i.treeLevel = i.treeLevel + n;\n      if (i.children.length > 0) {\n         updateChildrenNode(i.children, n);\n      };\n   });\n};\nconst updateChildrenNodeTreeLevel = (arr) => {\n   arr.forEach(i => {\n      let childrenArr = i.children;\n      if (childrenArr && childrenArr.length > 0) {\n         childrenArr.forEach(ch => {\n            ch.treeLevel = i.treeLevel + 1;\n         });\n         updateChildrenNodeTreeLevel(childrenArr);\n      };\n   });\n};\nconst getListOfBranchesTree = (inputArr) => {\n   const arr = inputArr.map(x => ({ ...x }));\n   arr.sort((a, b) => { return b.treeLevel - a.treeLevel });\n\n   const parentArrIds = [];\n   arr.forEach(x => {\n      let item = arr.find(fld => fld.id === x.parentId);\n      if (item) {\n         item.children = [...item.children || [], x];\n      } else {\n         parentArrIds.push(x.id);\n      };\n   });\n   return arr.filter(x => parentArrIds.indexOf(x.id) !== -1);\n};\nexport const getTreeFlattenOfNodeInArray = (treeArray, node) => {\n   let obj = { ...node };\n   let arrayTree = treeArray.map(x => ({ ...x })).filter(x => x.treeLevel > obj.treeLevel);\n   arrayTree = [...arrayTree, obj];\n   const treeOfFound = getListOfBranchesTree(arrayTree).find(x => x.id === obj.id);\n   return flattenAllTreeChildNode1([treeOfFound]);\n};\nexport const compareCurrentTreeAndTreeFromDB = (treeFromCurrentInit, treeFromCurrentInput, treeDeletedFromCurrent, treeFromDBInput, treeDeletedFromDB) => {\n\n   let treeFromCurrent = treeFromCurrentInput.map(i => ({ ...i }));\n   let treeFromDB = treeFromDBInput.map(i => ({ ...i }));\n\n   // check if need to save tree or not\n   if (treeFromCurrent.length === treeFromCurrentInit.length) {\n      const stringTreeCurrent = treeFromCurrent.reduce((acc, current) => acc + `${current.id}-${current.parentId}-${current['Drawing Number']}-`, '');\n      const stringTreeInit = treeFromCurrentInit.reduce((acc, current) => acc + `${current.id}-${current.parentId}-${current['Drawing Number']}-`, '');\n      if (stringTreeCurrent === stringTreeInit) {\n         return {\n            needToSaveTree: false,\n            treeDBModifiedToSave: treeFromDB,\n            nodesToAddToDB: [],\n            nodesToRemoveFromDB: [],\n         };\n      };\n   };\n\n   let treeCurrentModified = removeNodesDeletedByOtherUsersFromTreeCurrent(treeFromCurrent, treeDeletedFromDB);\n\n   let { nodesToRemoveFromDB, treeFromDB: treeFromDBModified, nodesIdNoNeedToAddNew } = removeNodesDeletedByCurrentUserFromTreeDB(treeFromDB, treeDeletedFromCurrent, treeCurrentModified);\n  \n   let { nodesToAddToDB, treeDBModifiedToSave: treeDBModified } = haveChangedNodesInDBAndNewNodesInCurrentBackToDB(treeFromDBModified, treeCurrentModified, treeFromCurrentInit, nodesIdNoNeedToAddNew);\n\n\n\n   // reorder item follow new order...\n   let treeDBModifiedToSave = [];\n   treeFromCurrentInput.forEach(item => {\n      const found = treeDBModified.find(x => x.id === item.id);\n      if (found) {\n         treeDBModifiedToSave.push(found);\n         treeDBModified = treeDBModified.filter(x => x.id !== found.id);\n      };\n   });\n   treeDBModifiedToSave = [...treeDBModifiedToSave, ...treeDBModified].sort((a, b) => { return a.treeLevel - b.treeLevel });\n\n   return {\n      needToSaveTree: true,\n      treeDBModifiedToSave,\n      nodesToAddToDB,\n      nodesToRemoveFromDB,\n   };\n};\nconst removeNodesDeletedByOtherUsersFromTreeCurrent = (treeCurrent, treeDeletedFromDB) => {\n   let idsToCheckCurrent = [];\n   treeDeletedFromDB.forEach(item => {\n      const found = treeCurrent.find(x => x.id === item.id);\n      if (found) {\n         idsToCheckCurrent = [\n            ...idsToCheckCurrent,\n            ...getTreeFlattenOfNodeInArray(treeCurrent, found).map(x => x.id)\n         ];\n      };\n   });\n   idsToCheckCurrent = [...new Set(idsToCheckCurrent)];\n\n   const nodesArray = treeCurrent.filter(x => idsToCheckCurrent.indexOf(x.id) !== -1);\n\n   const branchTrees = getListOfBranchesTree(nodesArray);\n\n   const newIdObj = {};\n   treeDeletedFromDB.forEach(item => {\n      newIdObj[item.id] = mongoObjectId();\n   });\n\n   branchTrees.forEach(tree => {\n      let flattenArray = flattenAllTreeChildNode1([tree]);\n      let isAbleToDelete = true;\n\n      flattenArray.forEach(item => {\n         if (!treeDeletedFromDB.find(x => x.id === item.id)) isAbleToDelete = false;\n      });\n\n      if (isAbleToDelete) {\n         treeCurrent = treeCurrent.filter(x => !flattenArray.find(item => item.id === x.id));\n      } else {\n         const arrayToModify = treeCurrent.filter(item => flattenArray.find(x => x.id === item.id));\n         treeDeletedFromDB.forEach(item => {\n            const found = arrayToModify.find(x => x.id === item.id);\n            if (found) {\n               found.id = newIdObj[item.id];\n            };\n            const childrenFound = arrayToModify.filter(x => x.parentId === item.id);\n            if (childrenFound.length > 0) {\n               childrenFound.forEach(child => {\n                  child.parentId = newIdObj[item.id];\n               });\n            };\n         });\n      };\n   });\n   return treeCurrent;\n};\nconst removeNodesDeletedByCurrentUserFromTreeDB = (treeFromDB, treeDeletedFromCurrent, treeCurrent) => {\n   let listIdToRemoveFromDB = [];\n   treeDeletedFromCurrent.forEach(item => {\n      const found = treeFromDB.find(x => x.id === item.id);\n      if (found) {\n         listIdToRemoveFromDB = [\n            ...listIdToRemoveFromDB,\n            ...getTreeFlattenOfNodeInArray(treeFromDB, found).map(x => x.id)\n         ];\n      };\n   });\n\n   const nodesToRemoveFromDB = treeFromDB.filter(x => {\n      return listIdToRemoveFromDB.indexOf(x.id) !== -1 && !treeCurrent.find(item => item.id === x.id);\n   });\n   const nodesIdNoNeedToAddNew = listIdToRemoveFromDB.filter(id => treeCurrent.find(item => item.id === id))\n\n   treeFromDB = treeFromDB.filter(x => listIdToRemoveFromDB.indexOf(x.id) === -1);\n\n   return {\n      nodesToRemoveFromDB,\n      nodesIdNoNeedToAddNew,\n      treeFromDB\n   };\n};\nconst haveChangedNodesInDBAndNewNodesInCurrentBackToDB = (treeFromDB, treeCurrent, treeCurrentInit, nodesIdNoNeedToAddNew) => {\n   let nodesToAddToDB = [];\n   treeCurrent.forEach(item => {\n      if (!treeFromDB.find(x => x.id === item.id)) {\n         nodesToAddToDB.push(item);\n      };\n   });\n\n   let dwgTypeExistedInDBButLevelOrParentChangesArr = [];\n   let childrenIdsToWithdrawFromDB = [];\n   treeFromDB.forEach(item => {\n      const found = treeCurrent.find(r => r.id === item.id);\n      const foundInit = treeCurrentInit.find(r => r.id === item.id);\n      if (found && foundInit) {\n         if (found['Drawing Number'] !== foundInit['Drawing Number']) item['Drawing Number'] = found['Drawing Number'];\n\n         if (found.parentId !== item.parentId && found.parentId !== foundInit.parentId) {\n            dwgTypeExistedInDBButLevelOrParentChangesArr.push({ ...found, ['Drawing Number']: item['Drawing Number'] });\n\n            const arrIdsChildrenInDB = getTreeFlattenOfNodeInArray(treeFromDB, item).filter((x, i) => i !== 0).map(x => x.id);\n\n            childrenIdsToWithdrawFromDB = [...childrenIdsToWithdrawFromDB, ...arrIdsChildrenInDB];\n         };\n      };\n   });\n   childrenIdsToWithdrawFromDB = [...new Set(childrenIdsToWithdrawFromDB)];\n\n   const dwgTypeToWithdrawFromDB = treeFromDB.filter(x => childrenIdsToWithdrawFromDB.indexOf(x.id) !== -1);\n\n   treeFromDB = treeFromDB.filter(item => {\n      return childrenIdsToWithdrawFromDB.indexOf(item.id) === -1 && !dwgTypeExistedInDBButLevelOrParentChangesArr.find(x => x.id === item.id)\n   });\n\n\n   const listBranchesTreeToPushToDB = getListOfBranchesTree([\n      ...nodesToAddToDB,\n      ...dwgTypeExistedInDBButLevelOrParentChangesArr,\n      ...dwgTypeToWithdrawFromDB\n   ]);\n\n   listBranchesTreeToPushToDB.forEach(itemTree => {\n      treeFromDB = [...treeFromDB, ...flattenAllTreeChildNode1([itemTree])];\n   });\n\n   const treeDBModifiedToSave = convertFlattenArraytoTree1(treeFromDB);\n   updateChildrenNodeTreeLevel(treeDBModifiedToSave);\n\n   return {\n      nodesToAddToDB: nodesToAddToDB.filter(item => nodesIdNoNeedToAddNew.indexOf(item.id) === -1),\n      treeDBModifiedToSave: flattenAllTreeChildNode1(treeDBModifiedToSave)\n   };\n};\n\n\n\n\n\n\n\n","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\FormDateAutomation.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\ColorizedForm.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\_dashboardComp\\componentsDashboard\\ChartBarRecord.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\ButtonAdminUploadData.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\ButtonAdminUploadDataPDD.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\ButtonAdminCreateAndUpdateRows.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\ButtonAdminDeleteRowsHistory.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\ButtonAdminCreateAndUpdateRowsHistory.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\ExcelExport.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\contexts\\createDataContext.js",["360"],"import React, { createContext, useReducer } from 'react';\n\n\nexport default (reducer, actions, initValue) => {\n\n    const Context = createContext();\n\n    const Provider = ({ children }) => {\n        const [state, dispatch] = useReducer(reducer, initValue);\n\n        const boundActions = {};\n        for (let key in actions) {\n            boundActions[key] = actions[key](dispatch);\n        };\n\n        return (\n            <Context.Provider value={{ state, ...boundActions }}>\n                {children}\n            </Context.Provider>\n        );\n    };\n    return { Context, Provider };\n};\n","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\generalComponents\\ButtonColumnTag.js",["361"],"\nimport React, { useEffect, useState } from 'react';\nimport { colorType } from '../../constants';\n\n\nconst ButtonColumnTag = ({ tag, setMode, actionType }) => {\n\n   const styleShown = { background: '#f1a99f', color: 'black' };\n   const styleFrozen = { background: colorType.primary, color: 'white' };\n   const styleHidden = { background: colorType.grey4, color: 'grey' };\n\n   const [btnStyle, setBtnStyle] = useState(\n      tag.mode === 'hidden' ? styleHidden :\n         tag.mode === 'frozen' ? styleFrozen :\n            styleShown\n   );\n\n   const [type, setType] = useState(tag.mode);\n\n   useEffect(() => {\n      if (actionType === 'reset-mode-action') {\n         setType(tag.mode);\n         setBtnStyle(\n            tag.mode === 'hidden' ? styleHidden :\n               tag.mode === 'frozen' ? styleFrozen :\n                  styleShown\n         );\n      };\n   }, [tag.mode]);\n\n\n   const onClick = () => {\n      if (actionType === 'reorder-columns-action') {\n         if (type === 'shown') {\n            setBtnStyle(styleFrozen);\n            setMode({ header: tag.header, id: tag.id, mode: 'frozen' });\n            setType('frozen');\n         } else if (type === 'frozen') {\n            setBtnStyle(styleHidden);\n            setMode({ header: tag.header, id: tag.id, mode: 'hidden' });\n            setType('hidden');\n         } else if (type === 'hidden') {\n            setBtnStyle(styleShown);\n            setMode({ header: tag.header, id: tag.id, mode: 'shown' });\n            setType('shown');\n         };\n      } else if (actionType === 'rearrange-drawing-type-tree-action') {\n         if (type === 'shown') {\n            setBtnStyle(styleHidden);\n            setMode({ header: tag.header, id: tag.id, mode: 'hidden' });\n            setType('hidden');\n         } else if (type === 'hidden') {\n            setBtnStyle(styleShown);\n            setMode({ header: tag.header, id: tag.id, mode: 'shown' });\n            setType('shown');\n         };\n      } else if (actionType === 'reset-mode-action') {\n         setMode({ id: tag.id });\n      };\n   };\n\n   return (\n      <div\n         style={{\n            ...btnStyle,\n            padding: 9,\n            cursor: actionType === 'reset-mode-action' && 'pointer',\n            textAlign: 'center',\n            fontWeight: 'bold',\n            width: '70%',\n            margin: 'auto',\n            marginBottom: 10\n         }}\n         onClick={onClick}\n      >\n         {tag.header}\n      </div>\n   );\n};\n\nexport default ButtonColumnTag;","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\generalComponents\\ButtonGroupComp.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\generalComponents\\ButtonStyle.js",["362"],"import { Button } from 'antd';\nimport React from 'react';\n\n\n\nconst ButtonStyle = ({\n   colorText,\n   marginRight,\n   marginLeft,\n   borderColor,\n   borderOverwritten,\n   marginBottom,\n   background,\n   name,\n   onClick,\n   disabled\n}) => {\n\n   return (\n      <Button\n         style={{\n            borderRadius: 0,\n            background: background,\n            color: colorText,\n            border: 'none',\n            marginRight,\n            marginBottom,\n            marginLeft,\n            border: `1px solid ${borderOverwritten ? borderColor : (borderColor || background)}`,\n         }}\n         onClick={onClick}\n         disabled={disabled}\n      >\n         {name}\n      </Button>\n   );\n};\n\nexport default ButtonStyle;\n\n\n","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\generalComponents\\CellHeader.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\generalComponents\\FormFilter.js",["363"],"import { Checkbox, Icon, Select, Tooltip } from 'antd';\nimport React, { useEffect, useState } from 'react';\nimport styled from 'styled-components';\nimport { colorType } from '../../constants';\nimport { mongoObjectId } from '../../utils/index';\nimport ButtonGroupComp from './ButtonGroupComp';\nimport ButtonStyle from './ButtonStyle';\n\n\nconst { Option } = Select;\n\n\nconst FormFilter = ({ applyFilter, onClickCancelModal, headers, rowsAll, modeFilter }) => {\n\n\n   const [filterColumn, setFilterColumn] = useState(\n      modeFilter.length > 1 ?\n         modeFilter : [\n            {\n               id: mongoObjectId(),\n               header: 'Status',\n               value: 'Select Value...'\n            },\n            {\n               isIncludedParent: 'included'\n            }\n         ]);\n\n   const setFilterSelect = (dataFilter) => {\n      let found = filterColumn.find(x => x.id === dataFilter.id);\n      found.header = dataFilter.header;\n      found.value = dataFilter.value;\n      setFilterColumn([...filterColumn]);\n   };\n\n\n   const onClickAddField = () => {\n      setFilterColumn([\n         ...filterColumn,\n         { id: mongoObjectId(), header: 'Select Field...', value: 'Select Value...' }\n      ]);\n   };\n\n   const removeFilterTag = (id) => {\n      const arr = filterColumn.filter(x => x.id !== id);\n      setFilterColumn([...arr]);\n   };\n\n   const filterObj = modeFilter.find(x => x.isIncludedParent);\n\n   const [isChecked, setIsChecked] = useState(\n      filterObj && filterObj.isIncludedParent === 'included' ? true :\n         filterObj && filterObj.isIncludedParent === 'not included' ? false :\n            true);\n   const onChangeBox = () => {\n\n      setIsChecked(!isChecked);\n      const found = filterColumn.find(x => x.isIncludedParent);\n\n      if (found) {\n         found.isIncludedParent = isChecked ? 'not included' : 'included';\n         setFilterColumn(filterColumn);\n      } else {\n         let xxx = [...filterColumn, { isIncludedParent: isChecked ? 'not included' : 'included' }];\n         setFilterColumn(xxx);\n      };\n   };\n\n   const onClickApply = () => {\n      const output = filterColumn.filter(x => {\n         return (x.header !== 'Select Field...' && x.value !== 'Select Value...') || x.isIncludedParent;\n      });\n      if (!filterColumn.find(item => item.isIncludedParent)) {\n         output.push({ isIncludedParent: 'not included' });\n      };\n\n      if (output.length === 1 && output[0].isIncludedParent === 'included') {\n         applyFilter([]);\n      } else {\n         applyFilter(output);\n      };\n\n   };\n\n   return (\n      <div style={{\n         width: '100%',\n         height: '100%'\n      }}>\n         <div style={{ padding: 20, borderBottom: `1px solid ${colorType.grey4}` }}>\n\n            <ButtonStyle\n               colorText='black'\n               marginRight={10}\n               borderColor={colorType.grey1}\n               background={colorType.grey4}\n               onClick={onClickAddField}\n               name='Add Field'\n               marginBottom={10}\n            />\n\n            {filterColumn.filter(x => x.id).map(item => (\n               <SelectComp\n                  key={item.id}\n                  id={item.id}\n                  data={item}\n                  setFilterSelect={setFilterSelect}\n                  removeFilterTag={removeFilterTag}\n                  headers={headers}\n                  rowsAll={rowsAll}\n               />\n            ))}\n            <div>\n               <CheckboxStyled\n                  onChange={onChangeBox}\n                  checked={isChecked}\n               >\n                  Include Parent Rows\n               </CheckboxStyled>\n            </div>\n         </div>\n\n         <div style={{ padding: 20, display: 'flex', flexDirection: 'row-reverse' }}>\n            <ButtonGroupComp\n               onClickCancel={onClickCancelModal}\n               onClickApply={onClickApply}\n            />\n         </div>\n      </div>\n   );\n};\nexport default FormFilter;\n\n\nconst CheckboxStyled = styled(Checkbox)`\n   .ant-checkbox-inner {\n      border-radius: 0;\n      border: none;\n      background: ${colorType.primary}\n   }\n`;\n\n\nconst IconStyled = styled.div`\n    margin-left: 7px;\n    width: 18px; \n    height: 18px; \n    border: 1px solid ${colorType.grey1};\n    text-align: center;\n    &:hover {\n        background-color: ${colorType.grey4};\n        cursor: pointer;\n    };\n`;\n\n\n\nconst SelectComp = ({ setFilterSelect, data, id, removeFilterTag, headers, rowsAll }) => {\n\n   const columnsValueArr = getColumnsValue(rowsAll, headers);\n\n   const [column, setColumn] = useState(data.header);\n\n   const [value, setValue] = useState(null);\n\n   useEffect(() => {\n      if (column) {\n         setValue(data.value || 'Select Value...');\n         setFilterSelect({ id, header: column, value: data.value || 'Select Value...' });\n      };\n   }, [column]);\n\n   return (\n      <div style={{ display: 'flex', paddingBottom: 10, width: '100%' }}>\n\n         <SelectStyled\n            defaultValue='Select Field...'\n            value={column}\n            style={{ marginRight: 13, width: '47%' }}\n            onChange={(column) => setColumn(column)}\n         >\n            {headers.filter(hd => columnsValueArr[hd]).map(hd => (\n               <Option key={hd} value={hd}>{hd}</Option>\n            ))}\n         </SelectStyled>\n\n\n         <SelectStyled\n            showSearch\n            optionFilterProp='children'\n            filterOption={(input, option) => {\n               let stringArray = input.split(/(\\s+)/).filter(str => str !== ' ');\n               let isFound = true;\n               stringArray.forEach(str => {\n                  if (option.props.children.toLowerCase().indexOf(str.toLowerCase()) === -1) {\n                     isFound = false;\n                  };\n               });\n               return isFound;\n            }}\n\n            style={{ width: '47%' }}\n            onChange={(value) => {\n               setFilterSelect({ id, header: column, value });\n               setValue(value);\n            }}\n            disabled={!column ? true : false}\n            value={value}\n         >\n            {column && columnsValueArr[column] && columnsValueArr[column].map(hd => (\n               <Option key={hd} value={hd}>{hd}</Option>\n            ))}\n         </SelectStyled>\n\n\n         <Tooltip title='Remove Field'>\n            <IconStyled>\n               <Icon\n                  type='delete'\n                  style={{ transform: 'translate(0, -3px)', color: colorType.grey2, fontSize: 12 }}\n                  onClick={() => removeFilterTag(id)}\n               />\n            </IconStyled>\n         </Tooltip>\n\n      </div>\n   );\n};\n\n\nconst SelectStyled = styled(Select)`\n    .ant-select-selection {\n        border-radius: 0;\n    }\n`;\n\n\nconst getColumnsValue = (rows, headers) => {\n   let valueObj = {};\n   headers.forEach(hd => {\n      let valueArr = [];\n      rows.filter(r => r._rowLevel === 1).forEach(row => {\n         valueArr.push(row[hd] || '');\n      });\n      valueArr = [...new Set(valueArr)].filter(e => e);\n      valueArr.sort((a, b) => a > b ? 1 : (b > a ? -1 : 0));\n      if (valueArr.length > 0) valueObj[hd] = valueArr;\n   });\n\n   return valueObj;\n};\n","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\generalComponents\\FormFilterActivityHistory.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\generalComponents\\FormSort.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\generalComponents\\FormGroup.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\generalComponents\\IconTable.js",["364"],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\generalComponents\\InputSearch.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\generalComponents\\PanelCalendar.js",["365","366"],"import { Calendar, Radio } from 'antd';\nimport React from 'react';\n\n\nconst { Group, Button } = Radio;\n\n\nconst PanelCalendar = ({ pickDate }) => {\n\n    return (\n        <div style={{ width: 300 }}>\n            <Calendar\n                fullscreen={false}\n                onSelect={pickDate}\n            />\n        </div>\n    );\n};\n\nexport default PanelCalendar;\n","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\generalComponents\\PanelCalendarDuration.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\generalComponents\\PanelConfirm.js",["367"],"import { Input } from 'antd';\nimport React, { useState } from 'react';\nimport ButtonGroupComp from './ButtonGroupComp';\n\n\n\nconst PanelConfirm = ({ onClickCancel, onClickApply, content }) => {\n\n    const [value, setValue] = useState('');\n\n\n    return (\n        <div style={{\n            width: '100%',\n            height: '100%'\n        }}>\n            <div style={{ padding: 20 }}>\n                {(content === 'Do you want to save a new view template ?' ? (\n                    <div>\n                        <div>Do you want to save a new view template ?</div>\n                        <Input\n                            placeholder='Enter view template name...'\n                            style={{ width: '100%' }}\n                            value={value}\n                            onChange={(e) => setValue(e.target.value)}\n                            style={{\n                                marginBottom: 20,\n                                borderRadius: 0\n                             }}\n                        />\n                    </div>\n\n                ) : content) || 'Are you sure ?'}\n            </div>\n            <div style={{ padding: 20, paddingTop: 0, display: 'flex', flexDirection: 'row-reverse' }}>\n                <ButtonGroupComp\n                    onClickCancel={onClickCancel}\n                    onClickApply={() => onClickApply(value)}\n                />\n            </div>\n\n        </div>\n    );\n};\n\nexport default PanelConfirm;\n","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\generalComponents\\PanelConfirmResetMode.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\generalComponents\\PanelPickNumber.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\generalComponents\\ReorderColumnForm.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\generalComponents\\ViewTemplateSelect.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\PageDataEntrySheet.js",["368","369","370","371","372","373","374"],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageDataEntrySheet\\CellIndex2.js",["375"],"import React, { useContext } from 'react';\nimport styled from 'styled-components';\nimport { Context as CellContext } from '../../contexts/cellContext';\nimport { Context as RowContext } from '../../contexts/rowContext';\nimport { addZero } from '../../utils';\n\n\nconst CellIndex2 = ({ rowData }) => {\n\n    const { state: stateRow, getSheetRows } = useContext(RowContext);\n    const { state: stateCell, setCellActive } = useContext(CellContext);\n\n    const { rowsAll, rowsSelected } = stateRow;\n\n\n\n    const onClickCellIndex = () => {\n        setCellActive(null);\n        const row = rowsAll.find(x => x.id === rowData.id);\n        if (!rowsSelected.find(x => x.id === rowData.id) && rowData._rowLevel === 1) {\n            getSheetRows({\n                ...stateRow,\n                rowsSelected: [...rowsSelected, row],\n                rowsSelectedToMove: []\n            });\n        };\n    };\n\n    return (\n        <Styled onClick={onClickCellIndex}>\n            {rowData._rowLevel === 1 ? addZero(rowsAll.indexOf(rowsAll.find(r => r.id === rowData.id)) + 1) : ''}\n        </Styled>\n    );\n};\n\nexport default CellIndex2;\n\n\n\nconst Styled = styled.div`\n    color: grey;\n    font-size: 12px;\n\n    width: 100%;\n    height: 100%;\n    padding: 5px;\n    padding-right: 8px;\n    text-align: right\n\n`;\n\n","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageDataEntrySheet\\Cell2.js",["376","377"],"import { Checkbox, message } from 'antd';\nimport moment from 'moment';\nimport React, { useContext, useEffect, useRef, useState } from 'react';\nimport styled from 'styled-components';\nimport { colorType, imgLink } from '../../constants';\nimport { Context as CellContext } from '../../contexts/cellContext';\nimport { Context as ProjectContext } from '../../contexts/projectContext';\nimport { Context as RowContext } from '../../contexts/rowContext';\nimport PanelCalendar from '../generalComponents/PanelCalendar';\n\n\n\n\nconst Cell2 = (props) => {\n\n   const {\n      rowData, column, columns, rowIndex, columnIndex, onRightClickCell,\n      setPosition, getCurrentDOMCell\n   } = props;\n\n   let { cellData } = props;\n\n\n   const { state: stateCell, getCellModifiedTemp, setCellActive } = useContext(CellContext);\n   const { state: stateRow, getSheetRows } = useContext(RowContext);\n   const { state: stateProject } = useContext(ProjectContext);\n\n\n   let { rowsAll, rowsSelected, rowsSelectedToMove } = stateRow;\n   const { role, publicSettings } = stateProject.allDataOneSheet;\n   const headerData = publicSettings.headers.find(hd => hd.text === column.key);\n\n   const isLockedColumn = headerData.roleCanEdit.indexOf(role.name) === -1;\n   const isLockedRow = rowData.treeLevel || rowData._rowLevel < 1;\n\n\n   let columnKeyToPutFolderName;\n   if (rowData.treeLevel || rowData._rowLevel < 1) {\n      columnKeyToPutFolderName = columns[1].key;\n   };\n\n\n   const inputRef = useRef();\n   const cellRef = useRef();\n   const panelRef = useRef();\n   const buttonRef = useRef();\n\n   const [inputRender, setInputRender] = useState(false);\n   const [valueInput, setValueInput] = useState({ current: cellData || '', init: cellData || '' });\n\n   const [btnShown, setBtnShown] = useState(false);\n   const [panelData, setPanelData] = useState(false);\n\n\n   const getCellTempId = () => `${rowData['id']}~#&&#~${column.key}`;\n\n   const cellEditDone = (value) => {\n\n      if (rowData._rowLevel === 1) {\n         if (\n            (headerData.type === 'date' && !(moment(value, 'DD/MM/YY').format('DD/MM/YY') === value) && value !== '') ||\n            (headerData.type === 'dropdown' && headerData.valueArray.indexOf(value) === -1 && value !== '')\n         ) {\n            setValueInput({ ...valueInput, current: valueInput.init });\n            message.info('Data input should be in correct format', 1);\n\n         } else if (headerData.type === 'checkbox') {\n            getCellModifiedTemp({ [getCellTempId()]: !value || value === 'unchecked' ? 'unchecked' : 'checked' });\n            let row = rowsAll.find(r => r.id === rowData.id);\n            row[column.key] = value ? 'checked' : 'unchecked';\n\n            getSheetRows({ ...stateRow, rowsAll });\n         } else {\n            setValueInput({ ...valueInput, current: value });\n\n            getCellModifiedTemp({ [getCellTempId()]: value });\n            let row = rowsAll.find(r => r.id === rowData.id);\n            row[column.key] = value;\n\n            getSheetRows({ ...stateRow, rowsAll });\n         };\n      };\n   };\n\n\n   const onDoubleClick = () => {\n      if (isLockedColumn || isLockedRow || headerData.type === 'checkbox') return;\n      setInputRender(true);\n      setBtnShown(false);\n      getCurrentDOMCell(); // double click to activate cell\n   };\n   const onClick = () => {\n      if (rowsSelected.length > 0 || rowsSelectedToMove.length > 0) {\n         getSheetRows({\n            ...stateRow, rowsSelected: [], rowsSelectedToMove: []\n         });\n      };\n      if (isLockedColumn || isLockedRow) return;\n      setBtnShown(true);\n      if (!inputRender) { // single click just highlight cell, not activate\n         setPosition({ cell: cellRef.current.parentElement, rowIndex, columnIndex });\n      };\n   };\n\n\n\n   useEffect(() => {\n      document.addEventListener('click', EventClickToHidePanelAndInput);\n      return () => document.removeEventListener('click', EventClickToHidePanelAndInput);\n   }, []);\n   const EventClickToHidePanelAndInput = (e) => {\n      if (!buttonRef.current && panelRef.current) {\n         setPanelData(false);\n      };\n   };\n\n\n   const onMouseLeave = () => {\n      if (btnShown) {\n         setBtnShown(false);\n      };\n   };\n   const onMouseDown = (e) => {\n      if (isLockedColumn) return;\n      if (e.button === 2) { // check mouse RIGHT CLICK ...\n         onRightClickCell(e, props);\n      };\n   };\n   const pickDataSelect = (value) => {\n      setBtnShown(false);\n      setPanelData(false);\n      setInputRender(false);\n      cellEditDone(value);\n   };\n   const onBlur = () => {\n      cellEditDone(valueInput.current);\n      setBtnShown(false);\n      setPanelData(false);\n      setInputRender(false);\n   };\n   const onChange = (e) => {\n      setValueInput({ ...valueInput, current: e.target.value });\n   };\n\n\n   const [checkBoxValue, setCheckBoxValue] = useState(cellData);\n   const onChangeCheckBox = () => {\n      setCheckBoxValue(!checkBoxValue || checkBoxValue === 'unchecked' ? 'checked' : 'unchecked');\n      cellEditDone(!checkBoxValue || checkBoxValue === 'unchecked' ? 'checked' : 'unchecked');\n   };\n\n\n   useEffect(() => { // after keydown ENTER to show input ...\n      if (\n         !inputRender &&\n         stateCell.cellActive &&\n         stateCell.cellActive.rowIndex === rowIndex &&\n         stateCell.cellActive.columnIndex === columnIndex &&\n         !isLockedColumn && !isLockedRow\n      ) {\n         setInputRender(true);\n      };\n   }, [stateCell.cellActive]);\n\n   useEffect(() => {\n      if (\n         !inputRender &&\n         stateCell.cellAppliedAction &&\n         stateCell.cellAppliedAction.currentDOMCell.rowIndex === rowIndex &&\n         stateCell.cellAppliedAction.currentDOMCell.columnIndex === columnIndex &&\n         !isLockedColumn && !isLockedRow\n      ) {\n         const { e } = stateCell.cellAppliedAction;\n         if (e.key === 'Delete') {\n            cellEditDone('');\n         } else if (e.key === 'v' && e.ctrlKey) {\n            cellEditDone(stateCell.tempCopiedText);\n         };\n      };\n   }, [stateCell.cellAppliedAction]);\n\n   useEffect(() => { // FOCUS right after press ENTER...\n      if (inputRender) inputRef.current.focus();\n   }, [inputRender]);\n\n   useEffect(() => { // Hide Button after pick on PANEL (setBtnShown fasle in pickDataSelect doesn't work)\n      setBtnShown(false);\n   }, [valueInput]);\n\n   const onKeyDown = (e) => { // ENTER to hide input after finishing typing ...\n      if (\n         e.key === 'Enter' &&\n         inputRender &&\n         stateCell.cellActive &&\n         stateCell.cellActive.rowIndex === rowIndex &&\n         stateCell.cellActive.columnIndex === columnIndex &&\n         !isLockedColumn\n      ) {\n         inputRef.current.blur();\n         setCellActive(null);\n      };\n   };\n\n\n   return (\n      <>\n         <div\n            ref={cellRef}\n            onDoubleClick={onDoubleClick}\n            onClick={onClick}\n            onMouseLeave={onMouseLeave}\n            onMouseDown={onMouseDown}\n            style={{\n               width: '100%', height: '100%', padding: 5,\n               position: 'relative',\n               color: 'black', background: 'transparent'\n            }}\n         >\n            {headerData.type !== 'checkbox' ? (\n               <>\n                  {inputRender ? (\n                     <input\n                        value={valueInput.current}\n                        onChange={onChange}\n                        onBlur={onBlur}\n                        onKeyDown={onKeyDown}\n                        ref={inputRef}\n                        style={{ outline: 'none', border: 'none', background: 'transparent', width: column.width - 30 }}\n                     />\n\n                  ) : (\n                     <div style={{\n                        textOverflow: 'ellipsis',\n                        overflow: 'hidden',\n                        whiteSpace: 'nowrap',\n                        width: column.width - 30,\n                     }}>\n                        {\n                           (columnKeyToPutFolderName && columnKeyToPutFolderName === column.key && rowData.title) ||\n                           stateCell.cellsModifiedTemp[getCellTempId()] ||  // there is modified data\n                           (getCellTempId() in stateCell.cellsModifiedTemp && ' ') || // there is modified data === empty, MUST BE ' ', not ''\n                           cellData // there is no modification\n                        }\n                     </div>\n                  )}\n               </>\n            ) : (\n               <>\n                  {rowData._rowLevel && rowData._rowLevel === 1 ? (\n                     <CheckboxStyled\n                        onChange={onChangeCheckBox}\n                        checked={checkBoxValue === 'checked' ? true : false}\n                     />\n                  ) : null}\n               </>\n            )}\n\n\n\n\n            {btnShown && headerData.type !== 'checkbox' && (\n               <div style={{\n                  cursor: 'pointer',\n                  position: 'absolute',\n                  right: 4,\n                  top: 5,\n                  height: 17,\n                  width: 17,\n                  backgroundImage: headerData.type === 'date' ? `url(${imgLink.btnDate})`\n                     : headerData.type === 'dropdown' ? `url(${imgLink.btnText})`\n                        : null,\n                  backgroundSize: 17\n               }}\n                  onMouseDown={(e) => {\n                     e.stopPropagation();\n                     setPanelData(!panelData);\n                  }}\n                  ref={buttonRef}\n               />\n            )}\n\n\n            {panelData && (\n               <div\n                  style={{\n                     position: 'absolute',\n                     background: 'white',\n                     top: 30,\n                     left: 0,\n                     minWidth: column.width,\n                     zIndex: 999,\n                     padding: '3px 5px 3px 7px',\n                     boxShadow: 'rgba(0, 0, 0, 0.09) 0px 2px 1px, rgba(0, 0, 0, 0.09) 0px 4px 2px, rgba(0, 0, 0, 0.09) 0px 8px 4px, rgba(0, 0, 0, 0.09) 0px 16px 8px, rgba(0, 0, 0, 0.09) 0px 32px 16px',\n                     maxHeight: 400,\n                     overflowY: 'scroll'\n                  }}\n                  ref={panelRef}\n               >\n                  {headerData.type === 'date' ? (\n                     <PanelCalendar pickDate={(item) => pickDataSelect(moment(item).format('DD/MM/YY'))} />\n                  ) : getColumnsValue(rowsAll, column.key, headerData).map(item => {\n                     return (\n                        <SelectStyled\n                           key={item}\n                           onMouseDown={(e) => {\n                              e.stopPropagation();\n                              pickDataSelect(item);\n                           }}\n                        >{item}</SelectStyled>\n                     );\n                  })}\n               </div>\n            )}\n\n         </div>\n      </>\n   );\n};\n\nexport default Cell2;\n\nconst SelectStyled = styled.div`\n   padding: 4px;\n   &:hover {\n      background-color: ${colorType.grey4};\n      cursor: pointer;\n   };\n   transition: 0.2s;\n`;\n\nconst CheckboxStyled = styled(Checkbox)`\n   \n   .ant-checkbox-inner {\n      border-radius: 0;\n   };\n`;\n\n\n\n\nconst getColumnsValue = (rows, headerKey, headerData) => {\n\n   if (headerData.type === 'dropdown') return headerData.valueArray;\n\n   let valueArr = [];\n   rows.filter(r => r._rowLevel === 1).forEach(row => {\n      valueArr.push(row[headerKey]);\n   });\n   valueArr = [...new Set(valueArr)].filter(e => e);\n   valueArr.sort((a, b) => a > b ? 1 : (b > a ? -1 : 0));\n\n   return valueArr;\n};\n\n\n\n\n\n","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageDataEntrySheet\\ExcelExport2.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageDataEntrySheet\\FormDrawingTypeOrder2.js",["378"],"import { Icon, Input, Modal, Tooltip } from 'antd';\nimport React, { useContext, useState } from 'react';\nimport SortableTree from 'react-sortable-tree';\nimport 'react-sortable-tree/style.css';\nimport styled from 'styled-components';\nimport { colorType } from '../../constants';\nimport { Context as ProjectContext } from '../../contexts/projectContext';\nimport { Context as RowContext } from '../../contexts/rowContext';\nimport { mongoObjectId } from '../../utils';\nimport ButtonGroupComp from '../generalComponents/ButtonGroupComp';\n\n\n\n\nconst FormDrawingTypeOrder2 = ({ onClickCancelModal, applyFolderOrganize }) => {\n\n    const { state: stateProject } = useContext(ProjectContext);\n    const { state: stateRow } = useContext(RowContext);\n\n    const { rowsAll } = stateRow;\n\n    const { projectName, projectId, role } = stateProject.allDataOneSheet;\n    const { drawingTypeTree, viewTemplateNodeId } = stateRow;\n\n\n    const [input, setInput] = useState(addProjectHeaderToTree(drawingTypeTree, projectName, projectId));\n\n    const [modalTitle, setModalTitle] = useState(null);\n    const [itemNode, setItemNode] = useState(null);\n    const [mergeList, setMergeList] = useState([]);\n\n    const addFolderBelow = (node) => {\n        node.children.push({\n            title: 'New Folder',\n            id: mongoObjectId(),\n            parentId: node.id,\n            treeLevel: node.treeLevel + 1,\n            expanded: true,\n            children: []\n        });\n        setInput(addProjectHeaderToTree(flattenAllTreeChildNode1(input[0].children), projectName, projectId));\n\n    };\n    const deleteFolder = (node) => {\n        setItemNode(node);\n        setModalTitle('Delete Folder');\n    };\n    const editFolderName = (node) => {\n        setItemNode(node);\n        setModalTitle('Edit Folder Name');\n    };\n    const mergeChildDrawings = (node) => {\n        setItemNode(node);\n        setModalTitle('Merge All Child Drawings');\n    };\n    const confirmAction = (modalTitle, text) => {\n        if (modalTitle === 'Delete Folder') {\n            let idsToDelete = flattenAllTreeChildNode1(itemNode.children).map(x => x.id);\n            idsToDelete.push(itemNode.id);\n\n            let currentNodeFlatten = flattenAllTreeChildNode1(input[0].children);\n            let outputArray = currentNodeFlatten.filter(x => idsToDelete.indexOf(x.id) === -1);\n            setInput(addProjectHeaderToTree(outputArray, projectName, projectId));\n\n        } else if (modalTitle === 'Merge All Child Drawings') {\n            let idsToMerge = flattenAllTreeChildNode1(itemNode.children).map(x => x.id);\n            let mergeListUpdate = [...mergeList];\n            idsToMerge.forEach(id => {\n                if (mergeList.indexOf(id) !== -1) {\n                    mergeListUpdate = mergeListUpdate.filter(x => x !== id);\n                };\n            });\n\n            setMergeList([...mergeListUpdate, itemNode.id]);\n\n            let currentNodeFlatten = flattenAllTreeChildNode1(input[0].children);\n            let outputArray = currentNodeFlatten.filter(x => idsToMerge.indexOf(x.id) === -1);\n\n            setInput(addProjectHeaderToTree(outputArray, projectName, projectId));\n\n        } else if (modalTitle === 'Edit Folder Name') {\n            itemNode.title = text;\n            setInput(addProjectHeaderToTree(flattenAllTreeChildNode1(input[0].children), projectName, projectId));\n        };\n\n        setModalTitle(null);\n    };\n\n    const treeFlatten = flattenAllTreeChildNode1(input);\n\n    let eyeShownInit;\n    if (viewTemplateNodeId) {\n        const nodeTreeFound = treeFlatten.find(x => x.id === viewTemplateNodeId);\n        if (nodeTreeFound) {\n            const br = getTreeFlattenOfNodeInArray(treeFlatten, nodeTreeFound);\n            eyeShownInit = br.map(x => x.id);\n        };\n    };\n    const [iconBtnEyeShownArr, setIconBtnEyeShownArr] = useState(eyeShownInit || []);\n    const [nodeIsolated, setNodeIsolated] = useState(viewTemplateNodeId || null);\n    const isolateView = (node) => {\n        setNodeIsolated(node.id);\n        const nodeFound = treeFlatten.find(x => x.id === node.id);\n        const branch = getTreeFlattenOfNodeInArray(treeFlatten, nodeFound);\n        setIconBtnEyeShownArr(branch.map(x => x.id));\n    };\n\n    return (\n        <Container>\n            <PanelStyled>\n                <SortableTreeStyled\n                    treeData={input}\n                    onChange={treeData => setInput(treeData)}\n                    canDrag={({ node }) => {\n                        if (node.treeLevel === 0) return false;\n                        if (!role.canEditParent) return false;\n                        return true;\n                    }}\n                    canDrop={({ prevParent, nextParent, node }) => {\n                        if (node.treeLevel === 0 || !nextParent || !prevParent ||\n                            (nextParent && nextParent.treeLevel !== node.treeLevel - 1)\n                        ) {\n                            return false;\n                        };\n                        return true;\n                    }}\n                    onMoveNode={({ nextParentNode, node }) => {\n                        updateChildrenNode([node], nextParentNode.treeLevel + 1 - node.treeLevel);\n                    }}\n                    isVirtualized={false}\n\n                    generateNodeProps={({ node }) => {\n\n                        const isEyeShownColor = iconBtnEyeShownArr.indexOf(node.id) !== -1 ? 'black' : '#DCDCDC';\n                        const isEyeShownType = iconBtnEyeShownArr.indexOf(node.id) !== -1 ? 'eye' : 'eye-invisible';\n\n                        return ({\n                            className: 'parent-tags',\n                            buttons:\n                                node.treeLevel === 0 ? [\n                                    <IconBtn type='plus' onClick={() => addFolderBelow(node)} />,\n                                    node.children.length > 0 && <IconBtn type='shrink' onClick={() => mergeChildDrawings(node)} />,\n                                    <IconBtn type={isEyeShownType} onClick={() => isolateView(node)} color={isEyeShownColor} />\n\n                                ] : [\n                                    <IconBtn type='plus' onClick={() => addFolderBelow(node)} />,\n                                    <IconBtn type='edit' onClick={() => editFolderName(node)} />,\n                                    <IconBtn type='delete' onClick={() => deleteFolder(node)} />,\n                                    node.children.length > 0 && <IconBtn type='shrink' onClick={() => mergeChildDrawings(node)} />,\n                                    <IconBtn type={isEyeShownType} onClick={() => isolateView(node)} color={isEyeShownColor} />\n                                ]\n                        });\n                    }}\n                />\n            </PanelStyled>\n\n            <div style={{ padding: 20, display: 'flex', flexDirection: 'row-reverse' }}>\n                <ButtonGroupComp\n                    onClickCancel={onClickCancelModal}\n                    onClickApply={() => applyFolderOrganize(input[0].children, mergeList, nodeIsolated)} // remove projectName item before apply...\n                />\n            </div>\n\n\n            {modalTitle && (\n                <ModalStyledSetting\n                    title={modalTitle}\n                    visible={modalTitle !== null ? true : false}\n                    footer={null}\n                    onCancel={() => setModalTitle(null)}\n                    destroyOnClose={true}\n                    centered={true}\n                    width={window.innerWidth * 0.6}\n                >\n                    <ConfirmOrEditNameModal\n                        modalTitle={modalTitle}\n                        confirmAction={confirmAction}\n                        itemNode={itemNode}\n                        input={input}\n                        rowsAll={rowsAll}\n                    />\n                </ModalStyledSetting>\n            )}\n\n        </Container>\n    );\n};\n\nexport default FormDrawingTypeOrder2;\n\n\nconst SortableTreeStyled = styled(SortableTree)`\n   .rst__node {\n      height: 45px !important;\n   }\n   .rst__rowContents {\n      min-width: fit-content;\n      background-color: transparent !important;\n   }\n`;\nconst IconStyle = styled(Icon)`\n   font-size: 14px;\n   margin: 2px;\n   padding: 4px;\n   &:hover {\n      background-color: ${colorType.grey0};\n   };\n`;\nconst ModalStyledSetting = styled(Modal)`\n    .ant-modal-content {\n        border-radius: 0;\n    }\n   .ant-modal-close {\n      display: none;\n   }\n   .ant-modal-header {\n      padding: 10px;\n   }\n   .ant-modal-title {\n        padding-left: 10px;\n        font-size: 20px;\n        font-weight: bold;\n   }\n   .ant-modal-body {\n      padding: 0;\n      display: flex;\n      justify-content: center;\n   }\n`;\nconst Container = styled.div`\n   height: ${`${window.innerHeight * 0.8}` + 'px'};\n   width: 100%;\n   display: flex;\n   flex-direction: column;\n`;\nconst PanelStyled = styled.div`\n   width: 100%;\n   float: right;\n   overflow-x: hidden;\n   border-bottom: 1px solid ${colorType.grey4};\n`;\nconst IconBtn = ({ type, onClick, color }) => {\n    const text = type === 'plus' ? 'Add Sub Folder'\n        : type === 'delete' ? 'Delete Folder'\n            : type === 'edit' ? 'Edit Name'\n                : type === 'eye' ? 'Isolate View'\n                    : type === 'eye-invisible' ? 'Isolate View'\n                        : 'Merge All Sub Folders'\n\n    return (\n        <Tooltip title={text}>\n            <IconStyle type={type} onClick={onClick} style={{ color: color || 'black' }} />\n        </Tooltip>\n    );\n};\n\n\nconst ConfirmOrEditNameModal = ({ modalTitle, confirmAction, itemNode, input, rowsAll }) => {\n\n    let dwgsToWarn = [];\n    if (modalTitle === 'Delete Folder') {\n        const currentTree = flattenAllTreeChildNode1(input[0].children);\n        const currentTreeNode = currentTree.find(x => x.id === itemNode.id);\n        const nodeArray = getTreeFlattenOfNodeInArray(currentTree, currentTreeNode);\n        nodeArray.forEach(nd => {\n            dwgsToWarn = [...dwgsToWarn, ...rowsAll.filter(x => x._parentRow === nd.id)];\n        });\n    };\n\n\n    const [value, setValue] = useState(null);\n    const onClickApplyModal = () => {\n        if (modalTitle === 'Delete Folder') {\n            confirmAction(modalTitle);\n        } else if (modalTitle === 'Edit Folder Name') {\n            confirmAction(modalTitle, value);\n        } else if (modalTitle === 'Merge All Child Drawings') {\n            confirmAction(modalTitle);\n        };\n    };\n    return (\n        <div style={{ padding: 20, width: '100%', maxHeight: window.innerHeight * 0.7 }}>\n            {modalTitle === 'Delete Folder' ? (\n                <div>\n                    <div>Are you sure to delete the folder <span style={{ fontWeight: 'bold' }}>{itemNode.title}</span>?</div>\n                    <div>All the <span style={{ fontWeight: 'bold' }}>{dwgsToWarn.length}</span> following drawings will be deleted accordingly</div>\n                </div>\n            ) : modalTitle === 'Merge All Child Drawings' ? (\n                <div>Are you sure to delete all sub folders and retains all drawings</div>\n            ) : (\n                <Input\n                    style={{ width: '100%' }}\n                    value={value || itemNode.title}\n                    onChange={(e) => setValue(e.target.value)}\n                />\n            )}\n\n            <div style={{ padding: 20, display: 'flex', flexDirection: 'row-reverse' }}>\n                <ButtonGroupComp\n                    onClickCancel={() => { }}\n                    onClickApply={onClickApplyModal}\n                />\n            </div>\n        </div>\n    );\n};\n\n\n\nexport const flattenAllTreeChildNode1 = (root) => {\n    let temp = [];\n    let queue = [...root];\n    while (queue.length > 0) {\n        let node = queue.shift();\n        if (node.children) {\n            let childNode = [];\n            node.children.forEach(nd => {\n                childNode.push({ ...nd, parentId: node.id });\n            });\n            queue = [...queue, ...childNode];\n            let nodeObj = { ...node };\n            delete nodeObj.children;\n            temp.push(nodeObj);\n        } else {\n            let nodeObj = { ...node };\n            delete nodeObj.children;\n            temp.push(nodeObj);\n        };\n    };\n    return temp;\n};\nexport const convertFlattenArraytoTree1 = (list) => {\n    let map = {}, node, roots = [], i;\n    for (i = 0; i < list.length; i += 1) {\n        map[list[i].id] = i;\n        if (list[i]._rowLevel !== 1) {\n            list[i].children = list[i].children || [];\n        };\n    };\n\n    let arrayOfTreeLevel = [];\n    list.forEach(tr => {\n        arrayOfTreeLevel.push(tr.treeLevel);\n    });\n    const treeLevelOfTopTree = Math.min(...arrayOfTreeLevel);\n\n    for (i = 0; i < list.length; i++) {\n        node = list[i];\n        if (node.treeLevel > treeLevelOfTopTree) {\n            list[map[node.parentId]].children.push(node);\n        } else {\n            roots.push(node);\n        };\n    };\n    return roots;\n};\nconst addProjectHeaderToTree = (tree, projectName, projectId) => {\n    return [{\n        title: projectName,\n        id: projectId,\n        treeLevel: 0,\n        expanded: true,\n        children: convertFlattenArraytoTree1(tree.map(x => ({ ...x })))\n    }];\n};\nconst updateChildrenNode = (arr, n) => {\n    arr.forEach(i => {\n        i.treeLevel = i.treeLevel + n;\n        if (i.children.length > 0) {\n            updateChildrenNode(i.children, n);\n        };\n    });\n};\nconst updateChildrenNodeTreeLevel = (arr) => {\n    arr.forEach(i => {\n        let childrenArr = i.children;\n        if (childrenArr && childrenArr.length > 0) {\n            childrenArr.forEach(ch => {\n                ch.treeLevel = i.treeLevel + 1;\n            });\n            updateChildrenNodeTreeLevel(childrenArr);\n        };\n    });\n};\nconst getListOfBranchesTree = (inputArr) => {\n    const arr = inputArr.map(x => ({ ...x }));\n    arr.sort((a, b) => { return b.treeLevel - a.treeLevel });\n\n    const parentArrIds = [];\n    arr.forEach(x => {\n        let item = arr.find(fld => fld.id === x.parentId);\n        if (item) {\n            item.children = [...item.children || [], x];\n        } else {\n            parentArrIds.push(x.id);\n        };\n    });\n    return arr.filter(x => parentArrIds.indexOf(x.id) !== -1);\n};\nexport const getTreeFlattenOfNodeInArray = (treeArray, node) => {\n    let obj = { ...node };\n    let arrayTree = treeArray.map(x => ({ ...x })).filter(x => x.treeLevel > obj.treeLevel);\n    arrayTree = [...arrayTree, obj];\n    const treeOfFound = getListOfBranchesTree(arrayTree).find(x => x.id === obj.id);\n    return flattenAllTreeChildNode1([treeOfFound]);\n};\nexport const compareCurrentTreeAndTreeFromDB = (treeFromCurrentInit, treeFromCurrentInput, treeDeletedFromCurrent, treeFromDBInput, treeDeletedFromDB) => {\n\n    let treeFromCurrent = treeFromCurrentInput.map(i => ({ ...i }));\n    let treeFromDB = treeFromDBInput.map(i => ({ ...i }));\n\n    // check if need to save tree or not\n    if (treeFromCurrent.length === treeFromCurrentInit.length) {\n        const stringTreeCurrent = treeFromCurrent.reduce((acc, current) => acc + `${current.id}-${current.parentId}-${current.title}-`, '');\n        const stringTreeInit = treeFromCurrentInit.reduce((acc, current) => acc + `${current.id}-${current.parentId}-${current.title}-`, '');\n        if (stringTreeCurrent === stringTreeInit) {\n            return {\n                needToSaveTree: false,\n                treeDBModifiedToSave: treeFromDB,\n                nodesToAddToDB: [],\n                nodesToRemoveFromDB: [],\n            };\n        };\n    };\n\n    let treeCurrentModified = removeNodesDeletedByOtherUsersFromTreeCurrent(treeFromCurrent, treeDeletedFromDB);\n\n    let { nodesToRemoveFromDB, treeFromDB: treeFromDBModified, nodesIdNoNeedToAddNew } = removeNodesDeletedByCurrentUserFromTreeDB(treeFromDB, treeDeletedFromCurrent, treeCurrentModified);\n\n    let { nodesToAddToDB, treeDBModifiedToSave: treeDBModified } = haveChangedNodesInDBAndNewNodesInCurrentBackToDB(treeFromDBModified, treeCurrentModified, treeFromCurrentInit, nodesIdNoNeedToAddNew);\n\n\n\n    // reorder item follow new order...\n    let treeDBModifiedToSave = [];\n    treeFromCurrentInput.forEach(item => {\n        const found = treeDBModified.find(x => x.id === item.id);\n        if (found) {\n            treeDBModifiedToSave.push(found);\n            treeDBModified = treeDBModified.filter(x => x.id !== found.id);\n        };\n    });\n    treeDBModifiedToSave = [...treeDBModifiedToSave, ...treeDBModified].sort((a, b) => { return a.treeLevel - b.treeLevel });\n\n    return {\n        needToSaveTree: true,\n        treeDBModifiedToSave,\n        nodesToAddToDB,\n        nodesToRemoveFromDB,\n    };\n};\nconst removeNodesDeletedByOtherUsersFromTreeCurrent = (treeCurrent, treeDeletedFromDB) => {\n    let idsToCheckCurrent = [];\n    treeDeletedFromDB.forEach(item => {\n        const found = treeCurrent.find(x => x.id === item.id);\n        if (found) {\n            idsToCheckCurrent = [\n                ...idsToCheckCurrent,\n                ...getTreeFlattenOfNodeInArray(treeCurrent, found).map(x => x.id)\n            ];\n        };\n    });\n    idsToCheckCurrent = [...new Set(idsToCheckCurrent)];\n\n    const nodesArray = treeCurrent.filter(x => idsToCheckCurrent.indexOf(x.id) !== -1);\n\n    const branchTrees = getListOfBranchesTree(nodesArray);\n\n    const newIdObj = {};\n    treeDeletedFromDB.forEach(item => {\n        newIdObj[item.id] = mongoObjectId();\n    });\n\n    branchTrees.forEach(tree => {\n        let flattenArray = flattenAllTreeChildNode1([tree]);\n        let isAbleToDelete = true;\n\n        flattenArray.forEach(item => {\n            if (!treeDeletedFromDB.find(x => x.id === item.id)) isAbleToDelete = false;\n        });\n\n        if (isAbleToDelete) {\n            treeCurrent = treeCurrent.filter(x => !flattenArray.find(item => item.id === x.id));\n        } else {\n            const arrayToModify = treeCurrent.filter(item => flattenArray.find(x => x.id === item.id));\n            treeDeletedFromDB.forEach(item => {\n                const found = arrayToModify.find(x => x.id === item.id);\n                if (found) {\n                    found.id = newIdObj[item.id];\n                };\n                const childrenFound = arrayToModify.filter(x => x.parentId === item.id);\n                if (childrenFound.length > 0) {\n                    childrenFound.forEach(child => {\n                        child.parentId = newIdObj[item.id];\n                    });\n                };\n            });\n        };\n    });\n    return treeCurrent;\n};\nconst removeNodesDeletedByCurrentUserFromTreeDB = (treeFromDB, treeDeletedFromCurrent, treeCurrent) => {\n    let listIdToRemoveFromDB = [];\n    treeDeletedFromCurrent.forEach(item => {\n        const found = treeFromDB.find(x => x.id === item.id);\n        if (found) {\n            listIdToRemoveFromDB = [\n                ...listIdToRemoveFromDB,\n                ...getTreeFlattenOfNodeInArray(treeFromDB, found).map(x => x.id)\n            ];\n        };\n    });\n\n    const nodesToRemoveFromDB = treeFromDB.filter(x => {\n        return listIdToRemoveFromDB.indexOf(x.id) !== -1 && !treeCurrent.find(item => item.id === x.id);\n    });\n    const nodesIdNoNeedToAddNew = listIdToRemoveFromDB.filter(id => treeCurrent.find(item => item.id === id))\n\n    treeFromDB = treeFromDB.filter(x => listIdToRemoveFromDB.indexOf(x.id) === -1);\n\n    return {\n        nodesToRemoveFromDB,\n        nodesIdNoNeedToAddNew,\n        treeFromDB\n    };\n};\nconst haveChangedNodesInDBAndNewNodesInCurrentBackToDB = (treeFromDB, treeCurrent, treeCurrentInit, nodesIdNoNeedToAddNew) => {\n    let nodesToAddToDB = [];\n    treeCurrent.forEach(item => {\n        if (!treeFromDB.find(x => x.id === item.id)) {\n            nodesToAddToDB.push(item);\n        };\n    });\n\n    let dwgTypeExistedInDBButLevelOrParentChangesArr = [];\n    let childrenIdsToWithdrawFromDB = [];\n    treeFromDB.forEach(item => {\n        const found = treeCurrent.find(r => r.id === item.id);\n        const foundInit = treeCurrentInit.find(r => r.id === item.id);\n        if (found && foundInit) {\n            if (found.title !== foundInit.title) item.title = found.title;\n\n            if (found.parentId !== item.parentId && found.parentId !== foundInit.parentId) {\n                dwgTypeExistedInDBButLevelOrParentChangesArr.push({ ...found, title: item.title });\n\n                const arrIdsChildrenInDB = getTreeFlattenOfNodeInArray(treeFromDB, item).filter((x, i) => i !== 0).map(x => x.id);\n\n                childrenIdsToWithdrawFromDB = [...childrenIdsToWithdrawFromDB, ...arrIdsChildrenInDB];\n            };\n        };\n    });\n    childrenIdsToWithdrawFromDB = [...new Set(childrenIdsToWithdrawFromDB)];\n\n    const dwgTypeToWithdrawFromDB = treeFromDB.filter(x => childrenIdsToWithdrawFromDB.indexOf(x.id) !== -1);\n\n    treeFromDB = treeFromDB.filter(item => {\n        return childrenIdsToWithdrawFromDB.indexOf(item.id) === -1 && !dwgTypeExistedInDBButLevelOrParentChangesArr.find(x => x.id === item.id)\n    });\n\n\n    const listBranchesTreeToPushToDB = getListOfBranchesTree([\n        ...nodesToAddToDB,\n        ...dwgTypeExistedInDBButLevelOrParentChangesArr,\n        ...dwgTypeToWithdrawFromDB\n    ]);\n\n    listBranchesTreeToPushToDB.forEach(itemTree => {\n        treeFromDB = [...treeFromDB, ...flattenAllTreeChildNode1([itemTree])];\n    });\n\n    const treeDBModifiedToSave = convertFlattenArraytoTree1(treeFromDB);\n    updateChildrenNodeTreeLevel(treeDBModifiedToSave);\n\n    return {\n        nodesToAddToDB: nodesToAddToDB.filter(item => nodesIdNoNeedToAddNew.indexOf(item.id) === -1),\n        treeDBModifiedToSave: flattenAllTreeChildNode1(treeDBModifiedToSave)\n    };\n};\n\n\n\n\n\n\n\n","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageDataEntrySheet\\PanelFunction2.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageDataEntrySheet\\TableActivityHistory2.js",["379","380","381","382","383","384","385","386"],"import { Modal } from 'antd';\nimport moment from 'moment';\nimport React, { useContext, useEffect, useState } from 'react';\nimport BaseTable, { AutoResizer } from 'react-base-table';\nimport styled from 'styled-components';\nimport { colorType } from '../../constants';\nimport { Context as ProjectContext } from '../../contexts/projectContext';\nimport { Context as RowContext } from '../../contexts/rowContext';\nimport { convertHistoryData, mongoObjectId } from '../../utils';\nimport ButtonStyle from '../generalComponents/ButtonStyle';\nimport FormFilterActivityHistory from '../generalComponents/FormFilterActivityHistory';\nimport IconTable from '../generalComponents/IconTable';\nimport PanelCalendarDuration from '../generalComponents/PanelCalendarDuration';\n\n\n\n\n\nconst Table = (props) => {\n    return (\n        <AutoResizer>\n            {({ width, height }) => {\n                return (\n                    <BaseTable\n                        {...props}\n                        width={width}\n                        height={height}\n                    />\n                );\n            }}\n        </AutoResizer>\n    );\n};\n\nconst panelWidth = window.innerWidth * 0.8;\nconst panelHeight = window.innerHeight * 0.8;\n\nconst TableActivityHistory2 = ({ cellsHistoryInCurrentSheet }) => {\n\n    const { state: stateProject } = useContext(ProjectContext);\n    const { state: stateRow } = useContext(RowContext);\n    const { allDataOneSheet: { publicSettings: { activityRecorded } } } = stateProject;\n\n\n    const { projectId, token } = stateProject.allDataOneSheet;\n    const { headers } = stateProject.allDataOneSheet.publicSettings;\n\n    const [historyAll, setHistoryAll] = useState(null);\n    const [historyAllInit, setHistoryAllInit] = useState(null);\n\n    const headersShown = [\n        'Column',\n        'Value',\n        'User',\n        'Created At',\n        'Action'\n    ];\n\n\n    // useEffect(() => {\n    //    const fetchRowsAndCellHistory = async () => {\n    //       try {\n    //          const res = await Axios.get(`${SERVER_URL}/cell/history/`, { params: { token, projectId } });\n\n    //          let cellsOutput = [];\n    //          convertHistoryData(res.data).forEach(cell => {\n    //             const row = stateRow.rowsAll.find(r => r.id === cell.row);\n    //             if (row) cellsOutput.push({\n    //                'Column': headers.find(hd => hd.key === cell.headerKey).text,\n    //                'Value': cell.text || '',\n    //                'User': cell.email || 'n/a',\n    //                'Created At': moment(cell.createdAt).format('DD/MM/YY - HH:mm'),\n    //                'Action': 'Edit Cell',\n    //                id: mongoObjectId()\n    //             });\n    //          });\n    //          const activityRecordedData = activityRecorded.map(r => {\n    //             return {\n    //                'Column': undefined,\n    //                'Value': undefined,\n    //                'User': r.email || 'n/a',\n    //                'Created At': moment(r.createdAt).format('DD/MM/YY - HH:mm'),\n    //                'Action': r.action,\n    //                id: mongoObjectId()\n    //             };\n    //          });\n    //          let outputArr = [...cellsOutput, ...activityRecordedData];\n\n    //          setHistoryAll(sortDataBeforePrint(outputArr));\n    //          setHistoryAllInit(sortDataBeforePrint(outputArr));\n\n    //       } catch (err) {\n    //          console.log(err);\n    //       };\n    //    };\n    //    fetchRowsAndCellHistory();\n    // }, []);\n\n\n\n    useEffect(() => {\n        let cellsOutput = [];\n        convertHistoryData(cellsHistoryInCurrentSheet).forEach(cell => {\n            const row = stateRow.rowsAll.find(r => r.id === cell.row);\n            if (row) cellsOutput.push({\n                'Column': headers.find(hd => hd.key === cell.headerKey).text,\n                'Value': cell.text || '',\n                'User': cell.email || 'n/a',\n                'Created At': moment(cell.createdAt).format('DD/MM/YY - HH:mm'),\n                'Action': 'Edit Cell',\n                id: mongoObjectId()\n            });\n        });\n        const activityRecordedData = activityRecorded.map(r => {\n            return {\n                'Column': undefined,\n                'Value': undefined,\n                'User': r.email || 'n/a',\n                'Created At': moment(r.createdAt).format('DD/MM/YY - HH:mm'),\n                'Action': r.action,\n                id: mongoObjectId()\n            };\n        });\n        let outputArr = [...cellsOutput, ...activityRecordedData];\n\n        setHistoryAll(sortDataBeforePrint(outputArr));\n        setHistoryAllInit(sortDataBeforePrint(outputArr));\n    }, []);\n\n\n\n\n\n    const [modalFilter, setModalFilter] = useState(false);\n\n    const applyFilter = (data) => {\n        setHistoryAll(data);\n        setModalFilter(false);\n    };\n\n    const sortDataBeforePrint = (data) => {\n        data.sort((b, a) => {\n            let aa = moment(a['Created At'], 'DD/MM/YY - HH:mm').toDate();\n            let bb = moment(b['Created At'], 'DD/MM/YY - HH:mm').toDate();\n            return aa > bb ? 1 : bb > aa ? -1 : 0\n        });\n\n        data.forEach((dt, i) => {\n            dt.index = i + 1;\n        });\n\n        return data;\n    };\n\n\n    const [dateRange, setDateRange] = useState(null);\n    const onClick = () => {\n        if (!dateRange) return;\n        let newData = historyAll.filter(r => {\n            let xxx = moment(r['Created At'], 'DD/MM/YY - HH:mm').toDate();\n            return xxx <= dateRange[1] && xxx >= dateRange[0];\n        });\n        setHistoryAll(sortDataBeforePrint(newData));\n    };\n    const resetDataFilter = () => {\n        setHistoryAll(sortDataBeforePrint(historyAllInit));\n    };\n\n    const checkDataWithinDays = (nos) => {\n        const addDays = (date, days) => {\n            let result = new Date(date);\n            result.setDate(result.getDate() + days);\n            return result;\n        };\n\n        let today = new Date();\n        let dateBefore = addDays(today, nos);\n        let newData = historyAllInit.filter(r => {\n            let xxx = moment(r['Created At'], 'DD/MM/YY - HH:mm').toDate();\n            return xxx <= today && xxx >= dateBefore;\n        });\n        setHistoryAll(sortDataBeforePrint(newData));\n    };\n\n\n    return (\n        <>\n            {historyAll && (\n                <div style={{\n                    height: panelHeight,\n                    background: 'white',\n                    padding: 10,\n                    display: 'flex',\n                    justifyContent: 'center',\n                    flexDirection: 'column',\n                }}>\n                    <div style={{ paddingBottom: 10, fontSize: 20, fontWeight: 'bold', textAlign: 'center' }}>ACTIVITY HISTORY</div>\n                    <div style={{ display: 'flex', marginBottom: 10 }}>\n                        <PanelCalendarDuration pickRangeDate={(e) => setDateRange(e)} />\n                        <ButtonStyle\n                            onClick={onClick}\n                            marginLeft={5}\n                            name='Check History'\n                        />\n                    </div>\n                    <div style={{ display: 'flex', marginBottom: 10 }}>\n                        <div style={{ marginRight: 10, display: 'flex' }}>\n                            <IconTable type='filter' onClick={() => setModalFilter(true)} />\n                            <IconTable type='swap' onClick={resetDataFilter} />\n                        </div>\n\n                        <ButtonStyle\n                            onClick={() => { }}\n                            marginRight={5}\n                            name='Today'\n                            onClick={() => checkDataWithinDays(-1)}\n                        />\n                        <ButtonStyle\n                            onClick={() => { }}\n                            marginRight={5}\n                            name='Last 3 Days'\n                            onClick={() => checkDataWithinDays(-3)}\n                        />\n\n                        <ButtonStyle\n                            onClick={() => { }}\n                            marginRight={5}\n                            name='Last 7 Days'\n                            onClick={() => checkDataWithinDays(-7)}\n                        />\n                        <ButtonStyle\n                            onClick={() => { }}\n                            marginRight={5}\n                            name='Last 14 Days'\n                            onClick={() => checkDataWithinDays(-14)}\n                        />\n                        <ButtonStyle\n                            onClick={() => { }}\n                            marginRight={5}\n                            name='This Month'\n                            onClick={() => checkDataWithinDays(-31)}\n                        />\n                    </div>\n\n                    <div style={{\n                        width: panelWidth,\n                        height: '100%',\n                        margin: '0 auto',\n                        textAlign: 'center'\n                    }}>\n                        <TableStyled\n                            fixed\n                            columns={generateColumns(headersShown)}\n                            data={historyAll}\n                            rowHeight={28}\n                        />\n                    </div>\n                </div>\n            )}\n\n            {modalFilter && (\n                <ModalStyledSetting\n                    title='Filter Data Activity History'\n                    visible={modalFilter}\n                    footer={null}\n                    onCancel={() => {\n                        setModalFilter(false);\n                    }}\n                    destroyOnClose={true}\n                    centered={true}\n                >\n                    <FormFilterActivityHistory\n                        applyFilter={applyFilter}\n                        onClickCancelModal={() => setModalFilter(false)}\n                        rowsAll={historyAll}\n                        headers={headersShown}\n                    />\n                </ModalStyledSetting>\n            )}\n        </>\n    );\n};\n\nexport default TableActivityHistory2;\n\n\nconst generateColumns = (headers) => {\n\n    return [\n        {\n            key: 'index',\n            dataKey: 'index',\n            title: '',\n            width: 70,\n        },\n        ...headers.map((column) => ({\n            key: column,\n            dataKey: column,\n            title: column,\n            resizable: true,\n            width: 300,\n        }))\n    ];\n};\n\n\nconst ModalStyledSetting = styled(Modal)`\n    .ant-modal-content {\n        border-radius: 0;\n    }\n   .ant-modal-close {\n      display: none;\n   }\n   .ant-modal-header {\n      padding: 10px;\n   }\n   .ant-modal-title {\n        padding-left: 10px;\n        font-size: 20px;\n        font-weight: bold;\n   }\n   .ant-modal-body {\n      padding: 0;\n      display: flex;\n      justify-content: center;\n   }\n`;\nconst TableStyled = styled(Table)`\n\n\n   .BaseTable__row-cell-text {\n      color: black\n   }\n\n   .BaseTable__table .BaseTable__body {\n      /* -webkit-touch-callout: none;\n      -webkit-user-select: none;\n      -khtml-user-select: none;\n      -moz-user-select: none;\n      -ms-user-select: none;\n      user-select: none; */\n   }\n\n   .BaseTable__header-cell {\n      padding: 10px;\n      border-right: 1px solid #DCDCDC;\n      background: ${colorType.grey1};\n      color: black\n   }\n\n   .BaseTable__row-cell {\n      padding: 10px;\n      border-right: 1px solid #DCDCDC;\n      overflow: visible !important;\n   }\n`;\n\n\n\n\n","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageDataEntrySheet\\TableCellHistory2.js",["387","388","389","390","391","392"],"import { List } from 'antd';\nimport moment from 'moment';\nimport React, { useContext, useState } from 'react';\nimport { Context as ProjectContext } from '../../contexts/projectContext';\nimport { Context as RowContext } from '../../contexts/rowContext';\n\n\n\nconst TableCellHistory2 = (props) => {\n\n    const { rowData: { id: rowId }, column, cellOneHistory } = props;\n\n    const {\n        state: stateProject\n    } = useContext(ProjectContext);\n\n    const { state: stateRow } = useContext(RowContext);\n\n    const { projectId, token } = stateProject.allDataOneSheet;\n    const headers = stateProject.allDataOneSheet.publicSettings.headers;\n    const headerKey = headers.find(hd => hd.text === column.key).key;\n\n\n    const [history, setHistory] = useState(cellOneHistory);\n\n    // useEffect(() => {\n    //    const fetchCellHistory = async () => {\n    //       try {\n    //          const res = await Axios.get(`${SERVER_URL}/cell/history/one-cell/`, { params: { token, projectId, rowId, headerKey } });\n    //          setHistory(res.data.histories.reverse());\n    //       } catch (err) {\n    //          console.log(err);\n    //       };\n    //    };\n    //    fetchCellHistory();\n    // }, [])\n\n\n    return (\n        <div style={{ width: '100%', padding: 15, maxHeight: window.innerHeight * 0.7, overflowY: 'scroll' }}>\n            <List\n                size='small'\n                header={null}\n                footer={null}\n                bordered\n                dataSource={history}\n                renderItem={item => (\n                    <List.Item>\n                        <div>\n                            <div>{`${item.email}`}</div>\n                            <div style={{ fontSize: 12, color: 'grey' }}>{moment(item.createdAt).format('DD/MM/YY - HH:mm')}</div>\n                            <div style={{ fontWeight: 'bold' }}>{item.text}</div>\n                        </div>\n                    </List.Item>\n                )}\n            />\n        </div>\n    );\n};\n\nexport default TableCellHistory2;\n","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageDataEntrySheet\\FormCellColorizedCheck2.js",["393","394","395","396"],"import moment from 'moment';\nimport React, { useContext, useState } from 'react';\nimport { Context as ProjectContext } from '../../contexts/projectContext';\nimport { convertHistoryData } from '../../utils';\nimport ButtonStyle from '../generalComponents/ButtonStyle';\nimport PanelCalendarDuration from '../generalComponents/PanelCalendarDuration';\n\n\n\n\n\n\nconst FormCellColorizedCheck2 = ({ setCellHistoryArr, cellsHistoryInCurrentSheet }) => {\n\n    const { state: stateProject } = useContext(ProjectContext);\n\n    const { projectId, token, publicSettings } = stateProject.allDataOneSheet;\n\n    const { headers: headersArr } = publicSettings;\n\n\n    // useEffect(() => {\n    //    const fetchProjectHistory = async () => {\n    //       try {\n    //          const res = await Axios.get(`${SERVER_URL}/cell/history/`, { params: { token, projectId } });\n    //          setHistoryData(res.data);\n    //       } catch (err) {\n    //          console.log(err);\n    //       };\n    //    };\n    //    fetchProjectHistory();\n    // }, []);\n\n\n    const [historyData, setHistoryData] = useState(cellsHistoryInCurrentSheet);\n\n    const [dateRange, setDateRange] = useState(null);\n    const onClickCheck = ({ start, end }) => {\n        let filterCells = convertHistoryData(historyData).filter(cell => {\n            let createdAt = moment(cell.createdAt).toDate();\n            return createdAt >= start && createdAt <= end;\n        });\n        const cellArr = filterCells.map(ch => {\n            const { row: rowId, headerKey } = ch;\n            let headerText = headersArr.find(hd => hd.key === headerKey).text;\n            return {\n                rowId,\n                header: headerText\n            };\n        });\n        let unique = cellArr.reduce((res, itm) => {\n            let result = res.find(item => JSON.stringify(item) == JSON.stringify(itm));\n            if (!result) return res.concat(itm);\n            return res;\n        }, []);\n\n        setCellHistoryArr(unique);\n    };\n    const checkCellWithinDates = (nos) => {\n        const addDays = (date, days) => {\n            let result = new Date(date);\n            result.setDate(result.getDate() + days);\n            return result;\n        };\n        let today = new Date();\n        let dateBefore = addDays(today, nos);\n        return {\n            start: dateBefore,\n            end: today\n        };\n    };\n\n\n    return (\n        <div style={{\n            padding: 15\n        }}>\n            <div style={{ display: 'flex', marginBottom: 10 }}>\n                <PanelCalendarDuration pickRangeDate={(e) => setDateRange(e)} />\n                <ButtonStyle\n                    onClick={() => dateRange && onClickCheck({ start: dateRange[0], end: dateRange[1] })}\n                    marginLeft={5}\n                    name='Check Data Changed'\n                />\n            </div>\n            <div style={{ display: 'flex', marginBottom: 20, width: '100%' }}>\n                <ButtonStyle marginRight={5} name='Today'\n                    onClick={() => onClickCheck(checkCellWithinDates(-1))}\n                />\n                <ButtonStyle marginRight={5} name='Last 3 Days'\n                    onClick={() => onClickCheck(checkCellWithinDates(-3))}\n                />\n                <ButtonStyle marginRight={5} name='Last 7 Days'\n                    onClick={() => onClickCheck(checkCellWithinDates(-7))}\n                />\n                <ButtonStyle marginRight={5} name='Last 14 Days'\n                    onClick={() => onClickCheck(checkCellWithinDates(-14))}\n                />\n                <ButtonStyle marginRight={5} name='This Month'\n                    onClick={() => onClickCheck(checkCellWithinDates(-31))}\n                />\n            </div>\n        </div>\n    );\n};\n\nexport default FormCellColorizedCheck2;\n\n","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageDataEntrySheet\\PanelSetting2.js",["397","398","399","400","401","402","403","404","405","406","407","408","409"],"import React, { useContext } from 'react';\nimport { Context as CellContext } from '../../contexts/cellContext';\nimport { Context as ProjectContext } from '../../contexts/projectContext';\nimport { Context as RowContext } from '../../contexts/rowContext';\nimport { convertCellTempToHistory, debounceFnc, genId, mongoObjectId } from '../../utils';\nimport FormFilter from '../generalComponents/FormFilter';\nimport FormGroup from '../generalComponents/FormGroup';\nimport FormSort from '../generalComponents/FormSort';\nimport PanelConfirm from '../generalComponents/PanelConfirm';\nimport PanelConfirmResetMode from '../generalComponents/PanelConfirmResetMode';\nimport PanelPickNumber from '../generalComponents/PanelPickNumber';\nimport ReorderColumnForm from '../generalComponents/ReorderColumnForm';\nimport { getOutputRowsAllSorted } from '../PageDataEntrySheet';\nimport ColorizedForm2 from './ColorizedForm2';\nimport FormCellColorizedCheck2 from './FormCellColorizedCheck2';\nimport FormDrawingTypeOrder, { flattenAllTreeChildNode1, getTreeFlattenOfNodeInArray } from './FormDrawingTypeOrder2';\nimport TableActivityHistory2 from './TableActivityHistory2';\nimport TableCellHistory2 from './TableCellHistory2';\n\n\n\nconst PanelSetting2 = (props) => {\n\n   const { state: stateRow } = useContext(RowContext);\n   const { state: stateProject } = useContext(ProjectContext);\n   const { state: stateCell, OverwriteCellsModified } = useContext(CellContext);\n\n   const {\n      panelType, panelSettingType, commandAction, onClickCancelModal, setLoading,\n      cellsHistoryInCurrentSheet, cellOneHistory, saveDataToServerCallback\n   } = props;\n\n   const { projectId } = stateProject.allDataOneSheet;\n\n\n   const applyReorderColumns = (data) => commandAction({ type: 'reorder-columns', data });\n\n   const applyFilter = (filter) => commandAction({ type: 'filter-by-columns', data: { modeFilter: filter } });\n\n   const applyResetMode = (modeReset) => {\n      const modeResetObj = {};\n      modeReset.forEach(type => {\n         if (type.header === 'Filter' && type.mode === 'hidden') modeResetObj.modeFilter = [];\n         if (type.header === 'Sort' && type.mode === 'hidden') modeResetObj.modeSort = {};\n         if (type.header === 'Search' && type.mode === 'hidden') modeResetObj.modeSearch = {};\n      });\n      return commandAction({\n         type: 'reset-filter-sort',\n         data: {\n            rowsAll: stateRow.rowsAll,\n            ...modeResetObj\n         }\n      });\n   };\n   const applyQuitGroupingMode = () => {\n      return commandAction({\n         type: 'reset-filter-sort',\n         data: { modeGroup: [], modeSearch: {} }\n      });\n   };\n\n\n   const applyGroup = (data) => commandAction({ type: 'group-columns', data: { modeGroup: data } });\n\n   const applyColorization = (data) => commandAction({ type: 'drawing-colorized', data });\n\n   const setCellHistoryArr = debounceFnc((data) => commandAction({ type: 'highlight-cell-history', data }), 1);\n\n   const applySort = (data) => commandAction({ type: 'sort-data', data: { modeSort: data } });\n\n   const applyViewTemplate = (name) => {\n      let { allDataOneSheet: { publicSettings: { headers } }, userData: { headersShown, headersHidden, nosColumnFixed, colorization } } = stateProject;\n      const { viewTemplateNodeId, viewTemplates, modeFilter, modeSort } = stateRow;\n\n      headersShown = headersShown.map(hd => headers.find(x => x.text === hd).key);\n      headersHidden = headersHidden.map(hd => headers.find(x => x.text === hd).key);\n\n      commandAction({\n         type: 'add-view-templates',\n         data: {\n            viewTemplates: [...viewTemplates, {\n               id: mongoObjectId(),\n               name,\n               headersShown,\n               headersHidden,\n               nosColumnFixed,\n               colorization,\n               viewTemplateNodeId,\n               modeFilter,\n               modeSort\n            }]\n         }\n      });\n   };\n\n\n   const onClickInsertRow = (nosOfRows) => {\n      let { rowsAll, idRowsNew, rowsUpdatePreRowOrParentRow } = stateRow;\n\n      const idsArr = genId(nosOfRows);\n      idRowsNew = [...idRowsNew, ...idsArr];\n\n      let newRows = [];\n      let rowBelow;\n      if (panelSettingType === 'Insert Drawings Below') {\n         let rowAbove = panelType.cellProps.rowData;\n         newRows = idsArr.map((id, i) => {\n            return ({\n               id, _rowLevel: 1,\n               _parentRow: rowAbove._parentRow,\n               _preRow: i === 0 ? rowAbove.id : idsArr[i - 1]\n            });\n         });\n         rowBelow = rowsAll.find(r => r._preRow === rowAbove.id);\n         if (rowBelow) {\n            rowBelow._preRow = idsArr[idsArr.length - 1];\n         };\n\n      } else if (panelSettingType === 'Insert Drawings Above') {\n         rowBelow = rowsAll.find(r => r.id === panelType.cellProps.rowData.id);\n\n         newRows = idsArr.map((id, i) => {\n            return ({\n               id, _rowLevel: 1,\n               _parentRow: rowBelow._parentRow,\n               _preRow: i === 0 ? rowBelow._preRow : idsArr[i - 1]\n            });\n         });\n         rowBelow._preRow = idsArr[idsArr.length - 1];\n      };\n\n      if (rowBelow) {\n         updatePreRowParentRowToState(rowsUpdatePreRowOrParentRow, rowBelow);\n      };\n      newRows.forEach(row => {\n         updatePreRowParentRowToState(rowsUpdatePreRowOrParentRow, row);\n      });\n      rowsAll = [...rowsAll, ...newRows];\n\n      const rowsOutput = _processRowsChainNoGroupFnc1([...rowsAll]);\n      commandAction({\n         type: 'insert-drawings',\n         data: {\n            rowsAll: rowsOutput,\n            rowsUpdatePreRowOrParentRow,\n            idRowsNew\n         }\n      });\n   };\n   const onClickFolderInsertSubRows = (nosOfRows) => {\n      let { rowsAll, idRowsNew, rowsUpdatePreRowOrParentRow } = stateRow;\n\n      let idsArr = genId(nosOfRows);\n      idRowsNew = [...idRowsNew, ...idsArr];\n\n      let newRows = idsArr.map((id, i) => {\n         return ({\n            id, _rowLevel: 1,\n            _parentRow: panelType.cellProps.rowData.id,\n            _preRow: i === 0 ? null : idsArr[i - 1]\n         });\n      });\n      newRows.forEach(row => {\n         updatePreRowParentRowToState(rowsUpdatePreRowOrParentRow, row);\n      });\n      let rowBelow = rowsAll.find(r => r._parentRow === panelType.cellProps.rowData.id && r._preRow === null);\n      if (rowBelow) {\n         rowBelow._preRow = idsArr[idsArr.length - 1];\n         updatePreRowParentRowToState(rowsUpdatePreRowOrParentRow, rowBelow);\n      };\n      rowsAll = [...rowsAll, ...newRows];\n\n      const rowsOutput = _processRowsChainNoGroupFnc1([...rowsAll]);\n      commandAction({\n         type: 'insert-drawings-by-folder',\n         data: {\n            rowsAll: rowsOutput,\n            rowsUpdatePreRowOrParentRow,\n            idRowsNew\n         }\n      });\n   };\n   const onClickDuplicateRows = (nosOfRows) => {\n      let { rowsAll, idRowsNew, rowsUpdatePreRowOrParentRow } = stateRow;\n      const { headers } = stateProject.allDataOneSheet.publicSettings;\n\n      let idsArr = genId(nosOfRows);\n      idRowsNew = [...idRowsNew, ...idsArr];\n\n      const rowAbove = panelType.cellProps.rowData;\n\n      const newRows = idsArr.map((id, i) => ({\n         ...rowAbove, id,\n         _preRow: i === 0 ? rowAbove.id : idsArr[i - 1]\n      }));\n\n      const rowBelow = rowsAll.find(r => r._preRow === rowAbove.id);\n      if (rowBelow) {\n         rowBelow._preRow = idsArr[idsArr.length - 1];\n         updatePreRowParentRowToState(rowsUpdatePreRowOrParentRow, rowBelow);\n      };\n\n      let cellsModifiedTempObj = {};\n      newRows.forEach(row => {\n         headers.forEach(hd => {\n            if (row[hd.text]) {\n               cellsModifiedTempObj[`${row.id}-${hd.text}`] = row[hd.text];\n            };\n         });\n         updatePreRowParentRowToState(rowsUpdatePreRowOrParentRow, row);\n      });\n      OverwriteCellsModified({ ...stateCell.cellsModifiedTemp, ...cellsModifiedTempObj });\n      rowsAll = [...rowsAll, ...newRows];\n\n      const rowsOutput = _processRowsChainNoGroupFnc1([...rowsAll]);\n      commandAction({\n         type: 'duplicate-drawings',\n         data: {\n            rowsAll: rowsOutput,\n            rowsUpdatePreRowOrParentRow,\n            idRowsNew\n         }\n      });\n   };\n   const deleteDrawing = () => {\n      let { rowsAll, idRowsNew, rowsUpdatePreRowOrParentRow, rowsDeleted } = stateRow;\n      const { cellsModifiedTemp } = stateCell;\n      const rowId = panelType.cellProps.rowData.id;\n\n      let rowBelow = rowsAll.find(r => r._preRow === rowId);\n      if (rowBelow) {\n         rowBelow._preRow = panelType.cellProps.rowData._preRow;\n         updatePreRowParentRowToState(rowsUpdatePreRowOrParentRow, rowBelow);\n      };\n\n      if (rowId in rowsUpdatePreRowOrParentRow) delete rowsUpdatePreRowOrParentRow[rowId];\n      rowsAll = rowsAll.filter(r => r.id !== rowId);\n\n      if (idRowsNew.indexOf(rowId) === -1) {\n         rowsDeleted = [...rowsDeleted, panelType.cellProps.rowData];\n      } else {\n         idRowsNew.splice(idRowsNew.indexOf(rowId), 1);\n      };\n\n      Object.keys(cellsModifiedTemp).forEach(key => {\n         if (key.slice(0, 24) === rowId) {  // deleted cells modified temporary...\n            delete cellsModifiedTemp[key];\n         };\n      });\n      OverwriteCellsModified({ ...cellsModifiedTemp });\n\n      const rowsOutput = _processRowsChainNoGroupFnc1([...rowsAll]);\n\n      commandAction({\n         type: 'delete-drawing',\n         data: {\n            rowsAll: rowsOutput,\n            rowsUpdatePreRowOrParentRow,\n            rowsDeleted,\n            idRowsNew,\n         }\n      });\n   };\n   const applyFolderOrganize = (drawingTypeTreeNew, mergeList, nodeIsolated) => {\n\n      let {\n         rowsAll, rowsDeleted, idRowsNew, rowsUpdatePreRowOrParentRow,\n         drawingsTypeDeleted, drawingsTypeNewIds, drawingTypeTree, viewTemplateNodeId\n      } = stateRow;\n\n      const { cellsModifiedTemp } = stateCell;\n\n      mergeList.forEach(parentNodeId => {\n         const node = drawingTypeTree.find(x => x.id === parentNodeId);\n         const treeBranchToMerge = getTreeFlattenOfNodeInArray(drawingTypeTree, node);\n\n         const treeBranchChildren = treeBranchToMerge.filter(x => x.id !== parentNodeId);\n         let arr = [];\n         treeBranchChildren.forEach(node => {\n            const rowsChildren = rowsAll.filter(r => r._parentRow === node.id);\n            arr = [...arr, ...rowsChildren];\n         });\n         arr.forEach((row, i) => {\n            row._parentRow = parentNodeId;\n            row._preRow = i === 0 ? null : arr[i - 1].id;\n            updatePreRowParentRowToState(rowsUpdatePreRowOrParentRow, row);\n         });\n      });\n\n\n      let drawingTypeTreeUpdate = flattenAllTreeChildNode1(drawingTypeTreeNew);\n      drawingTypeTreeUpdate.forEach(item => {\n         delete item.children;\n      });\n\n\n      drawingTypeTree.forEach(tr => {\n         if (!drawingTypeTreeUpdate.find(x => x.id === tr.id)) {\n            if (drawingsTypeNewIds.indexOf(tr.id) !== -1) {\n               drawingsTypeNewIds = drawingsTypeNewIds.filter(id => id !== tr.id);\n            } else {\n               drawingsTypeDeleted = [...drawingsTypeDeleted, tr];\n            };\n         };\n      });\n      drawingTypeTreeUpdate.forEach(tr => {\n         if (!drawingTypeTree.find(x => x.id === tr.id)) {\n            drawingsTypeNewIds.push(tr.id);\n         };\n      });\n\n      let allDrawingsParentId = [...new Set(rowsAll.map(x => x._parentRow))];\n\n\n      if (allDrawingsParentId.length === 1 && allDrawingsParentId[0] === projectId) {\n         const rowsChildren = rowsAll.filter(row => row._parentRow === projectId);\n         // some folders are added below sheet level => add new folder to contain...\n         const nodeParentPrevious = {\n            id: projectId,\n            treeLevel: 0,\n         };\n         const allTreeLevel = [...new Set(drawingTypeTreeUpdate.map(x => x.treeLevel))];\n         let arrayNodes = [nodeParentPrevious];\n\n         for (let i = 0; i <= allTreeLevel.length; i++) {\n            let arrFilter = drawingTypeTreeUpdate.filter(x => x.treeLevel === allTreeLevel[i] && arrayNodes.find(dt => dt.id === x.parentId));\n            arrayNodes = [...arrayNodes, ...arrFilter];\n         };\n         const lowestLevel = Math.max(...arrayNodes.map(x => x.treeLevel));\n\n         const dwgTypeParentToShiftDrawings = arrayNodes.find(x => x.treeLevel === lowestLevel);\n\n         rowsChildren.forEach(r => {\n            r._parentRow = dwgTypeParentToShiftDrawings.id;\n            updatePreRowParentRowToState(rowsUpdatePreRowOrParentRow, r);\n         });\n\n      } else {\n\n         allDrawingsParentId.forEach(drawingParentId => {\n            const rowsChildren = rowsAll.filter(row => row._parentRow === drawingParentId);\n\n            if (!drawingTypeTreeUpdate.find(x => x.id === drawingParentId) && !mergeList.find(item => item.id === drawingParentId)) {\n               rowsChildren.forEach(rrr => {\n                  if (idRowsNew.indexOf(rrr.id) === -1) {\n                     rowsDeleted = [...rowsDeleted, rrr];\n                  } else {\n                     idRowsNew.splice(idRowsNew.indexOf(rrr.id), 1);\n                  };\n                  Object.keys(cellsModifiedTemp).forEach(key => {\n                     if (key.slice(0, 24) === rrr.id) {  // deleted cells modified temporary...\n                        delete cellsModifiedTemp[key];\n                     };\n                  });\n                  if (rrr.id in rowsUpdatePreRowOrParentRow) delete rowsUpdatePreRowOrParentRow[rrr.id];\n               });\n               rowsAll = rowsAll.filter(r => r._parentRow !== drawingParentId);\n            } else if (!drawingTypeTreeUpdate.find(x => x.id === drawingParentId) && mergeList.find(item => item.id === drawingParentId)) {\n\n\n            } else {\n               if (drawingTypeTreeUpdate.find(x => x.parentId === drawingParentId)) {\n                  // some folders are added below drawing parent => add new type to contain\n                  const nodeParentPrevious = drawingTypeTreeUpdate.find(x => x.id === drawingParentId);\n                  const allTreeLevel = [...new Set(drawingTypeTreeUpdate.map(x => x.treeLevel))];\n\n                  let arrayNodes = [nodeParentPrevious];\n\n                  for (let i = nodeParentPrevious.treeLevel; i <= allTreeLevel.length; i++) {\n                     let arrFilter = drawingTypeTreeUpdate.filter(x => x.treeLevel === allTreeLevel[i] && arrayNodes.find(dt => dt.id === x.parentId));\n                     arrayNodes = [...arrayNodes, ...arrFilter];\n                  };\n                  const lowestLevel = Math.max(...arrayNodes.map(x => x.treeLevel));\n                  const dwgTypeParentToShiftDrawings = arrayNodes.find(x => x.treeLevel === lowestLevel);\n\n                  rowsChildren.forEach(r => {\n                     r._parentRow = dwgTypeParentToShiftDrawings.id;\n                     updatePreRowParentRowToState(rowsUpdatePreRowOrParentRow, r);\n                  });\n               };\n            };\n         });\n      };\n\n\n\n      OverwriteCellsModified({ ...cellsModifiedTemp });\n\n      const rowsOutput = getOutputRowsAllSorted(drawingTypeTreeUpdate, rowsAll);\n\n      let templateObj = {};\n      if (viewTemplateNodeId !== nodeIsolated) {\n         templateObj.viewTemplateNodeId = nodeIsolated;\n      };\n\n      commandAction({\n         type: 'drawing-folder-organization',\n         data: {\n            rowsAll: rowsOutput,\n            rowsDeleted,\n            drawingTypeTree: drawingTypeTreeUpdate,\n            rowsUpdatePreRowOrParentRow,\n            drawingsTypeDeleted,\n            drawingsTypeNewIds,\n            idRowsNew,\n            ...templateObj\n         }\n      });\n   };\n\n\n   const saveData = () => {\n      const {\n         drawingTypeTree,\n         rowsAll,\n         drawingsTypeDeleted,\n         rowsDeleted,\n      } = stateRow;\n      const { cellsModifiedTemp } = stateCell;\n      const { headers } = stateProject.allDataOneSheet.publicSettings;\n\n      const rowToSaveArr = rowsAll.map(row => {\n         let rowToSave = { _id: row.id, parentRow: row._parentRow, preRow: row._preRow };\n         headers.forEach(hd => {\n            if (row[hd.text] || row[hd.text] === '') {\n               rowToSave.data = { ...rowToSave.data || {}, [hd.key]: row[hd.text] };\n            };\n         });\n         return rowToSave;\n      });\n\n\n      saveDataToServerCallback({\n         drawingTypeTree,\n         rowsAll: rowToSaveArr,\n         drawingsTypeDeleted,\n         rowsDeleted,\n         cellHistory: convertCellTempToHistory(cellsModifiedTemp, stateProject)\n      });\n   };\n\n\n   // const saveDataToServer = async () => {\n   //    const { email, projectId, token, role, projectName } = stateProject.allDataOneSheet;\n   //    const { headersShown, headersHidden, nosColumnFixed, colorization } = stateProject.userData;\n   //    const { headers } = stateProject.allDataOneSheet.publicSettings;\n   //    let { cellsModifiedTemp } = stateCell;\n   //    let {\n   //       rowsUpdatePreRowOrParentRow,\n   //       drawingTypeTreeInit,\n   //       drawingTypeTree,\n   //       drawingsTypeDeleted,\n   //       rowsDeleted,\n\n   //       viewTemplateNodeId,\n   //       viewTemplates,\n   //       modeFilter,\n   //       modeSort,\n   //    } = stateRow;\n\n   //    try {\n   //       setLoading(true);\n   //       commandAction({ type: '' });\n\n   //       const resDB = await Axios.get(`${SERVER_URL}/sheet/`, { params: { token, projectId, email } });\n   //       const resCellsHistory = await Axios.get(`${SERVER_URL}/cell/history/`, { params: { token, projectId } });\n\n   //       let { publicSettings: publicSettingsFromDB, rows: rowsFromDBInit } = resolveDataFromProps(resDB);\n   //       let { drawingTypeTree: drawingTypeTreeFromDB, activityRecorded: activityRecordedFromDB } = publicSettingsFromDB;\n\n   //       let rowsFromDB = rowsFromDBInit.map(row => ({ ...row }));\n\n   //       let {\n   //          needToSaveTree,\n   //          treeDBModifiedToSave,\n   //          nodesToAddToDB,\n   //          nodesToRemoveFromDB\n   //       } = compareCurrentTreeAndTreeFromDB(\n   //          drawingTypeTreeInit,\n   //          drawingTypeTree,\n   //          drawingsTypeDeleted,\n   //          drawingTypeTreeFromDB,\n   //          activityRecordedFromDB.filter(x => x.action === 'Delete Drawing Type'),\n   //       );\n\n   //       let activityRecordedArr = [];\n   //       treeDBModifiedToSave = [\n   //          {\n   //             title: projectName,\n   //             id: projectId,\n   //             treeLevel: 0,\n   //             expanded: true,\n   //          },\n   //          ...treeDBModifiedToSave\n   //       ];\n\n\n\n   //       const rowsUpdatePreRowOrParentRowArray = Object.values(rowsUpdatePreRowOrParentRow) // check if row or its parents deleted by other users\n   //          .filter(row => !activityRecordedFromDB.find(r => r.id === row.id && r.action === 'Delete Drawing') &&\n   //             !activityRecordedFromDB.find(r => r.id === row._parentRow && r.action === 'Delete Drawing Type'));\n\n\n   //       if (rowsUpdatePreRowOrParentRowArray.length > 0) {\n\n   //          let arrID = [];\n   //          rowsFromDB.forEach(r => { // take out temporarily all rowsUpdatePreRowOrParentRowArray from DB\n   //             if (rowsUpdatePreRowOrParentRowArray.find(row => row.id === r.id)) {\n   //                arrID.push(r.id);\n   //                const rowBelow = rowsFromDB.find(rrr => rrr._preRow === r.id);\n   //                if (rowBelow) rowBelow._preRow = r._preRow;\n   //             };\n   //          });\n   //          rowsFromDB = rowsFromDB.filter(r => arrID.indexOf(r.id) === -1);\n\n\n   //          const rowsInOldParent = rowsUpdatePreRowOrParentRowArray.filter(r => {\n   //             return treeDBModifiedToSave.find(tr => tr.id === r._parentRow && !treeDBModifiedToSave.find(x => x.parentId === tr.id));\n   //          });\n   //          const rowsInOldParentDivertBranches = rowsUpdatePreRowOrParentRowArray.filter(r => {\n   //             return treeDBModifiedToSave.find(tr => tr.id === r._parentRow && treeDBModifiedToSave.find(x => x.parentId === tr.id));\n   //          });\n   //          const rowsInNewParent = rowsUpdatePreRowOrParentRowArray.filter(r => {\n   //             return !treeDBModifiedToSave.find(tr => tr.id === r._parentRow);\n   //          });\n\n\n\n   //          const rowsInOldParentOutput = _processChainRowsSplitGroupFnc2([...rowsInOldParent]);\n   //          rowsInOldParentOutput.forEach(arrChain => {\n   //             const rowFirst = arrChain[0];\n   //             const parentRowInDB = treeDBModifiedToSave.find(tr => tr.id === rowFirst._parentRow);\n   //             const rowAbove = rowsFromDB.find(r => r.id === rowFirst._preRow);\n   //             if (rowAbove) {\n   //                if (rowAbove._parentRow !== rowFirst._parentRow) { // rowAbove move to other parent by other user\n   //                   const lastRowInParent = rowsFromDB.find(r => r._parentRow === parentRowInDB.id && !rowsFromDB.find(x => x._preRow === r.id));\n   //                   rowFirst._preRow = lastRowInParent ? lastRowInParent.id : null;\n   //                } else { // rowAbove is still in the same parent\n   //                   const rowBelowRowAbove = rowsFromDB.find(r => r._preRow === rowAbove.id);\n   //                   if (rowBelowRowAbove) rowBelowRowAbove._preRow = arrChain[arrChain.length - 1].id;\n   //                   rowFirst._preRow = rowAbove.id;\n   //                };\n   //             } else {\n   //                if (rowFirst._preRow === null) {\n   //                   const firstRowInParent = rowsFromDB.find(r => r._parentRow === parentRowInDB.id && r._preRow === null);\n   //                   if (firstRowInParent) { // if firstRowInParent undefined means Drawing type has 0 drawing currently...\n   //                      firstRowInParent._preRow = arrChain[arrChain.length - 1].id;\n   //                   };\n   //                } else {\n   //                   const lastRowInParent = rowsFromDB.find(r => r._parentRow === parentRowInDB.id && !rowsFromDB.find(x => x._preRow === r.id));\n   //                   rowFirst._preRow = lastRowInParent ? lastRowInParent.id : null;\n   //                };\n   //             };\n   //             rowsFromDB = [...rowsFromDB, ...arrChain];\n   //          });\n\n\n   //          let idsOldParentDivertBranches = [...new Set(rowsInOldParentDivertBranches.map(r => r._parentRow))];\n   //          idsOldParentDivertBranches.forEach(idP => {\n   //             let arrInput = rowsInOldParentDivertBranches.filter(r => r._parentRow === idP);\n   //             let rowsChildren = _processRowsChainNoGroupFnc1([...arrInput]);\n\n   //             const treeNode = treeDBModifiedToSave.find(x => x.id === idP);\n   //             const newIdParent = mongoObjectId();\n   //             treeDBModifiedToSave.push({\n   //                title: 'New Folder',\n   //                id: newIdParent,\n   //                parentId: treeNode.id,\n   //                treeLevel: treeNode.treeLevel + 1,\n   //                expanded: true,\n   //             });\n   //             needToSaveTree = true;\n\n   //             activityRecordedArr.push({\n   //                title: 'New Folder',\n   //                id: newIdParent,\n   //                email,\n   //                createdAt: new Date(),\n   //                action: 'Create Folder',\n   //             });\n\n   //             rowsChildren.forEach((r, i) => {\n   //                r._preRow = i === 0 ? null : rowsChildren[i - 1].id;\n   //                r._parentRow = newIdParent;\n   //             });\n   //             rowsFromDB = [...rowsFromDB, ...rowsChildren];\n   //          });\n\n\n\n   //          let idsNewParentArray = [...new Set(rowsInNewParent.map(r => r._parentRow))];\n   //          idsNewParentArray.forEach(idP => {\n   //             let arrInput = rowsInNewParent.filter(r => r._parentRow === idP);\n   //             let rowsChildren = _processRowsChainNoGroupFnc1([...arrInput]);\n   //             rowsChildren.forEach((r, i) => {\n   //                r._preRow = i === 0 ? null : rowsChildren[i - 1].id;\n   //             });\n   //             rowsFromDB = [...rowsFromDB, ...rowsChildren];\n   //          });\n   //       };\n\n\n   //       let objCellHistory = {}; // SAVE CELL HISTORY\n   //       resCellsHistory.data.map(cell => {\n   //          const headerText = headers.find(hd => hd.key === cell.headerKey).text;\n   //          if (cell.histories.length > 0) {\n   //             const latestHistoryText = cell.histories[cell.histories.length - 1].text;\n   //             objCellHistory[`${cell.row}-${headerText}`] = latestHistoryText;\n   //          };\n   //       });\n   //       Object.keys(cellsModifiedTemp).forEach(key => {\n   //          if (objCellHistory[key] && objCellHistory[key] === cellsModifiedTemp[key]) {\n   //             delete cellsModifiedTemp[key];\n   //          } else {\n   //             let rowId = key.slice(0, 24);\n   //             if (activityRecordedFromDB.find(x => x.id === rowId && x.action === 'Delete Drawing')) {\n   //                delete cellsModifiedTemp[key];\n   //             };\n   //          };\n   //       });\n\n   //       if (Object.keys(cellsModifiedTemp).length > 0) {\n   //          await Axios.post(`${SERVER_URL}/cell/history/`, { token, projectId, cellsHistory: convertCellTempToHistory(cellsModifiedTemp, stateProject) });\n   //       };\n\n\n\n\n   //       let rowDeletedFinal = []; // DELETE ROWS\n   //       rowsDeleted.forEach(row => { // some rows already deleted by previous user => no need to delete anymore\n   //          const rowInDB = rowsFromDB.find(r => r.id === row.id);\n   //          if (rowInDB) {\n   //             const rowBelow = rowsFromDB.find(r => r._preRow === rowInDB.id);\n   //             if (rowBelow) {\n   //                rowBelow._preRow = rowInDB._preRow;\n   //             };\n   //             rowsFromDB = rowsFromDB.filter(r => r.id !== rowInDB.id); // FIXEDDDDDDDDDDDDDDDDDDD\n   //             rowDeletedFinal.push(row);\n   //          };\n   //       });\n\n\n   //       if (nodesToRemoveFromDB.length > 0) {\n   //          nodesToRemoveFromDB.forEach(fd => {\n   //             activityRecordedArr.push({\n   //                id: fd.id, email, createdAt: new Date(), action: 'Delete Folder',\n   //                title: fd.title,\n   //             });\n   //          });\n   //       };\n   //       if (nodesToAddToDB.length > 0) {\n   //          nodesToAddToDB.forEach(fd => {\n   //             activityRecordedArr.push({\n   //                id: fd.id, email, createdAt: new Date(), action: 'Create Folder',\n   //                title: fd.title,\n   //             });\n   //          });\n   //       };\n\n\n   //       activityRecordedArr.forEach(rc => { // SAVE PUBLIC SETTINGS RECORDED\n   //          const newRowsAddedByPreviousUserButParentDeletedByCurrentUser = rowsFromDB.filter(e => {\n   //             return e._parentRow === rc.id &&\n   //                rc.action === 'Delete Folder' &&\n   //                !rowDeletedFinal.find(x => x.id === e.id);\n   //          });\n   //          rowDeletedFinal = [...rowDeletedFinal, ...newRowsAddedByPreviousUserButParentDeletedByCurrentUser];\n   //       });\n\n   //       rowDeletedFinal.forEach(r => {\n   //          activityRecordedArr.push({\n   //             id: r.id, email, createdAt: new Date(), action: 'Delete Drawing',\n   //          });\n   //       });\n\n\n   //       rowsFromDB = rowsFromDB.filter(r => !rowDeletedFinal.find(x => x.id === r.id));\n\n   //       if (rowDeletedFinal.length > 0) {  // DELETE ...\n   //          await Axios.post(`${SERVER_URL}/sheet/delete-rows/`, { token, projectId, email, rowIdsArray: rowDeletedFinal.map(r => r.id) });\n   //       };\n\n\n\n   //       treeDBModifiedToSave = treeDBModifiedToSave.filter(node => node.treeLevel !== 0);\n   //       let publicSettingsUpdated = { projectName };\n   //       if (needToSaveTree) {\n   //          publicSettingsUpdated = { ...publicSettingsUpdated, drawingTypeTree: treeDBModifiedToSave };\n   //       };\n   //       if (activityRecordedArr.length > 0) {\n   //          publicSettingsUpdated = { ...publicSettingsUpdated, activityRecorded: [...activityRecordedFromDB, ...activityRecordedArr] };\n   //       };\n   //       await Axios.post(`${SERVER_URL}/sheet/update-setting-public/`, { token, projectId, email, publicSettings: publicSettingsUpdated });\n\n\n   //       const userSettingsUpdated = {\n   //          headersShown: headersShown.map(hd => headers.find(h => h.text === hd).key),\n   //          headersHidden: headersHidden.map(hd => headers.find(h => h.text === hd).key),\n   //          nosColumnFixed, colorization, role, viewTemplateNodeId, viewTemplates, modeFilter, modeSort\n   //       };\n\n   //       await Axios.post(`${SERVER_URL}/sheet/update-setting-user/`, { token, projectId, email, userSettings: userSettingsUpdated });\n\n\n\n\n   //       let rowsToUpdateFinal = []; // FILTER FINAL ROW TO UPDATE......\n   //       rowsFromDB.map(row => {\n   //          Object.keys(cellsModifiedTemp).forEach(key => {\n   //             const { rowId, headerName } = extractCellInfo(key);\n   //             if (rowId === row.id) row[headerName] = cellsModifiedTemp[key];\n   //          });\n   //          let rowOutput;\n   //          const found = rowsFromDBInit.find(r => r.id === row.id);\n   //          if (found) {\n   //             let toUpdate = false;\n   //             Object.keys(row).forEach(key => {\n   //                if (found[key] !== row[key]) toUpdate = true;\n   //             });\n   //             if (toUpdate) rowOutput = { ...row };\n   //          } else {\n   //             rowOutput = { ...row };\n   //          };\n   //          if (rowOutput) {\n   //             let rowToSave = { _id: rowOutput.id, parentRow: rowOutput._parentRow, preRow: rowOutput._preRow };\n   //             headers.forEach(hd => {\n   //                if (rowOutput[hd.text] || rowOutput[hd.text] === '') {\n   //                   rowToSave.data = { ...rowToSave.data || {}, [hd.key]: rowOutput[hd.text] };\n   //                };\n   //             });\n   //             rowsToUpdateFinal.push(rowToSave);\n   //          };\n   //       });\n   //       if (rowsToUpdateFinal.length > 0) {\n   //          await Axios.post(`${SERVER_URL}/sheet/update-rows/`, { token, projectId, rows: rowsToUpdateFinal });\n   //       };\n\n\n   //       commandAction({ type: 'save-data-successfully' });\n\n   //    } catch (err) {\n   //       commandAction({ type: 'save-data-failure' });\n   //       console.log(err);\n   //    };\n   // };\n\n   // const saveDataToServerAndReloadData = async () => {\n   //    const { projectId, token, email } = stateProject.allDataOneSheet;\n   //    try {\n   //       await saveDataToServer();\n   //       const res = await Axios.get(`${SERVER_URL}/sheet/`, { params: { token, projectId, email } });\n   //       commandAction({ type: 'reload-data-from-server', data: resolveDataFromProps(res) });\n\n   //    } catch (err) {\n   //       commandAction({ type: 'save-data-failure' });\n   //       console.log(err);\n   //    };\n   // };\n\n\n\n   return (\n      <>\n         {panelSettingType === 'save-ICON' && (\n            <PanelConfirm\n               onClickCancel={onClickCancelModal}\n               onClickApply={saveData}\n               content='Do you want to save ?'\n            />\n         )}\n\n         {panelSettingType === 'filter-ICON' && (\n            <FormFilter\n               applyFilter={applyFilter}\n               onClickCancelModal={onClickCancelModal}\n               headers={stateProject.userData.headersShown}\n               modeFilter={stateRow.modeFilter}\n               rowsAll={stateRow.rowsAll}\n            />\n         )}\n\n         {panelSettingType === 'swap-ICON-1' && (\n            <PanelConfirm\n               onClickCancel={onClickCancelModal}\n               onClickApply={applyQuitGroupingMode}\n               content='Do you want to quit grouping mode ?'\n            />\n         )}\n         {panelSettingType === 'swap-ICON-2' && (\n            <PanelConfirmResetMode\n               onClickCancel={onClickCancelModal}\n               applyResetMode={applyResetMode}\n               modeFilter={stateRow.modeFilter}\n               modeSort={stateRow.modeSort}\n               modeSearch={stateRow.modeSearch}\n            />\n         )}\n\n\n         {panelSettingType === 'reorderColumn-ICON' && (\n            <ReorderColumnForm applyReorderColumns={applyReorderColumns} onClickCancelModal={onClickCancelModal} />\n         )}\n\n         {panelSettingType === 'viewTemplate-ICON' && (\n            <PanelConfirm\n               onClickApply={applyViewTemplate} onClickCancel={onClickCancelModal}\n               content='Do you want to save a new view template ?'\n            />\n         )}\n\n\n         {panelSettingType === 'sort-ICON' && (\n            <FormSort\n               applySort={applySort}\n               onClickCancel={onClickCancelModal}\n               headers={stateProject.userData.headersShown}\n               modeSort={stateRow.modeSort}\n            />\n         )}\n\n\n         {panelSettingType === 'group-ICON' && (\n            <FormGroup \n               applyGroup={applyGroup} \n               onClickCancelModal={onClickCancelModal} \n               headers={stateProject.userData.headersShown}\n            />\n         )}\n\n\n         {(panelSettingType === 'Insert Drawings Below' || panelSettingType === 'Insert Drawings Above') && (\n            <PanelPickNumber\n               onClickCancelModal={onClickCancelModal}\n               onClickApply={onClickInsertRow}\n            />\n         )}\n\n         {panelSettingType === 'Duplicate Drawings' && (\n            <PanelPickNumber\n               onClickCancelModal={onClickCancelModal}\n               onClickApply={onClickDuplicateRows}\n            />\n         )}\n\n         {panelSettingType === 'history-ICON' && (\n            <TableActivityHistory2\n               cellsHistoryInCurrentSheet={cellsHistoryInCurrentSheet}\n            />\n         )}\n\n         {panelSettingType === 'color-cell-history-ICON' && (\n            <FormCellColorizedCheck2\n               setCellHistoryArr={setCellHistoryArr}\n               cellsHistoryInCurrentSheet={cellsHistoryInCurrentSheet}\n            />\n         )}\n\n         {panelSettingType === 'View Cell History' && (\n            <TableCellHistory2 {...panelType.cellProps} cellOneHistory={cellOneHistory} />\n         )}\n\n\n         {panelSettingType === 'addDrawingType-ICON' && (\n            <FormDrawingTypeOrder applyFolderOrganize={applyFolderOrganize} onClickCancelModal={onClickCancelModal} />\n         )}\n\n\n\n\n         {panelSettingType === 'Delete Drawing' && (\n            <PanelConfirm\n               onClickCancel={onClickCancelModal}\n               onClickApply={deleteDrawing}\n               content={`Are you sure to delete the: ${panelType.cellProps.rowData['Drawing Number'] || ' '} - ${panelType.cellProps.rowData['Drawing Name'] || ' '} ?`}\n            />\n         )}\n\n         {panelSettingType === 'colorized-ICON' && (\n            <ColorizedForm2 applyColorization={applyColorization} onClickCancelModal={onClickCancelModal} />\n         )}\n\n         {panelSettingType === 'Insert Drawings By Type' && (\n            <PanelPickNumber onClickCancelModal={onClickCancelModal} onClickApply={onClickFolderInsertSubRows} />\n         )}\n\n\n\n      </>\n   );\n};\n\nexport default PanelSetting2;\n\n\n\n\n\n\n\n\nexport const _processRowsChainNoGroupFnc1 = (rows) => {\n   let rowsProcessed = [];\n\n   if (!(rows instanceof Array) || !rows.length) {\n      return rowsProcessed;\n   };\n\n   let firstRowIndex = rows.findIndex((row) => !row._preRow);\n   while (firstRowIndex >= 0) {\n      let preRow = rows.splice(firstRowIndex, 1)[0];\n      while (preRow) {\n         rowsProcessed.push(preRow);\n\n         let nextRowIndex = rows.findIndex((row) => String(row._preRow) == String(preRow.id));\n         if (nextRowIndex >= 0) preRow = rows.splice(nextRowIndex, 1)[0];\n         else preRow = null;\n      };\n      firstRowIndex = rows.findIndex((row) => !row._preRow);\n   };\n   _processRowsLossHeadFnc1(rows, rowsProcessed);\n   return rowsProcessed;\n};\nconst _processRowsLossHeadFnc1 = (rows, rowsProcessed) => {\n   if (!rows.length) return;\n\n   let firstRowIndex = rows.findIndex((r) => _filterRowLossPreRowFnc(r, rows));\n   while (firstRowIndex >= 0) {\n      let preRow = rows.splice(firstRowIndex, 1)[0];\n      while (preRow) {\n         rowsProcessed.push(preRow);\n\n         let nextRowIndex = rows.findIndex((row) => String(row._preRow) == String(preRow.id));\n         if (nextRowIndex >= 0) preRow = rows.splice(nextRowIndex, 1)[0];\n         else preRow = null;\n      };\n      firstRowIndex = rows.findIndex((r) => _filterRowLossPreRowFnc(r, rows));\n   };\n};\nconst _processChainRowsSplitGroupFnc2 = (rows) => {\n   let rowsProcessed = [];\n\n   if (!(rows instanceof Array) || !rows.length) return rowsProcessed;\n\n   let firstRowIndex = rows.findIndex((row) => !row._preRow);\n   while (firstRowIndex >= 0) {\n      let preRow = rows.splice(firstRowIndex, 1)[0];\n      let chain = [];\n      while (preRow) {\n         chain.push(preRow);\n         let nextRowIndex = rows.findIndex((row) => String(row._preRow) == String(preRow.id));\n\n         if (nextRowIndex >= 0) preRow = rows.splice(nextRowIndex, 1)[0];\n         else preRow = null;\n      };\n      rowsProcessed.push(chain);\n      firstRowIndex = rows.findIndex((row) => !row._preRow);\n   };\n   _processChainRowsLossHeadFnc2(rows, rowsProcessed);\n   return rowsProcessed;\n};\nconst _processChainRowsLossHeadFnc2 = (rows, rowsProcessed) => {\n   if (!rows.length) return;\n\n   let firstRowIndex = rows.findIndex((r) => _filterRowLossPreRowFnc(r, rows));\n   while (firstRowIndex >= 0) {\n      let preRow = rows.splice(firstRowIndex, 1)[0];\n      let chain = [];\n      while (preRow) {\n         chain.push(preRow);\n\n         let nextRowIndex = rows.findIndex((row) => String(row._preRow) == String(preRow.id));\n         if (nextRowIndex >= 0) preRow = rows.splice(nextRowIndex, 1)[0];\n         else preRow = null;\n      };\n      rowsProcessed.push(chain);\n      firstRowIndex = rows.findIndex((r) => _filterRowLossPreRowFnc(r, rows));\n   };\n};\nconst _filterRowLossPreRowFnc = (row, rows) => {\n   return rows.every(r => String(row._preRow) != String(r.id));\n};\n\n\n\nexport const updatePreRowParentRowToState = (objState, row) => {\n   objState[row.id] = {\n      id: row.id,\n      _preRow: row._preRow,\n      _parentRow: row._parentRow,\n   };\n};\n\n\n\n\n\n","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageDataEntrySheet\\ColorizedForm2.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\_dashboardComp\\componentsDashboard\\ChartPieDrawing.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\_dashboardComp\\componentsDashboard\\ChartBarDrawing.js",["410"],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\_dashboardComp\\componentsDashboard\\ChartProgress.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\_dashboardComp\\componentsDashboard\\FormPivot.js",["411"],"import { Button, Divider, Modal, Select } from 'antd';\nimport React, { useState } from 'react';\nimport { colorType } from '../assets/constantDashboard';\nimport ChartBarRecordPanel from './ChartBarRecordPanel';\n\n\n\nconst FormPivot = ({ projectName, data, openDrawingTable, dataRecordedDummy, projectId }) => {\n\n   const { panel, dataInfo: { headers, rows: rowsAll } } = data;\n\n\n   const [columnsHeaderSorted, setColumnsHeaderSorted] = useState(null);\n\n\n   const [titleLeft, setTitleLeft] = useState(headers.filter(x => {\n      return !x.includes('(A)') &&\n         !x.includes('(T)') &&\n         x !== 'Model Progress' &&\n         x !== 'Drawing' &&\n         x !== 'Drawing Progress';\n   }));\n\n\n   const [value, setValue] = useState('Select an option...');\n   const [chartRecord, setChartRecord] = useState(false);\n   const [modalConfirm, setModalConfirm] = useState(false);\n\n\n   const onChange = value => {\n      setValue('Select an option...');\n      setTitleLeft(titleLeft.filter(title => title !== value));\n      setColumnsHeaderSorted([...columnsHeaderSorted || [], value]);\n   };\n\n\n   const onResetHandle = () => {\n      setColumnsHeaderSorted(null);\n      setTitleLeft(headers);\n   };\n\n\n   const onRemoveCategory = (e) => {\n      const btnName = e.target.previousSibling.previousSibling.innerText;\n      setColumnsHeaderSorted(columnsHeaderSorted.filter(x => x !== btnName));\n      setTitleLeft([...titleLeft, btnName]);\n   };\n\n\n   const sortedTableOpen = () => {\n      if (!columnsHeaderSorted) {\n         openDrawingTable({\n            projectId,\n            panel,\n            type: 'Pivot Table All',\n         });\n      } else {\n         setModalConfirm(true);\n      }\n   };\n\n\n   const confirmShowSelected = (isShowSelectedOnly) => {\n      openDrawingTable({\n         projectId,\n         panel,\n         type: 'Pivot Table Group',\n         isShowSelectedOnly,\n         headersGroup: columnsHeaderSorted\n      });\n   };\n\n\n   return (\n      <div style={{ marginTop: '10px', padding: '20px' }}>\n         {columnsHeaderSorted && columnsHeaderSorted.map(cl => (\n            <div key={cl} style={{ display: 'flex', width: '100%', margin: '10px auto', padding: 5, border: `1px solid ${colorType.grey1}`, borderRadius: 3 }}>\n               <span style={{ marginRight: 5 }}>{cl}</span>\n               <Divider type='vertical' style={{ height: 21 }} />\n               <span\n                  style={{\n                     marginRight: 15,\n                     color: colorType.red,\n                     cursor: 'pointer',\n                     textAlign: 'center'\n                  }}\n                  onClick={onRemoveCategory}\n               >X</span>\n            </div>\n         ))}\n\n         <Select\n            value={value}\n            showSearch\n            style={{ width: '100%', margin: '0 auto', display: 'table' }}\n            placeholder='Select a title'\n            optionFilterProp='children'\n            onChange={onChange}\n            filterOption={(input, option) => option.props.children.toLowerCase().indexOf(input.toLowerCase()) >= 0}\n         >\n            {titleLeft.map(cl => (\n               <Select.Option value={cl} key={cl}>{cl}</Select.Option>\n            ))}\n         </Select>\n\n         <div style={{ display: 'flex', paddingBottom: '20px' }}>\n            <Button\n               style={{ background: colorType.grey0, width: '100%', margin: '10px auto' }}\n               onClick={sortedTableOpen}\n            >Go to sorted table</Button>\n\n            <Button\n               style={{ background: colorType.grey0, width: '100%', margin: '10px auto' }}\n               onClick={onResetHandle}\n            >Reset</Button>\n         </div>\n\n         <Divider type='horizontal' style={{ padding: '3px 0' }} />\n\n         <div style={{ fontSize: '18px', fontWeight: 'bold', width: '100%', textAlign: 'center', paddingBottom: '15px' }}>Chart report</div>\n         <Button\n            style={{ background: colorType.grey4, width: '100%' }}\n            onClick={() => setChartRecord(true)}\n         >Chart Report</Button>\n\n\n         <Modal\n            title={`Record ${projectName}`}\n            visible={chartRecord}\n            onCancel={() => setChartRecord(false)}\n            width={0.9 * window.innerWidth}\n            footer={null}\n            bodyStyle={{ padding: 15 }}\n         >\n            <ChartBarRecordPanel\n               data={dataRecordedDummy}\n            />\n         </Modal>\n\n         <Modal\n            title='Do you want to show all columns or selected one?'\n            visible={modalConfirm}\n            onCancel={() => setModalConfirm(false)}\n            footer={null}\n         >\n            <Button onClick={() => {\n               confirmShowSelected(true);\n               setModalConfirm(false);\n            }}\n               style={{ margin: 15 }}\n            >Show selected only</Button>\n\n            <Button onClick={() => {\n               confirmShowSelected(false);\n               setModalConfirm(false);\n            }}>Show all</Button>\n\n         </Modal>\n\n      </div>\n   );\n};\n\nexport default FormPivot;\n\n\n\n","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\_dashboardComp\\componentsDashboard\\TableDrawingList.js",["412"],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\_dashboardComp\\componentsDashboard\\PanelSettingDashboard.js",["413"],"import React from 'react';\r\nimport FormFilter from '../../layouts/generalComponents/FormFilter';\r\nimport FormGroup from '../../layouts/generalComponents/FormGroup';\r\nimport FormSort from '../../layouts/generalComponents/FormSort';\r\nimport PanelConfirm from '../../layouts/generalComponents/PanelConfirm';\r\nimport PanelConfirmResetMode from '../../layouts/generalComponents/PanelConfirmResetMode';\r\nimport ReorderColumnForm from '../../layouts/generalComponents/ReorderColumnForm';\r\n\r\n\r\n\r\nconst PanelSettingDashboard = (props) => {\r\n\r\n   const {\r\n      panelSettingType, commandAction, onClickCancelModal,\r\n      rowsAll, modeFilter, modeGroup, modeSort, modeSearch, headers\r\n   } = props;\r\n\r\n   const applyReorderColumns = (data) => commandAction({ type: 'reorder-columns', data });\r\n\r\n   const applyFilter = (filter) => commandAction({ type: 'filter-by-columns', data: { modeFilter: filter } });\r\n\r\n   const applyResetMode = (modeReset) => {\r\n      const modeResetObj = {};\r\n      modeReset.forEach(type => {\r\n         if (type.header === 'Filter' && type.mode === 'hidden') modeResetObj.modeFilter = [];\r\n         if (type.header === 'Sort' && type.mode === 'hidden') modeResetObj.modeSort = {};\r\n         if (type.header === 'Search' && type.mode === 'hidden') modeResetObj.modeSearch = {};\r\n      });\r\n      return commandAction({\r\n         type: 'reset-filter-sort',\r\n         data: { rowsAll, ...modeResetObj }\r\n      });\r\n   };\r\n   const applyQuitGroupingMode = () => {\r\n      return commandAction({\r\n         type: 'reset-filter-sort',\r\n         data: { modeGroup: [], modeSearch: {} }\r\n      });\r\n   };\r\n\r\n   const applyGroup = (data) => commandAction({ type: 'group-columns', data: { modeGroup: data } });\r\n\r\n   const applySort = (data) => commandAction({ type: 'sort-data', data: { modeSort: data } });\r\n\r\n\r\n   return (\r\n      <>\r\n         {panelSettingType === 'filter-ICON' && (\r\n            <FormFilter\r\n               applyFilter={applyFilter}\r\n               onClickCancelModal={onClickCancelModal}\r\n               headers={headers}\r\n               modeFilter={modeFilter}\r\n               rowsAll={rowsAll}\r\n            />\r\n         )}\r\n\r\n         {panelSettingType === 'sort-ICON' && (\r\n            <FormSort\r\n               applySort={applySort}\r\n               onClickCancel={onClickCancelModal}\r\n               headers={headers}\r\n               modeSort={modeSort}\r\n            />\r\n         )}\r\n\r\n\r\n         {panelSettingType === 'swap-ICON-1' && (\r\n            <PanelConfirm\r\n               onClickCancel={onClickCancelModal}\r\n               onClickApply={applyQuitGroupingMode}\r\n               content='Do you want to quit grouping mode ?'\r\n            />\r\n         )}\r\n\r\n         {panelSettingType === 'swap-ICON-2' && (\r\n            <PanelConfirmResetMode\r\n               onClickCancel={onClickCancelModal}\r\n               applyResetMode={applyResetMode}\r\n               modeFilter={modeFilter}\r\n               modeSort={modeSort}\r\n               modeSearch={modeSearch}\r\n            />\r\n         )}\r\n\r\n         {panelSettingType === 'reorderColumn-ICON' && (\r\n            <ReorderColumnForm applyReorderColumns={applyReorderColumns} onClickCancelModal={onClickCancelModal} />\r\n         )}\r\n\r\n\r\n\r\n\r\n         {panelSettingType === 'group-ICON' && (\r\n            <FormGroup \r\n               applyGroup={applyGroup} \r\n               onClickCancelModal={onClickCancelModal} \r\n               headers={headers}\r\n            />\r\n         )}\r\n\r\n      </>\r\n   );\r\n};\r\n\r\nexport default PanelSettingDashboard;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\_dashboardComp\\componentsDashboard\\ChartBarDrawingLate.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\_dashboardComp\\componentsDashboard\\ChartBarStack.js",[],{"ruleId":"414","replacedBy":"415"},{"ruleId":"416","replacedBy":"417"},{"ruleId":"418","severity":1,"message":"419","line":70,"column":44,"nodeType":"420","messageId":"421","endLine":70,"endColumn":91},{"ruleId":"422","severity":1,"message":"423","line":70,"column":70,"nodeType":"424","messageId":"425","endLine":70,"endColumn":72},{"ruleId":"422","severity":1,"message":"423","line":163,"column":30,"nodeType":"424","messageId":"425","endLine":163,"endColumn":32},{"ruleId":"422","severity":1,"message":"423","line":194,"column":16,"nodeType":"424","messageId":"425","endLine":194,"endColumn":18},{"ruleId":"422","severity":1,"message":"423","line":151,"column":23,"nodeType":"424","messageId":"425","endLine":151,"endColumn":25},{"ruleId":"422","severity":1,"message":"423","line":161,"column":23,"nodeType":"424","messageId":"425","endLine":161,"endColumn":25},{"ruleId":"422","severity":1,"message":"423","line":171,"column":23,"nodeType":"424","messageId":"425","endLine":171,"endColumn":25},{"ruleId":"422","severity":1,"message":"423","line":197,"column":28,"nodeType":"424","messageId":"425","endLine":197,"endColumn":30},{"ruleId":"422","severity":1,"message":"423","line":198,"column":18,"nodeType":"424","messageId":"425","endLine":198,"endColumn":20},{"ruleId":"422","severity":1,"message":"423","line":199,"column":21,"nodeType":"424","messageId":"425","endLine":199,"endColumn":23},{"ruleId":"422","severity":1,"message":"423","line":216,"column":28,"nodeType":"424","messageId":"425","endLine":216,"endColumn":30},{"ruleId":"422","severity":1,"message":"423","line":217,"column":18,"nodeType":"424","messageId":"425","endLine":217,"endColumn":20},{"ruleId":"422","severity":1,"message":"423","line":218,"column":21,"nodeType":"424","messageId":"425","endLine":218,"endColumn":23},{"ruleId":"426","severity":1,"message":"427","line":257,"column":13,"nodeType":"428","messageId":"429","endLine":257,"endColumn":19},{"ruleId":"422","severity":1,"message":"423","line":257,"column":28,"nodeType":"424","messageId":"425","endLine":257,"endColumn":30},{"ruleId":"422","severity":1,"message":"423","line":258,"column":18,"nodeType":"424","messageId":"425","endLine":258,"endColumn":20},{"ruleId":"422","severity":1,"message":"423","line":259,"column":21,"nodeType":"424","messageId":"425","endLine":259,"endColumn":23},{"ruleId":"430","severity":1,"message":"431","line":46,"column":7,"nodeType":"432","endLine":46,"endColumn":9,"suggestions":"433"},{"ruleId":"430","severity":1,"message":"434","line":93,"column":7,"nodeType":"432","endLine":93,"endColumn":9,"suggestions":"435"},{"ruleId":"430","severity":1,"message":"436","line":445,"column":7,"nodeType":"432","endLine":445,"endColumn":9,"suggestions":"437"},{"ruleId":"426","severity":1,"message":"438","line":463,"column":28,"nodeType":"428","messageId":"429","endLine":463,"endColumn":46},{"ruleId":"439","severity":1,"message":"440","line":791,"column":19,"nodeType":"420","messageId":"441","endLine":791,"endColumn":21},{"ruleId":"439","severity":1,"message":"440","line":1121,"column":24,"nodeType":"420","messageId":"441","endLine":1121,"endColumn":26},{"ruleId":"426","severity":1,"message":"442","line":1216,"column":7,"nodeType":"428","messageId":"429","endLine":1216,"endColumn":27},{"ruleId":"426","severity":1,"message":"443","line":13,"column":19,"nodeType":"428","messageId":"429","endLine":13,"endColumn":28},{"ruleId":"430","severity":1,"message":"444","line":215,"column":7,"nodeType":"432","endLine":215,"endColumn":29,"suggestions":"445"},{"ruleId":"430","severity":1,"message":"446","line":233,"column":7,"nodeType":"432","endLine":233,"endColumn":36,"suggestions":"447"},{"ruleId":"426","severity":1,"message":"448","line":118,"column":23,"nodeType":"428","messageId":"429","endLine":118,"endColumn":31},{"ruleId":"418","severity":1,"message":"449","line":349,"column":64,"nodeType":"420","messageId":"421","endLine":349,"endColumn":147},{"ruleId":"439","severity":1,"message":"440","line":585,"column":40,"nodeType":"420","messageId":"441","endLine":585,"endColumn":42},{"ruleId":"439","severity":1,"message":"440","line":705,"column":29,"nodeType":"420","messageId":"441","endLine":705,"endColumn":31},{"ruleId":"418","severity":1,"message":"419","line":920,"column":44,"nodeType":"420","messageId":"421","endLine":920,"endColumn":93},{"ruleId":"422","severity":1,"message":"423","line":920,"column":73,"nodeType":"424","messageId":"425","endLine":920,"endColumn":75},{"ruleId":"418","severity":1,"message":"419","line":938,"column":44,"nodeType":"420","messageId":"421","endLine":938,"endColumn":93},{"ruleId":"422","severity":1,"message":"423","line":938,"column":73,"nodeType":"424","messageId":"425","endLine":938,"endColumn":75},{"ruleId":"418","severity":1,"message":"419","line":956,"column":44,"nodeType":"420","messageId":"421","endLine":956,"endColumn":93},{"ruleId":"422","severity":1,"message":"423","line":956,"column":73,"nodeType":"424","messageId":"425","endLine":956,"endColumn":75},{"ruleId":"418","severity":1,"message":"419","line":977,"column":44,"nodeType":"420","messageId":"421","endLine":977,"endColumn":93},{"ruleId":"422","severity":1,"message":"423","line":977,"column":73,"nodeType":"424","messageId":"425","endLine":977,"endColumn":75},{"ruleId":"422","severity":1,"message":"450","line":986,"column":47,"nodeType":"424","messageId":"425","endLine":986,"endColumn":49},{"ruleId":"426","severity":1,"message":"451","line":20,"column":16,"nodeType":"428","messageId":"429","endLine":20,"endColumn":24},{"ruleId":"430","severity":1,"message":"452","line":43,"column":8,"nodeType":"432","endLine":43,"endColumn":10,"suggestions":"453"},{"ruleId":"430","severity":1,"message":"454","line":84,"column":7,"nodeType":"432","endLine":84,"endColumn":9,"suggestions":"455"},{"ruleId":"430","severity":1,"message":"456","line":125,"column":7,"nodeType":"432","endLine":125,"endColumn":9,"suggestions":"457"},{"ruleId":"458","severity":1,"message":"459","line":209,"column":22,"nodeType":"460","endLine":209,"endColumn":61},{"ruleId":"458","severity":1,"message":"459","line":215,"column":22,"nodeType":"460","endLine":215,"endColumn":61},{"ruleId":"458","severity":1,"message":"459","line":222,"column":22,"nodeType":"460","endLine":222,"endColumn":61},{"ruleId":"458","severity":1,"message":"459","line":228,"column":22,"nodeType":"460","endLine":228,"endColumn":62},{"ruleId":"458","severity":1,"message":"459","line":234,"column":22,"nodeType":"460","endLine":234,"endColumn":62},{"ruleId":"430","severity":1,"message":"461","line":30,"column":7,"nodeType":"432","endLine":30,"endColumn":9,"suggestions":"462"},{"ruleId":"422","severity":1,"message":"423","line":49,"column":61,"nodeType":"424","messageId":"425","endLine":49,"endColumn":63},{"ruleId":"463","severity":1,"message":"464","line":382,"column":44,"nodeType":"424","messageId":"465","endLine":382,"endColumn":45},{"ruleId":"466","severity":1,"message":"467","line":798,"column":75,"nodeType":"468","messageId":"469","endLine":798,"endColumn":117,"fix":"470"},{"ruleId":"471","severity":1,"message":"472","line":4,"column":1,"nodeType":"473","endLine":23,"endColumn":3},{"ruleId":"430","severity":1,"message":"474","line":29,"column":7,"nodeType":"432","endLine":29,"endColumn":17,"suggestions":"475"},{"ruleId":"476","severity":1,"message":"477","line":29,"column":13,"nodeType":"478","messageId":"425","endLine":29,"endColumn":19},{"ruleId":"430","severity":1,"message":"479","line":171,"column":7,"nodeType":"432","endLine":171,"endColumn":15,"suggestions":"480"},{"ruleId":"426","severity":1,"message":"481","line":99,"column":7,"nodeType":"428","messageId":"429","endLine":99,"endColumn":14},{"ruleId":"426","severity":1,"message":"482","line":5,"column":9,"nodeType":"428","messageId":"429","endLine":5,"endColumn":14},{"ruleId":"426","severity":1,"message":"483","line":5,"column":16,"nodeType":"428","messageId":"429","endLine":5,"endColumn":22},{"ruleId":"458","severity":1,"message":"459","line":26,"column":29,"nodeType":"460","endLine":29,"endColumn":32},{"ruleId":"430","severity":1,"message":"434","line":89,"column":7,"nodeType":"432","endLine":89,"endColumn":9,"suggestions":"484"},{"ruleId":"426","severity":1,"message":"485","line":209,"column":45,"nodeType":"428","messageId":"429","endLine":209,"endColumn":67},{"ruleId":"430","severity":1,"message":"486","line":418,"column":7,"nodeType":"432","endLine":418,"endColumn":23,"suggestions":"487"},{"ruleId":"439","severity":1,"message":"440","line":792,"column":19,"nodeType":"420","messageId":"441","endLine":792,"endColumn":21},{"ruleId":"426","severity":1,"message":"488","line":878,"column":7,"nodeType":"428","messageId":"429","endLine":878,"endColumn":17},{"ruleId":"439","severity":1,"message":"440","line":1121,"column":24,"nodeType":"420","messageId":"441","endLine":1121,"endColumn":26},{"ruleId":"426","severity":1,"message":"489","line":1152,"column":32,"nodeType":"428","messageId":"429","endLine":1152,"endColumn":44},{"ruleId":"426","severity":1,"message":"443","line":11,"column":20,"nodeType":"428","messageId":"429","endLine":11,"endColumn":29},{"ruleId":"430","severity":1,"message":"444","line":163,"column":7,"nodeType":"432","endLine":163,"endColumn":29,"suggestions":"490"},{"ruleId":"430","severity":1,"message":"446","line":180,"column":7,"nodeType":"432","endLine":180,"endColumn":36,"suggestions":"491"},{"ruleId":"463","severity":1,"message":"464","line":231,"column":44,"nodeType":"424","messageId":"465","endLine":231,"endColumn":45},{"ruleId":"426","severity":1,"message":"492","line":45,"column":13,"nodeType":"428","messageId":"429","endLine":45,"endColumn":22},{"ruleId":"426","severity":1,"message":"493","line":45,"column":24,"nodeType":"428","messageId":"429","endLine":45,"endColumn":29},{"ruleId":"430","severity":1,"message":"494","line":128,"column":8,"nodeType":"432","endLine":128,"endColumn":10,"suggestions":"495"},{"ruleId":"458","severity":1,"message":"459","line":216,"column":29,"nodeType":"460","endLine":216,"endColumn":68},{"ruleId":"458","severity":1,"message":"459","line":222,"column":29,"nodeType":"460","endLine":222,"endColumn":68},{"ruleId":"458","severity":1,"message":"459","line":229,"column":29,"nodeType":"460","endLine":229,"endColumn":68},{"ruleId":"458","severity":1,"message":"459","line":235,"column":29,"nodeType":"460","endLine":235,"endColumn":69},{"ruleId":"458","severity":1,"message":"459","line":241,"column":29,"nodeType":"460","endLine":241,"endColumn":69},{"ruleId":"426","severity":1,"message":"496","line":11,"column":28,"nodeType":"428","messageId":"429","endLine":11,"endColumn":33},{"ruleId":"426","severity":1,"message":"451","line":17,"column":20,"nodeType":"428","messageId":"429","endLine":17,"endColumn":28},{"ruleId":"426","severity":1,"message":"492","line":19,"column":13,"nodeType":"428","messageId":"429","endLine":19,"endColumn":22},{"ruleId":"426","severity":1,"message":"493","line":19,"column":24,"nodeType":"428","messageId":"429","endLine":19,"endColumn":29},{"ruleId":"426","severity":1,"message":"497","line":21,"column":11,"nodeType":"428","messageId":"429","endLine":21,"endColumn":20},{"ruleId":"426","severity":1,"message":"498","line":24,"column":21,"nodeType":"428","messageId":"429","endLine":24,"endColumn":31},{"ruleId":"426","severity":1,"message":"492","line":17,"column":13,"nodeType":"428","messageId":"429","endLine":17,"endColumn":22},{"ruleId":"426","severity":1,"message":"493","line":17,"column":24,"nodeType":"428","messageId":"429","endLine":17,"endColumn":29},{"ruleId":"426","severity":1,"message":"499","line":35,"column":25,"nodeType":"428","messageId":"429","endLine":35,"endColumn":39},{"ruleId":"422","severity":1,"message":"423","line":52,"column":64,"nodeType":"424","messageId":"425","endLine":52,"endColumn":66},{"ruleId":"426","severity":1,"message":"500","line":29,"column":71,"nodeType":"428","messageId":"429","endLine":29,"endColumn":81},{"ruleId":"418","severity":1,"message":"449","line":326,"column":58,"nodeType":"420","messageId":"421","endLine":326,"endColumn":141},{"ruleId":"418","severity":1,"message":"449","line":370,"column":67,"nodeType":"420","messageId":"421","endLine":370,"endColumn":150},{"ruleId":"418","severity":1,"message":"419","line":914,"column":44,"nodeType":"420","messageId":"421","endLine":914,"endColumn":93},{"ruleId":"422","severity":1,"message":"423","line":914,"column":73,"nodeType":"424","messageId":"425","endLine":914,"endColumn":75},{"ruleId":"418","severity":1,"message":"419","line":932,"column":44,"nodeType":"420","messageId":"421","endLine":932,"endColumn":93},{"ruleId":"422","severity":1,"message":"423","line":932,"column":73,"nodeType":"424","messageId":"425","endLine":932,"endColumn":75},{"ruleId":"426","severity":1,"message":"501","line":939,"column":7,"nodeType":"428","messageId":"429","endLine":939,"endColumn":38},{"ruleId":"418","severity":1,"message":"419","line":950,"column":44,"nodeType":"420","messageId":"421","endLine":950,"endColumn":93},{"ruleId":"422","severity":1,"message":"423","line":950,"column":73,"nodeType":"424","messageId":"425","endLine":950,"endColumn":75},{"ruleId":"418","severity":1,"message":"419","line":971,"column":44,"nodeType":"420","messageId":"421","endLine":971,"endColumn":93},{"ruleId":"422","severity":1,"message":"423","line":971,"column":73,"nodeType":"424","messageId":"425","endLine":971,"endColumn":75},{"ruleId":"422","severity":1,"message":"450","line":980,"column":47,"nodeType":"424","messageId":"425","endLine":980,"endColumn":49},{"ruleId":"426","severity":1,"message":"502","line":60,"column":21,"nodeType":"428","messageId":"429","endLine":60,"endColumn":26},{"ruleId":"426","severity":1,"message":"503","line":10,"column":46,"nodeType":"428","messageId":"429","endLine":10,"endColumn":53},{"ruleId":"426","severity":1,"message":"438","line":78,"column":28,"nodeType":"428","messageId":"429","endLine":78,"endColumn":46},{"ruleId":"426","severity":1,"message":"504","line":15,"column":28,"nodeType":"428","messageId":"429","endLine":15,"endColumn":37},"no-native-reassign",["505"],"no-negated-in-lhs",["506"],"no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'preRow'.","ArrowFunctionExpression","unsafeRefs","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-unused-vars","'addNos' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'projectsArray' and 'token'. Either include them or remove the dependency array. If 'setDataDB' needs the current value of 'projectsArray', you can also switch to useReducer instead of useState and read 'projectsArray' in the reducer.","ArrayExpression",["507"],"React Hook useEffect has a missing dependency: 'EventKeyDown'. Either include it or remove the dependency array.",["508"],"React Hook useEffect has missing dependencies: 'companies', 'company', 'email', 'fetchDataOneSheet', 'getSheetRows', 'projectId', 'projectName', 'role', 'roleTradeCompany', 'setUserData', and 'token'. Either include them or remove the dependency array.",["509"],"'setExpandColumnKey' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","expectedInside","'compareDataExcelVsDB' is assigned a value but never used.","'stateCell' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'columnIndex', 'inputRender', 'isLockedColumn', 'isLockedRow', and 'rowIndex'. Either include them or remove the dependency array.",["510"],"React Hook useEffect has missing dependencies: 'cellEditDone', 'columnIndex', 'inputRender', 'isLockedColumn', 'isLockedRow', 'rowIndex', and 'stateCell.tempCopiedText'. Either include them or remove the dependency array.",["511"],"'children' is assigned a value but never used.","Function declared in a loop contains unsafe references to variable(s) 'arrayNodes'.","Expected '!==' and instead saw '!='.","'stateRow' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'headerKey', 'projectId', 'rowId', and 'token'. Either include them or remove the dependency array.",["512"],"React Hook useEffect has missing dependencies: 'headers', 'projectId', 'rowData', 'rowId', 'stateRow.rowsVersionsToSave', and 'token'. Either include them or remove the dependency array.",["513"],"React Hook useEffect has missing dependencies: 'activityRecorded', 'dwgName', 'dwgNumber', 'headers', 'projectId', 'revKey', 'stateRow.rowsAll', 'statusKey', and 'token'. Either include them or remove the dependency array.",["514"],"react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","React Hook useEffect has missing dependencies: 'projectId' and 'token'. Either include them or remove the dependency array.",["515"],"no-useless-concat","Unexpected string concatenation of literals.","unexpectedConcat","no-useless-computed-key","Unnecessarily computed property ['Drawing Number'] found.","Property","unnecessarilyComputedProperty",{"range":"516","text":"517"},"import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","React Hook useEffect has missing dependencies: 'actionType', 'styleFrozen', 'styleHidden', and 'styleShown'. Either include them or remove the dependency array.",["518"],"no-dupe-keys","Duplicate key 'border'.","ObjectExpression","React Hook useEffect has missing dependencies: 'data.value', 'id', and 'setFilterSelect'. Either include them or remove the dependency array. If 'setFilterSelect' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["519"],"'IconRFA' is assigned a value but never used.","'Group' is assigned a value but never used.","'Button' is assigned a value but never used.",["520"],"'OverwriteCellsModified' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'email', 'fetchDataOneSheet', 'getSheetRows', 'projectId', 'projectName', 'role', 'setUserData', and 'token'. Either include them or remove the dependency array.",["521"],"'SpinStyled' is assigned a value but never used.","'userSettings' is assigned a value but never used.",["522"],["523"],"'projectId' is assigned a value but never used.","'token' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'activityRecorded', 'cellsHistoryInCurrentSheet', 'headers', and 'stateRow.rowsAll'. Either include them or remove the dependency array.",["524"],"'rowId' is assigned a value but never used.","'headerKey' is assigned a value but never used.","'setHistory' is assigned a value but never used.","'setHistoryData' is assigned a value but never used.","'setLoading' is assigned a value but never used.","'_processChainRowsSplitGroupFnc2' is assigned a value but never used.","'value' is assigned a value but never used.","'rowsAll' is assigned a value but never used.","'modeGroup' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"525","fix":"526"},{"desc":"527","fix":"528"},{"desc":"529","fix":"530"},{"desc":"531","fix":"532"},{"desc":"533","fix":"534"},{"desc":"535","fix":"536"},{"desc":"537","fix":"538"},{"desc":"539","fix":"540"},{"desc":"541","fix":"542"},[32078,32096],"'Drawing Number'",{"desc":"543","fix":"544"},{"desc":"545","fix":"546"},{"desc":"527","fix":"547"},{"desc":"548","fix":"549"},{"desc":"531","fix":"550"},{"desc":"533","fix":"551"},{"desc":"552","fix":"553"},"Update the dependencies array to be: [projectsArray, token]",{"range":"554","text":"555"},"Update the dependencies array to be: [EventKeyDown]",{"range":"556","text":"557"},"Update the dependencies array to be: [companies, company, email, fetchDataOneSheet, getSheetRows, projectId, projectName, role, roleTradeCompany, setUserData, token]",{"range":"558","text":"559"},"Update the dependencies array to be: [columnIndex, inputRender, isLockedColumn, isLockedRow, rowIndex, stateCell.cellActive]",{"range":"560","text":"561"},"Update the dependencies array to be: [cellEditDone, columnIndex, inputRender, isLockedColumn, isLockedRow, rowIndex, stateCell.cellAppliedAction, stateCell.tempCopiedText]",{"range":"562","text":"563"},"Update the dependencies array to be: [headerKey, projectId, rowId, token]",{"range":"564","text":"565"},"Update the dependencies array to be: [headers, projectId, rowData, rowId, stateRow.rowsVersionsToSave, token]",{"range":"566","text":"567"},"Update the dependencies array to be: [activityRecorded, dwgName, dwgNumber, headers, projectId, revKey, stateRow.rowsAll, statusKey, token]",{"range":"568","text":"569"},"Update the dependencies array to be: [projectId, token]",{"range":"570","text":"571"},"Update the dependencies array to be: [actionType, styleFrozen, styleHidden, styleShown, tag.mode]",{"range":"572","text":"573"},"Update the dependencies array to be: [column, data.value, id, setFilterSelect]",{"range":"574","text":"575"},{"range":"576","text":"557"},"Update the dependencies array to be: [email, fetchDataOneSheet, getSheetRows, projectId, projectName, role, setUserData, sheetDataInput, token]",{"range":"577","text":"578"},{"range":"579","text":"561"},{"range":"580","text":"563"},"Update the dependencies array to be: [activityRecorded, cellsHistoryInCurrentSheet, headers, stateRow.rowsAll]",{"range":"581","text":"582"},[1720,1722],"[projectsArray, token]",[3538,3540],"[EventKeyDown]",[18133,18135],"[companies, company, email, fetchDataOneSheet, getSheetRows, projectId, projectName, role, roleTradeCompany, setUserData, token]",[7646,7668],"[columnIndex, inputRender, isLockedColumn, isLockedRow, rowIndex, stateCell.cellActive]",[8227,8256],"[cellEditDone, columnIndex, inputRender, isLockedColumn, isLockedRow, rowIndex, stateCell.cellAppliedAction, stateCell.tempCopiedText]",[1242,1244],"[headerKey, projectId, rowId, token]",[2695,2697],"[headers, projectId, rowData, rowId, stateRow.rowsVersionsToSave, token]",[4624,4626],"[activityRecorded, dwgName, dwgNumber, headers, projectId, revKey, stateRow.rowsAll, statusKey, token]",[1037,1039],"[projectId, token]",[864,874],"[actionType, styleFrozen, styleHidden, styleShown, tag.mode]",[4823,4831],"[column, data.value, id, setFilterSelect]",[3264,3266],[17252,17268],"[email, fetchDataOneSheet, getSheetRows, projectId, projectName, role, setUserData, sheetDataInput, token]",[5419,5441],[5999,6028],[4660,4662],"[activityRecorded, cellsHistoryInCurrentSheet, headers, stateRow.rowsAll]"]
[{"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\index.js":"1","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\App.js":"2","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\reportWebVitals.js":"3","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\contexts\\cellContext.js":"4","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\contexts\\rowContext.js":"5","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\contexts\\userContext.js":"6","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\contexts\\projectContext.js":"7","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\PageSpreadsheet.jsx":"8","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\contexts\\_createDataContext.js":"9","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\utils\\makeData.js":"10","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\PanelSetting.jsx":"11","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\CellHeader.jsx":"12","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\Cell.jsx":"13","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\PanelFunction.jsx":"14","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\utils\\index.js":"15","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\constants\\index.js":"16","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\PanelCalendar.jsx":"17","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\ReorderColumnForm.jsx":"18","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\ColorizedForm.jsx":"19","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\TableDrawingDetail.jsx":"20","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\TableCellHistory.jsx":"21","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\InputSearch.jsx":"22","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\IconTable.jsx":"23","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\SideBar.jsx":"24","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\CellIndex.jsx":"25","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\FormSort.jsx":"26","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\FormFilter.jsx":"27","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\FormGroup.jsx":"28","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\TableActivityHistory.jsx":"29","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\FormDateAutomation.jsx":"30","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\FormCellHistoryColor.jsx":"31","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\TableRowSelection.jsx":"32","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\ButtonStyle.jsx":"33","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\ButtonGroupComp.jsx":"34","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\PanelConfirm.jsx":"35"},{"size":507,"mtime":1607175136833,"results":"36","hashOfConfig":"37"},{"size":1211,"mtime":1608621628274,"results":"38","hashOfConfig":"37"},{"size":362,"mtime":1606274463595,"results":"39","hashOfConfig":"37"},{"size":2086,"mtime":1607947508900,"results":"40","hashOfConfig":"37"},{"size":2333,"mtime":1608198919736,"results":"41","hashOfConfig":"37"},{"size":912,"mtime":1608189671147,"results":"42","hashOfConfig":"37"},{"size":709,"mtime":1608044745252,"results":"43","hashOfConfig":"37"},{"size":50455,"mtime":1608650340607,"results":"44","hashOfConfig":"37"},{"size":613,"mtime":1604905406752,"results":"45","hashOfConfig":"37"},{"size":3196,"mtime":1607992541474,"results":"46","hashOfConfig":"37"},{"size":13699,"mtime":1608564790541,"results":"47","hashOfConfig":"37"},{"size":749,"mtime":1607316775804,"results":"48","hashOfConfig":"37"},{"size":14295,"mtime":1608607487507,"results":"49","hashOfConfig":"37"},{"size":1750,"mtime":1608450369247,"results":"50","hashOfConfig":"37"},{"size":19088,"mtime":1608648642768,"results":"51","hashOfConfig":"37"},{"size":3330,"mtime":1608611295967,"results":"52","hashOfConfig":"37"},{"size":381,"mtime":1608382149906,"results":"53","hashOfConfig":"37"},{"size":6323,"mtime":1608563289816,"results":"54","hashOfConfig":"37"},{"size":1099,"mtime":1607490395942,"results":"55","hashOfConfig":"37"},{"size":2387,"mtime":1607487215704,"results":"56","hashOfConfig":"37"},{"size":1198,"mtime":1607488662633,"results":"57","hashOfConfig":"37"},{"size":2520,"mtime":1608559597632,"results":"58","hashOfConfig":"37"},{"size":1712,"mtime":1608639101957,"results":"59","hashOfConfig":"37"},{"size":2684,"mtime":1608439355074,"results":"60","hashOfConfig":"37"},{"size":704,"mtime":1608544241999,"results":"61","hashOfConfig":"37"},{"size":6522,"mtime":1608563321500,"results":"62","hashOfConfig":"37"},{"size":5726,"mtime":1608563254841,"results":"63","hashOfConfig":"37"},{"size":3052,"mtime":1608563279826,"results":"64","hashOfConfig":"37"},{"size":10363,"mtime":1608472371865,"results":"65","hashOfConfig":"37"},{"size":3802,"mtime":1608451443474,"results":"66","hashOfConfig":"37"},{"size":2723,"mtime":1608469467582,"results":"67","hashOfConfig":"37"},{"size":6698,"mtime":1608539029918,"results":"68","hashOfConfig":"37"},{"size":640,"mtime":1608563010577,"results":"69","hashOfConfig":"37"},{"size":751,"mtime":1608563473295,"results":"70","hashOfConfig":"37"},{"size":468,"mtime":1608564952857,"results":"71","hashOfConfig":"37"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},"utwymk",{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"74"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"74"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"74"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":25,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"92","messages":"93","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"74"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"74"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"74"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"74"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"74"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"111","messages":"112","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113","usedDeprecatedRules":"74"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116","usedDeprecatedRules":"74"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127","usedDeprecatedRules":"74"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138","usedDeprecatedRules":"74"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"143","usedDeprecatedRules":"74"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"148","usedDeprecatedRules":"74"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"151","messages":"152","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"153","usedDeprecatedRules":"74"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\index.js",[],["158","159"],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\App.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\reportWebVitals.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\contexts\\cellContext.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\contexts\\rowContext.js",["160"],"import { extractCellInfo, formatStringNameToId } from '../utils';\r\nimport createDataContext from './_createDataContext';\r\nconst SERVER_URL = 'http://localhost:9000/api';\r\n\r\n\r\n\r\nconst rowReducer = (state, { type, payload }) => {\r\n    switch (type) {\r\n\r\n        case 'GET_SHEET_ROWS':\r\n        case 'GET_SHEET_ROWS_SHOWN':\r\n            return {\r\n                ...state,\r\n                ...payload\r\n            };\r\n\r\n        case 'UPDATE_SHEET_ROWS':\r\n            return {\r\n                ...state,\r\n                sheetRows: payload\r\n            };\r\n\r\n        case 'SAVE_ROW_PREVIOUS_REV':\r\n            const { rowId, rev, data } = payload;\r\n            return {\r\n                ...state,\r\n                rowsPreviousRev: {\r\n                    ...state.rowsPreviousRev,\r\n                    [rowId]: { ...state.rowsPreviousRev[rowId], [rev]: data }\r\n                }\r\n            };\r\n\r\n        default:\r\n            return state;\r\n    };\r\n};\r\n\r\nconst getSheetRows = dispatch => (data) => {\r\n    dispatch({\r\n        type: 'GET_SHEET_ROWS',\r\n        payload: data\r\n    });\r\n};\r\nconst getSheetRowsShown = dispatch => (data) => {\r\n    dispatch({\r\n        type: 'GET_SHEET_ROWS_SHOWN',\r\n        payload: data\r\n    });\r\n};\r\n\r\n\r\nconst updateSheetRows = dispatch => (currentRows, cells) => {\r\n\r\n    for (const key in cells) {\r\n        const { rowId, headerName } = extractCellInfo(key);\r\n        currentRows.forEach(r => {\r\n            if (r.id === rowId) {\r\n                r[headerName] = cells[key];\r\n            };\r\n        });\r\n    };\r\n\r\n    dispatch({\r\n        type: 'UPDATE_SHEET_ROWS',\r\n        payload: [...currentRows]\r\n    });\r\n};\r\n\r\n\r\nconst saveRowPreviousRev = dispatch => (row, sheetAllData) => {\r\n    let data = {};\r\n    sheetAllData.headers.forEach(hd => {\r\n        if (row.original[formatStringNameToId(hd.text)]) {\r\n            data[hd.key] = row.original[formatStringNameToId(hd.text)]\r\n        };\r\n    });\r\n    dispatch({\r\n        type: 'SAVE_ROW_PREVIOUS_REV',\r\n        payload: {\r\n            data,\r\n            rowId: row.original._id,\r\n            rev: row.original.rev\r\n        }\r\n    });\r\n};\r\n\r\n\r\nexport const { Provider, Context } = createDataContext(\r\n    rowReducer,\r\n    {\r\n        getSheetRows,\r\n        getSheetRowsShown,\r\n\r\n        updateSheetRows,\r\n        saveRowPreviousRev,\r\n    },\r\n    null\r\n);\r\n","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\contexts\\userContext.js",["161"],"import createDataContext from './_createDataContext';\r\nconst SERVER_URL = 'http://localhost:9000/api';\r\n\r\n\r\n\r\nconst rowReducer = (state, { type, payload }) => {\r\n    switch (type) {\r\n\r\n        // case 'SET_USER':\r\n        //     return {\r\n        //         ...state,\r\n        //         user: payload\r\n        //     };\r\n\r\n        case 'SET_SETTINGS':\r\n            return {\r\n                ...state,\r\n                ...payload\r\n            };\r\n            \r\n        default:\r\n            return state;\r\n    };\r\n};\r\n\r\n// const setUser = dispatch => (user) => {\r\n//     dispatch({\r\n//         type: 'SET_USER',\r\n//         payload: user\r\n//     });\r\n// };\r\nconst setSettings = dispatch => (obj) => {\r\n    dispatch({\r\n        type: 'SET_SETTINGS',\r\n        payload: obj\r\n    });\r\n};\r\n\r\n\r\nexport const { Provider, Context } = createDataContext(\r\n    rowReducer,\r\n    {\r\n        setSettings\r\n    },\r\n    null\r\n);\r\n","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\contexts\\projectContext.js",["162"],"import createDataContext from './_createDataContext';\r\n\r\nconst SERVER_URL = 'http://localhost:9000/api';\r\n\r\n\r\nconst projectReducer = (state, { type, payload }) => {\r\n    switch (type) {\r\n\r\n        case 'FETCH_DATA_ONE_SHEET':\r\n            return {\r\n                ...state,\r\n                allDataOneSheet: payload\r\n            }\r\n\r\n        default:\r\n            return state;\r\n    };\r\n};\r\n\r\nconst fetchDataOneSheet = dispatch => (data) => {\r\n    dispatch({\r\n        type: 'FETCH_DATA_ONE_SHEET',\r\n        payload: data\r\n    });\r\n};\r\n\r\n\r\nexport const { Provider, Context } = createDataContext(\r\n    projectReducer,\r\n    {\r\n        fetchDataOneSheet\r\n    },\r\n    {\r\n        allDataOneSheet: null\r\n    }\r\n);\r\n","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\PageSpreadsheet.jsx",["163","164","165","166","167","168","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187"],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\contexts\\_createDataContext.js",["188"],"import React, { createContext, useReducer } from 'react';\r\n\r\n\r\nexport default (reducer, actions, initValue) => {\r\n\r\n    const Context = createContext();\r\n\r\n    const Provider = ({ children }) => {\r\n        const [state, dispatch] = useReducer(reducer, initValue);\r\n\r\n        const boundActions = {};\r\n        for (let key in actions) {\r\n            boundActions[key] = actions[key](dispatch);\r\n        };\r\n\r\n        return (\r\n            <Context.Provider value={{ state, ...boundActions }}>\r\n                {children}\r\n            </Context.Provider>\r\n        );\r\n    };\r\n    return { Context, Provider };\r\n};\r\n","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\utils\\makeData.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\PanelSetting.jsx",["189","190","191","192","193","194","195","196"],"import { Button, Input } from 'antd';\r\nimport moment from 'moment';\r\nimport React, { useContext, useState } from 'react';\r\nimport { unflatten } from 'react-base-table';\r\nimport { Context as CellContext } from '../../contexts/cellContext';\r\nimport { Context as ProjectContext } from '../../contexts/projectContext';\r\nimport { Context as RowContext } from '../../contexts/rowContext';\r\nimport { Context as UserContext } from '../../contexts/userContext';\r\nimport { groupByHeaders, mongoObjectId } from '../../utils';\r\nimport { getPanelWidthHeight } from '../PageSpreadsheet';\r\nimport ColorizedForm from './ColorizedForm';\r\nimport FormCellHistoryColor from './FormCellHistoryColor';\r\nimport FormDateAutomation from './FormDateAutomation';\r\nimport FormFilter from './FormFilter';\r\nimport FormGroup from './FormGroup';\r\nimport FormSort from './FormSort';\r\nimport PanelConfirm from './PanelConfirm';\r\nimport ReorderColumnForm from './ReorderColumnForm';\r\nimport TableActivityHistory from './TableActivityHistory';\r\nimport TableCellHistory from './TableCellHistory';\r\nimport TableDrawingDetail from './TableDrawingDetail';\r\n\r\n\r\n\r\n\r\nconst PanelSetting = (props) => {\r\n\r\n    const { state: stateRow, getSheetRows } = useContext(RowContext);\r\n    const { state: stateProject } = useContext(ProjectContext);\r\n    const { state: stateUser } = useContext(UserContext);\r\n    const { state: stateCell, getCellModifiedTemp } = useContext(CellContext);\r\n\r\n    const { panelType, panelSettingType, xxxxx, onClickCancelModal } = props;\r\n\r\n\r\n    const applyReorderColumns = (reorderColumns) => {\r\n        xxxxx({\r\n            type: 'reorder-columns',\r\n            reorderColumns\r\n        });\r\n    };\r\n    const applyFilter = (filterRows) => {\r\n        xxxxx({\r\n            type: 'filter-by-columns',\r\n            data: filterRows,\r\n        });\r\n    };\r\n    const resetFilterSort = () => {\r\n        xxxxx({ type: 'reset-filter-sort' });\r\n    };\r\n    const applySort = (sortRows) => {\r\n        xxxxx({\r\n            type: 'sort-data',\r\n            data: sortRows,\r\n        });\r\n    };\r\n    const unhideAllRows = () => {\r\n        xxxxx({ type: 'unhide-all-rows' });\r\n    };\r\n\r\n\r\n    const [nosOfRows, setNosOfRows] = useState(1);\r\n    const onClickInsertRow = () => {\r\n\r\n        let allRows = [...stateRow.rowsAll];\r\n\r\n        let rowCurrent = panelType.cellProps.rowData;\r\n\r\n\r\n        let idsArr = []; \r\n        for (let i = 0; i < nosOfRows; i++) {\r\n            idsArr.push(mongoObjectId());\r\n        };\r\n\r\n        let rowAbove, rowBelow;\r\n        if (panelSettingType === 'Insert Drawings Below') {\r\n            rowAbove = panelType.cellProps.rowData;\r\n            let rowAboveIndex = allRows.indexOf(rowAbove);\r\n            rowBelow = allRows[rowAboveIndex + 1];\r\n        } else if (panelSettingType === 'Insert Drawings Above') {\r\n            rowBelow = panelType.cellProps.rowData;\r\n            let rowBelowIndex = allRows.indexOf(rowBelow);\r\n            rowAbove = allRows[rowBelowIndex - 1];\r\n        };\r\n   \r\n        let newRows = [];\r\n        idsArr.forEach((id, i) => {\r\n            newRows.push({\r\n                id,\r\n                _rowLevel: rowCurrent._rowLevel,\r\n                _parentRow: rowCurrent._parentRow,\r\n                _preRow: i === 0 ? rowAbove.id : idsArr[i - 1],\r\n            });\r\n        });\r\n\r\n        rowBelow._preRow = idsArr[idsArr.length - 1]\r\n\r\n        // rowtoChangePrerow._preRow = idsArr[idsArr.length - 1];\r\n\r\n        let rowsArrTop = [...allRows].splice(0, allRows.indexOf(rowAbove) + 1);\r\n        \r\n        let rowsArrBottom = [...allRows].splice(allRows.indexOf(rowAbove) + 1, allRows.length - allRows.indexOf(rowAbove) - 1);\r\n\r\n        const rowsAllOutput = [...rowsArrTop, ...newRows, ...rowsArrBottom];\r\n\r\n        xxxxx({\r\n            type: 'insert-drawings',\r\n            data: {\r\n                rowsVisible: rowsAllOutput.filter(row => stateRow.rowsHidden.indexOf(row.id) === -1 && stateRow.rowsHidden.indexOf(row._parentRow) === -1),\r\n                rowsVisibleInit: rowsAllOutput.filter(row => stateRow.rowsHidden.indexOf(row.id) === -1 && stateRow.rowsHidden.indexOf(row._parentRow) === -1),\r\n                rowsAll: rowsAllOutput,\r\n                rowsUpdateAndNews: [...stateRow.rowsUpdateAndNews || [], ...newRows, rowBelow ]\r\n            }\r\n        });\r\n    };\r\n\r\n\r\n    const applyGroup = (groupArray) => {\r\n        xxxxx({\r\n            type: 'group-columns',\r\n            data: groupByHeaders(stateRow.rowsVisible.filter(r => r._rowLevel === 1), groupArray)\r\n        });\r\n    };\r\n\r\n\r\n    const applyDateAutomation = (dateAutomation) => {\r\n\r\n        let allRows = [...stateRow.rowsAll];\r\n\r\n        const rowId = panelType.cellProps.rowData.id;\r\n        let row = allRows.find(r => r.id === rowId);\r\n        \r\n        Object.keys(dateAutomation).forEach(key => {\r\n            const cellTempId = `${rowId}-${key}`;\r\n            const dateConverted = moment(dateAutomation[key]).format('DD/MM/YY');\r\n            getCellModifiedTemp({ [cellTempId]: dateConverted });\r\n            row[key] = dateConverted;\r\n        });\r\n\r\n        xxxxx({\r\n            type: 'drawing-data-automation',\r\n            data: {\r\n                rowsVisible: allRows.filter(row => stateRow.rowsHidden.indexOf(row.id) === -1 && stateRow.rowsHidden.indexOf(row._parentRow) === -1),\r\n                rowsVisibleInit: allRows.filter(row => stateRow.rowsHidden.indexOf(row.id) === -1 && stateRow.rowsHidden.indexOf(row._parentRow) === -1),\r\n                rowsAll: allRows,\r\n                rowsUpdateAndNews: [...stateRow.rowsUpdateAndNews || [], row ]\r\n            }\r\n        });\r\n    };\r\n\r\n    const createNewDrawingRevision = () => {\r\n        const arrHeadersGoBlank = [\r\n            'Model Start (T)',\r\n            'Model Start (A)',\r\n            'Model Finish (T)',\r\n            'Model Finish (A)',\r\n            'Drawing Start (T)',\r\n            'Drawing Start (A)',\r\n            'Drawing Finish (T)',\r\n            'Drawing Finish (A)',\r\n            'Drg To Consultant (T)',\r\n            'Drg To Consultant (A)',\r\n            'Consultant Reply (T)',\r\n            'Consultant Reply (A)',\r\n            'Get Approval (T)',\r\n            'Get Approval (A)',\r\n            'Construction Issuance Date',\r\n            'Construction Start',\r\n            'Rev',\r\n            'Status'\r\n        ];\r\n\r\n        let allRows = [...stateRow.rowsAll];\r\n\r\n        const rowId = panelType.cellProps.rowData.id;\r\n        let row = allRows.find(r => r.id === rowId);\r\n        \r\n        arrHeadersGoBlank.forEach(hd => {\r\n            const cellTempId = `${rowId}-${hd}`;\r\n            getCellModifiedTemp({ [cellTempId]: '' });\r\n            row[hd] = '';\r\n        });\r\n\r\n        xxxxx({\r\n            type: 'create-new-drawing-revisions',\r\n            data: {\r\n                rowsVisible: allRows.filter(row => stateRow.rowsHidden.indexOf(row.id) === -1 && stateRow.rowsHidden.indexOf(row._parentRow) === -1),\r\n                rowsVisibleInit: allRows.filter(row => stateRow.rowsHidden.indexOf(row.id) === -1 && stateRow.rowsHidden.indexOf(row._parentRow) === -1),\r\n                rowsAll: allRows,\r\n                rowsUpdateAndNews: [...stateRow.rowsUpdateAndNews || [], row ],\r\n                rowsVersionsToSave: [...stateRow.rowsVersionsToSave || [], row ]\r\n            }\r\n        });\r\n    };\r\n\r\n    const setCellHistoryArr = (data) => {\r\n        xxxxx({\r\n            type: 'highlight-cell-history',\r\n            data\r\n        });\r\n    };\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    \r\n    \r\n    const applyColorization = (colorized) => {\r\n        xxxxx({\r\n            type: 'colorized',\r\n            colorized\r\n        });\r\n    };\r\n    const createNewDrawingVersion = () => {\r\n        let arr = stateRow.sheetRows;\r\n        let row = arr.find(r => r.id === panelType.cellProps.rowData.id);\r\n        let index = arr.indexOf(row);\r\n        arr.splice(index, 1);\r\n        arr.splice(index, 0, { ...row, ...newRevisionDrawingData });\r\n\r\n        console.log(arr);\r\n        xxxxx({\r\n            type: 'create-new-drawing-version',\r\n            data: unflatten(arr),\r\n        });\r\n    };\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    const ReorderColumns1 = () => {\r\n        xxxxx(columnSet_01);\r\n    };\r\n    const ReorderColumns2 = () => {\r\n        xxxxx(columnSet_02);\r\n    };\r\n\r\n\r\n\r\n\r\n    \r\n\r\n\r\n\r\n\r\n    return (\r\n        <>\r\n\r\n            {panelSettingType === 'filter-ICON' && (\r\n                <FormFilter applyFilter={applyFilter} />\r\n            )}\r\n\r\n            {panelSettingType === 'reorderColumn-ICON' && (\r\n                <ReorderColumnForm \r\n                    applyReorderColumns={applyReorderColumns} \r\n                    onClickCancelModal={onClickCancelModal} \r\n                />\r\n            )}\r\n\r\n            {panelSettingType === 'rollback-ICON' && (\r\n                <PanelConfirm />\r\n            )}\r\n\r\n            {panelSettingType === 'sort-ICON' && (\r\n                <FormSort applySort={applySort} />\r\n            )}\r\n\r\n            {panelSettingType === 'eye-ICON' && (\r\n                <div>\r\n                    <Button onClick={unhideAllRows}>Unhide All Rows</Button>\r\n                    {/* <Button onClick={hideSpecificRows}>Hide</Button> */}\r\n                </div>\r\n            )}\r\n            {panelSettingType === 'group-ICON' && (\r\n                <FormGroup applyGroup={applyGroup} />\r\n            )}\r\n\r\n\r\n            {(panelSettingType === 'Insert Drawings Below' || panelSettingType === 'Insert Drawings Above') && (\r\n                <div>\r\n                    <Input \r\n                        placeholder='Enter Number Of Drawings...'\r\n                        type='number' min='1'\r\n                        value={nosOfRows} \r\n                        onChange={(e) => setNosOfRows(e.target.value)}\r\n                        style={{\r\n                            marginBottom: 20\r\n                        }}\r\n                    />\r\n                    <Button onClick={onClickInsertRow}>Apply</Button>\r\n                </div>\r\n            )}\r\n\r\n            {panelSettingType === 'history-ICON' && (\r\n                <TableActivityHistory \r\n                    width={getPanelWidthHeight(panelSettingType).width}\r\n                    height={getPanelWidthHeight(panelSettingType).height}\r\n                />\r\n            )}\r\n\r\n            {panelSettingType === 'color-cell-history-ICON' && (\r\n                <FormCellHistoryColor setCellHistoryArr={setCellHistoryArr} />\r\n            )}\r\n\r\n\r\n            {panelSettingType === 'Date Automation' && (\r\n                <FormDateAutomation applyDateAutomation={applyDateAutomation} />\r\n            )}\r\n            \r\n            {panelSettingType === 'Create New Drawing Revision' && (\r\n                <Button onClick={createNewDrawingRevision}>Are you sure</Button>\r\n            )}\r\n\r\n\r\n\r\n            {panelSettingType === 'colorized-ICON' && (\r\n                <ColorizedForm applyColorization={applyColorization} />\r\n            )}\r\n\r\n            {panelSettingType === 'View drawing revision' && (\r\n                <TableDrawingDetail {...panelType.cellProps} />\r\n            )}\r\n\r\n            {panelSettingType === 'View cell history' && (\r\n                <TableCellHistory {...panelType.cellProps} />\r\n            )}\r\n\r\n\r\n\r\n\r\n\r\n        </>\r\n    );\r\n};\r\n\r\nexport default PanelSetting;\r\n\r\n\r\nconst columnSet_01 = {\r\n    fixedColumnCount: 5,\r\n    headers: [\r\n        'Index',\r\n        'Block/Zone',\r\n        'Drawing Name',\r\n        'Drawing Number',\r\n        'RFA Ref',\r\n        'Model Start (T)',\r\n        'Level',\r\n        'Unit/CJ',\r\n        'Drg Type',\r\n        'Use For',\r\n        'Coordinator In Charge',\r\n        'Modeller',\r\n        'Model Start (A)',\r\n        'Model Finish (T)',\r\n        'Model Finish (A)',\r\n        'Model Progress',\r\n        'Drawing Start (T)',\r\n        'Drawing Start (A)',\r\n        'Drawing Finish (T)',\r\n        'Drawing Finish (A)',\r\n        'Drawing Progress',\r\n        'Drg To Consultant (T)',\r\n        'Drg To Consultant (A)',\r\n        'Consultant Reply (T)',\r\n        'Consultant Reply (A)',\r\n        'Get Approval (T)',\r\n        'Get Approval (A)',\r\n        'Construction Issuance Date',\r\n        'Construction Start',\r\n        'Rev',\r\n        'Status',\r\n        'Remark',\r\n    ]\r\n};\r\n\r\n\r\nconst columnSet_02 = {\r\n    fixedColumnCount: 4,\r\n    headers: [\r\n        'Index',\r\n        'Level',\r\n        'Drawing Name',\r\n        'Block/Zone',\r\n        'RFA Ref',\r\n        'Drawing Number',\r\n        'Model Start (T)',\r\n        'Unit/CJ',\r\n        'Drg Type',\r\n        'Use For',\r\n        'Coordinator In Charge',\r\n        'Modeller',\r\n        'Model Start (A)',\r\n        'Model Finish (T)',\r\n        'Model Finish (A)',\r\n        'Model Progress',\r\n        'Drawing Start (T)',\r\n        'Drawing Start (A)',\r\n        'Drawing Finish (T)',\r\n        'Drawing Finish (A)',\r\n        'Drawing Progress',\r\n        'Drg To Consultant (T)',\r\n        'Drg To Consultant (A)',\r\n        'Consultant Reply (T)',\r\n        'Consultant Reply (A)',\r\n        'Get Approval (T)',\r\n        'Get Approval (A)',\r\n        'Construction Issuance Date',\r\n        'Construction Start',\r\n        'Rev',\r\n        'Status',\r\n        'Remark',\r\n    ]\r\n};\r\n\r\n\r\n\r\n\r\nconst newRevisionDrawingData = {\r\n    'Model Start (A)': '',\r\n    'Model Finish (T)': '',\r\n    'Model Finish (A)': '',\r\n    'Model Progress': '',\r\n    'Drawing Start (T)': '',\r\n    'Drawing Start (A)': '',\r\n    'Drawing Finish (T)': '',\r\n    'Drawing Finish (A)': '',\r\n    'Drawing Progress': '',\r\n    'Drg To Consultant (T)': '',\r\n    'Drg To Consultant (A)': '',\r\n    'Consultant Reply (T)': '',\r\n    'Consultant Reply (A)': '',\r\n    'Get Approval (T)': '',\r\n    'Get Approval (A)': '',\r\n    'Construction Issuance Date': '',\r\n    'Construction Start': '',\r\n    'Rev': '',\r\n    'Status': ''\r\n}\r\n","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\CellHeader.jsx",["197","198","199","200","201","202","203","204","205"],"import React, { useContext } from 'react';\r\nimport { Context as CellContext } from '../../contexts/cellContext';\r\n\r\n\r\nconst CellHeader = (props) => {\r\n\r\n    const { className, column, columns, columnIndex, onMouseDownColumnHeader, headerIndex, container } = props;\r\n\r\n    const {\r\n        state: stateCell, getCellModifiedTemp, clearCellModifiedTemp, setCellActive\r\n    } = useContext(CellContext);\r\n\r\n\r\n    return (\r\n        <div\r\n            style={{\r\n                height: '100%',\r\n                width: '100%',\r\n                verticalAlign: 'middle',\r\n            }}\r\n            onMouseDown={(e) => onMouseDownColumnHeader(e, column.title)}\r\n        >\r\n            {column.title}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CellHeader;\r\n","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\Cell.jsx",["206","207","208","209","210","211"],"import moment from 'moment';\r\nimport React, { useContext, useEffect, useRef, useState } from 'react';\r\nimport styled from 'styled-components';\r\nimport { colorType } from '../../constants';\r\nimport { Context as CellContext } from '../../contexts/cellContext';\r\nimport { Context as RowContext } from '../../contexts/rowContext';\r\nimport { Context as UserContext } from '../../contexts/userContext';\r\nimport PanelCalendar from './PanelCalendar';\r\n\r\n\r\n\r\nconst Cell = (props) => {\r\n\r\n    const {\r\n        cellData, rowData, column, setPosition, rowIndex, columnIndex,\r\n        updateStatusCell, isScrolling, container, onRightClickCell, colorized,\r\n        cellOnDoubleClickTrigger, mouseDownStartCellsRange, mouseUpEndCellsRange\r\n    } = props;\r\n\r\n\r\n    const {\r\n        state: stateCell,\r\n        getCellModifiedTemp,\r\n        setCellActive,\r\n    } = useContext(CellContext);\r\n\r\n    const { state: stateUser } = useContext(UserContext);\r\n\r\n    const { state: stateRow, getSheetRows } = useContext(RowContext);\r\n\r\n    \r\n    const inputRef = useRef();\r\n    const cellRef = useRef();\r\n    const panelRef = useRef();\r\n    const buttonRef = useRef();\r\n\r\n    const [inputRender, setInputRender] = useState(false);\r\n    const [initValue, setInitValue] = useState(cellData || '');\r\n    const [value, setValue] = useState(cellData || '');\r\n\r\n\r\n\r\n    // after keydown ENTER to show input ...\r\n    useEffect(() => {\r\n        if (\r\n            !inputRender &&\r\n            stateCell.cellActive &&\r\n            stateCell.cellActive.rowIndex === rowIndex &&\r\n            stateCell.cellActive.columnIndex === columnIndex\r\n        ) {\r\n            setInputRender(true);\r\n        };\r\n    }, [stateCell.cellActive]);\r\n\r\n\r\n    const getCellTempId = () => {\r\n        return `${rowData['id']}-${column.key}`;\r\n    };\r\n\r\n    const cellEditDone = (value) => {\r\n        getCellModifiedTemp({ [getCellTempId()]: value });\r\n\r\n        if (stateRow.rowsUpdateAndNews) {\r\n            let rowsUpdateAndNews = [...stateRow.rowsUpdateAndNews];\r\n            let rowsUpdate = rowsUpdateAndNews.find(r => r.id === rowData.id);\r\n\r\n            if (rowsUpdate) {\r\n                rowsUpdate[column.key] = value;\r\n                getSheetRows({\r\n                    ...stateRow,\r\n                    rowsUpdateAndNews\r\n                });\r\n            } else {\r\n                getSheetRows({\r\n                    ...stateRow,\r\n                    rowsUpdateAndNews: [...stateRow.rowsUpdateAndNews, {...rowData, [column.key]: value}]\r\n                });\r\n            }\r\n        } else {\r\n            getSheetRows({\r\n                ...stateRow,\r\n                rowsUpdateAndNews: [{...rowData, [column.key]: value}]\r\n            });\r\n        };\r\n    };\r\n\r\n\r\n    const onDoubleClick = () => {\r\n        setInputRender(true);\r\n        cellOnDoubleClickTrigger();\r\n    };\r\n    const onClick = () => {\r\n        setBtnShown(true);\r\n        if (!inputRender) {\r\n            setPosition({\r\n                cell: cellRef.current.parentElement,\r\n                rowIndex,\r\n                columnIndex\r\n            });\r\n        };\r\n    };\r\n    useEffect(() => {\r\n        // FOCUS right after press ENTER...\r\n        if (inputRender) {\r\n            inputRef.current.focus();\r\n        };\r\n    }, [inputRender]);\r\n\r\n\r\n    useEffect(() => {\r\n        document.addEventListener('click', EventClickToHidePanelAndInput);\r\n        return () => document.removeEventListener('click', EventClickToHidePanelAndInput);\r\n    }, []);\r\n    const EventClickToHidePanelAndInput = (e) => {\r\n        if (e.target !== cellRef.current && inputRef.current && e.target !== inputRef.current) {\r\n            setInputRender(false);\r\n        } else if (e.target !== cellRef.current && e.target !== panelRef.current && e.target !== buttonRef.current) {\r\n            setPanelData(false);\r\n        };\r\n    };\r\n\r\n    const [btnShown, setBtnShown] = useState(false);\r\n\r\n    const [panelData, setPanelData] = useState(false);\r\n\r\n    const onMouseLeave = () => {\r\n        setBtnShown(false);\r\n    };\r\n    const onMouseDown = (e) => {\r\n        if (e.button === 2) { // check mouse RIGHT CLICK ...\r\n            onRightClickCell(e, props);\r\n        } else { // MULTI SELECT CELL RANGES\r\n            if (!inputRender) {\r\n                mouseDownStartCellsRange({ e, rowIndex, columnIndex, cell: cellRef });\r\n            };\r\n        };\r\n    };\r\n    const onMouseUp = (e) => {\r\n        if (e.button !== 2) {\r\n            mouseUpEndCellsRange({ e, rowIndex, columnIndex, cell: cellRef });\r\n        };\r\n    };\r\n    const pickDataSelect = (value) => {\r\n        setValue(value);\r\n        setPanelData(false);\r\n        setBtnShown(false);\r\n        if (initValue !== value) {\r\n            cellEditDone(value);\r\n        } else {\r\n            setInputRender(false);\r\n        };\r\n    };\r\n    const pickDate = (value) => {\r\n        setValue(moment(value).format('DD/MM/YY'));\r\n        setPanelData(false);\r\n        setBtnShown(false);\r\n        if (initValue !== value) {\r\n            cellEditDone(moment(value).format('DD/MM/YY'));\r\n        } else {\r\n            setInputRender(false);\r\n        };\r\n    };\r\n\r\n\r\n\r\n    const onChange = (e) => {\r\n        setValue(e.target.value);\r\n    };\r\n    const onBlur = () => {\r\n        if (initValue !== value) {\r\n            cellEditDone(value);\r\n        };\r\n        setInputRender(false);\r\n    };\r\n    // ENTER to hide input after finishing typing ...\r\n    const onKeyPress = (e) => {\r\n        if (\r\n            e.key === 'Enter' &&\r\n            inputRender &&\r\n            stateCell.cellActive &&\r\n            stateCell.cellActive.rowIndex === rowIndex &&\r\n            stateCell.cellActive.columnIndex === columnIndex\r\n        ) {\r\n            inputRef.current.blur();\r\n            setCellActive(null);\r\n        };\r\n    };\r\n\r\n\r\n    const cellBackground =\r\n        (\r\n            stateCell.cellsRangeStart &&\r\n            stateCell.cellsRangeEnd &&\r\n            checkIfCellsRangeContainsCell(stateCell.cellsRangeStart, stateCell.cellsRangeEnd, rowIndex, columnIndex)\r\n        )\r\n            ? colorType.cellHighlighted\r\n            // : (\r\n            //     cellSearchFound &&\r\n            //     rowData.id in cellSearchFound &&\r\n            //     cellSearchFound[rowData.id].indexOf(column.key) !== -1\r\n            // )\r\n            //     ? 'green'\r\n            : null;\r\n\r\n    const cellFontWeight = (rowData._rowLevel === 0 || rowData._rowLevel === - 1) && 'bold';\r\n\r\n    return (\r\n        <>\r\n            <div\r\n                ref={cellRef}\r\n                onDoubleClick={onDoubleClick}\r\n                onClick={onClick}\r\n                onMouseLeave={onMouseLeave}\r\n                onMouseDown={onMouseDown}\r\n                onMouseUp={onMouseUp}\r\n                style={{\r\n                    width: '100%',\r\n                    height: '100%',\r\n                    color: cellLocked(stateUser.role, column) ? '#8FBC8F' : 'black',\r\n                    background: cellBackground,\r\n                    fontWeight: cellFontWeight,\r\n                    padding: 5,\r\n                    position: 'relative',\r\n                    pointerEvents: cellLocked(stateUser.role, column) && 'none'\r\n                }}\r\n            >\r\n                {inputRender ? (\r\n                    <input\r\n                        value={value}\r\n                        onChange={onChange}\r\n                        onBlur={onBlur}\r\n                        onKeyPress={onKeyPress}\r\n                        ref={inputRef}\r\n                        style={{\r\n                            outline: 'none',\r\n                            border: 'none',\r\n                            background: 'transparent',\r\n                            width: column.width - 20\r\n                        }}\r\n                    />\r\n\r\n                ) : (\r\n                        <span>\r\n                            {\r\n                                stateCell.cellsModifiedTemp[getCellTempId()] ||  // there is modified data\r\n                                (getCellTempId() in stateCell.cellsModifiedTemp && ' ') || // there is modified data === empty\r\n                                cellData // there is no modification\r\n                            }\r\n                        </span>\r\n                    )\r\n                }\r\n\r\n\r\n                {btnShown && !cellBtnDisabled(column.key) && (\r\n                    <div\r\n                        style={{\r\n                            cursor: 'pointer',\r\n                            position: 'absolute',\r\n                            right: 5,\r\n                            top: 5,\r\n                            height: 17,\r\n                            width: 17,\r\n                            backgroundImage: `url('./img/btn-${checkIconBtn(column.key) ? 'calendar2' : 'down2'}.png')`,\r\n                            backgroundSize: 17\r\n                        }}\r\n                        onMouseDown={(e) => {\r\n                            e.stopPropagation();\r\n                            setPanelData(!panelData);\r\n                        }}\r\n                        ref={buttonRef}\r\n                    />\r\n                )}\r\n\r\n\r\n                {panelData && (\r\n                    <div\r\n                        style={{\r\n                            position: 'absolute',\r\n                            background: 'white',\r\n                            top: 30,\r\n                            left: 0,\r\n                            minWidth: column.width,\r\n                            zIndex: 999,\r\n                            padding: '3px 5px 3px 7px',\r\n                            boxShadow: 'rgba(0, 0, 0, 0.09) 0px 2px 1px, rgba(0, 0, 0, 0.09) 0px 4px 2px, rgba(0, 0, 0, 0.09) 0px 8px 4px, rgba(0, 0, 0, 0.09) 0px 16px 8px, rgba(0, 0, 0, 0.09) 0px 32px 16px'\r\n                        }}\r\n                        ref={panelRef}\r\n                    >\r\n                        {checkIconBtn(column.key) ? (\r\n                            <PanelCalendar pickDate={pickDate} />\r\n                        ) : textArr(column.key).map(item => {\r\n                            return (\r\n                                <SelectStyled\r\n                                    key={item}\r\n                                    onMouseDown={(e) => {\r\n                                        e.stopPropagation();\r\n                                        pickDataSelect(item);\r\n                                        if (column.key === 'Status' || column.key === 'Rev' ||\r\n                                            column.key === 'Coordinator In Charge' || column.key === 'Modeller') {\r\n                                            updateStatusCell({ [getCellTempId()]: item });\r\n                                        };\r\n                                    }}\r\n                                >{item}</SelectStyled>\r\n                            )\r\n                        })}\r\n                    </div>\r\n                )}\r\n\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Cell;\r\n\r\nconst SelectStyled = styled.div`\r\n    padding: 4px;\r\n\r\n    &:hover {\r\n        background-color: ${colorType.grey4};\r\n        cursor: pointer\r\n    };\r\n    transition: 0.2s;\r\n\r\n`;\r\n\r\nconst checkIconBtn = (header) => {\r\n    return header.includes('(A)') || header.includes('(T)');\r\n};\r\n\r\nconst cellBtnDisabled = (headerId) => {\r\n    if (headerId === 'Index' || headerId === 'Drawing Number' || headerId === 'Drawing Name') return true;\r\n};\r\n\r\n\r\nconst textArr = (header) => {\r\n    const arr = header === 'Status' ? [\r\n        'Reject And Resubmit',\r\n        'Approved for Construction',\r\n        'Not Started',\r\n        'Consultant reviewing',\r\n        'Approved with comments, to Resubmit',\r\n        'Approved with Comment, no submission Required',\r\n        'Revise In-Progress',\r\n        '1st cut of drawing in-progress',\r\n    ] : header === 'Rev' ? [\r\n        '0', 'A', 'B', 'C'\r\n    ] : header === 'RFA Ref' ? [\r\n        'RFA/HAN/ARC/067', 'RFA/HAN/ARC/056', 'RFA/HAN/ARC/055', 'RFA/HAN/ARC/040', 'RFA/HAN/ARC/042', 'RFA/HAN/ARC/045',\r\n    ] : [];\r\n    return arr;\r\n};\r\n\r\n\r\nconst colors = {\r\n    red: '#FFDAB9',\r\n    blue: '#AFEEEE',\r\n    brown: '#F0E68C',\r\n    green: '#98FB98',\r\n    white: 'white'\r\n};\r\n\r\n\r\nconst colorizedRows = (colorized, rowData) => {\r\n    if (colorized === 'Rev') {\r\n        return rowData[colorized] === '0' ? colors.red :\r\n            rowData[colorized] === 'A' ? colors.blue :\r\n                rowData[colorized] === 'B' ? colors.brown : colors.white\r\n    } else if (colorized === 'Status') {\r\n        return rowData[colorized] === 'Reject And Resubmit' ? colors.red :\r\n            rowData[colorized] === 'Approved for Construction' ? colors.blue :\r\n                rowData[colorized] === 'Not Started' ? colors.white : colors.green\r\n    } else if (colorized === 'Modeller') {\r\n        return rowData[colorized] === 'Anne' ? colors.red :\r\n            rowData[colorized] === 'Judy' ? colors.blue :\r\n                rowData[colorized] === 'Thomas' ? colors.white : colors.green\r\n    } else if (colorized === 'Coordinator In Charge') {\r\n        return rowData[colorized] === 'Hannah' ? colors.red : colors.white\r\n    };\r\n};\r\n\r\n\r\nconst cellLocked = (title, column) => {\r\n    const ColumnsLocked = [\r\n        'Model Start (T)',\r\n        'Model Start (A)',\r\n        'Model Finish (T)',\r\n        'Model Finish (A)',\r\n        'Model Progress',\r\n        'Drawing Start (T)',\r\n        'Drawing Start (A)',\r\n        'Drawing Finish (T)',\r\n        'Drawing Finish (A)',\r\n    ];\r\n    if (title === 'modeller' && ColumnsLocked.includes(column.key)) return true;\r\n};\r\n\r\n\r\nconst checkIfCellsRangeContainsCell = (cellsRangeStart, cellsRangeEnd, rowIndex, columnIndex) => {\r\n\r\n    let rowMin = cellsRangeStart.rowIndex <= cellsRangeEnd.rowIndex ? cellsRangeStart.rowIndex : cellsRangeEnd.rowIndex;\r\n    let rowMax = cellsRangeStart.rowIndex > cellsRangeEnd.rowIndex ? cellsRangeStart.rowIndex : cellsRangeEnd.rowIndex;\r\n\r\n    let columnMin = cellsRangeStart.columnIndex <= cellsRangeEnd.columnIndex ? cellsRangeStart.columnIndex : cellsRangeEnd.columnIndex;\r\n    let columnMax = cellsRangeStart.columnIndex > cellsRangeEnd.columnIndex ? cellsRangeStart.columnIndex : cellsRangeEnd.columnIndex;\r\n\r\n    return (\r\n        rowIndex >= rowMin &&\r\n        rowIndex <= rowMax &&\r\n        columnIndex >= columnMin &&\r\n        columnIndex <= columnMax\r\n    );\r\n};","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\PanelFunction.jsx",["212","213"],"import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { colorType } from '../../constants';\r\n\r\n\r\nconst PanelFunction = (props) => {\r\n\r\n    const { buttonPanelFunction, panelType } = props;\r\n\r\n\r\n    \r\n    const listButton = panelType.type === 'column' ? [\r\n        'Insert Column Left',\r\n        'Insert Column Right',\r\n        'Delete Column',\r\n        'Filter',\r\n        'Sort Rows Drawing Type',\r\n        'Sort All Rows',\r\n        'Manage Column Value',\r\n        'Group This Column'\r\n\r\n    ] : [\r\n            'Create New Drawing Revision',\r\n            'Date Automation',\r\n            'View Cell History',\r\n            'View Drawing Revision',\r\n            'Insert Drawings Below',\r\n            'Insert Drawings Above',\r\n        ];\r\n\r\n\r\n    return (\r\n        <div \r\n            style={{ \r\n                border: `1px solid ${colorType.grey1}`,\r\n                background: 'white',\r\n            }}\r\n        >\r\n            {listButton.map(btn => (\r\n                <Container\r\n                    key={btn}\r\n                    onMouseDown={() => buttonPanelFunction(btn)}\r\n                    style={disabledBtn(props, btn)}\r\n                >\r\n                    {btn}\r\n                </Container>\r\n\r\n            ))}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default PanelFunction;\r\n\r\nconst Container = styled.div`\r\n    padding: 7px;\r\n    padding-left: 25px;\r\n    \r\n    cursor: pointer;\r\n    color: black;\r\n    &:hover {\r\n        background: ${colorType.grey0};\r\n    };\r\n\r\n`;\r\n\r\n\r\nconst disabledBtn = (props, btn) => {\r\n    const { buttonPanelFunction, panelType, groupingMode } = props;\r\n\r\n    if (!groupingMode && btn === 'Group This Column') return {\r\n        pointerEvents: 'none',\r\n        color: 'grey'\r\n    };\r\n};\r\n\r\n\r\n","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\utils\\index.js",["214","215","216","217","218"],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\constants\\index.js",["219"],"export const cellActiveStyle = {\r\n    background: '#B0C4DE',\r\n    border: '2px solid grey'\r\n};\r\n\r\nexport const colorType = {\r\n    yellow: '#fff200',\r\n    dark: '#1e272e',\r\n    grey0: '#ecf0f1',\r\n    grey1: '#bdc3c7',\r\n    grey2: '#636e72',\r\n    grey3: '#dfe4ea',\r\n    grey4: '#f1f2f6',\r\n    red: '#b33939',\r\n    green: '#009432',\r\n    blue: '#0984e3',\r\n    orange: '#cc8e35',\r\n    purple: '#303952',\r\n    tableBorderColor: '#A9A9A9',\r\n    cellHighlighted: '#B0C4DE',\r\n    primary: '#34495e',\r\n    secondary: '#46607a'\r\n};\r\n\r\n\r\n\r\nexport const dimension = {\r\n    tableBorder: '1px',\r\n    headerHeight: 50,\r\n    innerTableHeight: 800,\r\n    cellIndexWidth: '45px',\r\n    bodyTableRowHeight: 28,\r\n    navBarHeight: '49px',\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst headersArrInit = [\r\n    'Drawing Number',\r\n    'Drawing Name',\r\n    'RFA Ref',\r\n    'Block/Zone',\r\n    'Level',\r\n    'Unit/CJ',\r\n    'Drg Type',\r\n    'Use For',\r\n    'Coordinator In Charge',\r\n    'Modeller',\r\n    'Model Start (T)',\r\n    'Model Start (A)',\r\n    'Model Finish (T)',\r\n    'Model Finish (A)',\r\n    'Model Progress',\r\n    'Drawing Start (T)',\r\n    'Drawing Start (A)',\r\n    'Drawing Finish (T)',\r\n    'Drawing Finish (A)',\r\n    'Drawing Progress',\r\n    'Drg To Consultant (T)',\r\n    'Drg To Consultant (A)',\r\n    'Consultant Reply (T)',\r\n    'Consultant Reply (A)',\r\n    'Get Approval (T)',\r\n    'Get Approval (A)',\r\n    'Construction Issuance Date',\r\n    'Construction Start',\r\n    'Rev',\r\n    'Status',\r\n    'Remark',\r\n];\r\nexport const headerHidden = {\r\n    'MANAGER': [\r\n        'Block/Zone',\r\n        'Level',\r\n        'Unit/CJ',\r\n        'Drg Type',\r\n        'Use For',\r\n        'Model Start (T)',\r\n        'Model Start (A)',\r\n        'Model Finish (T)',\r\n        'Model Finish (A)',\r\n        'Model Progress',\r\n        'Drawing Start (T)',\r\n        'Drawing Start (A)',\r\n        'Drawing Finish (T)',\r\n        'Drawing Finish (A)',\r\n        'Drawing Progress',\r\n        'Drg To Consultant (T)',\r\n        'Drg To Consultant (A)',\r\n    ]\r\n};\r\nexport const headerLocked = {\r\n    'MODELLER': [\r\n        'Model Start (T)',\r\n        'Model Start (A)',\r\n        'Model Finish (T)',\r\n        'Model Finish (A)',\r\n        'Model Progress',\r\n        'Drawing Start (T)',\r\n        'Drawing Start (A)',\r\n        'Drawing Finish (T)',\r\n        'Drawing Finish (A)',\r\n        'Drawing Progress',\r\n        'Drg To Consultant (T)',\r\n        'Drg To Consultant (A)',\r\n        'Consultant Reply (T)',\r\n        'Consultant Reply (A)',\r\n    ]\r\n};\r\n\r\n\r\n\r\n\r\nexport const headerColumnsDuplicatedByRevisions = [\r\n    'Drawing Number',\r\n    'Drawing Name',\r\n    'RFA Ref',\r\n    'Block/Zone',\r\n    'Level',\r\n    // 'Unit/CJ',\r\n    'Drg Type',\r\n    'Use For',\r\n    'Coordinator In Charge',\r\n    'Modeller',\r\n    // 'Model Start (T)',\r\n    // 'Model Start (A)',\r\n    // 'Model Finish (T)',\r\n    // 'Model Finish (A)',\r\n    // 'Model Progress',\r\n    // 'Drawing Start (T)',\r\n    // 'Drawing Start (A)',\r\n    // 'Drawing Finish (T)',\r\n    // 'Drawing Finish (A)',\r\n    // 'Drawing Progress',\r\n    // 'Drg To Consultant (T)',\r\n    // 'Drg To Consultant (A)',\r\n    // 'Consultant Reply (T)',\r\n    // 'Consultant Reply (A)',\r\n    // 'Get Approval (T)',\r\n    // 'Get Approval (A)',\r\n    'Construction Issuance Date',\r\n    'Construction Start',\r\n    // 'Rev',\r\n    // 'Status',\r\n    // 'Remark',\r\n];\r\n\r\n\r\n","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\PanelCalendar.jsx",["220","221"],"import { Calendar, Radio } from 'antd';\r\nimport React from 'react';\r\n\r\n\r\nconst { Group, Button } = Radio;\r\n\r\n\r\nconst PanelCalendar = ({ pickDate }) => {\r\n\r\n    return (\r\n        <div style={{ width: 300 }}>\r\n            <Calendar\r\n                fullscreen={false}\r\n                onSelect={pickDate}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default PanelCalendar;\r\n","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\ReorderColumnForm.jsx",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\ColorizedForm.jsx",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\TableDrawingDetail.jsx",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\TableCellHistory.jsx",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\InputSearch.jsx",["222"],"import { Icon, Input, Tooltip } from 'antd';\r\nimport _, { debounce } from 'lodash';\r\nimport React, { useContext } from 'react';\r\nimport styled from 'styled-components';\r\nimport { colorType } from '../../constants';\r\nimport { Context as RowContext } from '../../contexts/rowContext';\r\n\r\nconst { Search } = Input;\r\n\r\n\r\nconst InputSearch = ({ searchGlobal, closeSearchInput }) => {\r\n\r\n    const { state: stateRow } = useContext(RowContext);\r\n\r\n    const onChange = debounce((e) => {\r\n        let search = e.target.value;\r\n        let rows = [...stateRow.rowsVisible];\r\n        let rowsFound = {};\r\n        rows.forEach(row => {\r\n            let obj = {};\r\n            Object.keys(row).forEach(key => {\r\n\r\n                if (row[key] && row[key].toString().toLowerCase().includes(search.toLowerCase())) {\r\n                    obj[row.id] = [...obj[row.id] || [], key];\r\n                };\r\n            });\r\n            if (!_.isEmpty(obj)) rowsFound = { ...rowsFound, [row.id]: obj[row.id] };\r\n        });\r\n        searchGlobal(rowsFound);\r\n    }, 500);\r\n\r\n    return (\r\n        <InputStyled>\r\n            <input\r\n                placeholder='Input search text...'\r\n                onChange={onChange}\r\n                style={{\r\n                    border: 'none',\r\n                    outline: 'none',\r\n                    height: 21,\r\n                    background: 'transparent'\r\n                }}\r\n            />\r\n            <div style={{ float: 'right' }}>\r\n                <Tooltip title='Show Searched Row Only'>\r\n                    <IconStyled\r\n                        type='right-circle'\r\n                        onClick={closeSearchInput}\r\n                    />\r\n                </Tooltip>\r\n                <Tooltip title='Quit Search'>\r\n                    <IconStyled\r\n                        type='close-circle'\r\n                        onClick={closeSearchInput}\r\n                    />\r\n                </Tooltip>\r\n\r\n            </div>\r\n\r\n        </InputStyled>\r\n    );\r\n};\r\n\r\nexport default InputSearch;\r\n\r\n\r\nconst IconStyled = styled(Icon)`\r\n    font-size: 15px;\r\n    margin-right: 2px;\r\n    margin-top: 3px;\r\n    padding: 3px;\r\n    border-radius: 50%;\r\n    &:hover {\r\n        background-color: ${colorType.grey1}\r\n    }\r\n    transform: translate(0, -3px);\r\n`;\r\n\r\nconst InputStyled = styled.div`\r\n\r\n    margin: 3px;\r\n    padding-top: 1px;\r\n    padding-left: 3px;\r\n    height: 25px;\r\n    width: 250px;\r\n    border: 1px solid black;\r\n    border-radius: 5px;\r\n    background-color: ${colorType.grey4}\r\n`;","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\IconTable.jsx",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\SideBar.jsx",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\CellIndex.jsx",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\FormSort.jsx",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\FormFilter.jsx",["223"],"import { Icon, Select } from 'antd';\r\nimport React, { useContext, useState } from 'react';\r\nimport styled from 'styled-components';\r\nimport { colorType } from '../../constants';\r\nimport { Context as RowContext } from '../../contexts/rowContext';\r\nimport { Context as UserContext } from '../../contexts/userContext';\r\nimport { mongoObjectId } from '../../utils';\r\nimport ButtonGroupComp from './ButtonGroupComp';\r\n\r\nconst { Option } = Select;\r\n\r\n\r\n\r\nconst FormFilter = ({ applyFilter, onClickCancelModal }) => {\r\n\r\n\r\n    const [filterColumn, setFilterColumn] = useState({});\r\n    const { state: stateRow } = useContext(RowContext);\r\n\r\n    const setFilterSelect = (dataFilter) => {\r\n        setFilterColumn({ ...filterColumn, ...dataFilter });\r\n    };\r\n    const removeFilterTag = (column) => {\r\n        let xxx = { ...filterColumn };\r\n        delete xxx[column];\r\n        setFilterColumn(xxx);\r\n    };\r\n\r\n    const [tags, setTags] = useState([mongoObjectId()]);\r\n    const onClickAddTag = () => {\r\n        setTags([...tags, mongoObjectId()]);\r\n    };\r\n\r\n    const onClickApply = () => {\r\n\r\n        let rowArr = stateRow.rowsVisible;\r\n\r\n        Object.keys(filterColumn).forEach(cl => {\r\n            rowArr = rowArr.filter(r => r[cl] === filterColumn[cl]);\r\n        });\r\n\r\n        applyFilter(rowArr);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <div style={{ padding: 20, borderBottom: `1px solid ${colorType.grey4}` }}>\r\n                {Object.keys(filterColumn).map(key => (\r\n                    <div key={key} style={{ display: 'flex' }}>\r\n                        <SelectComp\r\n                            setFilterSelect={setFilterSelect}\r\n                            removeFilterTag={removeFilterTag}\r\n                            filterColumn={filterColumn}\r\n                            headerKey={key}\r\n                            \r\n                        />\r\n                        <IconStyled>\r\n                            <Icon \r\n                                type='close' \r\n                                style={{ \r\n                                    transform: 'translate(0, -3px)',\r\n                                    color: colorType.grey2,\r\n                                    fontSize: 11\r\n                                }}\r\n                                onClick={() => removeFilterTag(key)} \r\n                            />\r\n                        </IconStyled>\r\n                        \r\n                    </div>\r\n                ))}\r\n\r\n                <SelectComp\r\n                    setFilterSelect={setFilterSelect}\r\n                    removeFilterTag={removeFilterTag}\r\n                    filterColumn={filterColumn}\r\n                />\r\n\r\n            </div>\r\n            <div style={{ padding: 20, display: 'flex', flexDirection: 'row-reverse' }}>\r\n                <ButtonGroupComp\r\n                    onClickCancel={onClickCancelModal}\r\n                    onClickApply={onClickApply}\r\n                />\r\n            </div>\r\n        </>\r\n    );\r\n};\r\nexport default FormFilter;\r\n\r\n\r\nconst IconStyled = styled.div`\r\n        margin-left: 7px;\r\n        width: 18px; \r\n        height: 18px; \r\n        border: 1px solid ${colorType.grey1};\r\n        text-align: center;\r\n        &:hover {\r\n            background-color: ${colorType.grey4};\r\n            cursor: pointer;\r\n        };\r\n\r\n`;\r\n\r\n\r\n\r\n\r\nconst SelectComp = ({ setFilterSelect, removeFilterTag, filterColumn, headerKey }) => {\r\n\r\n    const { state: stateUser } = useContext(UserContext);\r\n    const { state: stateRow } = useContext(RowContext);\r\n\r\n    let columnsValueArr = getColumnsValue(stateRow.rowsAll, stateUser.headersShown);\r\n\r\n    const [column, setColumn] = useState(headerKey);\r\n\r\n\r\n    return (\r\n        <div style={{ display: 'flex', paddingBottom: 25, width: '90%' }}>\r\n\r\n            <SelectStyled\r\n                defaultValue={headerKey === undefined ? 'Select Field...' : headerKey}\r\n                style={{ \r\n                    marginRight: 13, \r\n                    width: '47%',\r\n                }}\r\n                onChange={(column) => setColumn(column)}\r\n            \r\n            >\r\n                {getHeadersFilterArr(stateUser.headersShown, columnsValueArr, Object.keys(filterColumn)).map(hd => (\r\n                    <Option key={hd} value={hd}>{hd}</Option>\r\n                ))}\r\n            </SelectStyled>\r\n\r\n\r\n            <SelectStyled\r\n                defaultValue={filterColumn[headerKey] === undefined ? 'Select Value...' : filterColumn[headerKey]}\r\n                style={{ \r\n                    // background: headerKey === undefined && 'red',\r\n                    width: '47%'\r\n                }}\r\n                onChange={(value) => setFilterSelect({ [column]: value })}\r\n                disabled={!column ? true : false}\r\n            >\r\n                {column && columnsValueArr[column].map(hd => (\r\n                    <Option key={hd} value={hd}>{hd}</Option>\r\n                ))}\r\n            </SelectStyled>\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\nconst SelectStyled = styled(Select)`\r\n    .ant-select-selection {\r\n        border-radius: 0;\r\n    }\r\n`;\r\n\r\n\r\nconst getColumnsValue = (rows, headers) => {\r\n    let valueObj = {};\r\n    headers.forEach(hd => {\r\n        let valueArr = [];\r\n        rows.filter(r => r._rowLevel === 1).forEach(row => {\r\n            valueArr.push(row[hd] || '');\r\n        });\r\n        valueArr = [...new Set(valueArr)].filter(e => e);\r\n\r\n        if (valueArr.length > 0) valueObj[hd] = valueArr;\r\n    });\r\n    return valueObj;\r\n};\r\n\r\n\r\nconst getHeadersFilterArr = (headers, columnsValueArr, filtered) => {\r\n    let arr = [];\r\n    headers.forEach(hd => {\r\n        if (columnsValueArr[hd] && filtered.indexOf(hd) === -1) arr.push(hd);\r\n    });\r\n    return arr;\r\n};","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\FormGroup.jsx",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\TableActivityHistory.jsx",["224","225"],"import { Button, Input } from 'antd';\r\nimport Axios from 'axios';\r\n// import moment from 'moment';\r\nimport moment from 'moment';\r\nimport namor from 'namor';\r\nimport React, { useContext, useEffect, useState } from 'react';\r\nimport BaseTable, { AutoResizer } from 'react-base-table';\r\nimport { Context as ProjectContext } from '../../contexts/projectContext';\r\nimport { Context as RowContext } from '../../contexts/rowContext';\r\nimport { convertHistoryData, mongoObjectId } from '../../utils';\r\nconst SERVER_URL = 'http://localhost:9000/api';\r\n\r\n\r\n\r\n\r\n\r\nconst getRndDate = () => {\r\n    let min = 0;\r\n    let max = 1000000;\r\n    return Math.floor(Math.random() * (max - min)) + min;\r\n};\r\n\r\n\r\n\r\nconst Table = (props) => {\r\n    return (\r\n        <AutoResizer>\r\n            {({ width, height }) => {\r\n                return (\r\n                    <BaseTable {...props} width={width - 100} height={height - 100} />\r\n                );\r\n            }}\r\n        </AutoResizer>\r\n    );\r\n};\r\n\r\n\r\n\r\nconst TableActivityHistory = ({ width, height }) => {\r\n\r\n\r\n    const {\r\n        state: stateProject\r\n    } = useContext(ProjectContext);\r\n\r\n    const {\r\n        state: stateRow\r\n    } = useContext(RowContext);\r\n\r\n    const projectId = stateProject.allDataOneSheet._id\r\n\r\n    const headers = [\r\n        'Drawing Number',\r\n        'Drawing Name',\r\n        'Column',\r\n        'Value',\r\n        'User',\r\n        'Created At',\r\n    ];\r\n\r\n\r\n    useEffect(() => {\r\n\r\n        const fetchProjectHistory = async () => {\r\n            try {\r\n\r\n                const res = await Axios.get(`${SERVER_URL}/cell/history/${projectId}`);\r\n\r\n                console.log('HISTORY...', res.data);\r\n                setHistoryData(res.data);\r\n                \r\n\r\n            } catch (err) {\r\n                console.log(err);\r\n            };\r\n        };\r\n        fetchProjectHistory();\r\n    }, []);\r\n\r\n\r\n    const [historyData, setHistoryData] = useState([]);\r\n    \r\n    const [data, setData] = useState([]);\r\n\r\n    const [valueStart, setValueStart] = useState('12/01/20');\r\n    const [valueEnd, setValueEnd] = useState('22/05/21');\r\n\r\n    const onClick = () => {\r\n        let start = moment(moment(valueStart,'DD/MM/YY').format('MM/DD/YY')).toDate();\r\n        let end = moment(moment(valueEnd,'DD/MM/YY').format('MM/DD/YY')).toDate();\r\n\r\n        if (start > end) return;\r\n\r\n        let filterCells = convertHistoryData(historyData).filter(cell => {\r\n            let createdAt = moment(cell.createdAt).toDate()\r\n            return createdAt >= start && createdAt <= end;\r\n        });\r\n   \r\n        setData(filterCells.map(cell => {\r\n            let drawingData = getDrawingName(\r\n                stateProject.allDataOneSheet.publicSettings.headers,\r\n                stateRow.rowsAll,\r\n                cell.row,\r\n                cell.headerKey\r\n            );\r\n            let obj = {\r\n                id: mongoObjectId(),\r\n                'Drawing Name': drawingData.drawingName,\r\n                'Drawing Number': drawingData.drawingNumber,\r\n                Column: drawingData.headerText,\r\n                Value: cell.text,\r\n                'Created At': moment(cell.createdAt).format('DD/MM/YY HH:mm:ss'),\r\n                User: cell.username\r\n            };\r\n            return obj;\r\n        }));\r\n        \r\n    };\r\n\r\n\r\n    return (\r\n        <div style={{\r\n            width,\r\n            height,\r\n        }}>\r\n            <div style={{ display: 'flex' }}>\r\n                <Input \r\n                    placeholder='From Date...' \r\n                    onChange={(e) => setValueStart(e.target.value)} \r\n                    value={valueStart} \r\n                    style={{width: 200}}\r\n                />\r\n                <Input \r\n                    placeholder='To Date...' \r\n                    onChange={(e) => setValueEnd(e.target.value)} \r\n                    value={valueEnd} \r\n                    style={{width: 200}}\r\n                />\r\n                <Button type='primary' onClick={onClick}>Check</Button>\r\n            </div>\r\n            <Table\r\n                fixed\r\n                columns={generateColumns(headers)}\r\n                data={data}\r\n                rowHeight={28}\r\n            />\r\n        </div>\r\n\r\n    );\r\n};\r\n\r\nexport default TableActivityHistory;\r\n\r\n\r\nconst getDrawingName = (headers, rowsAll, rowId, headerId) => {\r\n\r\n    let row = rowsAll.find(r => r.id === rowId);\r\n    let headerText = headers.find(hd => hd.key === headerId)['text'];\r\n\r\n    return {\r\n        headerText,\r\n        drawingName: row['Drawing Name'],\r\n        drawingNumber: row['Drawing Number'],\r\n    }\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst generateColumns = (headers) => headers.map((column, columnIndex) => ({\r\n\r\n    key: column,\r\n    dataKey: column,\r\n    title: column,\r\n    resizable: true,\r\n    width: 150,\r\n}));\r\n\r\nconst dummy = [\r\n    { id: mongoObjectId(), 'Drawing Number': namor.generate({ words: 0, numbers: 0 }), 'Column': 'Rev', Value: 'C', 'Created At': getRndDate() },\r\n    { id: mongoObjectId(), 'Drawing Number': namor.generate({ words: 0, numbers: 0 }), 'Column': 'Status', Value: 'Finish', 'Created At': getRndDate() },\r\n    { id: mongoObjectId(), 'Drawing Number': namor.generate({ words: 0, numbers: 0 }), 'Column': 'Rev', Value: 'A', 'Created At': getRndDate() },\r\n    { id: mongoObjectId(), 'Drawing Number': namor.generate({ words: 0, numbers: 0 }), 'Column': 'Start', Value: '20/01/20', 'Created At': getRndDate() },\r\n    { id: mongoObjectId(), 'Drawing Number': namor.generate({ words: 0, numbers: 0 }), 'Column': 'Start', Value: '19/09/20', 'Created At': getRndDate() },\r\n    { id: mongoObjectId(), 'Drawing Number': namor.generate({ words: 0, numbers: 0 }), 'Column': 'Start', Value: '20/05/21', 'Created At': getRndDate() },\r\n    { id: mongoObjectId(), 'Drawing Number': namor.generate({ words: 0, numbers: 0 }), 'Column': 'Model Start', Value: '20/06/21', 'Created At': getRndDate() },\r\n    { id: mongoObjectId(), 'Drawing Number': namor.generate({ words: 0, numbers: 0 }), 'Column': 'Model Finish', Value: '11/05/21', 'Created At': getRndDate() },\r\n    { id: mongoObjectId(), 'Drawing Number': namor.generate({ words: 0, numbers: 0 }), 'Column': 'Drawing', Value: '15/05/21', 'Created At': getRndDate() },\r\n    { id: mongoObjectId(), 'Drawing Number': namor.generate({ words: 0, numbers: 0 }), 'Column': 'Rev', Value: '0', 'Created At': getRndDate() },\r\n    { id: mongoObjectId(), 'Drawing Number': namor.generate({ words: 0, numbers: 0 }), 'Column': 'Rev', Value: 'C', 'Created At': getRndDate() },\r\n    { id: mongoObjectId(), 'Drawing Number': namor.generate({ words: 0, numbers: 0 }), 'Column': 'Status', Value: 'Finish', 'Created At': getRndDate() },\r\n    { id: mongoObjectId(), 'Drawing Number': namor.generate({ words: 0, numbers: 0 }), 'Column': 'Rev', Value: 'A', 'Created At': getRndDate() },\r\n    { id: mongoObjectId(), 'Drawing Number': namor.generate({ words: 0, numbers: 0 }), 'Column': 'Start', Value: '20/05/21', 'Created At': getRndDate() },\r\n    { id: mongoObjectId(), 'Drawing Number': namor.generate({ words: 0, numbers: 0 }), 'Column': 'Model Start', Value: '20/06/21', 'Created At': getRndDate() },\r\n    { id: mongoObjectId(), 'Drawing Number': namor.generate({ words: 0, numbers: 0 }), 'Column': 'Model Finish', Value: '11/05/21', 'Created At': getRndDate() },\r\n    { id: mongoObjectId(), 'Drawing Number': namor.generate({ words: 0, numbers: 0 }), 'Column': 'Drawing', Value: '15/05/21', 'Created At': getRndDate() },\r\n    { id: mongoObjectId(), 'Drawing Number': namor.generate({ words: 0, numbers: 0 }), 'Column': 'Rev', Value: '0', 'Created At': getRndDate() },\r\n    { id: mongoObjectId(), 'Drawing Number': namor.generate({ words: 0, numbers: 0 }), 'Column': 'Rev', Value: 'C', 'Created At': getRndDate() },\r\n    { id: mongoObjectId(), 'Drawing Number': namor.generate({ words: 0, numbers: 0 }), 'Column': 'Status', Value: 'Finish', 'Created At': getRndDate() },\r\n    { id: mongoObjectId(), 'Drawing Number': namor.generate({ words: 0, numbers: 0 }), 'Column': 'Rev', Value: 'A', 'Created At': getRndDate() },\r\n    { id: mongoObjectId(), 'Drawing Number': namor.generate({ words: 0, numbers: 0 }), 'Column': 'Start', Value: '20/05/21', 'Created At': getRndDate() },\r\n    { id: mongoObjectId(), 'Drawing Number': namor.generate({ words: 0, numbers: 0 }), 'Column': 'Model Start', Value: '20/06/21', 'Created At': getRndDate() },\r\n    { id: mongoObjectId(), 'Drawing Number': namor.generate({ words: 0, numbers: 0 }), 'Column': 'Model Finish', Value: '11/05/21', 'Created At': getRndDate() },\r\n    { id: mongoObjectId(), 'Drawing Number': namor.generate({ words: 0, numbers: 0 }), 'Column': 'Drawing', Value: '15/05/21', 'Created At': getRndDate() },\r\n    { id: mongoObjectId(), 'Drawing Number': namor.generate({ words: 0, numbers: 0 }), 'Column': 'Rev', Value: '0', 'Created At': getRndDate() },\r\n    { id: mongoObjectId(), 'Drawing Number': namor.generate({ words: 0, numbers: 0 }), 'Column': 'Rev', Value: 'C', 'Created At': getRndDate() },\r\n    { id: mongoObjectId(), 'Drawing Number': namor.generate({ words: 0, numbers: 0 }), 'Column': 'Status', Value: 'Finish', 'Created At': getRndDate() },\r\n    { id: mongoObjectId(), 'Drawing Number': namor.generate({ words: 0, numbers: 0 }), 'Column': 'Rev', Value: 'A', 'Created At': getRndDate() },\r\n    { id: mongoObjectId(), 'Drawing Number': namor.generate({ words: 0, numbers: 0 }), 'Column': 'Start', Value: '20/01/20', 'Created At': getRndDate() },\r\n    { id: mongoObjectId(), 'Drawing Number': namor.generate({ words: 0, numbers: 0 }), 'Column': 'Start', Value: '19/09/20', 'Created At': getRndDate() },\r\n    { id: mongoObjectId(), 'Drawing Number': namor.generate({ words: 0, numbers: 0 }), 'Column': 'Start', Value: '20/05/21', 'Created At': getRndDate() },\r\n    { id: mongoObjectId(), 'Drawing Number': namor.generate({ words: 0, numbers: 0 }), 'Column': 'Model Start', Value: '20/06/21', 'Created At': getRndDate() },\r\n    { id: mongoObjectId(), 'Drawing Number': namor.generate({ words: 0, numbers: 0 }), 'Column': 'Model Finish', Value: '11/05/21', 'Created At': getRndDate() },\r\n    { id: mongoObjectId(), 'Drawing Number': namor.generate({ words: 0, numbers: 0 }), 'Column': 'Drawing', Value: '15/05/21', 'Created At': getRndDate() },\r\n    { id: mongoObjectId(), 'Drawing Number': namor.generate({ words: 0, numbers: 0 }), 'Column': 'Rev', Value: '0', 'Created At': getRndDate() },\r\n];","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\FormDateAutomation.jsx",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\FormCellHistoryColor.jsx",["226","227","228"],"import { Button, DatePicker } from 'antd';\r\nimport Axios from 'axios';\r\nimport moment from 'moment';\r\nimport React, { useContext, useEffect, useState } from 'react';\r\nimport { Context as ProjectContext } from '../../contexts/projectContext';\r\nimport { Context as RowContext } from '../../contexts/rowContext';\r\nimport { convertHistoryData } from '../../utils';\r\nconst SERVER_URL = 'http://localhost:9000/api';\r\n\r\n\r\nconst FormCellHistoryColor = ({setCellHistoryArr}) => {\r\n\r\n    const {\r\n        state: stateProject\r\n    } = useContext(ProjectContext);\r\n\r\n    const {\r\n        state: stateRow\r\n    } = useContext(RowContext);\r\n\r\n    const projectId = stateProject.allDataOneSheet._id;\r\n    const headersArr = stateProject.allDataOneSheet.publicSettings.headers;\r\n\r\n    useEffect(() => {\r\n\r\n        const fetchProjectHistory = async () => {\r\n            try {\r\n\r\n                const res = await Axios.get(`${SERVER_URL}/cell/history/${projectId}`);\r\n\r\n                console.log('HISTORY...', res.data);\r\n                console.log(convertHistoryData(res.data));\r\n                setHistoryData(res.data);\r\n\r\n\r\n            } catch (err) {\r\n                console.log(err);\r\n            };\r\n        };\r\n        fetchProjectHistory();\r\n    }, []);\r\n\r\n    const [historyData, setHistoryData] = useState([]);\r\n    const [start, setStart] = useState(null);\r\n    const [end, setEnd] = useState(null);\r\n\r\n\r\n    const onClick = () => {\r\n        let startDate = start.toDate();\r\n        let endDate = end.toDate();\r\n\r\n        if (startDate > endDate) return;\r\n\r\n        let filterCells = convertHistoryData(historyData).filter(cell => {\r\n\r\n            let createdAt = moment(cell.createdAt).toDate();\r\n            return createdAt >= startDate && createdAt <= endDate;\r\n        });\r\n\r\n\r\n\r\n        const cellArr = filterCells.map(ch => {\r\n            const { row: rowId, headerKey } = ch;\r\n            let headerText = headersArr.find(hd => hd.key === headerKey).text;\r\n            return {\r\n                rowId,\r\n                header: headerText\r\n            }\r\n        });\r\n\r\n        let unique = cellArr.reduce((res, itm) => {\r\n            let result = res.find(item => JSON.stringify(item) == JSON.stringify(itm));\r\n            if(!result) return res.concat(itm);\r\n            return res;\r\n        }, []);\r\n        setCellHistoryArr(unique);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <div style={{ display: 'flex', marginBottom: 20 }}>\r\n                <DatePicker onChange={e => setStart(e)} />\r\n                <DatePicker onChange={e => setEnd(e)} />\r\n            </div>\r\n            <Button type='primary' onClick={onClick}>Check</Button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default FormCellHistoryColor;\r\n","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\TableRowSelection.jsx",["229","230","231"],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\ButtonStyle.jsx",["232"],"import { Button } from 'antd';\r\nimport React from 'react';\r\n\r\nconst ButtonStyle = ({\r\n    colorText,\r\n    marginRight,\r\n    borderColor,\r\n    background,\r\n    name,\r\n    onClick\r\n}) => {\r\n\r\n    return (\r\n        <Button \r\n            style={{\r\n                borderRadius: 0,\r\n                background: background,\r\n                color: colorText,\r\n                border: 'none',\r\n                marginRight: marginRight,\r\n                border: `1px solid ${borderColor || background}`\r\n            }}\r\n            onClick={onClick}\r\n        >\r\n            {name}\r\n        </Button>\r\n    );\r\n};\r\n\r\nexport default ButtonStyle;\r\n\r\n\r\n","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\ButtonGroupComp.jsx",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\PanelConfirm.jsx",[],{"ruleId":"233","replacedBy":"234"},{"ruleId":"235","replacedBy":"236"},{"ruleId":"237","severity":1,"message":"238","line":3,"column":7,"nodeType":"239","messageId":"240","endLine":3,"endColumn":17},{"ruleId":"237","severity":1,"message":"238","line":2,"column":7,"nodeType":"239","messageId":"240","endLine":2,"endColumn":17},{"ruleId":"237","severity":1,"message":"238","line":3,"column":7,"nodeType":"239","messageId":"240","endLine":3,"endColumn":17},{"ruleId":"237","severity":1,"message":"241","line":46,"column":7,"nodeType":"239","messageId":"240","endLine":46,"endColumn":17},{"ruleId":"237","severity":1,"message":"242","line":85,"column":9,"nodeType":"239","messageId":"240","endLine":85,"endColumn":28},{"ruleId":"237","severity":1,"message":"243","line":86,"column":9,"nodeType":"239","messageId":"240","endLine":86,"endColumn":26},{"ruleId":"244","severity":1,"message":"245","line":163,"column":8,"nodeType":"246","endLine":163,"endColumn":10,"suggestions":"247"},{"ruleId":"237","severity":1,"message":"248","line":395,"column":12,"nodeType":"239","messageId":"240","endLine":395,"endColumn":28},{"ruleId":"237","severity":1,"message":"249","line":395,"column":30,"nodeType":"239","messageId":"240","endLine":395,"endColumn":49},{"ruleId":"237","severity":1,"message":"250","line":424,"column":9,"nodeType":"239","messageId":"240","endLine":424,"endColumn":27},{"ruleId":"237","severity":1,"message":"251","line":425,"column":9,"nodeType":"239","messageId":"240","endLine":425,"endColumn":25},{"ruleId":"237","severity":1,"message":"252","line":446,"column":23,"nodeType":"239","messageId":"240","endLine":446,"endColumn":35},{"ruleId":"237","severity":1,"message":"253","line":468,"column":12,"nodeType":"239","messageId":"240","endLine":468,"endColumn":17},{"ruleId":"237","severity":1,"message":"254","line":468,"column":19,"nodeType":"239","messageId":"240","endLine":468,"endColumn":27},{"ruleId":"237","severity":1,"message":"255","line":473,"column":17,"nodeType":"239","messageId":"240","endLine":473,"endColumn":27},{"ruleId":"244","severity":1,"message":"256","line":598,"column":8,"nodeType":"246","endLine":598,"endColumn":19,"suggestions":"257"},{"ruleId":"237","severity":1,"message":"258","line":667,"column":29,"nodeType":"239","messageId":"240","endLine":667,"endColumn":47},{"ruleId":"237","severity":1,"message":"259","line":1275,"column":7,"nodeType":"239","messageId":"240","endLine":1275,"endColumn":14},{"ruleId":"237","severity":1,"message":"260","line":1304,"column":7,"nodeType":"239","messageId":"240","endLine":1304,"endColumn":30},{"ruleId":"237","severity":1,"message":"261","line":1323,"column":7,"nodeType":"239","messageId":"240","endLine":1323,"endColumn":18},{"ruleId":"237","severity":1,"message":"262","line":1342,"column":7,"nodeType":"239","messageId":"240","endLine":1342,"endColumn":22},{"ruleId":"263","severity":1,"message":"264","line":1375,"column":41,"nodeType":"265","messageId":"266","endLine":1375,"endColumn":43},{"ruleId":"263","severity":1,"message":"264","line":1375,"column":104,"nodeType":"265","messageId":"266","endLine":1375,"endColumn":106},{"ruleId":"263","severity":1,"message":"264","line":1378,"column":43,"nodeType":"265","messageId":"266","endLine":1378,"endColumn":45},{"ruleId":"263","severity":1,"message":"264","line":1378,"column":107,"nodeType":"265","messageId":"266","endLine":1378,"endColumn":109},{"ruleId":"263","severity":1,"message":"264","line":1380,"column":42,"nodeType":"265","messageId":"266","endLine":1380,"endColumn":44},{"ruleId":"263","severity":1,"message":"264","line":1380,"column":111,"nodeType":"265","messageId":"266","endLine":1380,"endColumn":113},{"ruleId":"267","severity":1,"message":"268","line":1426,"column":31,"nodeType":"269","messageId":"270","endLine":1426,"endColumn":33},{"ruleId":"271","severity":1,"message":"272","line":4,"column":1,"nodeType":"273","endLine":23,"endColumn":3},{"ruleId":"237","severity":1,"message":"274","line":28,"column":30,"nodeType":"239","messageId":"240","endLine":28,"endColumn":42},{"ruleId":"237","severity":1,"message":"275","line":29,"column":20,"nodeType":"239","messageId":"240","endLine":29,"endColumn":32},{"ruleId":"237","severity":1,"message":"276","line":30,"column":20,"nodeType":"239","messageId":"240","endLine":30,"endColumn":29},{"ruleId":"237","severity":1,"message":"277","line":31,"column":20,"nodeType":"239","messageId":"240","endLine":31,"endColumn":29},{"ruleId":"237","severity":1,"message":"278","line":48,"column":11,"nodeType":"239","messageId":"240","endLine":48,"endColumn":26},{"ruleId":"237","severity":1,"message":"279","line":218,"column":11,"nodeType":"239","messageId":"240","endLine":218,"endColumn":34},{"ruleId":"237","severity":1,"message":"280","line":239,"column":11,"nodeType":"239","messageId":"240","endLine":239,"endColumn":26},{"ruleId":"237","severity":1,"message":"281","line":242,"column":11,"nodeType":"239","messageId":"240","endLine":242,"endColumn":26},{"ruleId":"237","severity":1,"message":"282","line":7,"column":13,"nodeType":"239","messageId":"240","endLine":7,"endColumn":22},{"ruleId":"237","severity":1,"message":"283","line":7,"column":32,"nodeType":"239","messageId":"240","endLine":7,"endColumn":39},{"ruleId":"237","severity":1,"message":"284","line":7,"column":41,"nodeType":"239","messageId":"240","endLine":7,"endColumn":52},{"ruleId":"237","severity":1,"message":"285","line":7,"column":79,"nodeType":"239","messageId":"240","endLine":7,"endColumn":90},{"ruleId":"237","severity":1,"message":"286","line":7,"column":92,"nodeType":"239","messageId":"240","endLine":7,"endColumn":101},{"ruleId":"237","severity":1,"message":"277","line":10,"column":16,"nodeType":"239","messageId":"240","endLine":10,"endColumn":25},{"ruleId":"237","severity":1,"message":"287","line":10,"column":27,"nodeType":"239","messageId":"240","endLine":10,"endColumn":46},{"ruleId":"237","severity":1,"message":"288","line":10,"column":48,"nodeType":"239","messageId":"240","endLine":10,"endColumn":69},{"ruleId":"237","severity":1,"message":"289","line":10,"column":71,"nodeType":"239","messageId":"240","endLine":10,"endColumn":84},{"ruleId":"237","severity":1,"message":"290","line":16,"column":27,"nodeType":"239","messageId":"240","endLine":16,"endColumn":38},{"ruleId":"237","severity":1,"message":"286","line":16,"column":40,"nodeType":"239","messageId":"240","endLine":16,"endColumn":49},{"ruleId":"237","severity":1,"message":"291","line":16,"column":69,"nodeType":"239","messageId":"240","endLine":16,"endColumn":78},{"ruleId":"237","severity":1,"message":"292","line":38,"column":23,"nodeType":"239","messageId":"240","endLine":38,"endColumn":35},{"ruleId":"244","severity":1,"message":"293","line":53,"column":8,"nodeType":"246","endLine":53,"endColumn":30,"suggestions":"294"},{"ruleId":"237","severity":1,"message":"295","line":364,"column":7,"nodeType":"239","messageId":"240","endLine":364,"endColumn":20},{"ruleId":"237","severity":1,"message":"296","line":69,"column":13,"nodeType":"239","messageId":"240","endLine":69,"endColumn":32},{"ruleId":"237","severity":1,"message":"297","line":69,"column":34,"nodeType":"239","messageId":"240","endLine":69,"endColumn":43},{"ruleId":"298","severity":1,"message":"299","line":101,"column":33,"nodeType":"300","messageId":"301","endLine":101,"endColumn":35},{"ruleId":"298","severity":1,"message":"299","line":118,"column":19,"nodeType":"300","messageId":"301","endLine":118,"endColumn":21},{"ruleId":"237","severity":1,"message":"302","line":144,"column":7,"nodeType":"239","messageId":"240","endLine":144,"endColumn":17},{"ruleId":"237","severity":1,"message":"303","line":219,"column":7,"nodeType":"239","messageId":"240","endLine":219,"endColumn":17},{"ruleId":"237","severity":1,"message":"304","line":304,"column":7,"nodeType":"239","messageId":"240","endLine":304,"endColumn":18},{"ruleId":"237","severity":1,"message":"305","line":42,"column":7,"nodeType":"239","messageId":"240","endLine":42,"endColumn":21},{"ruleId":"237","severity":1,"message":"306","line":5,"column":9,"nodeType":"239","messageId":"240","endLine":5,"endColumn":14},{"ruleId":"237","severity":1,"message":"307","line":5,"column":16,"nodeType":"239","messageId":"240","endLine":5,"endColumn":22},{"ruleId":"237","severity":1,"message":"308","line":8,"column":9,"nodeType":"239","messageId":"240","endLine":8,"endColumn":15},{"ruleId":"237","severity":1,"message":"309","line":30,"column":11,"nodeType":"239","messageId":"240","endLine":30,"endColumn":24},{"ruleId":"244","severity":1,"message":"310","line":78,"column":8,"nodeType":"246","endLine":78,"endColumn":10,"suggestions":"311"},{"ruleId":"237","severity":1,"message":"312","line":182,"column":7,"nodeType":"239","messageId":"240","endLine":182,"endColumn":12},{"ruleId":"237","severity":1,"message":"313","line":18,"column":16,"nodeType":"239","messageId":"240","endLine":18,"endColumn":24},{"ruleId":"244","severity":1,"message":"310","line":41,"column":8,"nodeType":"246","endLine":41,"endColumn":10,"suggestions":"314"},{"ruleId":"298","severity":1,"message":"299","line":72,"column":64,"nodeType":"300","messageId":"301","endLine":72,"endColumn":66},{"ruleId":"237","severity":1,"message":"315","line":117,"column":11,"nodeType":"239","messageId":"240","endLine":117,"endColumn":29},{"ruleId":"237","severity":1,"message":"316","line":123,"column":11,"nodeType":"239","messageId":"240","endLine":123,"endColumn":29},{"ruleId":"237","severity":1,"message":"317","line":128,"column":11,"nodeType":"239","messageId":"240","endLine":128,"endColumn":33},{"ruleId":"318","severity":1,"message":"319","line":21,"column":17,"nodeType":"320","messageId":"301","endLine":21,"endColumn":23},"no-native-reassign",["321"],"no-negated-in-lhs",["322"],"no-unused-vars","'SERVER_URL' is assigned a value but never used.","Identifier","unusedVar","'dataOrigin' is assigned a value but never used.","'cellsRangeStartCell' is assigned a value but never used.","'cellsRangeEndCell' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'EventKeyDown'. Either include it or remove the dependency array.","ArrayExpression",["323"],"'statusCellAction' is assigned a value but never used.","'setStatusCellAction' is assigned a value but never used.","'setCellsRangeStart' is assigned a value but never used.","'setCellsRangeEnd' is assigned a value but never used.","'setProjectId' is assigned a value but never used.","'state' is assigned a value but never used.","'setstate' is assigned a value but never used.","'rowsToSave' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'email', 'fetchDataOneSheet', 'getSheetRows', 'projectIdForge', and 'setSettings'. Either include them or remove the dependency array.",["324"],"'setExpandColumnKey' is assigned a value but never used.","'addZero' is assigned a value but never used.","'getCellRangeRectangular' is assigned a value but never used.","'getUserRole' is assigned a value but never used.","'getRowsSettings' is assigned a value but never used.","no-mixed-operators","Unexpected mix of '&&' and '||'.","LogicalExpression","unexpectedMixedOperator","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","'getSheetRows' is assigned a value but never used.","'stateProject' is assigned a value but never used.","'stateUser' is assigned a value but never used.","'stateCell' is assigned a value but never used.","'resetFilterSort' is assigned a value but never used.","'createNewDrawingVersion' is assigned a value but never used.","'ReorderColumns1' is assigned a value but never used.","'ReorderColumns2' is assigned a value but never used.","'className' is assigned a value but never used.","'columns' is assigned a value but never used.","'columnIndex' is assigned a value but never used.","'headerIndex' is assigned a value but never used.","'container' is assigned a value but never used.","'getCellModifiedTemp' is assigned a value but never used.","'clearCellModifiedTemp' is assigned a value but never used.","'setCellActive' is assigned a value but never used.","'isScrolling' is assigned a value but never used.","'colorized' is assigned a value but never used.","'setInitValue' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'columnIndex', 'inputRender', and 'rowIndex'. Either include them or remove the dependency array.",["325"],"'colorizedRows' is assigned a value but never used.","'buttonPanelFunction' is assigned a value but never used.","'panelType' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'returnDate' is assigned a value but never used.","'getSubData' is assigned a value but never used.","'getSubData2' is assigned a value but never used.","'headersArrInit' is assigned a value but never used.","'Group' is assigned a value but never used.","'Button' is assigned a value but never used.","'Search' is assigned a value but never used.","'onClickAddTag' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'projectId'. Either include it or remove the dependency array.",["326"],"'dummy' is assigned a value but never used.","'stateRow' is assigned a value but never used.",["327"],"'setSelectedRowKeys' is assigned a value but never used.","'setExpandedRowKeys' is assigned a value but never used.","'removeRowKeysFromState' is assigned a value but never used.","no-dupe-keys","Duplicate key 'border'.","ObjectExpression","no-global-assign","no-unsafe-negation",{"desc":"328","fix":"329"},{"desc":"330","fix":"331"},{"desc":"332","fix":"333"},{"desc":"334","fix":"335"},{"desc":"334","fix":"336"},"Update the dependencies array to be: [EventKeyDown]",{"range":"337","text":"338"},"Update the dependencies array to be: [email, fetchDataOneSheet, getSheetRows, projectId, projectIdForge, setSettings]",{"range":"339","text":"340"},"Update the dependencies array to be: [columnIndex, inputRender, rowIndex, stateCell.cellActive]",{"range":"341","text":"342"},"Update the dependencies array to be: [projectId]",{"range":"343","text":"344"},{"range":"345","text":"344"},[5790,5792],"[EventKeyDown]",[22116,22127],"[email, fetchDataOneSheet, getSheetRows, projectId, projectIdForge, setSettings]",[1671,1693],"[columnIndex, inputRender, rowIndex, stateCell.cellActive]",[1858,1860],"[projectId]",[1244,1246]]
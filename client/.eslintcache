[{"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\index.js":"1","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\App.js":"2","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\reportWebVitals.js":"3","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\DashboardLayout\\PageDashboard.js":"4","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\PageDataEntrySheet.js":"5","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\PageSpreadsheet.js":"6","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\DashboardLayout\\assets\\constantDashboard.js":"7","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\DashboardLayout\\componentsDashboard\\CardPanelProject.js":"8","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\DashboardLayout\\componentsDashboard\\ChartBarStack.js":"9","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\DashboardLayout\\componentsDashboard\\ChartBarDrawingLate.js":"10","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\DashboardLayout\\componentsDashboard\\ChartPieDrawing.js":"11","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\DashboardLayout\\componentsDashboard\\ChartBarDrawing.js":"12","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\DashboardLayout\\componentsDashboard\\ChartProgress.js":"13","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\DashboardLayout\\utils\\functionDashboard.js":"14","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\DashboardLayout\\componentsDashboard\\FormPivot.js":"15","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\DashboardLayout\\componentsDashboard\\TableDrawingList.js":"16","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\contexts\\cellContext.js":"17","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\contexts\\projectContext.js":"18","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\contexts\\rowContext.js":"19","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\generalComponents\\CellHeader.js":"20","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\generalComponents\\InputSearch.js":"21","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\generalComponents\\ViewTemplateSelect.js":"22","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\generalComponents\\IconTable.js":"23","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\generalComponents\\FormSort.js":"24","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\pageDataEntrySheet\\Cell2.js":"25","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\pageDataEntrySheet\\CellIndex2.js":"26","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\pageDataEntrySheet\\ExcelExport2.js":"27","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\pageDataEntrySheet\\FormDrawingTypeOrder2.js":"28","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\pageDataEntrySheet\\PanelFunction2.js":"29","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\pageDataEntrySheet\\PanelSetting2.js":"30","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\pageSpreadsheet\\ButtonAdminCreateAndUpdateRows.js":"31","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\pageSpreadsheet\\ButtonAdminCreateAndUpdateRowsHistory.js":"32","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\pageSpreadsheet\\ButtonAdminDeleteRowsHistory.js":"33","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\pageSpreadsheet\\ButtonAdminUploadData.js":"34","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\pageSpreadsheet\\Cell.js":"35","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\pageSpreadsheet\\ButtonAdminUploadDataPDD.js":"36","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\pageSpreadsheet\\FormDrawingTypeOrder.js":"37","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\pageSpreadsheet\\ExcelExport.js":"38","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\pageSpreadsheet\\PanelSetting.js":"39","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\pageSpreadsheet\\PanelFunction.js":"40","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\pageSpreadsheet\\CellIndex.js":"41","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\constants\\index.js":"42","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\utils\\index.js":"43","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\DashboardLayout\\componentsDashboard\\CardPanel.js":"44","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\DashboardLayout\\componentsDashboard\\ChartBarRecordPanel.js":"45","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\DashboardLayout\\componentsDashboard\\PanelSettingDashboard.js":"46","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\contexts\\createDataContext.js":"47","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\generalComponents\\ButtonGroupComp.js":"48","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\generalComponents\\PanelCalendar.js":"49","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\generalComponents\\ButtonColumnTag.js":"50","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\pageSpreadsheet\\TableDrawingDetail.js":"51","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\pageSpreadsheet\\FormDateAutomation.js":"52","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\pageSpreadsheet\\TableCellHistory.js":"53","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\pageSpreadsheet\\ColorizedForm.js":"54","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\pageSpreadsheet\\FormCellColorizedCheck.js":"55","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\pageSpreadsheet\\TableActivityHistory.js":"56","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\generalComponents\\ReorderColumnForm.js":"57","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\generalComponents\\PanelConfirmResetMode.js":"58","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\generalComponents\\PanelConfirm.js":"59","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\generalComponents\\PanelPickNumber.js":"60","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\generalComponents\\FormFilter.js":"61","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\pageDataEntrySheet\\TableActivityHistory2.js":"62","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\generalComponents\\FormGroup.js":"63","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\pageDataEntrySheet\\TableCellHistory2.js":"64","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\pageDataEntrySheet\\ColorizedForm2.js":"65","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\pageDataEntrySheet\\FormCellColorizedCheck2.js":"66","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\DashboardLayout\\componentsDashboard\\ChartBarRecord.js":"67","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\generalComponents\\ButtonStyle.js":"68","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\generalComponents\\PanelCalendarDuration.js":"69","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\generalComponents\\FormFilterActivityHistory.js":"70","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\pageSpreadsheet\\ButtonAdminUpdateProjectSettings.js":"71","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\contexts\\sheetContextProvider.js":"72","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\pageSpreadsheet\\CellRFA.js":"73","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\pageSpreadsheet\\PanelAddNewRFA.js":"74","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\pageSpreadsheet\\TableDrawingRFA.js":"75","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\generalComponents\\LoadingIcon.js":"76","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\generalComponents\\OverallComponentDMS.js":"77","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\PageRFA.js":"78","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\PageRFAM.js":"79","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\pageSpreadsheet\\CellForm.js":"80","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\generalComponents\\PanelAddNewMultiForm.js":"81"},{"size":507,"mtime":1620447775880,"results":"82","hashOfConfig":"83"},{"size":836927,"mtime":1621953976381,"results":"84","hashOfConfig":"83"},{"size":362,"mtime":1620447775883,"results":"85","hashOfConfig":"83"},{"size":16182,"mtime":1620447775571,"results":"86","hashOfConfig":"83"},{"size":42598,"mtime":1621933528152,"results":"87","hashOfConfig":"83"},{"size":338,"mtime":1621328382119,"results":"88","hashOfConfig":"83"},{"size":3211,"mtime":1620960186686,"results":"89","hashOfConfig":"83"},{"size":1068,"mtime":1620447775592,"results":"90","hashOfConfig":"83"},{"size":5971,"mtime":1620447775615,"results":"91","hashOfConfig":"83"},{"size":3396,"mtime":1620447775601,"results":"92","hashOfConfig":"83"},{"size":2815,"mtime":1620447775619,"results":"93","hashOfConfig":"83"},{"size":8640,"mtime":1620447775597,"results":"94","hashOfConfig":"83"},{"size":4845,"mtime":1620447775623,"results":"95","hashOfConfig":"83"},{"size":28120,"mtime":1620447775640,"results":"96","hashOfConfig":"83"},{"size":5094,"mtime":1620447775627,"results":"97","hashOfConfig":"83"},{"size":15544,"mtime":1620447775636,"results":"98","hashOfConfig":"83"},{"size":1858,"mtime":1620447775649,"results":"99","hashOfConfig":"83"},{"size":916,"mtime":1620447775656,"results":"100","hashOfConfig":"83"},{"size":588,"mtime":1620447775660,"results":"101","hashOfConfig":"83"},{"size":451,"mtime":1620447775691,"results":"102","hashOfConfig":"83"},{"size":2836,"mtime":1621311034744,"results":"103","hashOfConfig":"83"},{"size":4187,"mtime":1620447775747,"results":"104","hashOfConfig":"83"},{"size":5573,"mtime":1621567795540,"results":"105","hashOfConfig":"83"},{"size":3559,"mtime":1620447775708,"results":"106","hashOfConfig":"83"},{"size":11696,"mtime":1620447775751,"results":"107","hashOfConfig":"83"},{"size":1311,"mtime":1620447775754,"results":"108","hashOfConfig":"83"},{"size":3065,"mtime":1620447775763,"results":"109","hashOfConfig":"83"},{"size":21746,"mtime":1620447775770,"results":"110","hashOfConfig":"83"},{"size":3955,"mtime":1620447775774,"results":"111","hashOfConfig":"83"},{"size":37315,"mtime":1621932716281,"results":"112","hashOfConfig":"83"},{"size":1936,"mtime":1620447775789,"results":"113","hashOfConfig":"83"},{"size":1971,"mtime":1616043237000,"results":"114","hashOfConfig":"83"},{"size":2143,"mtime":1616043237000,"results":"115","hashOfConfig":"83"},{"size":2333,"mtime":1620447775808,"results":"116","hashOfConfig":"83"},{"size":20660,"mtime":1621312332541,"results":"117","hashOfConfig":"83"},{"size":2216,"mtime":1616043237000,"results":"118","hashOfConfig":"83"},{"size":33314,"mtime":1621046259479,"results":"119","hashOfConfig":"83"},{"size":2757,"mtime":1620447775831,"results":"120","hashOfConfig":"83"},{"size":72282,"mtime":1621958048256,"results":"121","hashOfConfig":"83"},{"size":6323,"mtime":1621312109852,"results":"122","hashOfConfig":"83"},{"size":1464,"mtime":1620718230589,"results":"123","hashOfConfig":"83"},{"size":3506,"mtime":1621957435457,"results":"124","hashOfConfig":"83"},{"size":13771,"mtime":1621922028914,"results":"125","hashOfConfig":"83"},{"size":1185,"mtime":1620447775588,"results":"126","hashOfConfig":"83"},{"size":3117,"mtime":1620447775611,"results":"127","hashOfConfig":"83"},{"size":3520,"mtime":1620447775631,"results":"128","hashOfConfig":"83"},{"size":592,"mtime":1620447775653,"results":"129","hashOfConfig":"83"},{"size":828,"mtime":1621157741621,"results":"130","hashOfConfig":"83"},{"size":361,"mtime":1620447775722,"results":"131","hashOfConfig":"83"},{"size":2638,"mtime":1621052500381,"results":"132","hashOfConfig":"83"},{"size":10025,"mtime":1621312087976,"results":"133","hashOfConfig":"83"},{"size":5965,"mtime":1620447775839,"results":"134","hashOfConfig":"83"},{"size":2263,"mtime":1620447775864,"results":"135","hashOfConfig":"83"},{"size":3523,"mtime":1620447775828,"results":"136","hashOfConfig":"83"},{"size":3572,"mtime":1620447775835,"results":"137","hashOfConfig":"83"},{"size":11230,"mtime":1621268714883,"results":"138","hashOfConfig":"83"},{"size":3909,"mtime":1620447775743,"results":"139","hashOfConfig":"83"},{"size":2472,"mtime":1621312206061,"results":"140","hashOfConfig":"83"},{"size":1637,"mtime":1621918011274,"results":"141","hashOfConfig":"83"},{"size":904,"mtime":1620447775738,"results":"142","hashOfConfig":"83"},{"size":9225,"mtime":1621311846025,"results":"143","hashOfConfig":"83"},{"size":11597,"mtime":1620447775782,"results":"144","hashOfConfig":"83"},{"size":3901,"mtime":1620447775705,"results":"145","hashOfConfig":"83"},{"size":2017,"mtime":1620447775785,"results":"146","hashOfConfig":"83"},{"size":3543,"mtime":1620447775759,"results":"147","hashOfConfig":"83"},{"size":3784,"mtime":1620447775767,"results":"148","hashOfConfig":"83"},{"size":3191,"mtime":1620447775606,"results":"149","hashOfConfig":"83"},{"size":978,"mtime":1620447775687,"results":"150","hashOfConfig":"83"},{"size":753,"mtime":1620447775727,"results":"151","hashOfConfig":"83"},{"size":5267,"mtime":1620447775700,"results":"152","hashOfConfig":"83"},{"size":2324,"mtime":1616690193667,"results":"153","hashOfConfig":"83"},{"size":491,"mtime":1620447775664,"results":"154","hashOfConfig":"83"},{"size":38005,"mtime":1621956597102,"results":"155","hashOfConfig":"83"},{"size":63182,"mtime":1621957812731,"results":"156","hashOfConfig":"83"},{"size":5642,"mtime":1620718172881,"results":"157","hashOfConfig":"83"},{"size":644,"mtime":1621231878111,"results":"158","hashOfConfig":"83"},{"size":70144,"mtime":1621957556077,"results":"159","hashOfConfig":"83"},{"size":328,"mtime":1621313193218,"results":"160","hashOfConfig":"83"},{"size":331,"mtime":1621327729254,"results":"161","hashOfConfig":"83"},{"size":29265,"mtime":1621827793444,"results":"162","hashOfConfig":"83"},{"size":55593,"mtime":1621957575956,"results":"163","hashOfConfig":"83"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},"utwymk",{"filePath":"167","messages":"168","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"173","usedDeprecatedRules":"166"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"176","usedDeprecatedRules":"166"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"191","usedDeprecatedRules":"166"},{"filePath":"192","messages":"193","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"194","messages":"195","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"196","usedDeprecatedRules":"166"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"199","usedDeprecatedRules":"166"},{"filePath":"200","messages":"201","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"202","messages":"203","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"204","messages":"205","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"206","messages":"207","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"208","messages":"209","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"210","messages":"211","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"212","messages":"213","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"214","messages":"215","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"216","usedDeprecatedRules":"166"},{"filePath":"217","messages":"218","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"219","messages":"220","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"221","usedDeprecatedRules":"166"},{"filePath":"222","messages":"223","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"224","usedDeprecatedRules":"166"},{"filePath":"225","messages":"226","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"227","messages":"228","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"229","usedDeprecatedRules":"166"},{"filePath":"230","messages":"231","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"232","messages":"233","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"234","usedDeprecatedRules":"166"},{"filePath":"235","messages":"236","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"237","messages":"238","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"239"},{"filePath":"240","messages":"241","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"239"},{"filePath":"242","messages":"243","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"244","messages":"245","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"246","usedDeprecatedRules":"166"},{"filePath":"247","messages":"248","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"239"},{"filePath":"249","messages":"250","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"251","usedDeprecatedRules":"166"},{"filePath":"252","messages":"253","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"254","messages":"255","errorCount":0,"warningCount":21,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"256","messages":"257","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"258","messages":"259","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"260","usedDeprecatedRules":"166"},{"filePath":"261","messages":"262","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"263","messages":"264","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"265","usedDeprecatedRules":"166"},{"filePath":"266","messages":"267","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"268","messages":"269","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"270","messages":"271","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"272","messages":"273","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"274","usedDeprecatedRules":"166"},{"filePath":"275","messages":"276","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"277","messages":"278","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"279","usedDeprecatedRules":"166"},{"filePath":"280","messages":"281","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"282","usedDeprecatedRules":"166"},{"filePath":"283","messages":"284","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"285","usedDeprecatedRules":"166"},{"filePath":"286","messages":"287","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"288","messages":"289","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"290","usedDeprecatedRules":"166"},{"filePath":"291","messages":"292","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"293","messages":"294","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"295","usedDeprecatedRules":"166"},{"filePath":"296","messages":"297","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"298","usedDeprecatedRules":"166"},{"filePath":"299","messages":"300","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"301","messages":"302","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"303","messages":"304","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"305","usedDeprecatedRules":"166"},{"filePath":"306","messages":"307","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"308","messages":"309","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"310","usedDeprecatedRules":"166"},{"filePath":"311","messages":"312","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"313","usedDeprecatedRules":"166"},{"filePath":"314","messages":"315","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"316","messages":"317","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"318","usedDeprecatedRules":"166"},{"filePath":"319","messages":"320","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"321","messages":"322","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"323","usedDeprecatedRules":"166"},{"filePath":"324","messages":"325","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"326","messages":"327","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"328","usedDeprecatedRules":"166"},{"filePath":"329","messages":"330","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"331","messages":"332","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"333","messages":"334","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"335","usedDeprecatedRules":"239"},{"filePath":"336","messages":"337","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"338","messages":"339","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"340","messages":"341","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"342","messages":"343","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"344","usedDeprecatedRules":"166"},{"filePath":"345","messages":"346","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"347","messages":"348","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"349","messages":"350","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"351","messages":"352","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"353","messages":"354","errorCount":0,"warningCount":22,"fixableErrorCount":0,"fixableWarningCount":0,"source":"355","usedDeprecatedRules":"166"},{"filePath":"356","messages":"357","errorCount":0,"warningCount":22,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\index.js",[],["358","359"],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\App.js",["360","361","362","363","364","365"],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\reportWebVitals.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\DashboardLayout\\PageDashboard.js",["366"],"import { Badge, Col, Modal, Row, Skeleton, Tabs } from 'antd';\nimport Axios from 'axios';\nimport React, { useEffect, useState } from 'react';\nimport styled from 'styled-components';\nimport { pieChartColors2, SERVER_URL } from './assets/constantDashboard';\nimport CardPanelProject from './componentsDashboard/CardPanelProject';\nimport ChartBarDrawing from './componentsDashboard/ChartBarDrawing';\nimport ChartBarDrawingLate from './componentsDashboard/ChartBarDrawingLate';\nimport ChartBarStack from './componentsDashboard/ChartBarStack';\nimport ChartPieDrawing from './componentsDashboard/ChartPieDrawing';\nimport ChartProgress from './componentsDashboard/ChartProgress';\nimport FormPivot from './componentsDashboard/FormPivot';\nimport TableDrawingList from './componentsDashboard/TableDrawingList';\nimport { convertDataFromDB, createDummyRecords, getRandomIntInclusive, getUserRoleTradeCompany, inputStackData } from './utils/functionDashboard';\n\n\nconst { TabPane } = Tabs;\n\n\n\nconst createDummyProductivity = () => {\n   const arr = Array.from(Array(20).keys());\n   let obj = {};\n   arr.forEach((item, i) => {\n      obj[i] = {\n         'Consultant review and reply': getRandomIntInclusive(3, 7),\n         'Create update drawing': getRandomIntInclusive(3, 5),\n         'Create update model': getRandomIntInclusive(2, 5),\n      };\n   });\n   return obj;\n};\n\nconst PageDashboard = ({ projectsArray, token, role, company }) => {\n\n   const roleTradeCompany = getUserRoleTradeCompany(role, company);\n\n\n   const [dataDB, setDataDB] = useState(null);\n   const [loading, setLoading] = useState(false);\n\n\n   const dummyProductivity = createDummyProductivity();\n\n\n   useEffect(() => {\n      const loadData = async () => {\n         setLoading(true);\n         try {\n\n            const resRows = await Axios.post(`${SERVER_URL}/row/history/find-row-histories-many-project`, { token, sheetIds: projectsArray.map(x => x.id) });\n            const resDB = await Axios.post(`${SERVER_URL}/sheet/find-many`, { token, sheetIds: projectsArray.map(x => x.id) });\n\n\n            setDataDB(convertDataFromDB(resDB.data, resRows.data, projectsArray));\n\n\n            setLoading(false);\n         } catch (err) {\n            console.log(err);\n            setLoading(false);\n         };\n      };\n      loadData();\n   }, []);\n\n\n   const [drawingTableData, setDrawingTableData] = useState(null);\n   const openDrawingTable = ({\n      projectId,\n      panel,\n      type,\n      category,\n      categorySub1,\n      isShowSelectedOnly,\n      headersGroup,\n      progressRows\n   }) => {\n\n\n      const project = dataDB.projectSplit.find(x => x.projectId === projectId);\n      const { dataProject } = project;\n\n      const { dataInfo } = dataProject.find(x => x.panel === panel);\n      const { headers } = dataInfo;\n\n      let dataTable;\n      if (\n         type === 'Bar Drawing Rev' ||\n         type === 'Bar Drawing Modeller' ||\n         type === 'Bar Drawing Coordinator' ||\n         type === 'Bar Drawing Resubmit' ||\n         type === 'Bar Drawing Trade'\n      ) {\n         if (categorySub1) {\n            dataTable = dataInfo[type][category][categorySub1];\n         } else {\n            const allDrawingsInCategory = dataInfo[type][category];\n            let arr = [];\n            Object.keys(allDrawingsInCategory).forEach(stt => {\n               arr = [...arr, ...allDrawingsInCategory[stt]];\n            });\n            dataTable = arr;\n         };\n      } else if (type === 'Pie Drawing Status') {\n         dataTable = dataInfo[type][category];\n      } else if (type === 'Pivot Table All') {\n         dataTable = dataInfo.rows;\n      } else if (type === 'Pivot Table Group') {\n         dataTable = dataInfo.rows;\n      } else if (type === 'Progress Late') {\n         dataTable = progressRows;\n      };\n\n\n      setDrawingTableData({\n         dataTable,\n         headers,\n         headersGroup: headersGroup || [],\n         isShowSelectedOnly,\n         tableInfo: {\n            panel,\n            type,\n            category,\n            categorySub1\n         }\n      });\n   };\n\n   const arrBreak = Array.from(Array(17).keys());\n\n\n   return (\n      // <div style={{ display: 'flex' }}>\n      //    <div style={{ width: 180, background: 'red', height: 800 }}></div>\n      <div style={{ marginTop: 10 }}>\n         <Row justify='space-around' style={{ margin: '10px 0 5px 0' }}>\n            {dataDB && dataDB.projectSplit.length > 1 && (\n               <div style={{\n                  padding: 15,\n                  margin: 12,\n                  boxShadow: '5px 15px 24px 5px #d2dae2',\n                  border: 'none',\n                  marginBottom: 15,\n                  borderRadius: 20, overflow: 'hidden',\n               }}>\n                  <Tabs onChange={() => { }} type='card'>\n                     {dataDB.projectComparison.map((item, i) => {\n                        return (\n                           <TabPane tab={item.name} key={item.name}>\n                              <ChartBarDrawingLate data={item.data} title='No Of Drawing Late Construction' />\n                              <ChartBarDrawingLate data={item.data} title='No Of Drawing Late Approval' />\n                              <ChartBarStack data={item.data} title='Drawing Status' />\n                              <ChartBarStack data={item.data} title='Productivity - (days per drawing)' dummyProductivity={dummyProductivity} />\n                           </TabPane>\n                        );\n                     })}\n                  </Tabs>\n               </div>\n            )}\n         </Row>\n\n         {!loading && dataDB ? (\n            <div style={{ padding: '0 12px' }}>\n               {dataDB.projectSplit.map(project => {\n                  const { dataProject, projectName, projectId } = project;\n\n                  let isProjectEmpty = false;\n                  const overallFound = dataProject.find(x => x.panel === 'OVERALL');\n                  const { dataInfo } = overallFound;\n                  const rows = dataInfo && dataInfo.rows;\n                  if (rows && rows.length === 0) isProjectEmpty = true;\n\n                  return !isProjectEmpty && (\n\n                     <CardPanelProject\n                        title={projectName.toUpperCase()}\n                        key={projectName}\n                        projectsCount={dataDB.projectSplit.length}\n                     >\n                        <TabsStyled type='card'>\n                           {dataProject.map(item => {\n                              let tradeForView;\n                              if (item.panel !== 'OVERALL' && item.panel !== 'SUBCON') {\n                                 tradeForView = item.panel.slice(5, item.panel.length);\n                              };\n                              let canViewPanelModellerAndCoordinator = false;\n\n                              if (\n                                 (roleTradeCompany.trade && roleTradeCompany.trade === tradeForView) ||\n                                 (role && tradeForView && role.includes('Manager') && role.toLowerCase().includes(tradeForView.toLowerCase())) ||\n                                 role === 'Project Manager'\n                              ) {\n                                 canViewPanelModellerAndCoordinator = true;\n                              };\n\n                              return (\n                                 <TabPane tab={item.panel} key={item.panel}>\n\n                                    <ChartProgress\n                                       title='Summary of submissions'\n                                       data={item}\n                                       openDrawingTable={openDrawingTable}\n                                       projectId={projectId}\n                                    />\n\n                                    <ChartBarDrawing\n                                       title='No of drawing to resubmit'\n                                       type='resubmit'\n                                       data={item}\n                                       openDrawingTable={openDrawingTable}\n                                       projectId={projectId}\n                                    />\n\n                                    <ChartPanel title='Sorted table by category' panel={item.panel}>\n                                       <FormPivot\n                                          data={item}\n                                          openDrawingTable={openDrawingTable}\n                                          projectName={projectName}\n                                          projectId={projectId}\n                                          dataRecordedDummy={createDummyRecords()}\n                                       />\n                                    </ChartPanel>\n\n\n                                    {(window.innerWidth >= 1600 && item.panel === 'OVERALL') && arrBreak.map((n, i) => <br key={i} />)}\n\n                                    <ChartPieDrawing\n                                       title='Drawing Status'\n                                       data={item}\n                                       openDrawingTable={openDrawingTable}\n                                       projectId={projectId}\n                                    />\n\n\n                                    <ChartPanel title='Status Legend' panel={item.panel}>\n                                       <div style={{ paddingTop: 25 }}>\n                                          {inputStackData.map(item => (\n                                             <div key={item} style={{ display: 'flex' }}>\n                                                <StyledBadge\n                                                   size='small'\n                                                   color={pieChartColors2[item]}\n                                                   text={item}\n                                                />\n                                             </div>\n                                          ))}\n                                       </div>\n                                    </ChartPanel>\n\n\n                                    {item.panel === 'OVERALL' ? (\n                                       <ChartBarDrawing\n                                          title='Status of drawing per trade'\n                                          type='trade'\n                                          data={item}\n                                          openDrawingTable={openDrawingTable}\n                                          projectId={projectId}\n                                       />\n                                    ) : (\n                                       <>\n                                          {(window.innerWidth >= 1600 && item.panel !== 'OVERALL') && arrBreak.map((n, i) => <br key={i} />)}\n\n                                          <ChartBarDrawing\n                                             title='Status of drawing per revision'\n                                             type='rev'\n                                             data={item}\n                                             openDrawingTable={openDrawingTable}\n                                             projectId={projectId}\n                                          />\n\n                                          {canViewPanelModellerAndCoordinator && (\n                                             <>\n                                                <ChartBarDrawing\n                                                   title='Drawing by coordinator'\n                                                   type='coordinator'\n                                                   data={item}\n                                                   openDrawingTable={openDrawingTable}\n                                                   projectId={projectId}\n                                                />\n                                                <ChartBarDrawing\n                                                   title='Drawing by modeller'\n                                                   type='modeller'\n                                                   data={item}\n                                                   openDrawingTable={openDrawingTable}\n                                                   projectId={projectId}\n                                                />\n                                             </>\n                                          )}\n\n                                       </>\n                                    )}\n                                 </TabPane>\n                              )\n                           })}\n                        </TabsStyled>\n                     </CardPanelProject>\n\n                  );\n               })}\n            </div>\n\n         ) : <SkeletonCard />}\n\n\n         {drawingTableData && (\n            <Modal\n               title={'Drawing List'}\n               visible={drawingTableData ? true : false}\n               footer={false}\n               onCancel={() => setDrawingTableData(null)}\n               width={0.9 * window.innerWidth}\n               // height={0.7 * window.innerHeight}\n               bodyStyle={{ paddingTop: 0 }}\n               style={{ paddingTop: 0, top: 30 }}\n            >\n               <TableDrawingList\n                  data={drawingTableData}\n               />\n            </Modal>\n         )}\n      </div>\n\n      // </div>\n   );\n};\n\nexport default PageDashboard;\n\n\nconst TabsStyled = styled(Tabs)`\n   .ant-tabs-top-bar {\n      margin-bottom: 5px;\n   }\n`;\n\n\nexport const ChartPanel = ({ title, children, panel }) => {\n\n   const xxl = panel !== 'OVERALL' ? (\n      title === 'Summary of submissions'\n         ? 4\n         : title === 'No of drawing to resubmit'\n            ? 6\n            : title === 'Drawing Status'\n               ? 5\n               : title === 'Status Legend'\n                  ? 5\n                  : title === 'Status of drawing per revision'\n                     ? 6\n                     : title === 'Drawing by coordinator'\n                        ? 7\n                        : title === 'Drawing by modeller'\n                           ? 11\n                           : 4\n   ) : (\n      title === 'Summary of submissions'\n         ? 7\n         : title === 'No of drawing to resubmit'\n            ? 9\n            : title === 'Drawing Status'\n               ? 7\n               : title === 'Status of drawing per trade'\n                  ? 7\n                  : title === 'Status Legend'\n                     ? 7\n                     : 6\n   );\n\n\n   const xl = panel !== 'OVERALL' ? (\n      title === 'Summary of submissions'\n         ? 8\n         : title === 'No of drawing to resubmit'\n            ? 10\n            : title === 'Drawing Status'\n               ? 8\n               : title === 'Status Legend'\n                  ? 7\n                  : title === 'Status of drawing per revision'\n                     ? 9\n                     : title === 'Drawing by coordinator'\n                        ? 9\n                        : title === 'Drawing by modeller'\n                           ? 15\n                           : 6\n   ) : (\n      title === 'Summary of submissions'\n         ? 8\n         : title === 'No of drawing to resubmit'\n            ? 10\n            : title === 'Drawing Status'\n               ? 8\n               : title === 'Status of drawing per trade'\n                  ? 9\n                  : title === 'Status Legend'\n                     ? 7\n                     : 6\n   );\n\n\n\n\n\n   return (\n      <Col style={{ marginBottom: 10, padding: 5 }} xs={24} md={12} xl={xl} xxl={xxl}>\n         <div style={{ fontSize: '18px', textAlign: 'center', fontWeight: 'bold' }}>{title}</div>\n         {children}\n      </Col>\n   );\n};\n\nconst SkeletonCard = () => {\n   return (\n      <div style={{ padding: '0 12px' }}>\n         <CardPanelProject title='Project loading ...'>\n            <div style={{ padding: '0 3px' }}>\n               <Skeleton paragraph={{ rows: 14 }} active />\n            </div>\n         </CardPanelProject>\n      </div>\n   );\n};\nconst StyledBadge = styled(Badge)`\n   .ant-badge-status-dot {\n      width: 15px;\n      height: 15px;\n      border-radius: 0;\n   }\n`;\n\n\n\n\n\n\n\n\n","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\PageDataEntrySheet.js",["367","368","369","370","371","372","373"],"import { Divider, Icon, message, Modal } from 'antd';\nimport Axios from 'axios';\nimport React, { forwardRef, useContext, useEffect, useRef, useState } from 'react';\nimport BaseTable, { AutoResizer, Column } from 'react-base-table';\nimport 'react-base-table/styles.css';\nimport styled from 'styled-components';\nimport { colorType, SERVER_URL } from '../constants';\nimport { Context as CellContext } from '../contexts/cellContext';\nimport { Context as ProjectContext } from '../contexts/projectContext';\nimport { Context as RowContext } from '../contexts/rowContext';\nimport { convertCellTempToHistory, debounceFnc, genId, getActionName, groupByHeaders, mongoObjectId, processRowsFromDB, randomColorRange } from '../utils';\nimport CellHeader from './generalComponents/CellHeader';\nimport { sortFnc } from './generalComponents/FormSort';\nimport IconTable from './generalComponents/IconTable';\nimport InputSearch from './generalComponents/InputSearch';\nimport ViewTemplateSelect from './generalComponents/ViewTemplateSelect';\nimport Cell2 from './pageDataEntrySheet/Cell2';\nimport CellIndex2 from './pageDataEntrySheet/CellIndex2';\nimport ExcelExport2 from './pageDataEntrySheet/ExcelExport2';\nimport { convertFlattenArraytoTree1, getTreeFlattenOfNodeInArray } from './pageDataEntrySheet/FormDrawingTypeOrder2';\nimport PanelFunction2, { getPanelPosition } from './pageDataEntrySheet/PanelFunction2';\nimport PanelSetting2, { updatePreRowParentRowToState, _processRowsChainNoGroupFnc1 } from './pageDataEntrySheet/PanelSetting2';\n\n\n\nconst Table = forwardRef((props, ref) => {\n   return (\n      <AutoResizer>\n         {({ width }) => {\n            return (\n               <BaseTable\n                  {...props}\n                  ref={ref}\n                  height={window.innerHeight - 99.78 - 33.6}\n                  width={width}\n               />\n            );\n         }}\n      </AutoResizer>\n   );\n});\n\nlet previousDOMCell = null;\nlet currentDOMCell = null;\nlet isTyping = false;\nlet addedEvent = false;\n\n\nconst PageDataEntrySheet = (props) => {\n\n   const {\n      role, email, isAdmin, token, sheetDataInput: sheetDataInputRaw, sheetId: projectId, sheetName: projectName,\n      cellsHistoryInCurrentSheet, cellOneHistory,\n      saveDataToServerCallback, outputDataType\n   } = props;\n\n\n   let sheetDataInput = convertSheetInputRaw(sheetDataInputRaw);\n   const result = resolveDataFromProps(sheetDataInput);\n\n   useEffect(() => {\n      fetchDataOneSheet({ ...result, email, projectId, projectName, role, token });\n\n      setUserData(getHeadersData(result));\n\n      getSheetRows(getInputDataInitially(result));\n\n      setExpandedRows(getRowsKeyExpanded(\n         result.publicSettings.drawingTypeTree,\n         result.userSettings ? result.userSettings.viewTemplateNodeId : null\n      ));\n   }, [sheetDataInputRaw]);\n\n\n\n   const handlerBeforeUnload = (e) => {\n      if (window.location.pathname === '/data-entry-sheet') {\n         e.preventDefault();\n         e.returnValue = '';\n      };\n   };\n   useEffect(() => {\n      if (!addedEvent) {\n         window.onbeforeunload = handlerBeforeUnload;\n         addedEvent = true;\n      };\n   }, []);\n\n   const tableRef = useRef();\n   const getCurrentDOMCell = () => {\n      isTyping = true;\n      setCellActive(currentDOMCell);\n   };\n   const setPosition = (e) => { // just set position => highlight cell, not active\n      if (previousDOMCell) {\n         previousDOMCell.cell.classList.remove('cell-current');\n      };\n      currentDOMCell = e;\n      currentDOMCell.cell.classList.add('cell-current');\n      previousDOMCell = e;\n      isTyping = false;\n   };\n   useEffect(() => {\n      window.addEventListener('keydown', EventKeyDown);\n      return () => window.removeEventListener('keydown', EventKeyDown);\n   }, []);\n   const EventKeyDown = (e) => {\n      if (e.key === 'Control') return;\n      if (e.key === 'ArrowUp') {\n         if (isTyping || !currentDOMCell) return;\n         let cellTop = currentDOMCell.cell.parentElement.offsetTop;\n         if (currentDOMCell.rowIndex === 0) return;\n\n         currentDOMCell.cell.classList.remove('cell-current');\n         let index;\n         currentDOMCell.cell.parentElement.childNodes.forEach((dv, i) => {\n            if (dv === currentDOMCell.cell) index = i;\n         });\n         if (!currentDOMCell.cell.parentElement.previousSibling) return; // Scroll out of sight of cell selected\n         currentDOMCell.cell = currentDOMCell.cell.parentElement.previousSibling.childNodes[index];\n         currentDOMCell.cell.classList.add('cell-current');\n         currentDOMCell.rowIndex = currentDOMCell.rowIndex - 1;\n\n         e.preventDefault();\n         if (cellTop <= tableRef.current._scroll.scrollTop) {\n            tableRef.current.scrollToTop(currentDOMCell.cell.parentElement.offsetTop);\n         };\n\n      } else if (e.key === 'ArrowRight') {\n         if (isTyping || !currentDOMCell) return;\n\n         if (currentDOMCell.columnIndex < tableRef.current.leftTable.props.columns.length - 1) {\n            currentDOMCell.cell.classList.remove('cell-current');\n            currentDOMCell.cell = currentDOMCell.cell.nextSibling;\n            currentDOMCell.cell.classList.add('cell-current');\n            currentDOMCell.columnIndex = currentDOMCell.columnIndex + 1;\n\n         } else if (\n            currentDOMCell.columnIndex >= tableRef.current.leftTable.props.columns.length &&\n            currentDOMCell.columnIndex < tableRef.current.columnManager._columns.length - 1\n         ) {\n            let cellRight = currentDOMCell.cell.offsetLeft + currentDOMCell.cell.offsetWidth;\n            let innerTableWidth = window.innerWidth - 15;\n\n            e.preventDefault();\n            if (cellRight > innerTableWidth - 100) {\n               tableRef.current.scrollToLeft(cellRight - innerTableWidth + 100);\n            };\n\n            currentDOMCell.cell.classList.remove('cell-current');\n            currentDOMCell.cell = currentDOMCell.cell.nextSibling;\n            currentDOMCell.cell.classList.add('cell-current');\n            currentDOMCell.columnIndex = currentDOMCell.columnIndex + 1;\n         };\n\n      } else if (e.key === 'ArrowDown') {\n\n         if (isTyping || !currentDOMCell) return;\n\n         if (currentDOMCell.rowIndex >= Object.keys(tableRef.current._depthMap).length - 1) return;\n         let cellTop = currentDOMCell.cell.parentElement.offsetTop;\n\n         currentDOMCell.cell.classList.remove('cell-current');\n         let index;\n         currentDOMCell.cell.parentElement.childNodes.forEach((dv, i) => {\n            if (dv === currentDOMCell.cell) index = i;\n         });\n         if (!currentDOMCell.cell.parentElement.nextSibling) return; // Scroll out of sight of cell selected\n         currentDOMCell.cell = currentDOMCell.cell.parentElement.nextSibling.childNodes[index];\n         currentDOMCell.cell.classList.add('cell-current');\n         currentDOMCell.rowIndex = currentDOMCell.rowIndex + 1;\n\n         e.preventDefault();\n         if (\n            cellTop < tableRef.current._scroll.scrollTop || cellTop > tableRef.current._scroll.scrollTop + 490\n         ) {\n            tableRef.current.scrollToTop(currentDOMCell.cell.parentElement.offsetTop - 520);\n         };\n      } else if (e.key === 'ArrowLeft') {\n         if (isTyping || !currentDOMCell) return;\n\n         if (currentDOMCell.columnIndex > 1 &&\n            currentDOMCell.columnIndex < tableRef.current.leftTable.props.columns.length\n         ) {\n            currentDOMCell.cell.classList.remove('cell-current');\n            currentDOMCell.cell = currentDOMCell.cell.previousSibling;\n            currentDOMCell.cell.classList.add('cell-current');\n            currentDOMCell.columnIndex = currentDOMCell.columnIndex - 1;\n\n         } else if (\n            currentDOMCell.columnIndex > tableRef.current.leftTable.props.columns.length &&\n            currentDOMCell.columnIndex < tableRef.current.columnManager._columns.length\n         ) {\n            let cellLeft = currentDOMCell.cell.offsetLeft;\n            let innerTableWidth = window.innerWidth - 15;\n\n            currentDOMCell.cell.classList.remove('cell-current');\n            currentDOMCell.cell = currentDOMCell.cell.previousSibling;\n            currentDOMCell.cell.classList.add('cell-current');;\n            currentDOMCell.columnIndex = currentDOMCell.columnIndex - 1;\n\n            e.preventDefault();\n\n            if (cellLeft <= tableRef.current.columnManager._cached.columnsWidth - innerTableWidth + 820) {\n               tableRef.current.scrollToLeft(cellLeft - 820 - currentDOMCell.cell.offsetWidth);\n            };\n         };\n\n      } else if (e.key === 'Enter') {\n         if (!currentDOMCell) return;\n         if (isTyping) isTyping = false;\n         else {\n            isTyping = true;\n            setCellActive(currentDOMCell);\n         };\n      } else if (e.key === 'c' && e.ctrlKey) {\n         if (isTyping || !currentDOMCell) return;\n         copyTempData(currentDOMCell.cell.innerText);\n      } else {\n         if (isTyping || !currentDOMCell) return;\n         applyActionOnCell({ currentDOMCell, e });\n      };\n   };\n\n\n   const { state: stateCell, setCellActive, OverwriteCellsModified, copyTempData, applyActionOnCell } = useContext(CellContext);\n   const { state: stateRow, getSheetRows } = useContext(RowContext);\n   const { state: stateProject, fetchDataOneSheet, setUserData } = useContext(ProjectContext);\n\n\n   const [adminFncInitPanel, setAdminFncInitPanel] = useState(false);\n   const [adminFncBtn, setAdminFncBtn] = useState(null);\n   const adminFncServerInit = (btn) => {\n      setAdminFncInitPanel(true);\n      setAdminFncBtn(btn);\n   };\n   const adminFnc = async (btn) => {\n      try {\n         if (btn === 'delete-all-collections') {\n            await Axios.post(`${SERVER_URL}/cell/history/delete-all/`, { token });\n            await Axios.post(`${SERVER_URL}/row/history/delete-all/`, { token });\n            await Axios.post(`${SERVER_URL}/sheet/delete-all/`, { token });\n            await Axios.post(`${SERVER_URL}/settings/delete-all/`, { token });\n            message.info('DONE...Delete All Data In Every DB Collections');\n         };\n      } catch (err) {\n         console.log(err);\n      };\n   };\n\n\n   // useEffect(() => console.log('STATE-CELL...', stateCell), [stateCell]);\n   // useEffect(() => console.log('STATE-ROW...', stateRow), [stateRow]);\n   useEffect(() => console.log('STATE-PROJECT...', stateProject), [stateProject]);\n\n\n   const [cursor, setCursor] = useState(null);\n   const [panelType, setPanelType] = useState(null);\n   const [panelSettingType, setPanelSettingType] = useState(null);\n   const [panelFunctionVisible, setPanelFunctionVisible] = useState(false);\n   const [panelSettingVisible, setPanelSettingVisible] = useState(false);\n\n   const [expandedRows, setExpandedRows] = useState([]);\n   const [expandColumnKey, setExpandColumnKey] = useState(null);\n   const [cellSearchFound, setCellSearchFound] = useState(null);\n   const [cellHistoryFound, setCellHistoryFound] = useState(null);\n\n\n   const buttonPanelFunction = (btn) => {\n      let { rowsAll, rowsUpdatePreRowOrParentRow, rowsSelected, rowsSelectedToMove } = stateRow;\n\n      setPanelFunctionVisible(false);\n      setCellHistoryFound(null);\n\n      if (btn === 'Move Drawings') {\n         if (stateRow.rowsSelected.length > 0) {\n            getSheetRows({ ...stateRow, rowsSelectedToMove: [...rowsSelected] });\n         } else {\n            const row = rowsAll.find(x => x.id === panelType.cellProps.rowData.id);\n            getSheetRows({ ...stateRow, rowsSelectedToMove: [row] });\n         };\n      } else if (btn === 'Paste Drawings') {\n         const { rowData } = panelType.cellProps;\n         if (\n            rowsSelectedToMove.find(x => x.id === rowData.id) ||\n            (rowData.treeLevel && rowsSelectedToMove.find(x => x._parentRow === rowData.id))\n         ) {\n            getSheetRows({ ...stateRow, rowsSelectedToMove: [], rowsSelected: [] });\n         } else {\n            rowsSelectedToMove.forEach(row => {\n               const rowBelowPrevious = rowsAll.find(r => r._preRow === row.id);\n               if (rowBelowPrevious) {\n                  rowBelowPrevious._preRow = row._preRow;\n                  updatePreRowParentRowToState(rowsUpdatePreRowOrParentRow, rowBelowPrevious);\n               };\n            });\n            if (rowData.treeLevel) {\n               const lastRowOfBranch = rowsAll.find(r => r._parentRow === rowData.id && !rowsAll.find(x => x._preRow === r.id));\n               rowsSelectedToMove.forEach((row, i) => {\n                  row._preRow = i === 0 ? (lastRowOfBranch ? lastRowOfBranch.id : null) : rowsSelectedToMove[i - 1].id;\n                  row._parentRow = rowData.id;\n                  updatePreRowParentRowToState(rowsUpdatePreRowOrParentRow, row);\n               });\n            } else {\n\n               const rowBelowNext = rowsAll.find(r => r._preRow === rowData.id);\n               if (rowBelowNext) {\n                  rowBelowNext._preRow = stateRow.rowsSelectedToMove[stateRow.rowsSelectedToMove.length - 1].id;\n                  updatePreRowParentRowToState(rowsUpdatePreRowOrParentRow, rowBelowNext);\n               };\n               rowsSelectedToMove.forEach((row, i) => {\n                  row._preRow = i === 0 ? rowData.id : rowsSelectedToMove[i - 1].id;\n                  row._parentRow = rowData._parentRow;\n                  updatePreRowParentRowToState(rowsUpdatePreRowOrParentRow, row);\n               });\n            };\n            const rowsOutput = _processRowsChainNoGroupFnc1([...rowsAll]);\n            getSheetRows({\n               ...stateRow,\n               rowsAll: rowsOutput,\n               rowsUpdatePreRowOrParentRow,\n               rowsSelectedToMove: [],\n               rowsSelected: [],\n               modeFilter: [],\n               modeSort: {}\n            });\n         };\n\n      } else {\n         getSheetRows({\n            ...stateRow,\n            rowsSelected: [],\n            rowsSelectedToMove: []\n         });\n         setCellActive(null);\n         copyTempData(null);\n         applyActionOnCell(null);\n\n         setPanelSettingType(btn);\n         setPanelSettingVisible(true);\n      };\n      setCellActive(null);\n      if (currentDOMCell) currentDOMCell.cell.classList.remove('cell-current');\n      currentDOMCell = null;\n   };\n\n   const onRightClickCell = (e, cellProps) => {\n      setCursor({ x: e.clientX, y: e.clientY });\n      setPanelType({ type: 'cell', cellProps });\n      setPanelFunctionVisible(true);\n   };\n\n   const commandAction = (update) => {\n      if (\n         update.type === 'add-view-templates' || update.type === 'sort-data' || update.type === 'filter-by-columns' ||\n         update.type === 'drawing-data-automation' || update.type === 'create-new-drawing-revisions'\n      ) {\n         getSheetRows({ ...stateRow, ...update.data });\n\n      } else if (\n         update.type === 'insert-drawings' || update.type === 'insert-drawings-by-folder' ||\n         update.type === 'duplicate-drawings' || update.type === 'delete-drawing'\n      ) {\n         getSheetRows({ ...stateRow, ...update.data, modeFilter: [], modeSort: {} });\n\n      } else if (update.type === 'reset-filter-sort') {\n\n         getSheetRows({ ...stateRow, ...update.data });\n         setSearchInputShown(false);\n         setCellSearchFound(null);\n\n      } else if (update.type === 'reorder-columns' || update.type === 'drawing-colorized') {\n         setUserData({ ...stateProject.userData, ...update.data });\n\n      } else if (update.type === 'drawing-folder-organization') {\n         getSheetRows({ ...stateRow, ...update.data });\n         if (update.data.viewTemplateNodeId) {\n            setExpandedRows(getRowsKeyExpanded(update.data.drawingTypeTree, update.data.viewTemplateNodeId));\n         } else {\n            setExpandedRows(getRowsKeyExpanded(update.data.drawingTypeTree, stateRow.viewTemplateNodeId));\n         };\n\n      } else if (update.type === 'group-columns') {\n         getSheetRows({ ...stateRow, ...update.data });\n\n      } else if (update.type === 'highlight-cell-history') {\n         setCellHistoryFound(update.data);\n         setUserData({ ...stateProject.userData, nosColumnFixed: stateProject.userData.nosColumnFixed + 1 });\n         setUserData({ ...stateProject.userData, nosColumnFixed: stateProject.userData.nosColumnFixed });\n\n\n      } else if (update.type === 'save-data-successfully') {\n         message.success('Save Data Successfully', 1.5);\n      } else if (update.type === 'save-data-failure') {\n         message.error('Network Error', 1.5);\n\n      } else if (update.type === 'reload-data-from-server') {\n         // fetchDataOneSheet({\n         //    ...update.data,\n         //    email, projectId, projectName, role, token\n         // });\n         // setUserData(getHeadersData(update.data));\n         // getSheetRows(getInputDataInitially(update.data));\n         // setExpandedRows(getRowsKeyExpanded(\n         //    update.data.publicSettings.drawingTypeTree,\n         //    update.data.userSettings.viewTemplateNodeId\n         // ));\n         // OverwriteCellsModified({});\n         // setCellActive(null);\n         // setLoading(false);\n      };\n      setPanelSettingVisible(false);\n      setPanelSettingType(null);\n      setPanelType(null);\n   };\n   const onScroll = () => {\n      if (stateCell.cellActive) setCellActive(null);\n   };\n\n\n\n\n\n\n\n\n\n\n\n\n\n   useEffect(() => {\n      // const interval = setInterval(() => {\n      //    setPanelFunctionVisible(false);\n      //    setPanelSettingType('save-ICON');\n      //    setPanelSettingVisible(true);\n      // }, 1000 * 60 * 20);\n      // return () => clearInterval(interval);\n   }, []);\n\n\n   const updateExpandedRowIdsArray = (viewTemplateNodeId) => {\n      setExpandedRows(getRowsKeyExpanded(stateRow.drawingTypeTree, viewTemplateNodeId));\n   };\n\n\n\n   useEffect(() => {\n      if (stateProject.userData) {\n         setExpandColumnKey(stateProject.userData.headersShown[0]);\n      };\n   }, [stateProject.userData]);\n\n   const onRowExpand = (props) => {\n      const { rowKey, expanded } = props;\n      let arr = [...expandedRows];\n      if (expanded) {\n         arr.push(rowKey);\n      } else {\n         arr.splice(arr.indexOf(rowKey), 1);\n      };\n      setExpandedRows(arr);\n   };\n   const ExpandIcon = (props) => {\n      const { expanding, expandable, onExpand, depth } = props;\n      const indent = (depth * 17).toString() + 'px';\n      return (\n         <div style={{\n            marginLeft: indent,\n            paddingLeft: expandable ? 10 : 13 + 10,\n            paddingRight: 3,\n            background: 'transparent'\n         }}>\n            {expandable && (\n               <Icon\n                  type={expanding ? 'plus-square' : 'minus-square'}\n                  onClick={() => onExpand(expanding)}\n                  style={{ color: 'black', transform: 'translate(0, -1px)' }}\n               />\n            )}\n         </div>\n      );\n   };\n   const expandIconProps = (props) => {\n      return ({ expanding: !props.expanded });\n   };\n   const rowClassName = (props) => {\n      const { rowData } = props;\n      const { colorization } = stateProject.userData;\n      const { rowsSelected } = stateRow;\n\n      const valueArr = colorization.value;\n      const value = rowData[colorization.header];\n\n\n      if (rowsSelected.find(x => x.id === rowData.id)) {\n         return 'row-selected';\n      };\n      if (!rowData._rowLevel || rowData._rowLevel < 1) {\n         return 'row-drawing-type';\n      };\n\n\n      if (colorization !== null && colorization.header !== 'No Colorization' &&\n         valueArr && valueArr.length > 0 && valueArr.indexOf(value) !== -1\n      ) {\n         if (rowData[colorization.header]) {\n            return `colorization-${colorization.header.replace(/\\s/g, '').replace(/,/g, '')}-${rowData[colorization.header].replace(/\\s/g, '').replace(/,/g, '')}-styled`;\n         };\n      };\n   };\n\n\n   const [searchInputShown, setSearchInputShown] = useState(false);\n   const searchGlobal = debounceFnc((textSearch) => {\n      let searchDataObj = {};\n      if (textSearch !== '') {\n         stateRow.rowsAll.forEach(row => {\n            let obj = {};\n            Object.keys(row).forEach(key => {\n               if (\n                  key !== 'id' && key !== '_preRow' && key !== '_parentRow' &&\n                  row[key] &&\n                  row[key].toString().toLowerCase().includes(textSearch.toLowerCase())\n               ) {\n                  obj[row.id] = [...obj[row.id] || [], key];\n               };\n            });\n            if (Object.keys(obj).length > 0) searchDataObj = { ...searchDataObj, [row.id]: obj[row.id] };\n         });\n      };\n\n      setCellSearchFound(searchDataObj);\n      setUserData({ ...stateProject.userData, nosColumnFixed: stateProject.userData.nosColumnFixed + 1 });\n      setUserData({ ...stateProject.userData, nosColumnFixed: stateProject.userData.nosColumnFixed });\n      getSheetRows({\n         ...stateRow,\n         modeSearch: { searchDataObj, isFoundShownOnly: 'show all' }\n      });\n   }, 500);\n\n\n\n\n\n   if (\n      !sheetDataInput ||\n      !sheetDataInput.publicSettings ||\n      !sheetDataInput.publicSettings.headers ||\n      sheetDataInput.publicSettings.headers.length === 0\n   ) {\n      return (\n         <div style={{\n            width: window.innerWidth,\n            height: window.innerHeight,\n            textAlign: 'center',\n            display: 'table-cell',\n            verticalAlign: 'middle',\n            fontSize: 30\n         }}>Please add headers to sheet</div>\n      );\n   };\n\n\n   const renderColumns = (headerArr, nosColumnFixed) => {\n      let headersObj = [{\n         key: 'Index', dataKey: 'Index', title: '', width: 50,\n         frozen: Column.FrozenDirection.LEFT,\n         cellRenderer: <CellIndex2 />,\n         style: { padding: 0, margin: 0 }\n      }];\n\n      headerArr.forEach((hd, index) => {\n         headersObj.push({\n            key: hd, dataKey: hd, title: hd,\n            width: widthColumn(stateProject.allDataOneSheet.publicSettings.headers, hd),\n            resizable: true,\n            frozen: index < nosColumnFixed ? Column.FrozenDirection.LEFT : undefined,\n            headerRenderer: <CellHeader />,\n            cellRenderer: (\n               <Cell2\n                  setPosition={setPosition}\n                  onRightClickCell={onRightClickCell}\n                  getCurrentDOMCell={getCurrentDOMCell}\n               />\n            ),\n            className: (props) => {\n               const { rowData, column: { key } } = props;\n               const { id } = rowData;\n               const headerData = stateProject.allDataOneSheet.publicSettings.headers.find(hd => hd.text === key);\n\n               return (cellSearchFound && id in cellSearchFound && cellSearchFound[id].indexOf(key) !== -1)\n                  ? 'cell-found'\n                  : (cellHistoryFound && cellHistoryFound.find(cell => cell.rowId === id && cell.header === key))\n                     ? 'cell-history-highlight'\n                     : (headerData.roleCanEdit.indexOf(role.name) === -1 && rowData._rowLevel)\n                        ? 'cell-locked'\n                        : '';\n            }\n         });\n      });\n\n      return headersObj;\n   };\n\n\n\n   const saveDataSheet = () => {\n\n      const { drawingTypeTree, rowsAll, drawingsTypeDeleted, rowsDeleted } = stateRow;\n      const { cellsModifiedTemp } = stateCell;\n      const { publicSettings } = stateProject.allDataOneSheet;\n      const { headers } = publicSettings;\n\n\n      const rowToSaveArr = rowsAll.map(row => {\n         let rowToSave = { _id: row.id, parentRow: row._parentRow, preRow: row._preRow, level: row._rowLevel };\n         headers.forEach(hd => {\n            rowToSave.data = { ...rowToSave.data || {}, [hd.text]: row[hd.text] || '' };\n         });\n         return rowToSave;\n      });\n\n      \n      saveDataToServerCallback({\n         drawingTypeTree,\n         rowsAll: rowToSaveArr,\n         drawingsTypeDeleted,\n         rowsDeleted,\n         cellHistory: convertCellTempToHistory(cellsModifiedTemp, stateProject, true)\n      });\n   };\n\n\n\n\n   return (\n      <div\n         onContextMenu={(e) => e.preventDefault()}\n      >\n         <ButtonBox>\n            <IconTable type='save' onClick={saveDataSheet} />\n            <DividerRibbon />\n            <IconTable type='layout' onClick={() => buttonPanelFunction('reorderColumn-ICON')} />\n            <IconTable type='filter' onClick={() => buttonPanelFunction('filter-ICON')} />\n            <IconTable type='apartment' onClick={() => buttonPanelFunction('group-ICON')} />\n            <IconTable type='sort-ascending' onClick={() => buttonPanelFunction('sort-ICON')} />\n\n            {searchInputShown\n               ? <InputSearch searchGlobal={searchGlobal} />\n               : <IconTable type='search' onClick={() => setSearchInputShown(true)} />}\n\n            {stateRow && stateRow.modeGroup.length > 0 ? (\n               <IconTable type='swap' onClick={() => buttonPanelFunction('swap-ICON-1')} />\n            ) : (\n               <IconTable type='swap' onClick={() => buttonPanelFunction('swap-ICON-2')} />\n            )}\n\n            <DividerRibbon />\n            <IconTable type='folder-add' onClick={() => buttonPanelFunction('addDrawingType-ICON')} />\n            <IconTable type='highlight' onClick={() => buttonPanelFunction('colorized-ICON')} />\n            <DividerRibbon />\n            <IconTable type='history' onClick={() => buttonPanelFunction('history-ICON')} />\n            <IconTable type='heat-map' onClick={() => buttonPanelFunction('color-cell-history-ICON')} />\n            <ExcelExport2 fileName={projectName} />\n            <DividerRibbon />\n            <IconTable type='plus' onClick={() => buttonPanelFunction('viewTemplate-ICON')} />\n            <ViewTemplateSelect updateExpandedRowIdsArray={updateExpandedRowIdsArray} />\n            <DividerRibbon />\n            {isAdmin && (\n               <div style={{ display: 'flex' }}>\n                  {/* <IconTable type='delete' onClick={() => adminFncServerInit('delete-all-collections')} /> */}\n               </div>\n            )}\n         </ButtonBox>\n\n\n         {stateProject.allDataOneSheet !== null && (\n            <TableStyled\n               dataForStyled={{\n                  stateProject,\n                  randomColorRange,\n                  cellSearchFound,\n                  cellHistoryFound\n               }}\n               ref={tableRef}\n               fixed\n               columns={renderColumns(\n                  stateProject.userData.headersShown,\n                  stateProject.userData.nosColumnFixed\n               )}\n               data={arrangeDrawingTypeFinal(stateRow)}\n               expandedRowKeys={expandedRows}\n\n               expandColumnKey={expandColumnKey}\n\n               expandIconProps={expandIconProps}\n               components={{ ExpandIcon }}\n               rowHeight={30}\n               overscanRowCount={0}\n               onScroll={onScroll}\n               rowClassName={rowClassName}\n               onRowExpand={onRowExpand}\n            />\n         )}\n\n\n         <ModalStyleFunction\n            visible={panelFunctionVisible}\n            footer={null}\n            onCancel={() => setPanelFunctionVisible(false)}\n            destroyOnClose={true}\n            style={{\n               position: 'fixed',\n               left: cursor && getPanelPosition(cursor).x,\n               top: cursor && getPanelPosition(cursor).y\n            }}\n            mask={false}\n            width={250}\n         >\n            <PanelFunction2\n               panelType={panelType}\n               buttonPanelFunction={buttonPanelFunction}\n            />\n         </ModalStyleFunction>\n\n\n         <ModalStyledSetting\n            title={stateRow && stateRow.modeGroup.length > 0 ? 'Quit Grouping Mode' : getActionName(panelSettingType)}\n            visible={panelSettingVisible}\n            footer={null}\n            onCancel={() => {\n               setPanelSettingVisible(false);\n               setPanelSettingType(null);\n               setPanelType(null);\n            }}\n            destroyOnClose={true}\n            centered={true}\n\n            width={\n               panelSettingType === 'addDrawingType-ICON' ? window.innerWidth * 0.8 :\n                  panelSettingType === 'filter-ICON' ? window.innerWidth * 0.5 :\n                     520\n            }\n         >\n            <PanelSetting2\n               panelType={panelType}\n               panelSettingType={panelSettingType}\n               commandAction={commandAction}\n               onClickCancelModal={() => {\n                  setPanelSettingVisible(false);\n                  setPanelSettingType(null);\n                  setPanelType(null);\n               }}\n               outputDataType={outputDataType}\n               cellsHistoryInCurrentSheet={cellsHistoryInCurrentSheet}\n               cellOneHistory={cellOneHistory}\n            />\n         </ModalStyledSetting>\n\n         {adminFncInitPanel && (\n            <Modal\n               title={adminFncBtn + ' ... ... sure ???'}\n               visible={adminFncInitPanel}\n               onOk={() => {\n                  adminFnc(adminFncBtn);\n                  setAdminFncInitPanel(false)\n               }}\n               onCancel={() => setAdminFncInitPanel(false)}\n            ></Modal>\n         )}\n      </div>\n   );\n};\nexport default PageDataEntrySheet;\n\n\n\nconst DividerRibbon = () => {\n   return (\n      <Divider type='vertical' style={{\n         height: 32,\n         marginLeft: 8,\n         marginRight: 8,\n         background: 'white'\n      }} />\n   );\n};\n\n\nconst TableStyled = styled(Table)`\n   .cell-locked {\n      background-color: ${colorType.lockedCell};\n   };\n   .row-locked {\n      background-color: ${colorType.lockedCell};\n   };\n   .row-drawing-type {\n      background-color: ${colorType.grey3};\n      font-weight: bold;\n   };\n   .row-selected {\n      background-color: ${colorType.cellHighlighted};\n   };\n   \n   ${({ dataForStyled }) => {\n      const { stateProject, randomColorRange } = dataForStyled;\n      let colorization = stateProject.userData.colorization;\n\n      const value = colorization.value || [];\n\n      let res = [];\n      value.map(n => {\n         let color = randomColorRange[value.indexOf(n)];\n         if (n) {\n            res.push(`.colorization-${stateProject.userData.colorization.header.replace(/\\s/g, '').replace(/,/g, '')}-${n.replace(/\\s/g, '').replace(/,/g, '')}-styled {\n               background-color: ${color};\n         }`);\n         };\n      });\n      const output = [...new Set(res)].join('\\n');\n      return output;\n   }}\n\n   ${({ dataForStyled }) => {\n      const { cellSearchFound } = dataForStyled;\n      if (cellSearchFound) return `.cell-found { background-color: #7bed9f; }`;\n   }}\n\n   ${({ dataForStyled }) => {\n      const { cellHistoryFound } = dataForStyled;\n      if (cellHistoryFound) return `.cell-history-highlight { background-color: #f6e58d; }`;\n   }}\n\n   \n   .cell-current {\n      background-color: ${colorType.cellHighlighted}\n   };\n\n   .BaseTable__table .BaseTable__body {\n      -webkit-touch-callout: none;\n      -webkit-user-select: none;\n      -khtml-user-select: none;\n      -moz-user-select: none;\n      -ms-user-select: none;\n      user-select: none;\n   };\n   .BaseTable__header-cell {\n      padding: 5px;\n      border-right: 1px solid #DCDCDC;\n      background: ${colorType.primary};\n      color: white\n   };\n   .BaseTable__row-cell {\n      padding: 0;\n      border-right: 1px solid #DCDCDC;\n      overflow: visible !important;\n   };\n   .BaseTable__table-main .BaseTable__row-cell:last-child {\n      padding-right: 0;\n   };\n`;\nconst ModalStyleFunction = styled(Modal)`\n   .ant-modal-close, .ant-modal-header {\n      display: none;\n   }\n   .ant-modal-body {\n      padding: 0;\n   }\n`;\nconst ModalStyledSetting = styled(Modal)`\n   .ant-modal-content {\n      border-radius: 0;\n   }\n   .ant-modal-close {\n      display: none;\n   }\n   .ant-modal-header {\n      padding: 10px;\n   }\n   .ant-modal-title {\n        padding-left: 10px;\n        font-size: 20px;\n        font-weight: bold;\n   }\n   .ant-modal-body {\n      padding: 0;\n      display: flex;\n      justify-content: center;\n   }\n`;\nconst ButtonBox = styled.div`\n   width: 100%;\n   position: relative;\n   display: flex;\n   padding-top: 7px;\n   padding-bottom: 7px;\n   padding-left: 7px;\n   background: ${colorType.grey4};\n`;\n\nconst SpinStyled = styled.div`\n   background: rgba(0, 0, 0, 0.05);\n   opacity: 0.7;\n   position: fixed;\n   top: 0;\n   left: 0;\n   width: ${`${window.innerWidth}px`};\n   height: ${`${window.innerHeight}px`};\n   display: flex;\n   justify-content: center;\n   z-index: 1000;\n`;\n\n\nconst createRowsInit = (sheetId, nos) => {\n   const idsArr = genId(nos);\n   return idsArr.map((id, i) => {\n      return ({\n         id, _rowLevel: 1,\n         _parentRow: sheetId,\n         _preRow: i === 0 ? null : idsArr[i - 1]\n      });\n   });\n};\nconst getInputDataInitially = (data) => {\n\n   const { rows, publicSettings, userSettings } = data;\n   const { drawingTypeTree, sheetId } = publicSettings;\n\n   let viewTemplates = [];\n   let viewTemplateNodeId = null;\n   let modeFilter = [];\n   let modeSort = {};\n\n   if (userSettings) {\n      viewTemplates = userSettings.viewTemplates || [];\n      viewTemplateNodeId = userSettings.viewTemplateNodeId || null;\n      modeFilter = userSettings.modeFilter || [];\n      modeSort = userSettings.modeSort || {};\n   };\n\n   const newRows = createRowsInit(sheetId, 1);\n   const sheetInitState = (drawingTypeTree.length === 0 && rows.length === 0);\n\n   let rowsAllOutput = getOutputRowsAllSorted(drawingTypeTree, rows);\n   const { treeNodesToAdd, rowsToAdd, rowsUpdatePreOrParent } = rearrangeRowsNotMatchTreeNode(rows, rowsAllOutput, drawingTypeTree);\n\n   return {\n      rowsAll: sheetInitState ? newRows : [...rowsAllOutput, ...rowsToAdd], // handle rows can not match parent\n\n\n      viewTemplates,\n      viewTemplateNodeId,\n\n      drawingTypeTree: [...drawingTypeTree, ...treeNodesToAdd], // handle rows can not match parent\n      drawingTypeTreeInit: drawingTypeTree,\n      drawingsTypeDeleted: [],\n      drawingsTypeNewIds: [...treeNodesToAdd.map(x => x.id)], // handle rows can not match parent\n\n      rowsDeleted: [],\n      idRowsNew: sheetInitState ? newRows.map(r => r.id) : [],\n      rowsUpdatePreRowOrParentRow: sheetInitState ? newRows : { ...rowsUpdatePreOrParent }, // handle rows can not match parent\n\n      rowsSelected: [],\n      rowsSelectedToMove: [],\n\n      modeFilter,\n      modeSort,\n      modeSearch: {},\n      modeGroup: [],\n   };\n};\n\nconst arrangeDrawingTypeFinal = (stateRow) => {\n\n   const {\n      rowsAll, drawingTypeTree, viewTemplateNodeId,\n      modeFilter, modeGroup, modeSort, modeSearch\n   } = stateRow;\n\n   let drawingTypeTreeTemplate;\n   let rowsAllInTemplate;\n   const templateNode = drawingTypeTree.find(x => x.id === viewTemplateNodeId);\n\n\n   if (templateNode) {\n      const nodeArray = getTreeFlattenOfNodeInArray(drawingTypeTree, templateNode);\n      if (nodeArray.length > 1) {\n         drawingTypeTreeTemplate = nodeArray.filter(x => x.id !== templateNode.id);\n         rowsAllInTemplate = rowsAll.filter(x => drawingTypeTreeTemplate.find(tr => tr.id === x._parentRow));\n      } else {\n         const parent = nodeArray[0];\n         return rowsAll.filter(x => x._parentRow === parent.id);\n      };\n   } else {\n      drawingTypeTreeTemplate = drawingTypeTree.map(x => ({ ...x }));\n      rowsAllInTemplate = rowsAll.map(x => ({ ...x }));\n   };\n\n\n   if (Object.keys(modeSearch).length === 2) {\n      const { isFoundShownOnly, searchDataObj } = modeSearch;\n      if (isFoundShownOnly === 'show found only') {\n         rowsAllInTemplate = rowsAllInTemplate.filter(row => row.id in searchDataObj);\n      };\n   };\n\n\n\n   if (modeFilter.length > 0) {\n      let filterObj = {};\n      modeFilter.forEach(filter => {\n         if (filter.header) {\n            filterObj[filter.header] = [...filterObj[filter.header] || [], filter.value];\n         };\n      });\n      Object.keys(filterObj).forEach(header => {\n         rowsAllInTemplate = rowsAllInTemplate.filter(r => filterObj[header].indexOf(r[header]) !== -1);\n      });\n      if (Object.keys(modeSort).length !== 3 && modeFilter.find(x => x.isIncludedParent === 'not included')) {\n         return rowsAllInTemplate;\n      };\n   };\n\n\n\n   if (Object.keys(modeSort).length === 3) {\n      const { isIncludedParent: isIncludedParentSort, column: columnSort, type: typeSort } = modeSort;\n      if (isIncludedParentSort === 'included') {\n         const listParentIds = [...new Set(rowsAllInTemplate.map(x => x._parentRow))];\n         let rowsSortedOutput = [];\n         listParentIds.forEach(parentId => {\n            let subRows = rowsAllInTemplate.filter(x => x._parentRow === parentId);\n            if (typeSort === 'ascending') {\n               subRows = sortFnc(subRows, columnSort, true);\n            } else if (typeSort === 'descending') {\n               subRows = sortFnc(subRows, columnSort, false);\n            };\n            rowsSortedOutput = [...rowsSortedOutput, ...subRows];\n         });\n         rowsAllInTemplate = [...rowsSortedOutput];\n\n         if (modeFilter.find(x => x.isIncludedParent === 'not included')) return rowsAllInTemplate;\n\n      } else if (isIncludedParentSort === 'not included') {\n         if (typeSort === 'ascending') {\n            rowsAllInTemplate = sortFnc(rowsAllInTemplate, columnSort, true);\n         } else if (typeSort === 'descending') {\n            rowsAllInTemplate = sortFnc(rowsAllInTemplate, columnSort, false);\n         };\n         return rowsAllInTemplate;\n      };\n   };\n\n\n   if (modeGroup.length > 0) {\n      const { rows } = groupByHeaders(rowsAllInTemplate, modeGroup);\n      return rows;\n   };\n\n\n   if (drawingTypeTreeTemplate.length === 0) return rowsAllInTemplate;\n\n   let dataOutput = [];\n   drawingTypeTreeTemplate.forEach(item => {\n      let newItem = { ...item };\n      let rowsChildren = rowsAllInTemplate.filter(r => r._parentRow === newItem.id);\n      if (rowsChildren.length > 0) {\n         newItem.children = rowsChildren;\n      };\n      dataOutput.push(newItem);\n   });\n   const output = convertFlattenArraytoTree1(dataOutput);\n\n   return output;\n};\n\nconst getRowsKeyExpanded = (drawingTypeTree, viewTemplateNodeId) => {\n   const templateNode = drawingTypeTree.find(x => x.id === viewTemplateNodeId);\n   if (templateNode) {\n      const drawingTypeTreeTemplate = getTreeFlattenOfNodeInArray(drawingTypeTree, templateNode).filter(x => x.id !== templateNode.id);\n      return drawingTypeTreeTemplate.map(x => x.id);\n   } else {\n      return drawingTypeTree.map(x => x.id);\n   };\n};\n\nconst getHeadersData = (projectData) => {\n\n   const { publicSettings, userSettings } = projectData;\n   let { headers } = publicSettings;\n\n   let headersShown, headersHidden, colorization, nosColumnFixed;\n\n   if (!userSettings || Object.keys(userSettings).length === 0) {\n      headersShown = headers.map(hd => hd.text);\n      headersHidden = [];\n      colorization = {};\n      nosColumnFixed = 0;\n   } else {\n      headersShown = userSettings.headersShown.map(hd => headers.find(h => h.key === hd).text);\n      headersHidden = userSettings.headersHidden.map(hd => headers.find(h => h.key === hd).text);\n      colorization = userSettings.colorization;\n      nosColumnFixed = userSettings.nosColumnFixed;\n   };\n\n   return {\n      headersShown,\n      nosColumnFixed,\n      headersHidden,\n      colorization\n   };\n};\n\nexport const getOutputRowsAllSorted = (drawingTypeTree, rowsAll) => {\n   const drawingTypeTreeClone = drawingTypeTree.map(x => ({ ...x }));\n   const treeTemp = convertFlattenArraytoTree1(drawingTypeTreeClone);\n   if (treeTemp.length === 0) return rowsAll;\n\n   let rowsOutput = [];\n   const getIndex = (arr) => {\n      arr.forEach(i => {\n         if (i.children.length > 0) {\n            getIndex(i.children);\n         } else if (i.children.length === 0) {\n            const rows = rowsAll.filter(r => r._parentRow === i.id);\n            rowsOutput = [...rowsOutput, ...rows];\n         };\n      });\n   };\n   getIndex(treeTemp);\n   return rowsOutput;\n};\nconst rearrangeRowsNotMatchTreeNode = (rows, rowsArranged, drawingTypeTree) => {\n   const rowsToArrange = rows.filter(x => !rowsArranged.find(r => r.id === x.id));\n   if (rowsToArrange.length === 0) {\n      return { treeNodesToAdd: [], rowsToAdd: [], rowsUpdatePreOrParent: {} };\n   };\n\n   const parentIdsArr = [...new Set(rowsToArrange.map(x => x._parentRow))];\n\n   let treeNodesToAdd = [];\n   let rowsToAdd = [];\n   let rowsUpdatePreOrParent = {}\n   parentIdsArr.map(id => {\n      const nodeInTree = drawingTypeTree.find(x => x.id === id);\n      if (nodeInTree) {\n         const newId = mongoObjectId();\n         treeNodesToAdd.push({\n            title: 'New Folder',\n            id: newId,\n            parentId: nodeInTree.id,\n            treeLevel: nodeInTree.treeLevel + 1,\n            expanded: true,\n         });\n         const rowsFound = rowsToArrange.filter(x => x._parentRow === id);\n         rowsFound.forEach((r, i) => {\n            r._parentRow = newId;\n            r._preRow = i === 0 ? null : rowsFound[i - 1].id;\n            updatePreRowParentRowToState(rowsUpdatePreOrParent, r);\n         });\n         rowsToAdd = [...rowsToAdd, ...rowsFound];\n      };\n   });\n   return {\n      treeNodesToAdd,\n      rowsToAdd,\n      rowsUpdatePreOrParent\n   };\n};\n\n\n\nexport const resolveDataFromProps = (data) => {\n\n   let { rows, publicSettings, userSettings } = data;\n   const { headers } = publicSettings;\n\n   headers.forEach(hd => {\n      if (!hd.text && !hd.key) {\n         hd.text = hd.name;\n         hd.key = hd.id;\n         delete hd.name;\n         delete hd.id;\n      };\n   });\n\n   const rowsOutput = processRowsFromDB(headers, rows);\n\n   return {\n      rows: rowsOutput,\n      publicSettings,\n      userSettings\n   };\n};\n\n\n\nconst convertSheetInputRaw = (data) => {\n\n   if (!data.publicSettings) return {};\n\n   return {\n      rows: (!data.rows || data.rows.length === 0) ? [] : data.rows.map(x => ({ ...x })),\n      publicSettings: {\n         sheetId: data.publicSettings ? data.publicSettings.sheetId : null,\n         headers: data.publicSettings.headers ? data.publicSettings.headers.map(x => ({ ...x })) : [],\n         drawingTypeTree: data.publicSettings.drawingTypeTree ? data.publicSettings.drawingTypeTree.map(x => ({ ...x })) : [],\n         activityRecorded: data.publicSettings.activityRecorded ? data.publicSettings.activityRecorded.map(x => ({ ...x })) : [],\n      },\n      userSettings: {}\n   };\n};\n\n\n\n\n\nconst widthColumn = (headers, hd) => {\n   const type = headers.find(x => x.text === hd).type;\n   return type === 'date' ? 95 : type === 'checkbox' ? 50 : hd.length * 25\n};\n\n\n\n\n\n\n\n\n\n\n\n","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\PageSpreadsheet.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\DashboardLayout\\assets\\constantDashboard.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\DashboardLayout\\componentsDashboard\\CardPanelProject.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\DashboardLayout\\componentsDashboard\\ChartBarStack.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\DashboardLayout\\componentsDashboard\\ChartBarDrawingLate.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\DashboardLayout\\componentsDashboard\\ChartPieDrawing.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\DashboardLayout\\componentsDashboard\\ChartBarDrawing.js",["374","375"],"import { Badge } from 'antd';\nimport React, { useState } from 'react';\nimport { Bar, BarChart, CartesianGrid, LabelList, Tooltip, XAxis, YAxis } from 'recharts';\nimport styled from 'styled-components';\nimport { pieChartColors2 } from '../assets/constantDashboard';\nimport { ChartPanel } from '../PageDashboard';\nimport { converToInputStack, sortStatusOrder } from '../utils/functionDashboard';\n\n\n\n\nconst ChartBarDrawing = ({ type, data, openDrawingTable, projectId, title }) => {\n\n   const { panel, dataInfo } = data;\n\n   const {\n      barDrawingRevCount,\n      barDrawingModellerCount,\n      barDrawingCoordinatorCount,\n      barDrawingResubmitCount,\n      barDrawingTradeCount\n   } = dataInfo;\n\n\n\n   const barDrawingCount = type === 'rev' ? barDrawingRevCount :\n      type === 'modeller' ? barDrawingModellerCount :\n         type === 'coordinator' ? barDrawingCoordinatorCount :\n            type === 'resubmit' ? barDrawingResubmitCount :\n               type === 'trade' ? barDrawingTradeCount :\n                  [];\n\n\n   const inputStack = converToInputStack(barDrawingCount);\n\n   const onClick = (portion, status) => {\n      openDrawingTable({\n         projectId,\n         panel,\n         type: type === 'rev' ? 'Bar Drawing Rev' :\n            type === 'modeller' ? 'Bar Drawing Modeller' :\n               type === 'coordinator' ? 'Bar Drawing Coordinator' :\n                  type === 'resubmit' ? 'Bar Drawing Resubmit' :\n                     type === 'trade' ? 'Bar Drawing Trade' : null,\n         category: portion.name,\n         categorySub1: status\n      });\n   };\n\n\n   const onClickXAxis = ({ value }) => {\n      openDrawingTable({\n         projectId,\n         panel,\n         type: type === 'rev' ? 'Bar Drawing Rev' :\n            type === 'modeller' ? 'Bar Drawing Modeller' :\n               type === 'coordinator' ? 'Bar Drawing Coordinator' :\n                  type === 'resubmit' ? 'Bar Drawing Resubmit' :\n                     type === 'trade' ? 'Bar Drawing Trade' : null,\n         category: value,\n      });\n   };\n\n\n   const LabelCustomStacked = (props) => {\n      const { x, y, value, height } = props;\n      const fontSize = 13;\n      return (\n         <text\n            style={{ fontSize: fontSize, boxShadow: '5px 15px 24px 5px black' }}\n            x={x + 24}\n            y={y + height / 2}\n            fill='#2c3e50'\n            dominantBaseline='central'\n         >\n            {/* {height + 3 < fontSize ? null : value} */}\n            {null}\n         </text>\n      );\n   };\n\n   const LabelCustomStackedTotal = (props) => {\n      const { x, y, value, topBar } = props;\n      return (\n         <>\n            <text\n               style={{ fontSize: 13, fontWeight: 'bold' }}\n               x={x - 2}\n               y={y - 10}\n               fill='black'\n               dominantBaseline='central'\n            >\n               {topBar ? value : null}\n            </text>\n         </>\n      );\n   };\n\n\n   const [tooltip, setTooltip] = useState(false);\n   const TooltipCustom = (props) => {\n      const { active, payload, label } = props;\n      if (!active || !tooltip) return null;\n      for (const bar of payload)\n         if (bar.dataKey === tooltip) {\n            return (\n               <div style={{\n                  backgroundColor: 'white',\n                  color: bar.fill,\n                  fontSize: 14,\n                  border: `1px solid ${bar.fill}`,\n                  padding: '3px',\n                  maxWidth: '170px'\n               }}>\n                  {bar.name} - ({label})\n                  <br />\n                  <mark style={{ backgroundColor: bar.fill }}>({bar.value})</mark>\n               </div>\n            );\n         };\n      return null;\n   };\n\n   const windowSize = window.innerWidth >= 1200 && window.innerWidth < 1600\n      ? 'xl'\n      : window.innerWidth >= 1600\n         ? 'xxl'\n         : null;\n\n   const chartWidth = windowSize === 'xl' && (type === 'trade' || type === 'rev')\n      ? 350\n      : windowSize === 'xxl' && (type === 'trade' || type === 'rev')\n         ? 320\n         : windowSize === 'xl' && type === 'resubmit'\n            ? 350\n            : windowSize === 'xxl' && type === 'resubmit'\n               ? 270\n               : windowSize === 'xl' && type === 'coordinator'\n                  ? 340\n                  : windowSize === 'xxl' && type === 'coordinator'\n                     ? 390\n                     : windowSize === 'xl' && type === 'modeller'\n                        ? 600\n                        : windowSize === 'xxl' && type === 'modeller'\n                           ? 600\n                           : 500\n\n   return (\n      <>\n         {inputStack.length > 0 && (\n            <ChartPanel title={title} panel={panel}>\n               <div style={{\n                  margin: '0 auto', overflow: 'auto',\n                  // display: 'table', \n               }}>\n                  <BarChart\n                     width={type === 'resubmit'\n                        ? 300\n                        : type === 'modeller'\n                           ? 520\n                           : type === 'rev'\n                              ? 350\n                              : type === 'coordinator'\n                                 ? 420\n                                 : 500\n                     }\n                     width={chartWidth}\n\n                     height={type === 'resubmit' ? 230 : 290}\n                     data={barDrawingCount}\n                     margin={{ top: 15, right: 0, left: 0, bottom: type === 'resubmit' ? 20 : 70 }}\n                     padding={{ top: 5 }}\n                     barSize={15}\n                  >\n                     <CartesianGrid strokeDasharray='3 3' />\n                     {type === 'rev' || type === 'resubmit' ? (\n                        <XAxis\n                           style={{ cursor: 'pointer' }}\n                           onClick={onClickXAxis}\n                           tickSize={3} dataKey='name' textAnchor='middle' interval={0} scale='point'\n                           padding={{ left: 20, right: 20 }}\n                        />\n                     ) : (\n                        <XAxis\n                           style={{ cursor: 'pointer' }}\n                           onClick={onClickXAxis}\n                           fontSize={11} tickSize={3} dataKey='name' textAnchor='end' angle={-90} interval={0} scale='point'\n                           padding={{ left: 20, right: 20 }}\n                        />\n                     )}\n\n                     <YAxis />\n                     <Tooltip content={<TooltipCustom />} />\n\n                     {sortStatusOrder(inputStack).reverse().map((item, i) => {\n                        return (\n                           <Bar\n                              style={{ cursor: 'pointer' }}\n                              key={item}\n                              dataKey={item}\n                              stackId='a'\n                              fill={pieChartColors2[item]}\n                              isAnimationActive={false}\n                              onClick={(e) => onClick(e, item)}\n                              onMouseOver={() => setTooltip(item)}\n                              label={<LabelCustomStackedTotal topBar={i === inputStack.length - 1} />}\n                           >\n                              <LabelList dataKey={item} position='left' content={<LabelCustomStacked item={item} />} />\n                           </Bar>\n                        );\n                     })}\n\n                  </BarChart>\n\n                  {type === 'resubmit' && (\n                     <div style={{ transform: 'translateY(-20px)', paddingLeft: 10 }}>\n                        <div style={{ marginRight: 10 }}>\n                           <StyledBadge\n                              size='small'\n                              color={pieChartColors2['Rejected, to resubmit']}\n                              text={'Rejected, to resubmit'}\n                           />\n                        </div>\n                        <StyledBadge\n                           size='small'\n                           color={pieChartColors2['Approved in previous version but need resubmit']}\n                           text={'Approved in previous version but need resubmit'}\n                        />\n                     </div>\n                  )}\n               </div>\n            </ChartPanel>\n         )}\n      </>\n   );\n};\n\nexport default ChartBarDrawing;\n\nconst StyledBadge = styled(Badge)`\n    .ant-badge-status-dot {\n        width: 15px;\n        height: 15px;\n        border-radius: 0;\n    }\n    .ant-badge-status-text {\n       width: 100%;\n    }\n`;\n\n\n","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\DashboardLayout\\componentsDashboard\\ChartProgress.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\DashboardLayout\\utils\\functionDashboard.js",["376","377","378","379","380","381","382","383","384","385","386","387","388"],"import moment from 'moment';\n\n\nexport const inputStackData = [\n   'Approved, no resubmission required',\n   'Approved with comments, no resubmission required',\n   'Approved with comments, resubmission required',\n   'Rejected, to resubmit',\n   'Consultant reviewing',\n   'Pending design',\n   'Revision in progress',\n   '1st cut of drawing in-progress',\n   '1st cut of model in-progress',\n   'Not Started',\n];\nconst inputStackResubmit = [\n   'Approved in previous version but need resubmit',\n   'Rejected, to resubmit',\n];\n\nexport const converToInputStack = (data) => {\n   let output = [];\n   data.forEach(item => {\n      let arr = { ...item };\n      delete arr.name;\n      Object.keys(arr).forEach(stt => {\n         if (inputStackData.indexOf(stt) !== -1 || inputStackResubmit.indexOf(stt) !== -1) {\n            output = [...output, stt];\n         };\n      });\n   });\n   return [...new Set(output)];\n};\nexport const sortStatusOrder = (data) => {\n   const statusArr = [...data];\n   let arr = [];\n   inputStackData.forEach(element => {\n      statusArr.forEach(e => {\n         if (element === e) arr.push(element);\n      });\n   });\n   if (arr.length === 0) return statusArr;\n   return arr;\n};\nexport const checkDiffDates = (dateInput1, dateInput2) => {\n   let date1 = dateInput1;\n   let date2 = dateInput2;\n   if (dateInput1 && dateInput1.length === 8 && dateInput1.includes('/')) date1 = moment(dateInput1, 'DD/MM/YY').format('YYYY-MM-DD');\n   if (dateInput2 && dateInput2.length === 8 && dateInput2.includes('/')) date2 = moment(dateInput2, 'DD/MM/YY').format('YYYY-MM-DD');\n\n   if (date1 && date2) {\n      return moment(date1).diff(moment(date2), 'days');\n   } else if (date1 && !date2) {\n      return moment(date1).diff(moment(), 'days');\n   };\n};\nexport const formatStringNameToId = (str) => {\n   let mystring = str.replace(/ /g, '').replace(/\\(|\\)/g, '');\n   return mystring.charAt(0).toLowerCase() + mystring.slice(1);\n};\nconst randomInteger = (min, max) => {\n   return Math.floor(Math.random() * (max - min + 1)) + min;\n};\nexport const createDummyRecords = () => {\n   let categoryArr = [\n      'Drawing Approved For Construction',\n      'Drawing Approved With Comments To Resubmit',\n      'Drawing Late For Approval',\n      'Drawing Late For Submission',\n      'Drawing Late For Construction',\n   ];\n\n   let recordArray = {};\n\n   categoryArr.forEach(cate => {\n      let arr = {};\n      if (cate === 'Drawing Late For Approval' || cate === 'Drawing Late For Submission') {\n         for (let i = 0; i < 100; i++) {\n            if (i % 3 == 0) {\n               arr[moment(new Date(2020, 6, 21)).add(i, 'day')._d] = 0;\n            } else {\n               arr[moment(new Date(2020, 6, 21)).add(i, 'day')._d] = randomInteger(0, 1);\n            };\n         };\n\n      } else if (cate === 'Drawing Late For Construction') {\n\n         for (let i = 0; i < 100; i++) {\n            if (i % 3 == 0) {\n               arr[moment(new Date(2020, 6, 21)).add(i, 'day')._d] = 0;\n            } else {\n               arr[moment(new Date(2020, 6, 21)).add(i, 'day')._d] = randomInteger(0, 2);\n            };\n         };\n\n      } else {\n\n         for (let i = 0; i < 100; i++) {\n            if (i % 3 == 0) {\n               arr[moment(new Date(2020, 6, 21)).add(i, 'day')._d] = 1;\n            } else {\n               arr[moment(new Date(2020, 6, 21)).add(i, 'day')._d] = randomInteger(1, 4);\n            };\n         };\n      };\n      recordArray[cate] = arr;\n   });\n   return recordArray;\n};\nconst getRandomInt = (min, max) => {\n   min = Math.ceil(min);\n   max = Math.floor(max);\n   return Math.floor(Math.random() * (max - min) + min); //The maximum is exclusive and the minimum is inclusive\n};\nexport const recordDataToChartDaily = (data, category, month) => {\n   let arr = [];\n   Object.keys(data[category]).forEach((item, i) => {\n\n      const addNos = i % 3 == 0 ? -1\n         : i % 2 == 0 ? 1\n            : i % 5 == 0 ? 2 : 0;\n\n      const date = moment(item).add(-1, 'day');\n      if (date.format('MM/YY') === month) {\n         arr.push({\n            date: date.format('DD'),\n            value: data[category][item],\n            target: data[category][item] + addNos\n         });\n      };\n   });\n   return arr;\n};\nexport const recordDataToChartWeekly = (data, category) => {\n   let arr = [];\n   Object.keys(data[category]).forEach((item, i) => {\n\n      const addNos = i % 3 == 0 ? -1\n         : i % 5 == 0 ? 1\n            : i % 7 == 0 ? 2 : 0;\n\n      const date = moment(item).add(-1, 'day');\n      arr.push({\n         week: date.format('W'),\n         month: date.format('MM'),\n         year: date.format('YY'),\n         value: data[category][item],\n         target: data[category][item] + addNos\n      });\n   });\n\n   let groups = {};\n   for (let i = 0; i < arr.length; i++) {\n      let weekName = `W${arr[i].week} ${arr[i].month}/${arr[i].year}`;\n      groups[weekName] = {};\n   };\n\n\n   for (let i = 0; i < arr.length; i++) {\n      let weekName = `W${arr[i].week} ${arr[i].month}/${arr[i].year}`;\n      groups[weekName].value = [...groups[weekName].value || [], arr[i].value];\n      groups[weekName].target = [...groups[weekName].target || [], arr[i].target];\n   };\n\n   let arrOutput = [];\n   for (let week in groups) {\n      arrOutput.push({\n         week,\n         value: groups[week].value.reduce((a, b) => a + b, 0),\n         target: groups[week].target.reduce((a, b) => a + b, 0),\n      });\n   };\n   return arrOutput;\n};\nexport const recordDataToChartMonthly = (data, category) => {\n   let arr = [];\n   Object.keys(data[category]).forEach((item, i) => {\n\n      const addNos = i % 4 == 0 ? -4\n         : i % 3 == 0 ? 3\n            : i % 2 == 0 ? 2 : 0;\n\n      const date = moment(item).add(-1, 'day');\n      arr.push({\n         week: date.format('W'),\n         month: date.format('MM'),\n         year: date.format('YY'),\n         value: data[category][item],\n         target: data[category][item] + getRandomInt(-3, 3)\n      });\n   });\n   let groups = {};\n   for (let i = 0; i < arr.length; i++) {\n      let monthName = `${arr[i].month}/${arr[i].year}`;\n      groups[monthName] = {};\n   };\n\n   for (let i = 0; i < arr.length; i++) {\n      let monthName = `${arr[i].month}/${arr[i].year}`;\n      groups[monthName].value = [...groups[monthName].value || [], arr[i].value];\n      groups[monthName].target = [...groups[monthName].target || [], arr[i].target];\n   };\n\n   let arrOutput = [];\n   for (let month in groups) {\n      arrOutput.push({\n         month,\n         value: groups[month].value.reduce((a, b) => a + b, 0),\n         target: groups[month].target.reduce((a, b) => a + b, 0),\n      });\n   };\n   return arrOutput;\n};\n\n\n\n\n\n\n\n\n\n\n\nconst flattenAllTreeChildNode1 = (root) => {\n   let temp = [];\n   let queue = [...root];\n   while (queue.length > 0) {\n      let node = queue.shift();\n      if (node.children) {\n         let childNode = [];\n         node.children.forEach(nd => {\n            childNode.push({ ...nd, parentId: node.id });\n         });\n         queue = [...queue, ...childNode];\n         let nodeObj = { ...node };\n         delete nodeObj.children;\n         temp.push(nodeObj);\n      } else {\n         let nodeObj = { ...node };\n         delete nodeObj.children;\n         temp.push(nodeObj);\n      };\n   };\n   return temp;\n};\nconst getListOfBranchesTree = (inputArr) => {\n   const arr = inputArr.map(x => ({ ...x }));\n   arr.sort((a, b) => { return b.treeLevel - a.treeLevel });\n\n   const parentArrIds = [];\n   arr.forEach(x => {\n      let item = arr.find(fld => fld.id === x.parentId);\n      if (item) {\n         item.children = [...item.children || [], x];\n      } else {\n         parentArrIds.push(x.id);\n      };\n   });\n   return arr.filter(x => parentArrIds.indexOf(x.id) !== -1);\n};\nconst getTreeFlattenOfNodeInArray = (treeArray, node) => {\n   let obj = { ...node };\n   let arrayTree = treeArray.map(x => ({ ...x })).filter(x => x.treeLevel > obj.treeLevel);\n   arrayTree = [...arrayTree, obj];\n   const treeOfFound = getListOfBranchesTree(arrayTree).find(x => x.id === obj.id);\n   return flattenAllTreeChildNode1([treeOfFound]);\n};\nconst getUniqueValueByColumns = (rows, header) => {\n   let valueArr = [];\n   rows.forEach(row => valueArr.push(row[header]));\n   return [...new Set(valueArr)];\n};\nconst countDrawingsByColumnAndStatus = (rows, column) => {\n   let valueArray = getUniqueValueByColumns(rows, column).sort();\n\n   let arrCount = [];\n   let objDrawings = {};\n   valueArray.forEach(columnValue => {\n      if (columnValue !== 'NOT ASSIGNED') {\n         let rowsFilter = rows.filter(r => r[column] === columnValue);\n         let obj = {};\n         let objDwgs = {};\n         rowsFilter.forEach(r => {\n            obj[r.Status] = (obj[r.Status] || 0) + 1;\n            objDwgs[r.Status] = [...objDwgs[r.Status] || [], r];\n         });\n         obj.name = columnValue;\n         arrCount.push(obj);\n         objDrawings[columnValue] = objDwgs;\n      };\n   });\n\n   let rowsFilterNA = rows.filter(r => r[column] === 'NOT ASSIGNED');\n   let objNA = {};\n   let objDwgsNA = {};\n   rowsFilterNA.forEach(r => {\n      objNA[r.Status] = (objNA[r.Status] || 0) + 1;\n      objDwgsNA[r.Status] = [...objDwgsNA[r.Status] || [], r];\n   });\n   objNA.name = 'NOT ASSIGNED';\n\n   arrCount.unshift(objNA);\n   objDrawings['NOT ASSIGNED'] = objDwgsNA;\n\n\n   return { arrCount, objDrawings };\n};\n\n\n\n\n\n\n\nexport const convertDataFromDB = (data, dataRowHistories, projectsArray) => {\n\n   let output = {\n      projectSplit: [],\n   };\n\n   const arrComparison = ['OVERALL', 'WH - ARCHI', 'WH - C&S', 'WH - M&E', 'WH - PRECAST', 'SUBCON'].map(item => ({\n      name: item,\n      data: []\n   }));\n\n\n   data.forEach(projectData => {\n\n      let { publicSettings: { headers, drawingTypeTree }, rows: rowsAllInProject, _id } = projectData;\n\n      rowsAllInProject = rowsAllInProject.filter(x => x['Drawing Number'] || x['Drawing Name']);\n\n      rowsAllInProject.forEach(r => {\n         if (!r.Rev) r.Rev = '0';\n         r.Rev = r.Rev.toUpperCase();\n\n         if (!r.Status) r.Status = 'Not Started';\n\n         if (r.Status === 'Revise In-Progress') {\n            r.Status = 'Revision in progress';\n         } else if (r.Status === 'Reject and resubmit') {\n            r.Status = 'Rejected, to resubmit';\n         } else if (r.Status === 'Approved with comments, to Resubmit') {\n            r.Status = 'Approved with comments, resubmission required';\n         } else if (r.Status === 'Approved with Comment, no submission Required') {\n            r.Status = 'Approved with comments, no resubmission required';\n         } else if (r.Status === 'Approved for Construction') {\n            r.Status = 'Approved, no resubmission required';\n         };\n\n\n         if (!r['Modeller']) r['Modeller'] = 'Not assigned';\n         r['Modeller'] = r['Modeller'].toUpperCase();\n\n         if (!r['Coordinator In Charge']) r['Coordinator In Charge'] = 'Not assigned';\n         r['Coordinator In Charge'] = r['Coordinator In Charge'].toUpperCase();\n      });\n\n      const headersArrayText = headers.map(x => x.text);\n      const projectName = projectsArray.find(dt => dt.id === _id).name;\n\n\n      const historiesThisProject = dataRowHistories.find(x => x.projectId === _id).histories || [];\n\n      const dataRowHistoriesThisProject = converHistoryData(historiesThisProject, headers);\n      const dataInfoOverAll = convertToInputDataForChart(rowsAllInProject, dataRowHistoriesThisProject, headersArrayText);\n      let projectOutput = [{ panel: 'OVERALL', dataInfo: dataInfoOverAll }];\n\n      const found = arrComparison.find(x => x.name === 'OVERALL');\n\n      if (rowsAllInProject.length > 0) {\n         found.data.push({\n            projectName,\n            projectId: _id,\n            compareDrawingStatus: dataInfoOverAll.pieDrawingStatusCount,\n\n            compareDrawingsLateSubmission: dataInfoOverAll.drawingsLateSubmission.length,\n            compareDrawingsLateApproval: dataInfoOverAll.drawingsLateApproval.length,\n            compareDrawingsLateStart: dataInfoOverAll.drawingsLateStart.length,\n            compareDrawingsLateConstruction: dataInfoOverAll.drawingsLateConstruction.length,\n         });\n      };\n\n\n      let objTradeStatus = {};\n      let arrTradeCount = [];\n      const wohhupNode = drawingTypeTree.find(x => x.treeLevel === 1 && x.title === 'Woh Hup Private Ltd');\n      if (wohhupNode) {\n         const arrWHTrade = ['ARCHI', 'C&S', 'M&E', 'PRECAST'];\n         arrWHTrade.forEach(trade => {\n            const tradeNode = drawingTypeTree.find(x => {\n               return x.treeLevel === 2 && x.title === trade && x.parentId === wohhupNode.id;\n            });\n            if (tradeNode) {\n               const allNodesUnderThisTrade = getTreeFlattenOfNodeInArray(drawingTypeTree, tradeNode);\n               const allIdsNode = [...new Set(allNodesUnderThisTrade.map(x => x.id))];\n               const rowsInThisTrade = rowsAllInProject.filter(x => allIdsNode.find(id => id === x._parentRow));\n\n\n               const rowsHistoriesThisTrade = dataRowHistoriesThisProject.filter(r => rowsInThisTrade.find(x => x._id === r.row));\n\n               const dataInfoThisTrade = convertToInputDataForChart(rowsInThisTrade, rowsHistoriesThisTrade, headersArrayText);\n\n               projectOutput.push({\n                  panel: 'WH - ' + trade,\n                  dataInfo: dataInfoThisTrade\n               });\n\n               const foundTrade = arrComparison.find(x => x.name === 'WH - ' + trade);\n\n               if (foundTrade && rowsAllInProject.length > 0) {\n                  foundTrade.data.push({\n                     projectName,\n                     projectId: _id,\n                     compareDrawingStatus: dataInfoThisTrade.pieDrawingStatusCount,\n\n                     compareDrawingsLateSubmission: dataInfoThisTrade.drawingsLateSubmission.length,\n                     compareDrawingsLateApproval: dataInfoThisTrade.drawingsLateApproval.length,\n                     compareDrawingsLateStart: dataInfoThisTrade.drawingsLateStart.length,\n                     compareDrawingsLateConstruction: dataInfoThisTrade.drawingsLateConstruction.length,\n                  });\n               };\n\n               const { objCount: objCountTrade, objDrawings: rowsTradeSplitStatus } = splitRowsStatusByTrade(rowsInThisTrade, 'WH - ' + trade);\n               objTradeStatus['WH - ' + trade] = rowsTradeSplitStatus;\n               arrTradeCount.push(objCountTrade);\n            };\n         });\n      };\n\n\n      const subconGroup = drawingTypeTree.filter(x => x.treeLevel === 1 && x.title === 'SUBCON');\n      let allIsSubconAndUnder = [];\n      subconGroup.forEach(sb => {\n         const allNodesUnderThisSubcon = getTreeFlattenOfNodeInArray(drawingTypeTree, sb);\n         const allIdsNode = [...new Set(allNodesUnderThisSubcon.map(x => x.id))];\n         allIsSubconAndUnder = [...allIsSubconAndUnder, ...allIdsNode];\n      });\n      allIsSubconAndUnder = [...new Set(allIsSubconAndUnder)];\n      const rowsOfSubcon = rowsAllInProject.filter(x => allIsSubconAndUnder.find(id => id === x._parentRow));\n      const rowsHistoriesSubcon = dataRowHistoriesThisProject.filter(r => rowsOfSubcon.find(x => x._id === r.row));\n      const dataInfoSubcon = convertToInputDataForChart(rowsOfSubcon, rowsHistoriesSubcon, headersArrayText);\n      projectOutput.push({\n         panel: 'SUBCON',\n         dataInfo: dataInfoSubcon\n      });\n\n      const foundSubcon = arrComparison.find(x => x.name === 'SUBCON');\n\n      if (foundSubcon && rowsAllInProject.length > 0) {\n         foundSubcon.data.push({\n            projectName,\n            projectId: _id,\n            compareDrawingStatus: dataInfoSubcon.pieDrawingStatusCount,\n\n            compareDrawingsLateSubmission: dataInfoSubcon.drawingsLateSubmission.length,\n            compareDrawingsLateApproval: dataInfoSubcon.drawingsLateApproval.length,\n            compareDrawingsLateStart: dataInfoSubcon.drawingsLateStart.length,\n            compareDrawingsLateConstruction: dataInfoSubcon.drawingsLateConstruction.length,\n         });\n      };\n\n\n      const { objCount: objCountSubcon, objDrawings: rowsSubconSplitStatus } = splitRowsStatusByTrade(rowsOfSubcon, 'SUBCON');\n      objTradeStatus['SUBCON'] = rowsSubconSplitStatus;\n      arrTradeCount.push(objCountSubcon);\n\n      const overAllObj = projectOutput.find(x => x.panel === 'OVERALL');\n      overAllObj.dataInfo['Bar Drawing Trade'] = objTradeStatus;\n      overAllObj.dataInfo['barDrawingTradeCount'] = arrTradeCount;\n\n\n      output.projectSplit.push({\n         projectId: _id,\n         projectName,\n         dataProject: projectOutput\n      });\n   });\n\n   output.projectComparison = arrComparison;\n   return output;\n};\nconst convertToInputDataForChart = (rows, rowsHistory, headers) => {\n\n   let inputStack = getUniqueValueByColumns(rows, 'Status');\n\n   const { arrCount: barDrawingRevCount, objDrawings: barDrawingRevDrawings } = countDrawingsByRevAndStatus(rows);\n   let { arrCount: barDrawingModellerCount, objDrawings: barDrawingModellerDrawings } = countDrawingsByColumnAndStatus(rows, 'Modeller');\n   let { arrCount: barDrawingCoordinatorCount, objDrawings: barDrawingCoordinatorDrawings } = countDrawingsByColumnAndStatus(rows, 'Coordinator In Charge');\n\n   let itemNoData1 = barDrawingModellerCount.filter(x => x.name === 'Not assigned');\n   let itemRest1 = barDrawingModellerCount.filter(x => x.name !== 'Not assigned');\n   barDrawingModellerCount = [...itemNoData1, ...itemRest1];\n\n   let itemNoData2 = barDrawingCoordinatorCount.filter(x => x.name === 'Not assigned');\n   let itemRest2 = barDrawingCoordinatorCount.filter(x => x.name !== 'Not assigned');\n   barDrawingCoordinatorCount = [...itemNoData2, ...itemRest2];\n\n\n\n   let pieDrawingStatusCount = {};\n   let pieDrawingStatusDrawings = {};\n   inputStack.forEach(stt => {\n      let rowArr = rows.filter(r => r.Status === stt);\n      rowArr.forEach(r => {\n         pieDrawingStatusCount[stt] = (pieDrawingStatusCount[stt] || 0) + 1;\n      });\n      pieDrawingStatusDrawings[stt] = rowArr;\n   });\n\n\n   const drawingsLateSubmission = getDrawingLateNow1(rows, 'drawingsLateSubmission');\n   const drawingsLateApproval = getDrawingLateNow1(rows, 'drawingsLateApproval');\n   const drawingsLateStart = getDrawingLateNow1(rows, 'drawingsLateStart');\n   const drawingsLateConstruction = getDrawingLateNow1(rows, 'drawingsLateConstruction');\n\n   const { rowsToSubmitTarget: rowsToSubmitTargetWeek, rowsToSubmitActual: rowsToSubmitActualWeek } = getDrawingsToSubmitBy(rows, 'week');\n   const { rowsToSubmitTarget: rowsToSubmitTargetMonth, rowsToSubmitActual: rowsToSubmitActualMonth } = getDrawingsToSubmitBy(rows, 'month');\n\n\n\n   const revArray = ['0', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J'];\n   const allDwgsToResubmit = rows.filter(x => {\n      return x['Status'] === 'Approved with comments, resubmission required' || x['Status'] === 'Rejected, to resubmit';\n   });\n\n\n   let objData = {};\n   allDwgsToResubmit.forEach(r => {\n      const columnIndex = revArray.indexOf(r['Rev'] || '0') + 1;\n      objData[columnIndex] = [...objData[columnIndex] || [], r];\n   });\n\n\n   let barDrawingResubmitDrawings = {};\n   let barDrawingResubmitCount = [];\n\n   Object.keys(objData).forEach(cl => {\n      const rows = objData[cl];\n      let rejectToResubmit = [];\n      let approvedPreviousVersion = [];\n      rows.forEach(row => {\n         const histories = rowsHistory.filter(r => r.row === row.id);\n         const found = histories.find(x => x['Status'] === 'Approved, no resubmission required' || x['Status'] === 'Approved with comments, no resubmission required');\n         if (found) {\n            approvedPreviousVersion.push(row);\n         } else {\n            rejectToResubmit.push(row);\n         };\n      });\n      barDrawingResubmitCount.push({\n         'Approved in previous version but need resubmit': approvedPreviousVersion.length,\n         'Rejected, to resubmit': rejectToResubmit.length,\n         name: cl\n      });\n      barDrawingResubmitDrawings[cl] = {\n         'Approved in previous version but need resubmit': approvedPreviousVersion,\n         'Rejected, to resubmit': rejectToResubmit\n      };\n   });\n\n\n   return {\n      rows,\n      headers,\n\n      'Bar Drawing Rev': barDrawingRevDrawings,\n      barDrawingRevCount,\n      'Bar Drawing Modeller': barDrawingModellerDrawings,\n      barDrawingModellerCount,\n      'Bar Drawing Coordinator': barDrawingCoordinatorDrawings,\n      barDrawingCoordinatorCount,\n      'Bar Drawing Resubmit': barDrawingResubmitDrawings,\n      barDrawingResubmitCount,\n\n\n      'Pie Drawing Status': pieDrawingStatusDrawings,\n      pieDrawingStatusCount,\n\n\n      drawingsLateSubmission,\n      drawingsLateApproval,\n      drawingsLateStart,\n      drawingsLateConstruction,\n      rowsToSubmitTargetWeek,\n      rowsToSubmitActualWeek,\n      rowsToSubmitTargetMonth,\n      rowsToSubmitActualMonth,\n   };\n};\nconst countDrawingsByRevAndStatus = (rows) => {\n   let valueArray = getUniqueValueByColumns(rows, 'Rev').sort();\n   valueArray.unshift('NS');\n\n   let arrCount = [];\n   let objDrawings = {};\n   valueArray.forEach(columnValue => {\n      let obj = {};\n      let objDwgs = {};\n      let rowsFilter;\n      if (columnValue !== 'NS') {\n         rowsFilter = rows.filter(r => {\n            return r['Rev'] === columnValue &&\n               r.Status !== 'Not Started' &&\n               r.Status !== '1st cut of model in-progress' &&\n               r.Status !== '1st cut of drawing in-progress';\n         });\n      } else {\n         rowsFilter = rows.filter(r => {\n            return r.Status === 'Not Started' ||\n               r.Status === '1st cut of model in-progress' ||\n               r.Status === '1st cut of drawing in-progress';\n         });\n      };\n      rowsFilter.forEach(r => {\n         obj[r.Status] = (obj[r.Status] || 0) + 1;\n         objDwgs[r.Status] = [...objDwgs[r.Status] || [], r];\n      });\n      obj.name = columnValue;\n      arrCount.push(obj);\n      objDrawings[columnValue] = objDwgs;\n   });\n   return { arrCount, objDrawings };\n};\n\nconst converHistoryData = (rowsHistory, headers) => {\n   return rowsHistory.map(rowH => {\n      let obj = {\n         row: rowH.row\n      };\n      const { history } = rowH;\n      if (history) {\n         headers.forEach(hd => {\n            if (history[hd.key]) obj[hd.text] = history[hd.key];\n         });\n      };\n      return obj;\n   });\n};\n\nconst splitRowsStatusByTrade = (rows, title) => {\n   const statusArray = [...new Set(rows.map(x => x['Status']))];\n   let obj = {};\n   let objCount = {};\n   statusArray.forEach(stt => {\n      const rowsFound = rows.filter(r => r['Status'] === stt);\n      obj[stt] = rowsFound;\n      objCount[stt] = rowsFound.length;\n   });\n   return {\n      objDrawings: obj,\n      objCount: { ...objCount, name: title }\n   }\n};\n\n\n\n\nexport const getRandomIntInclusive = (min, max) => {\n   min = Math.ceil(min);\n   max = Math.floor(max);\n   return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\nconst getDrawingLateNow1 = (drawings, type) => {\n   const conditionArray1 = [\n      'Approved, no resubmission required',\n      'Approved with comments, no resubmission required',\n      'Consultant reviewing'\n   ];\n   const conditionArray2 = [\n      'Approved, no resubmission required',\n      'Approved with comments, no resubmission required',\n   ];\n\n   let rowsLateOutput;\n\n\n\n   if (type === 'drawingsLateStart') {\n      rowsLateOutput = drawings.filter(r => {\n         return conditionArray1.indexOf(r.Status) === -1 &&\n            r['Drawing Start (T)'] && checkDiffDates(r['Drawing Start (T)']) < 0 &&\n            (\n               !r['Drawing Start (A)'] ||\n               (r['Drawing Start (A)'] && r['Drawing Start (T)'] && checkDiffDates(r['Drawing Start (A)'], r['Drawing Start (T)']) > 0)\n            );\n      });\n   } else if (type === 'drawingsLateSubmission') {\n      rowsLateOutput = drawings.filter(r => {\n         return conditionArray1.indexOf(r.Status) === -1 &&\n            r['Drg To Consultant (T)'] &&\n            checkDiffDates(r['Drg To Consultant (T)']) < 0 &&\n            !r['Drg To Consultant (A)'];\n      });\n   } else if (type === 'drawingsLateApproval') {\n      rowsLateOutput = drawings.filter(r => {\n         return conditionArray2.indexOf(r.Status) === -1 &&\n            r['Get Approval (T)'] && checkDiffDates(r['Get Approval (T)']) < 0 &&\n            (\n               !r['Get Approval (A)'] ||\n               (r['Get Approval (A)'] && r['Get Approval (T)'] && checkDiffDates(r['Get Approval (A)'], r['Get Approval (T)']) > 0)\n            );\n      });\n   } else if (type === 'drawingsLateConstruction') {\n      rowsLateOutput = drawings.filter(r => {\n         return conditionArray2.indexOf(r.Status) === -1 &&\n            r['Construction Start'] &&\n            checkDiffDates(r['Construction Start']) < 0 &&\n            (\n               !r['Drg To Consultant (A)'] ||\n               !r['Get Approval (A)'] ||\n               (r['Get Approval (A)'] && r['Construction Start'] && checkDiffDates(r['Get Approval (A)'], r['Construction Start']) > 0)\n            );\n      });\n   };\n\n   return rowsLateOutput;\n};\n\nexport const getfirstAndLastDayOf = (duration) => {\n\n   const firstday = moment(moment().startOf(duration).toDate()).format('DD/MM/YY');\n   const lastday = moment(moment().endOf(duration).toDate()).format('DD/MM/YY');\n\n   return { firstday, lastday };\n};\n\nconst getDrawingsToSubmitBy = (rows, duration) => {\n   let firstday, lastday;\n   if (duration === 'week') {\n      const { firstday: first, lastday: last } = getfirstAndLastDayOf('week');\n      firstday = first;\n      lastday = last;\n   } else if (duration === 'month') {\n      const { firstday: first, lastday: last } = getfirstAndLastDayOf('month');\n      firstday = first;\n      lastday = last;\n   };\n\n   const rowsToSubmitTarget = rows.filter(r => {\n      return r['Drg To Consultant (T)'] &&\n         checkDiffDates(r['Drg To Consultant (T)'], firstday) >= 0 &&\n         checkDiffDates(r['Drg To Consultant (T)'], lastday) <= 0;\n   });\n\n   const rowsToSubmitActual = rowsToSubmitTarget.filter(r => {\n      return r['Drg To Consultant (A)'] &&\n         checkDiffDates(r['Drg To Consultant (A)'], firstday) >= 0 &&\n         checkDiffDates(r['Drg To Consultant (A)'], lastday) <= 0;\n   });\n\n   return {\n      rowsToSubmitTarget,\n      rowsToSubmitActual\n   };\n};\n\n\nexport const getUserRoleTradeCompany = (role, company) => {\n\n   const roleArray = [\n      'Document Controller',\n\n      'WH Archi Coordinator',\n      'WH C&S Design Engineer',\n      'WH M&E Coordinator',\n      'WH PRECAST Coordinator',\n\n      'WH Archi Modeller',\n      'WH C&S Modeller',\n      'WH M&E Modeller',\n      'WH PRECAST Modeller',\n\n      'Production',\n\n      'WH Archi Manager',\n      'WH C&S Manager',\n      'WH M&E Manager',\n      'WH PRECAST Manager',\n\n      'Planning Engineer',\n      'QS',\n      'Project Manager',\n      'Corporate Manager',\n      'QAQC',\n      'Safety',\n      'Client',\n\n      'Sub-Con',\n      'Consultant',\n   ];\n\n\n   if (\n      !role || !company || roleArray.indexOf(role) === -1 ||\n      role === 'WH Archi Manager' || role === 'WH C&S Manager' || role === 'WH M&E Manager' || role === 'WH PRECAST Manager' ||\n      role === 'Planning Engineer' || role === 'QS' || role === 'Project Manager' || role === 'Corporate Manager' ||\n      role === 'Client' || role === 'QAQC' || role === 'Safety'\n   ) {\n      return { role: 'View-Only User', trade: null, company: null };\n   };\n\n   if (role === 'WH Archi Coordinator') return { role: 'Coordinator', trade: 'ARCHI', company };\n   if (role === 'WH C&S Design Engineer') return { role: 'Coordinator', trade: 'C&S', company };\n   if (role === 'WH M&E Coordinator') return { role: 'Coordinator', trade: 'M&E', company };\n   if (role === 'WH PRECAST Coordinator') return { role: 'Coordinator', trade: 'PRECAST', company };\n\n   if (role === 'WH Archi Modeller') return { role: 'Modeller', trade: 'ARCHI', company };\n   if (role === 'WH C&S Modeller') return { role: 'Modeller', trade: 'C&S', company };\n   if (role === 'WH M&E Modeller') return { role: 'Modeller', trade: 'M&E', company };\n   if (role === 'WH PRECAST Modeller') return { role: 'Modeller', trade: 'PRECAST', company };\n\n   return { role, trade: null, company };\n};","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\DashboardLayout\\componentsDashboard\\FormPivot.js",["389"],"import { Button, Divider, Modal, Select } from 'antd';\nimport React, { useState } from 'react';\nimport { colorType } from '../assets/constantDashboard';\nimport ChartBarRecordPanel from './ChartBarRecordPanel';\n\n\n\nconst FormPivot = ({ projectName, data, openDrawingTable, dataRecordedDummy, projectId }) => {\n\n   const { panel, dataInfo: { headers, rows: rowsAll } } = data;\n\n\n   const [columnsHeaderSorted, setColumnsHeaderSorted] = useState(null);\n\n\n   const [titleLeft, setTitleLeft] = useState(headers.filter(x => {\n      return !x.includes('(A)') &&\n         !x.includes('(T)') &&\n         x !== 'Model Progress' &&\n         x !== 'Drawing' &&\n         x !== 'Drawing Progress';\n   }));\n\n\n   const [value, setValue] = useState('Select an option...');\n   const [chartRecord, setChartRecord] = useState(false);\n   const [modalConfirm, setModalConfirm] = useState(false);\n\n\n   const onChange = value => {\n      setValue('Select an option...');\n      setTitleLeft(titleLeft.filter(title => title !== value));\n      setColumnsHeaderSorted([...columnsHeaderSorted || [], value]);\n   };\n\n\n   const onResetHandle = () => {\n      setColumnsHeaderSorted(null);\n      setTitleLeft(headers);\n   };\n\n\n   const onRemoveCategory = (e) => {\n      const btnName = e.target.previousSibling.previousSibling.innerText;\n      setColumnsHeaderSorted(columnsHeaderSorted.filter(x => x !== btnName));\n      setTitleLeft([...titleLeft, btnName]);\n   };\n\n\n   const sortedTableOpen = () => {\n      if (!columnsHeaderSorted) {\n         openDrawingTable({\n            projectId,\n            panel,\n            type: 'Pivot Table All',\n         });\n      } else {\n         setModalConfirm(true);\n      }\n   };\n\n\n   const confirmShowSelected = (isShowSelectedOnly) => {\n      openDrawingTable({\n         projectId,\n         panel,\n         type: 'Pivot Table Group',\n         isShowSelectedOnly,\n         headersGroup: columnsHeaderSorted\n      });\n   };\n\n\n   return (\n      <div style={{ marginTop: '10px', padding: '20px' }}>\n         {columnsHeaderSorted && columnsHeaderSorted.map(cl => (\n            <div key={cl} style={{ display: 'flex', width: '100%', margin: '10px auto', padding: 5, border: `1px solid ${colorType.grey1}`, borderRadius: 3 }}>\n               <span style={{ marginRight: 5 }}>{cl}</span>\n               <Divider type='vertical' style={{ height: 21 }} />\n               <span\n                  style={{\n                     marginRight: 15,\n                     color: colorType.red,\n                     cursor: 'pointer',\n                     textAlign: 'center'\n                  }}\n                  onClick={onRemoveCategory}\n               >X</span>\n            </div>\n         ))}\n\n         <Select\n            value={value}\n            showSearch\n            style={{ width: '100%', margin: '0 auto', display: 'table' }}\n            placeholder='Select a title'\n            optionFilterProp='children'\n            onChange={onChange}\n            filterOption={(input, option) => option.props.children.toLowerCase().indexOf(input.toLowerCase()) >= 0}\n         >\n            {titleLeft.map(cl => (\n               <Select.Option value={cl} key={cl}>{cl}</Select.Option>\n            ))}\n         </Select>\n\n         <div style={{ display: 'flex', paddingBottom: '15px' }}>\n            <Button\n               style={{ background: colorType.grey0, width: '100%', margin: '10px auto' }}\n               onClick={sortedTableOpen}\n            >Sorted table</Button>\n\n            <Button\n               style={{ background: colorType.grey0, width: '100%', margin: '10px auto' }}\n               onClick={onResetHandle}\n            >Reset</Button>\n         </div>\n\n         <Divider type='horizontal' style={{ padding: '3px 0' }} />\n\n         <div style={{ fontSize: '18px', fontWeight: 'bold', width: '100%', textAlign: 'center', paddingBottom: '10px' }}>Chart report</div>\n         <Button\n            style={{ background: colorType.grey4, width: '100%' }}\n            onClick={() => setChartRecord(true)}\n            disabled={true}\n         >Chart Report (Experiment)</Button>\n\n\n         <Modal\n            title={`Record ${projectName}`}\n            visible={chartRecord}\n            onCancel={() => setChartRecord(false)}\n            width={0.9 * window.innerWidth}\n            footer={null}\n            bodyStyle={{ padding: 15 }}\n         >\n            <ChartBarRecordPanel\n               data={dataRecordedDummy}\n            />\n         </Modal>\n\n         <Modal\n            title='Do you want to show all columns or selected one?'\n            visible={modalConfirm}\n            onCancel={() => setModalConfirm(false)}\n            footer={null}\n         >\n            <Button onClick={() => {\n               confirmShowSelected(true);\n               setModalConfirm(false);\n            }}\n               style={{ margin: 15 }}\n            >Show selected only</Button>\n\n            <Button onClick={() => {\n               confirmShowSelected(false);\n               setModalConfirm(false);\n            }}>Show all</Button>\n\n         </Modal>\n\n      </div>\n   );\n};\n\nexport default FormPivot;\n\n\n\n","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\DashboardLayout\\componentsDashboard\\TableDrawingList.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\contexts\\cellContext.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\contexts\\projectContext.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\contexts\\rowContext.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\generalComponents\\CellHeader.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\generalComponents\\InputSearch.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\generalComponents\\ViewTemplateSelect.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\generalComponents\\IconTable.js",["390"],"import { Icon, Tooltip } from 'antd';\nimport React, { useContext } from 'react';\nimport styled from 'styled-components';\nimport { colorType } from '../../constants';\nimport { Context as ProjectContext } from '../../contexts/projectContext';\nimport { Context as RowContext } from '../../contexts/rowContext';\n\n\n\nconst IconTable = (props) => {\n\n   const { type, onClick, isActivityTable, pageSheetTypeName } = props;\n\n   const { state: stateRow } = useContext(RowContext);\n   const { state: stateProject } = useContext(ProjectContext);\n\n\n   const modeGroup = stateRow && stateRow.modeGroup;\n   const modeFilter = stateRow && stateRow.modeFilter;\n   const modeSort = stateRow && stateRow.modeSort;\n\n   let disabled = false;\n   if (modeGroup && modeGroup.length > 0 && type !== 'swap' && type !== 'save') {\n      disabled = true;\n   };\n\n\n   return (\n      <Tooltip placement={type === 'menu' ? 'topLeft' : 'top'} title={toolTipBtn(type, pageSheetTypeName)}>\n         <DivStyled>\n            {type === 'rfa-button' ? (\n               <IconRFA onClick={onClick}>RFA</IconRFA>\n            ) : type === 'dms-button' ? (\n               <IconRFA onClick={onClick}>DMS</IconRFA>\n            ) : (\n               <IconStyled\n                  style={{\n                     background: modeFilter && modeFilter.length > 0 && type === 'filter' && !isActivityTable ? colorType.grey1 :\n                        modeSort && Object.keys(modeSort).length === 3 && type === 'sort-ascending' ? colorType.grey1 :\n                           modeGroup && modeGroup.length > 0 && type === 'apartment' ? colorType.grey1 :\n                              null\n                  }}\n                  type={type}\n                  onClick={onClick}\n                  disabled={disabled}\n               />\n            )}\n\n         </DivStyled>\n      </Tooltip>\n   );\n};\n\nexport default IconTable;\n\n\nconst toolTipBtn = (type, pageSheetTypeName) => {\n   return type === 'filter' ? 'Filter Data' :\n      type === 'apartment' ? 'Grouping Data' :\n         type === 'layout' ? 'Reorder Columns' :\n            type === 'sort-ascending' ? 'Sort Rows' :\n               type === 'search' ? 'Search' :\n                  type === 'save' ? 'Save' :\n                     type === 'highlight' ? 'Colorized Rows' :\n                        type === 'eye' ? 'Rows Hide/Unhide' :\n                           type === 'menu' ? 'Projects List' :\n                              type === 'swap' ? 'Clear Filter/Sort/Group/Search' :\n                                 type === 'retweet' ? 'Quick Clear All Filter' :\n                                    type === 'history' ? 'Activity History' :\n                                       type === 'border-outer' ? 'PUBLIC' :\n                                          type === 'radius-upright' ? 'USER' :\n                                             type === 'save' ? 'Save' :\n                                                type === 'fullscreen-exit' ? 'Save SMARTSHEET To Server SUMANG' :\n                                                   type === 'fall' ? 'Save SMARTSHEET To Server HANDY' :\n                                                      type === 'delete' ? 'Delete All Data In Every DB Collections' :\n                                                         type === 'pic-center' ? 'Save Random Rows To Server' :\n                                                            type === 'folder-add' ? 'Drawing Type Organization' :\n                                                               type === 'heat-map' ? 'Highlight Data Changed' :\n                                                                  type === 'export' ? 'Export To Excel' :\n                                                                     type === 'plus' ? 'Save View Template' :\n                                                                        type === 'edit' ? 'Change User Name To Check Multi-User' :\n                                                                           type === 'upload' ? 'Upload Data To Server' :\n                                                                              type === 'rfa-button' ? 'Go To RFA Sheet' :\n                                                                                 type === 'dms-button' ? 'Go To DMS Sheet' :\n                                                                                    (type === 'plus-square' && pageSheetTypeName === 'page-rfam') ? 'Add New RFAM' :\n                                                                                       type === 'plus-square' ? 'Add New RFA' :\n                                                                                          type === 'block' ? 'View Consultant Mode' :\n                                                                                             'No Title';\n};\n\nconst DivStyled = styled.div`\n   &:hover {\n      background-color: ${colorType.grey1}\n   };\n   transition: 0.2s;\n   border-radius: 5px;\n`;\n\n\nconst IconStyled = styled(Icon)`\n   border: ${props => props.disabled ? '1px solid grey' : '1px solid black'};\n   padding: 3px;\n   font-size: 17px;\n   margin: 3px;\n   border-radius: 5px;\n   color: ${props => props.disabled ? 'grey' : 'black'};\n   pointer-events: ${props => props.disabled && 'none'};\n`;\n\nconst IconRFA = styled.div`\n   &:hover {\n      cursor: pointer;\n   }\n   border: ${props => props.disabled ? '1px solid grey' : '1px solid black'};\n   padding: 3px;\n   font-size: 11.5px;\n   margin: 3px;\n   border-radius: 5px;\n   color: ${props => props.disabled ? 'grey' : 'black'};\n   pointer-events: ${props => props.disabled && 'none'};\n`;","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\generalComponents\\FormSort.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\pageDataEntrySheet\\Cell2.js",["391","392","393"],"import { Checkbox, message } from 'antd';\nimport moment from 'moment';\nimport React, { useContext, useEffect, useRef, useState } from 'react';\nimport styled from 'styled-components';\nimport { colorType, imgLink } from '../../constants';\nimport { Context as CellContext } from '../../contexts/cellContext';\nimport { Context as ProjectContext } from '../../contexts/projectContext';\nimport { Context as RowContext } from '../../contexts/rowContext';\nimport PanelCalendar from '../generalComponents/PanelCalendar';\n\n\n\n\nconst Cell2 = (props) => {\n\n   const {\n      rowData, column, columns, rowIndex, columnIndex, onRightClickCell,\n      setPosition, getCurrentDOMCell\n   } = props;\n\n   let { cellData } = props;\n\n\n   const { state: stateCell, getCellModifiedTemp, setCellActive } = useContext(CellContext);\n   const { state: stateRow, getSheetRows } = useContext(RowContext);\n   const { state: stateProject } = useContext(ProjectContext);\n\n\n   let { rowsAll, rowsSelected, rowsSelectedToMove } = stateRow;\n   const { role, publicSettings } = stateProject.allDataOneSheet;\n   const headerData = publicSettings.headers.find(hd => hd.text === column.key);\n\n   const isLockedColumn = headerData.roleCanEdit.indexOf(role.name) === -1;\n   const isLockedRow = rowData.treeLevel || rowData._rowLevel < 1;\n\n\n   let columnKeyToPutFolderName;\n   if (rowData.treeLevel || rowData._rowLevel < 1) {\n      columnKeyToPutFolderName = columns[1].key;\n   };\n\n\n   const inputRef = useRef();\n   const cellRef = useRef();\n   const panelRef = useRef();\n   const buttonRef = useRef();\n\n   const [inputRender, setInputRender] = useState(false);\n   const [valueInput, setValueInput] = useState({ current: cellData || '', init: cellData || '' });\n\n   const [btnShown, setBtnShown] = useState(false);\n   const [panelData, setPanelData] = useState(false);\n\n\n   const getCellTempId = () => `${rowData['id']}~#&&#~${column.key}`;\n\n   const cellEditDone = (value) => {\n\n      if (rowData._rowLevel === 1) {\n         if (\n            (headerData.type === 'date' && !(moment(value, 'DD/MM/YY').format('DD/MM/YY') === value) && value !== '') ||\n            (headerData.type === 'dropdown' && headerData.valueArray.indexOf(value) === -1 && value !== '')\n         ) {\n            setValueInput({ ...valueInput, current: valueInput.init });\n            message.info('Data input should be in correct format', 1);\n\n         } else if (headerData.type === 'checkbox') {\n            getCellModifiedTemp({ [getCellTempId()]: !value || value === 'unchecked' ? 'unchecked' : 'checked' });\n            let row = rowsAll.find(r => r.id === rowData.id);\n            row[column.key] = value ? 'checked' : 'unchecked';\n\n            getSheetRows({ ...stateRow, rowsAll });\n         } else {\n            setValueInput({ ...valueInput, current: value });\n\n            getCellModifiedTemp({ [getCellTempId()]: value });\n            let row = rowsAll.find(r => r.id === rowData.id);\n            row[column.key] = value;\n\n            getSheetRows({ ...stateRow, rowsAll });\n         };\n      };\n   };\n\n\n   const onDoubleClick = () => {\n      if (isLockedColumn || isLockedRow || headerData.type === 'checkbox') return;\n      setInputRender(true);\n      setBtnShown(false);\n      getCurrentDOMCell(); // double click to activate cell\n   };\n   const onClick = () => {\n      if (rowsSelected.length > 0 || rowsSelectedToMove.length > 0) {\n         getSheetRows({\n            ...stateRow, rowsSelected: [], rowsSelectedToMove: []\n         });\n      };\n      if (isLockedColumn || isLockedRow) return;\n      setBtnShown(true);\n      if (!inputRender) { // single click just highlight cell, not activate\n         setPosition({ cell: cellRef.current.parentElement, rowIndex, columnIndex });\n      };\n   };\n\n\n\n   useEffect(() => {\n      document.addEventListener('click', EventClickToHidePanelAndInput);\n      return () => document.removeEventListener('click', EventClickToHidePanelAndInput);\n   }, []);\n   const EventClickToHidePanelAndInput = (e) => {\n      if (!buttonRef.current && panelRef.current) {\n         setPanelData(false);\n      };\n   };\n\n\n   const onMouseLeave = () => {\n      if (btnShown) {\n         setBtnShown(false);\n      };\n   };\n   const onMouseDown = (e) => {\n      if (isLockedColumn) return;\n      if (e.button === 2) { // check mouse RIGHT CLICK ...\n         onRightClickCell(e, props);\n      };\n   };\n   const pickDataSelect = (value) => {\n      setBtnShown(false);\n      setPanelData(false);\n      setInputRender(false);\n      cellEditDone(value);\n   };\n   const onBlur = () => {\n      cellEditDone(valueInput.current);\n      setBtnShown(false);\n      setPanelData(false);\n      setInputRender(false);\n   };\n   const onChange = (e) => {\n      setValueInput({ ...valueInput, current: e.target.value });\n   };\n\n\n   const [checkBoxValue, setCheckBoxValue] = useState(cellData);\n   const onChangeCheckBox = () => {\n      setCheckBoxValue(!checkBoxValue || checkBoxValue === 'unchecked' ? 'checked' : 'unchecked');\n      cellEditDone(!checkBoxValue || checkBoxValue === 'unchecked' ? 'checked' : 'unchecked');\n   };\n\n\n   useEffect(() => { // after keydown ENTER to show input ...\n      if (\n         !inputRender &&\n         stateCell.cellActive &&\n         stateCell.cellActive.rowIndex === rowIndex &&\n         stateCell.cellActive.columnIndex === columnIndex &&\n         !isLockedColumn && !isLockedRow\n      ) {\n         setInputRender(true);\n      };\n   }, [stateCell.cellActive]);\n\n   useEffect(() => {\n      if (\n         !inputRender &&\n         stateCell.cellAppliedAction &&\n         stateCell.cellAppliedAction.currentDOMCell.rowIndex === rowIndex &&\n         stateCell.cellAppliedAction.currentDOMCell.columnIndex === columnIndex &&\n         !isLockedColumn && !isLockedRow\n      ) {\n         \n         const { e } = stateCell.cellAppliedAction;\n         if (e.key === 'Delete') {\n            cellEditDone('');\n         } else if (e.key === 'v' && e.ctrlKey) {\n            cellEditDone(stateCell.tempCopiedText);\n         };\n      };\n   }, [stateCell.cellAppliedAction]);\n\n\n   useEffect(() => { // FOCUS right after press ENTER...\n      if (inputRender) inputRef.current.focus();\n   }, [inputRender]);\n\n\n   useEffect(() => { // Hide Button after pick on PANEL (setBtnShown fasle in pickDataSelect doesn't work)\n      if (btnShown) {\n         setBtnShown(false);\n      };\n   }, [valueInput]);\n\n\n   const onKeyDown = (e) => { // ENTER to hide input after finishing typing ...\n      if (\n         e.key === 'Enter' &&\n         inputRender &&\n         stateCell.cellActive &&\n         stateCell.cellActive.rowIndex === rowIndex &&\n         stateCell.cellActive.columnIndex === columnIndex &&\n         !isLockedColumn\n      ) {\n         inputRef.current.blur();\n         setCellActive(null);\n      };\n   };\n\n\n   return (\n      <>\n         <div\n            ref={cellRef}\n            onDoubleClick={onDoubleClick}\n            onClick={onClick}\n            onMouseLeave={onMouseLeave}\n            onMouseDown={onMouseDown}\n            style={{\n               width: '100%', height: '100%', padding: 5,\n               position: 'relative',\n               color: 'black', background: 'transparent'\n            }}\n         >\n            {headerData.type !== 'checkbox' ? (\n               <>\n                  {inputRender ? (\n                     <input\n                        value={valueInput.current}\n                        onChange={onChange}\n                        onBlur={onBlur}\n                        onKeyDown={onKeyDown}\n                        ref={inputRef}\n                        style={{ outline: 'none', border: 'none', background: 'transparent', width: column.width - 30 }}\n                     />\n\n                  ) : (\n                     <div style={{\n                        textOverflow: 'ellipsis',\n                        overflow: 'hidden',\n                        whiteSpace: 'nowrap',\n                        width: column.width - 30,\n                     }}>\n                        {\n                           (columnKeyToPutFolderName && columnKeyToPutFolderName === column.key && rowData.title) ||\n                           stateCell.cellsModifiedTemp[getCellTempId()] ||  // there is modified data\n                           (getCellTempId() in stateCell.cellsModifiedTemp && ' ') || // there is modified data === empty, MUST BE ' ', not ''\n                           cellData // there is no modification\n                        }\n                     </div>\n                  )}\n               </>\n            ) : (\n               <>\n                  {rowData._rowLevel && rowData._rowLevel === 1 ? (\n                     <CheckboxStyled\n                        onChange={onChangeCheckBox}\n                        checked={checkBoxValue === 'checked' ? true : false}\n                     />\n                  ) : null}\n               </>\n            )}\n\n\n\n\n            {btnShown && headerData.type !== 'checkbox' && (\n               <div style={{\n                  cursor: 'pointer',\n                  position: 'absolute',\n                  right: 4,\n                  top: 5,\n                  height: 17,\n                  width: 17,\n                  backgroundImage: headerData.type === 'date' ? `url(${imgLink.btnDate})`\n                     : headerData.type === 'dropdown' ? `url(${imgLink.btnText})`\n                        : null,\n                  backgroundSize: 17\n               }}\n                  onMouseDown={(e) => {\n                     e.stopPropagation();\n                     setPanelData(!panelData);\n                  }}\n                  ref={buttonRef}\n               />\n            )}\n\n\n            {panelData && (\n               <div\n                  style={{\n                     position: 'absolute',\n                     background: 'white',\n                     top: 30,\n                     left: 0,\n                     minWidth: column.width,\n                     zIndex: 999,\n                     padding: '3px 5px 3px 7px',\n                     boxShadow: 'rgba(0, 0, 0, 0.09) 0px 2px 1px, rgba(0, 0, 0, 0.09) 0px 4px 2px, rgba(0, 0, 0, 0.09) 0px 8px 4px, rgba(0, 0, 0, 0.09) 0px 16px 8px, rgba(0, 0, 0, 0.09) 0px 32px 16px',\n                     maxHeight: 400,\n                     overflowY: 'scroll'\n                  }}\n                  ref={panelRef}\n               >\n                  {headerData.type === 'date' ? (\n                     <PanelCalendar pickDate={(item) => pickDataSelect(moment(item).format('DD/MM/YY'))} />\n                  ) : getColumnsValue(rowsAll, column.key, headerData).map(item => {\n                     return (\n                        <SelectStyled\n                           key={item}\n                           onMouseDown={(e) => {\n                              e.stopPropagation();\n                              pickDataSelect(item);\n                           }}\n                        >{item}</SelectStyled>\n                     );\n                  })}\n               </div>\n            )}\n\n         </div>\n      </>\n   );\n};\n\nexport default Cell2;\n\nconst SelectStyled = styled.div`\n   padding: 4px;\n   &:hover {\n      background-color: ${colorType.grey4};\n      cursor: pointer;\n   };\n   transition: 0.2s;\n`;\n\nconst CheckboxStyled = styled(Checkbox)`\n   \n   .ant-checkbox-inner {\n      border-radius: 0;\n   };\n`;\n\n\n\n\nconst getColumnsValue = (rows, headerKey, headerData) => {\n\n   if (headerData.type === 'dropdown') return headerData.valueArray;\n\n   let valueArr = [];\n   rows.filter(r => r._rowLevel === 1).forEach(row => {\n      valueArr.push(row[headerKey]);\n   });\n   valueArr = [...new Set(valueArr)].filter(e => e);\n   valueArr.sort((a, b) => a > b ? 1 : (b > a ? -1 : 0));\n\n   return valueArr;\n};\n\n\n\n\n\n","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\pageDataEntrySheet\\CellIndex2.js",["394"],"import React, { useContext } from 'react';\nimport styled from 'styled-components';\nimport { Context as CellContext } from '../../contexts/cellContext';\nimport { Context as RowContext } from '../../contexts/rowContext';\nimport { addZero } from '../../utils';\n\n\nconst CellIndex2 = ({ rowData }) => {\n\n    const { state: stateRow, getSheetRows } = useContext(RowContext);\n    const { state: stateCell, setCellActive } = useContext(CellContext);\n\n    const { rowsAll, rowsSelected } = stateRow;\n\n\n\n    const onClickCellIndex = () => {\n        setCellActive(null);\n        const row = rowsAll.find(x => x.id === rowData.id);\n        if (!rowsSelected.find(x => x.id === rowData.id) && rowData._rowLevel === 1) {\n            getSheetRows({\n                ...stateRow,\n                rowsSelected: [...rowsSelected, row],\n                rowsSelectedToMove: []\n            });\n        };\n    };\n\n    return (\n        <Styled onClick={onClickCellIndex}>\n            {rowData._rowLevel === 1 ? addZero(rowsAll.indexOf(rowsAll.find(r => r.id === rowData.id)) + 1) : ''}\n        </Styled>\n    );\n};\n\nexport default CellIndex2;\n\n\n\nconst Styled = styled.div`\n    color: grey;\n    font-size: 12px;\n    cursor: pointer;\n    width: 100%;\n    height: 100%;\n    padding: 5px;\n    padding-right: 8px;\n    text-align: right\n\n`;\n\n","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\pageDataEntrySheet\\ExcelExport2.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\pageDataEntrySheet\\FormDrawingTypeOrder2.js",["395"],"import { Icon, Input, Modal, Tooltip } from 'antd';\nimport React, { useContext, useState } from 'react';\nimport SortableTree from 'react-sortable-tree';\nimport 'react-sortable-tree/style.css';\nimport styled from 'styled-components';\nimport { colorType } from '../../constants';\nimport { Context as ProjectContext } from '../../contexts/projectContext';\nimport { Context as RowContext } from '../../contexts/rowContext';\nimport { mongoObjectId } from '../../utils';\nimport ButtonGroupComp from '../generalComponents/ButtonGroupComp';\n\n\n\n\nconst FormDrawingTypeOrder2 = ({ onClickCancelModal, applyFolderOrganize }) => {\n\n    const { state: stateProject } = useContext(ProjectContext);\n    const { state: stateRow } = useContext(RowContext);\n\n    const { rowsAll } = stateRow;\n\n    const { projectName, projectId, role } = stateProject.allDataOneSheet;\n    const { drawingTypeTree, viewTemplateNodeId } = stateRow;\n\n\n    const [input, setInput] = useState(addProjectHeaderToTree(drawingTypeTree, projectName, projectId));\n\n    const [modalTitle, setModalTitle] = useState(null);\n    const [itemNode, setItemNode] = useState(null);\n    const [mergeList, setMergeList] = useState([]);\n\n    const addFolderBelow = (node) => {\n        node.children.push({\n            title: 'New Folder',\n            id: mongoObjectId(),\n            parentId: node.id,\n            treeLevel: node.treeLevel + 1,\n            expanded: true,\n            children: []\n        });\n        setInput(addProjectHeaderToTree(flattenAllTreeChildNode1(input[0].children), projectName, projectId));\n\n    };\n    const deleteFolder = (node) => {\n        setItemNode(node);\n        setModalTitle('Delete Folder');\n    };\n    const editFolderName = (node) => {\n        setItemNode(node);\n        setModalTitle('Edit Folder Name');\n    };\n    const mergeChildDrawings = (node) => {\n        setItemNode(node);\n        setModalTitle('Merge All Child Drawings');\n    };\n    const confirmAction = (modalTitle, text) => {\n        if (modalTitle === 'Delete Folder') {\n            let idsToDelete = flattenAllTreeChildNode1(itemNode.children).map(x => x.id);\n            idsToDelete.push(itemNode.id);\n\n            let currentNodeFlatten = flattenAllTreeChildNode1(input[0].children);\n            let outputArray = currentNodeFlatten.filter(x => idsToDelete.indexOf(x.id) === -1);\n            setInput(addProjectHeaderToTree(outputArray, projectName, projectId));\n\n        } else if (modalTitle === 'Merge All Child Drawings') {\n            let idsToMerge = flattenAllTreeChildNode1(itemNode.children).map(x => x.id);\n            let mergeListUpdate = [...mergeList];\n            idsToMerge.forEach(id => {\n                if (mergeList.indexOf(id) !== -1) {\n                    mergeListUpdate = mergeListUpdate.filter(x => x !== id);\n                };\n            });\n\n            setMergeList([...mergeListUpdate, itemNode.id]);\n\n            let currentNodeFlatten = flattenAllTreeChildNode1(input[0].children);\n            let outputArray = currentNodeFlatten.filter(x => idsToMerge.indexOf(x.id) === -1);\n\n            setInput(addProjectHeaderToTree(outputArray, projectName, projectId));\n\n        } else if (modalTitle === 'Edit Folder Name') {\n            itemNode.title = text;\n            setInput(addProjectHeaderToTree(flattenAllTreeChildNode1(input[0].children), projectName, projectId));\n        };\n\n        setModalTitle(null);\n    };\n\n    const treeFlatten = flattenAllTreeChildNode1(input);\n\n    let eyeShownInit;\n    if (viewTemplateNodeId) {\n        const nodeTreeFound = treeFlatten.find(x => x.id === viewTemplateNodeId);\n        if (nodeTreeFound) {\n            const br = getTreeFlattenOfNodeInArray(treeFlatten, nodeTreeFound);\n            eyeShownInit = br.map(x => x.id);\n        };\n    };\n    const [iconBtnEyeShownArr, setIconBtnEyeShownArr] = useState(eyeShownInit || []);\n    const [nodeIsolated, setNodeIsolated] = useState(viewTemplateNodeId || null);\n    const isolateView = (node) => {\n        setNodeIsolated(node.id);\n        const nodeFound = treeFlatten.find(x => x.id === node.id);\n        const branch = getTreeFlattenOfNodeInArray(treeFlatten, nodeFound);\n        setIconBtnEyeShownArr(branch.map(x => x.id));\n    };\n\n    return (\n        <Container>\n            <PanelStyled>\n                <SortableTreeStyled\n                    treeData={input}\n                    onChange={treeData => setInput(treeData)}\n                    canDrag={({ node }) => {\n                        if (node.treeLevel === 0) return false;\n                        if (!role.canEditParent) return false;\n                        return true;\n                    }}\n                    canDrop={({ prevParent, nextParent, node }) => {\n                        if (node.treeLevel === 0 || !nextParent || !prevParent ||\n                            (nextParent && nextParent.treeLevel !== node.treeLevel - 1)\n                        ) {\n                            return false;\n                        };\n                        return true;\n                    }}\n                    onMoveNode={({ nextParentNode, node }) => {\n                        updateChildrenNode([node], nextParentNode.treeLevel + 1 - node.treeLevel);\n                    }}\n                    isVirtualized={false}\n\n                    generateNodeProps={({ node }) => {\n\n                        const isEyeShownColor = iconBtnEyeShownArr.indexOf(node.id) !== -1 ? 'black' : '#DCDCDC';\n                        const isEyeShownType = iconBtnEyeShownArr.indexOf(node.id) !== -1 ? 'eye' : 'eye-invisible';\n\n                        return ({\n                            className: 'parent-tags',\n                            buttons:\n                                node.treeLevel === 0 ? [\n                                    <IconBtn type='plus' onClick={() => addFolderBelow(node)} />,\n                                    node.children.length > 0 && <IconBtn type='shrink' onClick={() => mergeChildDrawings(node)} />,\n                                    <IconBtn type={isEyeShownType} onClick={() => isolateView(node)} color={isEyeShownColor} />\n\n                                ] : [\n                                    <IconBtn type='plus' onClick={() => addFolderBelow(node)} />,\n                                    <IconBtn type='edit' onClick={() => editFolderName(node)} />,\n                                    <IconBtn type='delete' onClick={() => deleteFolder(node)} />,\n                                    node.children.length > 0 && <IconBtn type='shrink' onClick={() => mergeChildDrawings(node)} />,\n                                    <IconBtn type={isEyeShownType} onClick={() => isolateView(node)} color={isEyeShownColor} />\n                                ]\n                        });\n                    }}\n                />\n            </PanelStyled>\n\n            <div style={{ padding: 20, display: 'flex', flexDirection: 'row-reverse' }}>\n                <ButtonGroupComp\n                    onClickCancel={onClickCancelModal}\n                    onClickApply={() => applyFolderOrganize(input[0].children, mergeList, nodeIsolated)} // remove projectName item before apply...\n                />\n            </div>\n\n\n            {modalTitle && (\n                <ModalStyledSetting\n                    title={modalTitle}\n                    visible={modalTitle !== null ? true : false}\n                    footer={null}\n                    onCancel={() => setModalTitle(null)}\n                    destroyOnClose={true}\n                    centered={true}\n                    width={window.innerWidth * 0.6}\n                >\n                    <ConfirmOrEditNameModal\n                        modalTitle={modalTitle}\n                        confirmAction={confirmAction}\n                        itemNode={itemNode}\n                        input={input}\n                        rowsAll={rowsAll}\n                    />\n                </ModalStyledSetting>\n            )}\n\n        </Container>\n    );\n};\n\nexport default FormDrawingTypeOrder2;\n\n\nconst SortableTreeStyled = styled(SortableTree)`\n   .rst__node {\n      height: 45px !important;\n   }\n   .rst__rowContents {\n      min-width: fit-content;\n      background-color: transparent !important;\n   }\n`;\nconst IconStyle = styled(Icon)`\n   font-size: 14px;\n   margin: 2px;\n   padding: 4px;\n   &:hover {\n      background-color: ${colorType.grey0};\n   };\n`;\nconst ModalStyledSetting = styled(Modal)`\n    .ant-modal-content {\n        border-radius: 0;\n    }\n   .ant-modal-close {\n      display: none;\n   }\n   .ant-modal-header {\n      padding: 10px;\n   }\n   .ant-modal-title {\n        padding-left: 10px;\n        font-size: 20px;\n        font-weight: bold;\n   }\n   .ant-modal-body {\n      padding: 0;\n      display: flex;\n      justify-content: center;\n   }\n`;\nconst Container = styled.div`\n   height: ${`${window.innerHeight * 0.8}` + 'px'};\n   width: 100%;\n   display: flex;\n   flex-direction: column;\n`;\nconst PanelStyled = styled.div`\n   width: 100%;\n   float: right;\n   overflow-x: hidden;\n   border-bottom: 1px solid ${colorType.grey4};\n`;\nconst IconBtn = ({ type, onClick, color }) => {\n    const text = type === 'plus' ? 'Add Sub Folder'\n        : type === 'delete' ? 'Delete Folder'\n            : type === 'edit' ? 'Edit Name'\n                : type === 'eye' ? 'Isolate View'\n                    : type === 'eye-invisible' ? 'Isolate View'\n                        : 'Merge All Sub Folders'\n\n    return (\n        <Tooltip title={text}>\n            <IconStyle type={type} onClick={onClick} style={{ color: color || 'black' }} />\n        </Tooltip>\n    );\n};\n\n\nconst ConfirmOrEditNameModal = ({ modalTitle, confirmAction, itemNode, input, rowsAll }) => {\n\n    let dwgsToWarn = [];\n    if (modalTitle === 'Delete Folder') {\n        const currentTree = flattenAllTreeChildNode1(input[0].children);\n        const currentTreeNode = currentTree.find(x => x.id === itemNode.id);\n        const nodeArray = getTreeFlattenOfNodeInArray(currentTree, currentTreeNode);\n        nodeArray.forEach(nd => {\n            dwgsToWarn = [...dwgsToWarn, ...rowsAll.filter(x => x._parentRow === nd.id)];\n        });\n    };\n\n\n    const [value, setValue] = useState(null);\n    const onClickApplyModal = () => {\n        if (modalTitle === 'Delete Folder') {\n            confirmAction(modalTitle);\n        } else if (modalTitle === 'Edit Folder Name') {\n            confirmAction(modalTitle, value);\n        } else if (modalTitle === 'Merge All Child Drawings') {\n            confirmAction(modalTitle);\n        };\n    };\n    return (\n        <div style={{ padding: 20, width: '100%', maxHeight: window.innerHeight * 0.7 }}>\n            {modalTitle === 'Delete Folder' ? (\n                <div>\n                    <div>Are you sure to delete the folder <span style={{ fontWeight: 'bold' }}>{itemNode.title}</span>?</div>\n                    <div>All the <span style={{ fontWeight: 'bold' }}>{dwgsToWarn.length}</span> following drawings will be deleted accordingly</div>\n                </div>\n            ) : modalTitle === 'Merge All Child Drawings' ? (\n                <div>Are you sure to delete all sub folders and retains all drawings</div>\n            ) : (\n                <Input\n                    style={{ width: '100%' }}\n                    value={value || itemNode.title}\n                    onChange={(e) => setValue(e.target.value)}\n                />\n            )}\n\n            <div style={{ padding: 20, display: 'flex', flexDirection: 'row-reverse' }}>\n                <ButtonGroupComp\n                    onClickCancel={() => { }}\n                    onClickApply={onClickApplyModal}\n                />\n            </div>\n        </div>\n    );\n};\n\n\n\nexport const flattenAllTreeChildNode1 = (root) => {\n    let temp = [];\n    let queue = [...root];\n    while (queue.length > 0) {\n        let node = queue.shift();\n        if (node.children) {\n            let childNode = [];\n            node.children.forEach(nd => {\n                childNode.push({ ...nd, parentId: node.id });\n            });\n            queue = [...queue, ...childNode];\n            let nodeObj = { ...node };\n            delete nodeObj.children;\n            temp.push(nodeObj);\n        } else {\n            let nodeObj = { ...node };\n            delete nodeObj.children;\n            temp.push(nodeObj);\n        };\n    };\n    return temp;\n};\nexport const convertFlattenArraytoTree1 = (list) => {\n    let map = {}, node, roots = [], i;\n    for (i = 0; i < list.length; i += 1) {\n        map[list[i].id] = i;\n        if (list[i]._rowLevel !== 1) {\n            list[i].children = list[i].children || [];\n        };\n    };\n\n    let arrayOfTreeLevel = [];\n    list.forEach(tr => {\n        arrayOfTreeLevel.push(tr.treeLevel);\n    });\n    const treeLevelOfTopTree = Math.min(...arrayOfTreeLevel);\n\n    for (i = 0; i < list.length; i++) {\n        node = list[i];\n        if (node.treeLevel > treeLevelOfTopTree) {\n            list[map[node.parentId]].children.push(node);\n        } else {\n            roots.push(node);\n        };\n    };\n    return roots;\n};\nconst addProjectHeaderToTree = (tree, projectName, projectId) => {\n    return [{\n        title: projectName,\n        id: projectId,\n        treeLevel: 0,\n        expanded: true,\n        children: convertFlattenArraytoTree1(tree.map(x => ({ ...x })))\n    }];\n};\nconst updateChildrenNode = (arr, n) => {\n    arr.forEach(i => {\n        i.treeLevel = i.treeLevel + n;\n        if (i.children.length > 0) {\n            updateChildrenNode(i.children, n);\n        };\n    });\n};\nconst updateChildrenNodeTreeLevel = (arr) => {\n    arr.forEach(i => {\n        let childrenArr = i.children;\n        if (childrenArr && childrenArr.length > 0) {\n            childrenArr.forEach(ch => {\n                ch.treeLevel = i.treeLevel + 1;\n            });\n            updateChildrenNodeTreeLevel(childrenArr);\n        };\n    });\n};\nconst getListOfBranchesTree = (inputArr) => {\n    const arr = inputArr.map(x => ({ ...x }));\n    arr.sort((a, b) => { return b.treeLevel - a.treeLevel });\n\n    const parentArrIds = [];\n    arr.forEach(x => {\n        let item = arr.find(fld => fld.id === x.parentId);\n        if (item) {\n            item.children = [...item.children || [], x];\n        } else {\n            parentArrIds.push(x.id);\n        };\n    });\n    return arr.filter(x => parentArrIds.indexOf(x.id) !== -1);\n};\nexport const getTreeFlattenOfNodeInArray = (treeArray, node) => {\n    let obj = { ...node };\n    let arrayTree = treeArray.map(x => ({ ...x })).filter(x => x.treeLevel > obj.treeLevel);\n    arrayTree = [...arrayTree, obj];\n    const treeOfFound = getListOfBranchesTree(arrayTree).find(x => x.id === obj.id);\n    return flattenAllTreeChildNode1([treeOfFound]);\n};\nexport const compareCurrentTreeAndTreeFromDB = (treeFromCurrentInit, treeFromCurrentInput, treeDeletedFromCurrent, treeFromDBInput, treeDeletedFromDB) => {\n\n    let treeFromCurrent = treeFromCurrentInput.map(i => ({ ...i }));\n    let treeFromDB = treeFromDBInput.map(i => ({ ...i }));\n\n    // check if need to save tree or not\n    if (treeFromCurrent.length === treeFromCurrentInit.length) {\n        const stringTreeCurrent = treeFromCurrent.reduce((acc, current) => acc + `${current.id}-${current.parentId}-${current.title}-`, '');\n        const stringTreeInit = treeFromCurrentInit.reduce((acc, current) => acc + `${current.id}-${current.parentId}-${current.title}-`, '');\n        if (stringTreeCurrent === stringTreeInit) {\n            return {\n                needToSaveTree: false,\n                treeDBModifiedToSave: treeFromDB,\n                nodesToAddToDB: [],\n                nodesToRemoveFromDB: [],\n            };\n        };\n    };\n\n    let treeCurrentModified = removeNodesDeletedByOtherUsersFromTreeCurrent(treeFromCurrent, treeDeletedFromDB);\n\n    let { nodesToRemoveFromDB, treeFromDB: treeFromDBModified, nodesIdNoNeedToAddNew } = removeNodesDeletedByCurrentUserFromTreeDB(treeFromDB, treeDeletedFromCurrent, treeCurrentModified);\n\n    let { nodesToAddToDB, treeDBModifiedToSave: treeDBModified } = haveChangedNodesInDBAndNewNodesInCurrentBackToDB(treeFromDBModified, treeCurrentModified, treeFromCurrentInit, nodesIdNoNeedToAddNew);\n\n\n\n    // reorder item follow new order...\n    let treeDBModifiedToSave = [];\n    treeFromCurrentInput.forEach(item => {\n        const found = treeDBModified.find(x => x.id === item.id);\n        if (found) {\n            treeDBModifiedToSave.push(found);\n            treeDBModified = treeDBModified.filter(x => x.id !== found.id);\n        };\n    });\n    treeDBModifiedToSave = [...treeDBModifiedToSave, ...treeDBModified].sort((a, b) => { return a.treeLevel - b.treeLevel });\n\n    return {\n        needToSaveTree: true,\n        treeDBModifiedToSave,\n        nodesToAddToDB,\n        nodesToRemoveFromDB,\n    };\n};\nconst removeNodesDeletedByOtherUsersFromTreeCurrent = (treeCurrent, treeDeletedFromDB) => {\n    let idsToCheckCurrent = [];\n    treeDeletedFromDB.forEach(item => {\n        const found = treeCurrent.find(x => x.id === item.id);\n        if (found) {\n            idsToCheckCurrent = [\n                ...idsToCheckCurrent,\n                ...getTreeFlattenOfNodeInArray(treeCurrent, found).map(x => x.id)\n            ];\n        };\n    });\n    idsToCheckCurrent = [...new Set(idsToCheckCurrent)];\n\n    const nodesArray = treeCurrent.filter(x => idsToCheckCurrent.indexOf(x.id) !== -1);\n\n    const branchTrees = getListOfBranchesTree(nodesArray);\n\n    const newIdObj = {};\n    treeDeletedFromDB.forEach(item => {\n        newIdObj[item.id] = mongoObjectId();\n    });\n\n    branchTrees.forEach(tree => {\n        let flattenArray = flattenAllTreeChildNode1([tree]);\n        let isAbleToDelete = true;\n\n        flattenArray.forEach(item => {\n            if (!treeDeletedFromDB.find(x => x.id === item.id)) isAbleToDelete = false;\n        });\n\n        if (isAbleToDelete) {\n            treeCurrent = treeCurrent.filter(x => !flattenArray.find(item => item.id === x.id));\n        } else {\n            const arrayToModify = treeCurrent.filter(item => flattenArray.find(x => x.id === item.id));\n            treeDeletedFromDB.forEach(item => {\n                const found = arrayToModify.find(x => x.id === item.id);\n                if (found) {\n                    found.id = newIdObj[item.id];\n                };\n                const childrenFound = arrayToModify.filter(x => x.parentId === item.id);\n                if (childrenFound.length > 0) {\n                    childrenFound.forEach(child => {\n                        child.parentId = newIdObj[item.id];\n                    });\n                };\n            });\n        };\n    });\n    return treeCurrent;\n};\nconst removeNodesDeletedByCurrentUserFromTreeDB = (treeFromDB, treeDeletedFromCurrent, treeCurrent) => {\n    let listIdToRemoveFromDB = [];\n    treeDeletedFromCurrent.forEach(item => {\n        const found = treeFromDB.find(x => x.id === item.id);\n        if (found) {\n            listIdToRemoveFromDB = [\n                ...listIdToRemoveFromDB,\n                ...getTreeFlattenOfNodeInArray(treeFromDB, found).map(x => x.id)\n            ];\n        };\n    });\n\n    const nodesToRemoveFromDB = treeFromDB.filter(x => {\n        return listIdToRemoveFromDB.indexOf(x.id) !== -1 && !treeCurrent.find(item => item.id === x.id);\n    });\n    const nodesIdNoNeedToAddNew = listIdToRemoveFromDB.filter(id => treeCurrent.find(item => item.id === id))\n\n    treeFromDB = treeFromDB.filter(x => listIdToRemoveFromDB.indexOf(x.id) === -1);\n\n    return {\n        nodesToRemoveFromDB,\n        nodesIdNoNeedToAddNew,\n        treeFromDB\n    };\n};\nconst haveChangedNodesInDBAndNewNodesInCurrentBackToDB = (treeFromDB, treeCurrent, treeCurrentInit, nodesIdNoNeedToAddNew) => {\n    let nodesToAddToDB = [];\n    treeCurrent.forEach(item => {\n        if (!treeFromDB.find(x => x.id === item.id)) {\n            nodesToAddToDB.push(item);\n        };\n    });\n\n    let dwgTypeExistedInDBButLevelOrParentChangesArr = [];\n    let childrenIdsToWithdrawFromDB = [];\n    treeFromDB.forEach(item => {\n        const found = treeCurrent.find(r => r.id === item.id);\n        const foundInit = treeCurrentInit.find(r => r.id === item.id);\n        if (found && foundInit) {\n            if (found.title !== foundInit.title) item.title = found.title;\n\n            if (found.parentId !== item.parentId && found.parentId !== foundInit.parentId) {\n                dwgTypeExistedInDBButLevelOrParentChangesArr.push({ ...found, title: item.title });\n\n                const arrIdsChildrenInDB = getTreeFlattenOfNodeInArray(treeFromDB, item).filter((x, i) => i !== 0).map(x => x.id);\n\n                childrenIdsToWithdrawFromDB = [...childrenIdsToWithdrawFromDB, ...arrIdsChildrenInDB];\n            };\n        };\n    });\n    childrenIdsToWithdrawFromDB = [...new Set(childrenIdsToWithdrawFromDB)];\n\n    const dwgTypeToWithdrawFromDB = treeFromDB.filter(x => childrenIdsToWithdrawFromDB.indexOf(x.id) !== -1);\n\n    treeFromDB = treeFromDB.filter(item => {\n        return childrenIdsToWithdrawFromDB.indexOf(item.id) === -1 && !dwgTypeExistedInDBButLevelOrParentChangesArr.find(x => x.id === item.id)\n    });\n\n\n    const listBranchesTreeToPushToDB = getListOfBranchesTree([\n        ...nodesToAddToDB,\n        ...dwgTypeExistedInDBButLevelOrParentChangesArr,\n        ...dwgTypeToWithdrawFromDB\n    ]);\n\n    listBranchesTreeToPushToDB.forEach(itemTree => {\n        treeFromDB = [...treeFromDB, ...flattenAllTreeChildNode1([itemTree])];\n    });\n\n    const treeDBModifiedToSave = convertFlattenArraytoTree1(treeFromDB);\n    updateChildrenNodeTreeLevel(treeDBModifiedToSave);\n\n    return {\n        nodesToAddToDB: nodesToAddToDB.filter(item => nodesIdNoNeedToAddNew.indexOf(item.id) === -1),\n        treeDBModifiedToSave: flattenAllTreeChildNode1(treeDBModifiedToSave)\n    };\n};\n\n\n\n\n\n\n\n","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\pageDataEntrySheet\\PanelFunction2.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\pageDataEntrySheet\\PanelSetting2.js",["396","397","398","399","400","401","402","403","404","405","406","407","408"],"import React, { useContext } from 'react';\nimport { Context as CellContext } from '../../contexts/cellContext';\nimport { Context as ProjectContext } from '../../contexts/projectContext';\nimport { Context as RowContext } from '../../contexts/rowContext';\nimport { convertCellTempToHistory, debounceFnc, extractCellInfo, genId, mongoObjectId } from '../../utils';\nimport FormFilter from '../generalComponents/FormFilter';\nimport FormGroup from '../generalComponents/FormGroup';\nimport FormSort from '../generalComponents/FormSort';\nimport PanelConfirm from '../generalComponents/PanelConfirm';\nimport PanelConfirmResetMode from '../generalComponents/PanelConfirmResetMode';\nimport PanelPickNumber from '../generalComponents/PanelPickNumber';\nimport ReorderColumnForm from '../generalComponents/ReorderColumnForm';\nimport { getOutputRowsAllSorted } from '../PageDataEntrySheet';\nimport ColorizedForm2 from './ColorizedForm2';\nimport FormCellColorizedCheck2 from './FormCellColorizedCheck2';\nimport FormDrawingTypeOrder, { flattenAllTreeChildNode1, getTreeFlattenOfNodeInArray } from './FormDrawingTypeOrder2';\nimport TableActivityHistory2 from './TableActivityHistory2';\nimport TableCellHistory2 from './TableCellHistory2';\n\n\n\nconst PanelSetting2 = (props) => {\n\n   const { state: stateRow } = useContext(RowContext);\n   const { state: stateProject } = useContext(ProjectContext);\n   const { state: stateCell, OverwriteCellsModified } = useContext(CellContext);\n\n   const {\n      panelType, panelSettingType, commandAction, onClickCancelModal,\n      cellsHistoryInCurrentSheet, cellOneHistory\n   } = props;\n\n   const { projectId } = stateProject.allDataOneSheet;\n\n\n   const applyReorderColumns = (data) => commandAction({ type: 'reorder-columns', data });\n\n   const applyFilter = (filter) => commandAction({ type: 'filter-by-columns', data: { modeFilter: filter } });\n\n   const applyResetMode = (modeReset) => {\n      const modeResetObj = {};\n      modeReset.forEach(type => {\n         if (type.header === 'Filter' && type.mode === 'hidden') modeResetObj.modeFilter = [];\n         if (type.header === 'Sort' && type.mode === 'hidden') modeResetObj.modeSort = {};\n         if (type.header === 'Search' && type.mode === 'hidden') modeResetObj.modeSearch = {};\n      });\n      return commandAction({\n         type: 'reset-filter-sort',\n         data: {\n            rowsAll: stateRow.rowsAll,\n            ...modeResetObj\n         }\n      });\n   };\n   const applyQuitGroupingMode = () => {\n      return commandAction({\n         type: 'reset-filter-sort',\n         data: { modeGroup: [], modeSearch: {} }\n      });\n   };\n\n\n   const applyGroup = (data) => commandAction({ type: 'group-columns', data: { modeGroup: data } });\n\n   const applyColorization = (data) => commandAction({ type: 'drawing-colorized', data });\n\n   const setCellHistoryArr = debounceFnc((data) => commandAction({ type: 'highlight-cell-history', data }), 1);\n\n   const applySort = (data) => commandAction({ type: 'sort-data', data: { modeSort: data } });\n\n   const applyViewTemplate = (name) => {\n      let { allDataOneSheet: { publicSettings: { headers } }, userData: { headersShown, headersHidden, nosColumnFixed, colorization } } = stateProject;\n      const { viewTemplateNodeId, viewTemplates, modeFilter, modeSort } = stateRow;\n\n      headersShown = headersShown.map(hd => headers.find(x => x.text === hd).key);\n      headersHidden = headersHidden.map(hd => headers.find(x => x.text === hd).key);\n\n      commandAction({\n         type: 'add-view-templates',\n         data: {\n            viewTemplates: [...viewTemplates, {\n               id: mongoObjectId(),\n               name,\n               headersShown,\n               headersHidden,\n               nosColumnFixed,\n               colorization,\n               viewTemplateNodeId,\n               modeFilter,\n               modeSort\n            }]\n         }\n      });\n   };\n\n\n   const onClickInsertRow = (nosOfRows) => {\n      let { rowsAll, idRowsNew, rowsUpdatePreRowOrParentRow } = stateRow;\n\n      const idsArr = genId(nosOfRows);\n      idRowsNew = [...idRowsNew, ...idsArr];\n\n      let newRows = [];\n      let rowBelow;\n      if (panelSettingType === 'Insert Drawings Below') {\n         let rowAbove = panelType.cellProps.rowData;\n         newRows = idsArr.map((id, i) => {\n            return ({\n               id, _rowLevel: 1,\n               _parentRow: rowAbove._parentRow,\n               _preRow: i === 0 ? rowAbove.id : idsArr[i - 1]\n            });\n         });\n         rowBelow = rowsAll.find(r => r._preRow === rowAbove.id);\n         if (rowBelow) {\n            rowBelow._preRow = idsArr[idsArr.length - 1];\n         };\n\n      } else if (panelSettingType === 'Insert Drawings Above') {\n         rowBelow = rowsAll.find(r => r.id === panelType.cellProps.rowData.id);\n\n         newRows = idsArr.map((id, i) => {\n            return ({\n               id, _rowLevel: 1,\n               _parentRow: rowBelow._parentRow,\n               _preRow: i === 0 ? rowBelow._preRow : idsArr[i - 1]\n            });\n         });\n         rowBelow._preRow = idsArr[idsArr.length - 1];\n      };\n\n      if (rowBelow) {\n         updatePreRowParentRowToState(rowsUpdatePreRowOrParentRow, rowBelow);\n      };\n      newRows.forEach(row => {\n         updatePreRowParentRowToState(rowsUpdatePreRowOrParentRow, row);\n      });\n      rowsAll = [...rowsAll, ...newRows];\n\n      const rowsOutput = _processRowsChainNoGroupFnc1([...rowsAll]);\n      commandAction({\n         type: 'insert-drawings',\n         data: {\n            rowsAll: rowsOutput,\n            rowsUpdatePreRowOrParentRow,\n            idRowsNew\n         }\n      });\n   };\n   const onClickFolderInsertSubRows = (nosOfRows) => {\n      let { rowsAll, idRowsNew, rowsUpdatePreRowOrParentRow } = stateRow;\n\n      let idsArr = genId(nosOfRows);\n      idRowsNew = [...idRowsNew, ...idsArr];\n\n      let newRows = idsArr.map((id, i) => {\n         return ({\n            id, _rowLevel: 1,\n            _parentRow: panelType.cellProps.rowData.id,\n            _preRow: i === 0 ? null : idsArr[i - 1]\n         });\n      });\n      newRows.forEach(row => {\n         updatePreRowParentRowToState(rowsUpdatePreRowOrParentRow, row);\n      });\n      let rowBelow = rowsAll.find(r => r._parentRow === panelType.cellProps.rowData.id && r._preRow === null);\n      if (rowBelow) {\n         rowBelow._preRow = idsArr[idsArr.length - 1];\n         updatePreRowParentRowToState(rowsUpdatePreRowOrParentRow, rowBelow);\n      };\n      rowsAll = [...rowsAll, ...newRows];\n\n      const rowsOutput = _processRowsChainNoGroupFnc1([...rowsAll]);\n      commandAction({\n         type: 'insert-drawings-by-folder',\n         data: {\n            rowsAll: rowsOutput,\n            rowsUpdatePreRowOrParentRow,\n            idRowsNew\n         }\n      });\n   };\n   const onClickDuplicateRows = (nosOfRows) => {\n      let { rowsAll, idRowsNew, rowsUpdatePreRowOrParentRow } = stateRow;\n      const { headers } = stateProject.allDataOneSheet.publicSettings;\n\n      let idsArr = genId(nosOfRows);\n      idRowsNew = [...idRowsNew, ...idsArr];\n\n      const rowAbove = panelType.cellProps.rowData;\n\n      const newRows = idsArr.map((id, i) => ({\n         ...rowAbove, id,\n         _preRow: i === 0 ? rowAbove.id : idsArr[i - 1]\n      }));\n\n      const rowBelow = rowsAll.find(r => r._preRow === rowAbove.id);\n      if (rowBelow) {\n         rowBelow._preRow = idsArr[idsArr.length - 1];\n         updatePreRowParentRowToState(rowsUpdatePreRowOrParentRow, rowBelow);\n      };\n\n      let cellsModifiedTempObj = {};\n      newRows.forEach(row => {\n         headers.forEach(hd => {\n            if (row[hd.text]) {\n               cellsModifiedTempObj[`${row.id}~#&&#~${hd.text}`] = row[hd.text];\n            };\n         });\n         updatePreRowParentRowToState(rowsUpdatePreRowOrParentRow, row);\n      });\n      OverwriteCellsModified({ ...stateCell.cellsModifiedTemp, ...cellsModifiedTempObj });\n      rowsAll = [...rowsAll, ...newRows];\n\n      const rowsOutput = _processRowsChainNoGroupFnc1([...rowsAll]);\n      commandAction({\n         type: 'duplicate-drawings',\n         data: {\n            rowsAll: rowsOutput,\n            rowsUpdatePreRowOrParentRow,\n            idRowsNew\n         }\n      });\n   };\n   const deleteDrawing = () => {\n      let { rowsAll, idRowsNew, rowsUpdatePreRowOrParentRow, rowsDeleted } = stateRow;\n      const { cellsModifiedTemp } = stateCell;\n      const rowId = panelType.cellProps.rowData.id;\n\n      let rowBelow = rowsAll.find(r => r._preRow === rowId);\n      if (rowBelow) {\n         rowBelow._preRow = panelType.cellProps.rowData._preRow;\n         updatePreRowParentRowToState(rowsUpdatePreRowOrParentRow, rowBelow);\n      };\n\n      if (rowId in rowsUpdatePreRowOrParentRow) delete rowsUpdatePreRowOrParentRow[rowId];\n      rowsAll = rowsAll.filter(r => r.id !== rowId);\n\n      if (idRowsNew.indexOf(rowId) === -1) {\n         rowsDeleted = [...rowsDeleted, panelType.cellProps.rowData];\n      } else {\n         idRowsNew.splice(idRowsNew.indexOf(rowId), 1);\n      };\n\n      Object.keys(cellsModifiedTemp).forEach(key => {\n         \n         const { rowId: rowIdExtract } = extractCellInfo(key);\n         if (rowIdExtract === rowId) {  // deleted cells modified temporary...\n            delete cellsModifiedTemp[key];\n         };\n      });\n      OverwriteCellsModified({ ...cellsModifiedTemp });\n\n      const rowsOutput = _processRowsChainNoGroupFnc1([...rowsAll]);\n\n      commandAction({\n         type: 'delete-drawing',\n         data: {\n            rowsAll: rowsOutput,\n            rowsUpdatePreRowOrParentRow,\n            rowsDeleted,\n            idRowsNew,\n         }\n      });\n   };\n   const applyFolderOrganize = (drawingTypeTreeNew, mergeList, nodeIsolated) => {\n\n      let {\n         rowsAll, rowsDeleted, idRowsNew, rowsUpdatePreRowOrParentRow,\n         drawingsTypeDeleted, drawingsTypeNewIds, drawingTypeTree, viewTemplateNodeId\n      } = stateRow;\n\n      const { cellsModifiedTemp } = stateCell;\n\n      mergeList.forEach(parentNodeId => {\n         const node = drawingTypeTree.find(x => x.id === parentNodeId);\n         const treeBranchToMerge = getTreeFlattenOfNodeInArray(drawingTypeTree, node);\n\n         const treeBranchChildren = treeBranchToMerge.filter(x => x.id !== parentNodeId);\n         let arr = [];\n         treeBranchChildren.forEach(node => {\n            const rowsChildren = rowsAll.filter(r => r._parentRow === node.id);\n            arr = [...arr, ...rowsChildren];\n         });\n         arr.forEach((row, i) => {\n            row._parentRow = parentNodeId;\n            row._preRow = i === 0 ? null : arr[i - 1].id;\n            updatePreRowParentRowToState(rowsUpdatePreRowOrParentRow, row);\n         });\n      });\n\n\n      let drawingTypeTreeUpdate = flattenAllTreeChildNode1(drawingTypeTreeNew);\n      drawingTypeTreeUpdate.forEach(item => {\n         delete item.children;\n      });\n\n\n      drawingTypeTree.forEach(tr => {\n         if (!drawingTypeTreeUpdate.find(x => x.id === tr.id)) {\n            if (drawingsTypeNewIds.indexOf(tr.id) !== -1) {\n               drawingsTypeNewIds = drawingsTypeNewIds.filter(id => id !== tr.id);\n            } else {\n               drawingsTypeDeleted = [...drawingsTypeDeleted, tr];\n            };\n         };\n      });\n      drawingTypeTreeUpdate.forEach(tr => {\n         if (!drawingTypeTree.find(x => x.id === tr.id)) {\n            drawingsTypeNewIds.push(tr.id);\n         };\n      });\n\n      let allDrawingsParentId = [...new Set(rowsAll.map(x => x._parentRow))];\n\n\n      if (allDrawingsParentId.length === 1 && allDrawingsParentId[0] === projectId) {\n         const rowsChildren = rowsAll.filter(row => row._parentRow === projectId);\n         // some folders are added below sheet level => add new folder to contain...\n         const nodeParentPrevious = {\n            id: projectId,\n            treeLevel: 0,\n         };\n         const allTreeLevel = [...new Set(drawingTypeTreeUpdate.map(x => x.treeLevel))];\n         let arrayNodes = [nodeParentPrevious];\n\n         for (let i = 0; i <= allTreeLevel.length; i++) {\n            let arrFilter = drawingTypeTreeUpdate.filter(x => x.treeLevel === allTreeLevel[i] && arrayNodes.find(dt => dt.id === x.parentId));\n            arrayNodes = [...arrayNodes, ...arrFilter];\n         };\n         const lowestLevel = Math.max(...arrayNodes.map(x => x.treeLevel));\n\n         const dwgTypeParentToShiftDrawings = arrayNodes.find(x => x.treeLevel === lowestLevel);\n\n         rowsChildren.forEach(r => {\n            r._parentRow = dwgTypeParentToShiftDrawings.id;\n            updatePreRowParentRowToState(rowsUpdatePreRowOrParentRow, r);\n         });\n\n      } else {\n\n         allDrawingsParentId.forEach(drawingParentId => {\n            const rowsChildren = rowsAll.filter(row => row._parentRow === drawingParentId);\n\n            if (!drawingTypeTreeUpdate.find(x => x.id === drawingParentId) && !mergeList.find(item => item.id === drawingParentId)) {\n               rowsChildren.forEach(rrr => {\n                  if (idRowsNew.indexOf(rrr.id) === -1) {\n                     rowsDeleted = [...rowsDeleted, rrr];\n                  } else {\n                     idRowsNew.splice(idRowsNew.indexOf(rrr.id), 1);\n                  };\n                  Object.keys(cellsModifiedTemp).forEach(key => {\n                     const { rowId: rowIdExtract } = extractCellInfo(key);\n                     if (rowIdExtract === rrr.id) {  // deleted cells modified temporary...\n                        delete cellsModifiedTemp[key];\n                     };\n                  });\n                  if (rrr.id in rowsUpdatePreRowOrParentRow) delete rowsUpdatePreRowOrParentRow[rrr.id];\n               });\n               rowsAll = rowsAll.filter(r => r._parentRow !== drawingParentId);\n            } else if (!drawingTypeTreeUpdate.find(x => x.id === drawingParentId) && mergeList.find(item => item.id === drawingParentId)) {\n\n\n            } else {\n               if (drawingTypeTreeUpdate.find(x => x.parentId === drawingParentId)) {\n                  // some folders are added below drawing parent => add new type to contain\n                  const nodeParentPrevious = drawingTypeTreeUpdate.find(x => x.id === drawingParentId);\n                  const allTreeLevel = [...new Set(drawingTypeTreeUpdate.map(x => x.treeLevel))];\n\n                  let arrayNodes = [nodeParentPrevious];\n\n                  for (let i = nodeParentPrevious.treeLevel; i <= allTreeLevel.length; i++) {\n                     let arrFilter = drawingTypeTreeUpdate.filter(x => x.treeLevel === allTreeLevel[i] && arrayNodes.find(dt => dt.id === x.parentId));\n                     arrayNodes = [...arrayNodes, ...arrFilter];\n                  };\n                  const lowestLevel = Math.max(...arrayNodes.map(x => x.treeLevel));\n                  const dwgTypeParentToShiftDrawings = arrayNodes.find(x => x.treeLevel === lowestLevel);\n\n                  rowsChildren.forEach(r => {\n                     r._parentRow = dwgTypeParentToShiftDrawings.id;\n                     updatePreRowParentRowToState(rowsUpdatePreRowOrParentRow, r);\n                  });\n               };\n            };\n         });\n      };\n\n\n\n      OverwriteCellsModified({ ...cellsModifiedTemp });\n\n      const rowsOutput = getOutputRowsAllSorted(drawingTypeTreeUpdate, rowsAll);\n\n      let templateObj = {};\n      if (viewTemplateNodeId !== nodeIsolated) {\n         templateObj.viewTemplateNodeId = nodeIsolated;\n      };\n\n      commandAction({\n         type: 'drawing-folder-organization',\n         data: {\n            rowsAll: rowsOutput,\n            rowsDeleted,\n            drawingTypeTree: drawingTypeTreeUpdate,\n            rowsUpdatePreRowOrParentRow,\n            drawingsTypeDeleted,\n            drawingsTypeNewIds,\n            idRowsNew,\n            ...templateObj\n         }\n      });\n   };\n\n\n\n\n\n   // const saveDataToServer = async () => {\n   //    const { email, projectId, token, role, projectName } = stateProject.allDataOneSheet;\n   //    const { headersShown, headersHidden, nosColumnFixed, colorization } = stateProject.userData;\n   //    const { headers } = stateProject.allDataOneSheet.publicSettings;\n   //    let { cellsModifiedTemp } = stateCell;\n   //    let {\n   //       rowsUpdatePreRowOrParentRow,\n   //       drawingTypeTreeInit,\n   //       drawingTypeTree,\n   //       drawingsTypeDeleted,\n   //       rowsDeleted,\n\n   //       viewTemplateNodeId,\n   //       viewTemplates,\n   //       modeFilter,\n   //       modeSort,\n   //    } = stateRow;\n\n   //    try {\n   //       setLoading(true);\n   //       commandAction({ type: '' });\n\n   //       const resDB = await Axios.get(`${SERVER_URL}/sheet/`, { params: { token, projectId, email } });\n   //       const resCellsHistory = await Axios.get(`${SERVER_URL}/cell/history/`, { params: { token, projectId } });\n\n   //       let { publicSettings: publicSettingsFromDB, rows: rowsFromDBInit } = resolveDataFromProps(resDB);\n   //       let { drawingTypeTree: drawingTypeTreeFromDB, activityRecorded: activityRecordedFromDB } = publicSettingsFromDB;\n\n   //       let rowsFromDB = rowsFromDBInit.map(row => ({ ...row }));\n\n   //       let {\n   //          needToSaveTree,\n   //          treeDBModifiedToSave,\n   //          nodesToAddToDB,\n   //          nodesToRemoveFromDB\n   //       } = compareCurrentTreeAndTreeFromDB(\n   //          drawingTypeTreeInit,\n   //          drawingTypeTree,\n   //          drawingsTypeDeleted,\n   //          drawingTypeTreeFromDB,\n   //          activityRecordedFromDB.filter(x => x.action === 'Delete Drawing Type'),\n   //       );\n\n   //       let activityRecordedArr = [];\n   //       treeDBModifiedToSave = [\n   //          {\n   //             title: projectName,\n   //             id: projectId,\n   //             treeLevel: 0,\n   //             expanded: true,\n   //          },\n   //          ...treeDBModifiedToSave\n   //       ];\n\n\n\n   //       const rowsUpdatePreRowOrParentRowArray = Object.values(rowsUpdatePreRowOrParentRow) // check if row or its parents deleted by other users\n   //          .filter(row => !activityRecordedFromDB.find(r => r.id === row.id && r.action === 'Delete Drawing') &&\n   //             !activityRecordedFromDB.find(r => r.id === row._parentRow && r.action === 'Delete Drawing Type'));\n\n\n   //       if (rowsUpdatePreRowOrParentRowArray.length > 0) {\n\n   //          let arrID = [];\n   //          rowsFromDB.forEach(r => { // take out temporarily all rowsUpdatePreRowOrParentRowArray from DB\n   //             if (rowsUpdatePreRowOrParentRowArray.find(row => row.id === r.id)) {\n   //                arrID.push(r.id);\n   //                const rowBelow = rowsFromDB.find(rrr => rrr._preRow === r.id);\n   //                if (rowBelow) rowBelow._preRow = r._preRow;\n   //             };\n   //          });\n   //          rowsFromDB = rowsFromDB.filter(r => arrID.indexOf(r.id) === -1);\n\n\n   //          const rowsInOldParent = rowsUpdatePreRowOrParentRowArray.filter(r => {\n   //             return treeDBModifiedToSave.find(tr => tr.id === r._parentRow && !treeDBModifiedToSave.find(x => x.parentId === tr.id));\n   //          });\n   //          const rowsInOldParentDivertBranches = rowsUpdatePreRowOrParentRowArray.filter(r => {\n   //             return treeDBModifiedToSave.find(tr => tr.id === r._parentRow && treeDBModifiedToSave.find(x => x.parentId === tr.id));\n   //          });\n   //          const rowsInNewParent = rowsUpdatePreRowOrParentRowArray.filter(r => {\n   //             return !treeDBModifiedToSave.find(tr => tr.id === r._parentRow);\n   //          });\n\n\n\n   //          const rowsInOldParentOutput = _processChainRowsSplitGroupFnc2([...rowsInOldParent]);\n   //          rowsInOldParentOutput.forEach(arrChain => {\n   //             const rowFirst = arrChain[0];\n   //             const parentRowInDB = treeDBModifiedToSave.find(tr => tr.id === rowFirst._parentRow);\n   //             const rowAbove = rowsFromDB.find(r => r.id === rowFirst._preRow);\n   //             if (rowAbove) {\n   //                if (rowAbove._parentRow !== rowFirst._parentRow) { // rowAbove move to other parent by other user\n   //                   const lastRowInParent = rowsFromDB.find(r => r._parentRow === parentRowInDB.id && !rowsFromDB.find(x => x._preRow === r.id));\n   //                   rowFirst._preRow = lastRowInParent ? lastRowInParent.id : null;\n   //                } else { // rowAbove is still in the same parent\n   //                   const rowBelowRowAbove = rowsFromDB.find(r => r._preRow === rowAbove.id);\n   //                   if (rowBelowRowAbove) rowBelowRowAbove._preRow = arrChain[arrChain.length - 1].id;\n   //                   rowFirst._preRow = rowAbove.id;\n   //                };\n   //             } else {\n   //                if (rowFirst._preRow === null) {\n   //                   const firstRowInParent = rowsFromDB.find(r => r._parentRow === parentRowInDB.id && r._preRow === null);\n   //                   if (firstRowInParent) { // if firstRowInParent undefined means Drawing type has 0 drawing currently...\n   //                      firstRowInParent._preRow = arrChain[arrChain.length - 1].id;\n   //                   };\n   //                } else {\n   //                   const lastRowInParent = rowsFromDB.find(r => r._parentRow === parentRowInDB.id && !rowsFromDB.find(x => x._preRow === r.id));\n   //                   rowFirst._preRow = lastRowInParent ? lastRowInParent.id : null;\n   //                };\n   //             };\n   //             rowsFromDB = [...rowsFromDB, ...arrChain];\n   //          });\n\n\n   //          let idsOldParentDivertBranches = [...new Set(rowsInOldParentDivertBranches.map(r => r._parentRow))];\n   //          idsOldParentDivertBranches.forEach(idP => {\n   //             let arrInput = rowsInOldParentDivertBranches.filter(r => r._parentRow === idP);\n   //             let rowsChildren = _processRowsChainNoGroupFnc1([...arrInput]);\n\n   //             const treeNode = treeDBModifiedToSave.find(x => x.id === idP);\n   //             const newIdParent = mongoObjectId();\n   //             treeDBModifiedToSave.push({\n   //                title: 'New Folder',\n   //                id: newIdParent,\n   //                parentId: treeNode.id,\n   //                treeLevel: treeNode.treeLevel + 1,\n   //                expanded: true,\n   //             });\n   //             needToSaveTree = true;\n\n   //             activityRecordedArr.push({\n   //                title: 'New Folder',\n   //                id: newIdParent,\n   //                email,\n   //                createdAt: new Date(),\n   //                action: 'Create Folder',\n   //             });\n\n   //             rowsChildren.forEach((r, i) => {\n   //                r._preRow = i === 0 ? null : rowsChildren[i - 1].id;\n   //                r._parentRow = newIdParent;\n   //             });\n   //             rowsFromDB = [...rowsFromDB, ...rowsChildren];\n   //          });\n\n\n\n   //          let idsNewParentArray = [...new Set(rowsInNewParent.map(r => r._parentRow))];\n   //          idsNewParentArray.forEach(idP => {\n   //             let arrInput = rowsInNewParent.filter(r => r._parentRow === idP);\n   //             let rowsChildren = _processRowsChainNoGroupFnc1([...arrInput]);\n   //             rowsChildren.forEach((r, i) => {\n   //                r._preRow = i === 0 ? null : rowsChildren[i - 1].id;\n   //             });\n   //             rowsFromDB = [...rowsFromDB, ...rowsChildren];\n   //          });\n   //       };\n\n\n   //       let objCellHistory = {}; // SAVE CELL HISTORY\n   //       resCellsHistory.data.map(cell => {\n   //          const headerText = headers.find(hd => hd.key === cell.headerKey).text;\n   //          if (cell.histories.length > 0) {\n   //             const latestHistoryText = cell.histories[cell.histories.length - 1].text;\n   //             objCellHistory[`${cell.row}-${headerText}`] = latestHistoryText;\n   //          };\n   //       });\n   //       Object.keys(cellsModifiedTemp).forEach(key => {\n   //          if (objCellHistory[key] && objCellHistory[key] === cellsModifiedTemp[key]) {\n   //             delete cellsModifiedTemp[key];\n   //          } else {\n      \n   //             let rowId = extractCellInfo(key).rowId;\n   //             if (activityRecordedFromDB.find(x => x.id === rowId && x.action === 'Delete Drawing')) {\n   //                delete cellsModifiedTemp[key];\n   //             };\n   //          };\n   //       });\n\n   //       if (Object.keys(cellsModifiedTemp).length > 0) {\n   //          await Axios.post(`${SERVER_URL}/cell/history/`, { token, projectId, cellsHistory: convertCellTempToHistory(cellsModifiedTemp, stateProject) });\n   //       };\n\n\n\n\n   //       let rowDeletedFinal = []; // DELETE ROWS\n   //       rowsDeleted.forEach(row => { // some rows already deleted by previous user => no need to delete anymore\n   //          const rowInDB = rowsFromDB.find(r => r.id === row.id);\n   //          if (rowInDB) {\n   //             const rowBelow = rowsFromDB.find(r => r._preRow === rowInDB.id);\n   //             if (rowBelow) {\n   //                rowBelow._preRow = rowInDB._preRow;\n   //             };\n   //             rowsFromDB = rowsFromDB.filter(r => r.id !== rowInDB.id); // FIXEDDDDDDDDDDDDDDDDDDD\n   //             rowDeletedFinal.push(row);\n   //          };\n   //       });\n\n\n   //       if (nodesToRemoveFromDB.length > 0) {\n   //          nodesToRemoveFromDB.forEach(fd => {\n   //             activityRecordedArr.push({\n   //                id: fd.id, email, createdAt: new Date(), action: 'Delete Folder',\n   //                title: fd.title,\n   //             });\n   //          });\n   //       };\n   //       if (nodesToAddToDB.length > 0) {\n   //          nodesToAddToDB.forEach(fd => {\n   //             activityRecordedArr.push({\n   //                id: fd.id, email, createdAt: new Date(), action: 'Create Folder',\n   //                title: fd.title,\n   //             });\n   //          });\n   //       };\n\n\n   //       activityRecordedArr.forEach(rc => { // SAVE PUBLIC SETTINGS RECORDED\n   //          const newRowsAddedByPreviousUserButParentDeletedByCurrentUser = rowsFromDB.filter(e => {\n   //             return e._parentRow === rc.id &&\n   //                rc.action === 'Delete Folder' &&\n   //                !rowDeletedFinal.find(x => x.id === e.id);\n   //          });\n   //          rowDeletedFinal = [...rowDeletedFinal, ...newRowsAddedByPreviousUserButParentDeletedByCurrentUser];\n   //       });\n\n   //       rowDeletedFinal.forEach(r => {\n   //          activityRecordedArr.push({\n   //             id: r.id, email, createdAt: new Date(), action: 'Delete Drawing',\n   //          });\n   //       });\n\n\n   //       rowsFromDB = rowsFromDB.filter(r => !rowDeletedFinal.find(x => x.id === r.id));\n\n   //       if (rowDeletedFinal.length > 0) {  // DELETE ...\n   //          await Axios.post(`${SERVER_URL}/sheet/delete-rows/`, { token, projectId, email, rowIdsArray: rowDeletedFinal.map(r => r.id) });\n   //       };\n\n\n\n   //       treeDBModifiedToSave = treeDBModifiedToSave.filter(node => node.treeLevel !== 0);\n   //       let publicSettingsUpdated = { projectName };\n   //       if (needToSaveTree) {\n   //          publicSettingsUpdated = { ...publicSettingsUpdated, drawingTypeTree: treeDBModifiedToSave };\n   //       };\n   //       if (activityRecordedArr.length > 0) {\n   //          publicSettingsUpdated = { ...publicSettingsUpdated, activityRecorded: [...activityRecordedFromDB, ...activityRecordedArr] };\n   //       };\n   //       await Axios.post(`${SERVER_URL}/sheet/update-setting-public/`, { token, projectId, email, publicSettings: publicSettingsUpdated });\n\n\n   //       const userSettingsUpdated = {\n   //          headersShown: headersShown.map(hd => headers.find(h => h.text === hd).key),\n   //          headersHidden: headersHidden.map(hd => headers.find(h => h.text === hd).key),\n   //          nosColumnFixed, colorization, role, viewTemplateNodeId, viewTemplates, modeFilter, modeSort\n   //       };\n\n   //       await Axios.post(`${SERVER_URL}/sheet/update-setting-user/`, { token, projectId, email, userSettings: userSettingsUpdated });\n\n\n\n\n   //       let rowsToUpdateFinal = []; // FILTER FINAL ROW TO UPDATE......\n   //       rowsFromDB.map(row => {\n   //          Object.keys(cellsModifiedTemp).forEach(key => {\n   //             const { rowId, headerName } = extractCellInfo(key);\n   //             if (rowId === row.id) row[headerName] = cellsModifiedTemp[key];\n   //          });\n   //          let rowOutput;\n   //          const found = rowsFromDBInit.find(r => r.id === row.id);\n   //          if (found) {\n   //             let toUpdate = false;\n   //             Object.keys(row).forEach(key => {\n   //                if (found[key] !== row[key]) toUpdate = true;\n   //             });\n   //             if (toUpdate) rowOutput = { ...row };\n   //          } else {\n   //             rowOutput = { ...row };\n   //          };\n   //          if (rowOutput) {\n   //             let rowToSave = { _id: rowOutput.id, parentRow: rowOutput._parentRow, preRow: rowOutput._preRow };\n   //             headers.forEach(hd => {\n   //                if (rowOutput[hd.text] || rowOutput[hd.text] === '') {\n   //                   rowToSave.data = { ...rowToSave.data || {}, [hd.key]: rowOutput[hd.text] };\n   //                };\n   //             });\n   //             rowsToUpdateFinal.push(rowToSave);\n   //          };\n   //       });\n   //       if (rowsToUpdateFinal.length > 0) {\n   //          await Axios.post(`${SERVER_URL}/sheet/update-rows/`, { token, projectId, rows: rowsToUpdateFinal });\n   //       };\n\n\n   //       commandAction({ type: 'save-data-successfully' });\n\n   //    } catch (err) {\n   //       commandAction({ type: 'save-data-failure' });\n   //       console.log(err);\n   //    };\n   // };\n\n   // const saveDataToServerAndReloadData = async () => {\n   //    const { projectId, token, email } = stateProject.allDataOneSheet;\n   //    try {\n   //       await saveDataToServer();\n   //       const res = await Axios.get(`${SERVER_URL}/sheet/`, { params: { token, projectId, email } });\n   //       commandAction({ type: 'reload-data-from-server', data: resolveDataFromProps(res) });\n\n   //    } catch (err) {\n   //       commandAction({ type: 'save-data-failure' });\n   //       console.log(err);\n   //    };\n   // };\n\n\n\n   return (\n      <>\n\n         {panelSettingType === 'filter-ICON' && (\n            <FormFilter\n               applyFilter={applyFilter}\n               onClickCancelModal={onClickCancelModal}\n               headers={stateProject.userData.headersShown}\n               modeFilter={stateRow.modeFilter}\n               rowsAll={stateRow.rowsAll}\n            />\n         )}\n\n         {panelSettingType === 'swap-ICON-1' && (\n            <PanelConfirm\n               onClickCancel={onClickCancelModal}\n               onClickApply={applyQuitGroupingMode}\n               content='Do you want to quit grouping mode ?'\n            />\n         )}\n         {panelSettingType === 'swap-ICON-2' && (\n            <PanelConfirmResetMode\n               onClickCancelModal={onClickCancelModal}\n               applyResetMode={applyResetMode}\n               modeFilter={stateRow.modeFilter}\n               modeSort={stateRow.modeSort}\n               modeSearch={stateRow.modeSearch}\n            />\n         )}\n\n\n         {panelSettingType === 'reorderColumn-ICON' && (\n            <ReorderColumnForm applyReorderColumns={applyReorderColumns} onClickCancelModal={onClickCancelModal} />\n         )}\n\n         {panelSettingType === 'viewTemplate-ICON' && (\n            <PanelConfirm\n               onClickApply={applyViewTemplate} onClickCancel={onClickCancelModal}\n               content='Do you want to save a new view template ?'\n            />\n         )}\n\n\n         {panelSettingType === 'sort-ICON' && (\n            <FormSort\n               applySort={applySort}\n               onClickCancel={onClickCancelModal}\n               headers={stateProject.userData.headersShown}\n               modeSort={stateRow.modeSort}\n            />\n         )}\n\n\n         {panelSettingType === 'group-ICON' && (\n            <FormGroup \n               applyGroup={applyGroup} \n               onClickCancelModal={onClickCancelModal} \n               headers={stateProject.userData.headersShown}\n            />\n         )}\n\n\n         {(panelSettingType === 'Insert Drawings Below' || panelSettingType === 'Insert Drawings Above') && (\n            <PanelPickNumber\n               onClickCancelModal={onClickCancelModal}\n               onClickApply={onClickInsertRow}\n            />\n         )}\n\n         {panelSettingType === 'Duplicate Drawings' && (\n            <PanelPickNumber\n               onClickCancelModal={onClickCancelModal}\n               onClickApply={onClickDuplicateRows}\n            />\n         )}\n\n         {panelSettingType === 'history-ICON' && (\n            <TableActivityHistory2\n               cellsHistoryInCurrentSheet={cellsHistoryInCurrentSheet}\n            />\n         )}\n\n         {panelSettingType === 'color-cell-history-ICON' && (\n            <FormCellColorizedCheck2\n               setCellHistoryArr={setCellHistoryArr}\n               cellsHistoryInCurrentSheet={cellsHistoryInCurrentSheet}\n            />\n         )}\n\n         {panelSettingType === 'View Cell History' && (\n            <TableCellHistory2 {...panelType.cellProps} cellOneHistory={cellOneHistory} />\n         )}\n\n\n         {panelSettingType === 'addDrawingType-ICON' && (\n            <FormDrawingTypeOrder applyFolderOrganize={applyFolderOrganize} onClickCancelModal={onClickCancelModal} />\n         )}\n\n\n\n\n         {panelSettingType === 'Delete Drawing' && (\n            <PanelConfirm\n               onClickCancel={onClickCancelModal}\n               onClickApply={deleteDrawing}\n               content={`Are you sure to delete this drawing ?`}\n            />\n         )}\n\n         {panelSettingType === 'colorized-ICON' && (\n            <ColorizedForm2 applyColorization={applyColorization} onClickCancelModal={onClickCancelModal} />\n         )}\n\n         {panelSettingType === 'Insert Drawings By Type' && (\n            <PanelPickNumber onClickCancelModal={onClickCancelModal} onClickApply={onClickFolderInsertSubRows} />\n         )}\n\n\n\n      </>\n   );\n};\n\nexport default PanelSetting2;\n\n\n\n\n\n\n\n\nexport const _processRowsChainNoGroupFnc1 = (rows) => {\n   let rowsProcessed = [];\n\n   if (!(rows instanceof Array) || !rows.length) {\n      return rowsProcessed;\n   };\n\n   let firstRowIndex = rows.findIndex((row) => !row._preRow);\n   while (firstRowIndex >= 0) {\n      let preRow = rows.splice(firstRowIndex, 1)[0];\n      while (preRow) {\n         rowsProcessed.push(preRow);\n\n         let nextRowIndex = rows.findIndex((row) => String(row._preRow) == String(preRow.id));\n         if (nextRowIndex >= 0) preRow = rows.splice(nextRowIndex, 1)[0];\n         else preRow = null;\n      };\n      firstRowIndex = rows.findIndex((row) => !row._preRow);\n   };\n   _processRowsLossHeadFnc1(rows, rowsProcessed);\n   return rowsProcessed;\n};\nconst _processRowsLossHeadFnc1 = (rows, rowsProcessed) => {\n   if (!rows.length) return;\n\n   let firstRowIndex = rows.findIndex((r) => _filterRowLossPreRowFnc(r, rows));\n   while (firstRowIndex >= 0) {\n      let preRow = rows.splice(firstRowIndex, 1)[0];\n      while (preRow) {\n         rowsProcessed.push(preRow);\n\n         let nextRowIndex = rows.findIndex((row) => String(row._preRow) == String(preRow.id));\n         if (nextRowIndex >= 0) preRow = rows.splice(nextRowIndex, 1)[0];\n         else preRow = null;\n      };\n      firstRowIndex = rows.findIndex((r) => _filterRowLossPreRowFnc(r, rows));\n   };\n};\nconst _processChainRowsSplitGroupFnc2 = (rows) => {\n   let rowsProcessed = [];\n\n   if (!(rows instanceof Array) || !rows.length) return rowsProcessed;\n\n   let firstRowIndex = rows.findIndex((row) => !row._preRow);\n   while (firstRowIndex >= 0) {\n      let preRow = rows.splice(firstRowIndex, 1)[0];\n      let chain = [];\n      while (preRow) {\n         chain.push(preRow);\n         let nextRowIndex = rows.findIndex((row) => String(row._preRow) == String(preRow.id));\n\n         if (nextRowIndex >= 0) preRow = rows.splice(nextRowIndex, 1)[0];\n         else preRow = null;\n      };\n      rowsProcessed.push(chain);\n      firstRowIndex = rows.findIndex((row) => !row._preRow);\n   };\n   _processChainRowsLossHeadFnc2(rows, rowsProcessed);\n   return rowsProcessed;\n};\nconst _processChainRowsLossHeadFnc2 = (rows, rowsProcessed) => {\n   if (!rows.length) return;\n\n   let firstRowIndex = rows.findIndex((r) => _filterRowLossPreRowFnc(r, rows));\n   while (firstRowIndex >= 0) {\n      let preRow = rows.splice(firstRowIndex, 1)[0];\n      let chain = [];\n      while (preRow) {\n         chain.push(preRow);\n\n         let nextRowIndex = rows.findIndex((row) => String(row._preRow) == String(preRow.id));\n         if (nextRowIndex >= 0) preRow = rows.splice(nextRowIndex, 1)[0];\n         else preRow = null;\n      };\n      rowsProcessed.push(chain);\n      firstRowIndex = rows.findIndex((r) => _filterRowLossPreRowFnc(r, rows));\n   };\n};\nconst _filterRowLossPreRowFnc = (row, rows) => {\n   return rows.every(r => String(row._preRow) != String(r.id));\n};\n\n\n\nexport const updatePreRowParentRowToState = (objState, row) => {\n   objState[row.id] = {\n      id: row.id,\n      _preRow: row._preRow,\n      _parentRow: row._parentRow,\n   };\n};\n\n\n\n\n\n","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\pageSpreadsheet\\ButtonAdminCreateAndUpdateRows.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\pageSpreadsheet\\ButtonAdminCreateAndUpdateRowsHistory.js",[],["409","410"],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\pageSpreadsheet\\ButtonAdminDeleteRowsHistory.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\pageSpreadsheet\\ButtonAdminUploadData.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\pageSpreadsheet\\Cell.js",["411","412","413","414"],"import { message } from 'antd';\nimport moment from 'moment';\nimport React, { useEffect, useRef, useState } from 'react';\nimport styled from 'styled-components';\nimport { colorTextRow, colorType, imgLink } from '../../constants';\nimport PanelCalendar from '../generalComponents/PanelCalendar';\nimport { isColumnWithReplyData } from './CellRFA';\nimport { getCompanyNameFnc, getTradeNameFnc, getTreeFlattenOfNodeInArray } from './FormDrawingTypeOrder';\n\n\n\nconst Cell = (props) => {\n\n   let {\n      cellData, rowData, column, columns, rowIndex, columnIndex,\n      onRightClickCell, setPosition, getCurrentDOMCell, contextInput\n   } = props;\n\n   const { contextCell, contextRow, contextProject } = contextInput;\n   const { stateCell, getCellModifiedTemp, setCellActive } = contextCell;\n   const { stateRow, getSheetRows } = contextRow;\n   const { stateProject } = contextProject;\n   const { drawingTypeTree, rowsAll, modeGroup, rowsSelected, rowsSelectedToMove, modeFilter } = stateRow;\n\n   let columnKeyToPutFolderName;\n   if (rowData.treeLevel || rowData._rowLevel < 1) {\n      columnKeyToPutFolderName = columns[1].key;\n   };\n\n\n\n   if ((column.key.includes('(A)') || column.key.includes('(T)') ||\n      column.key === 'Construction Issuance Date' || column.key === 'Construction Start') &&\n      cellData && cellData.length === 10 && cellData.includes('-')) {\n      cellData = moment(cellData, 'YYYY-MM-DD').format('DD/MM/YY');\n   };\n\n\n\n   const { roleTradeCompany, projectIsAppliedRfaView, company, pageSheetTypeName } = stateProject.allDataOneSheet;\n\n\n   let info = '';\n   if (rowData.treeLevel && column.key === columnKeyToPutFolderName) {\n      const node = drawingTypeTree.find(x => x.id === rowData.id);\n      const branches = getTreeFlattenOfNodeInArray(drawingTypeTree, node);\n\n      const branchesWithDrawing = branches.filter(x => !branches.find(y => y.parentId === x.id));\n\n      let rowsArr = [];\n      branchesWithDrawing.forEach(brch => {\n         rowsArr = [...rowsArr, ...rowsAll.filter(r => r._parentRow === brch.id)];\n      });\n      modeFilter.forEach(filter => {\n         if (filter.id) {\n            rowsArr = rowsArr.filter(r => r[filter.header] === filter.value);\n         };\n      });\n      let obj = {};\n      rowsArr.forEach(row => {\n         if (!row['Status'] || row['Status'] === 'INFO') {\n            obj['Not Started'] = (obj['Not Started'] || 0) + 1;\n         } else {\n            obj[row['Status']] = (obj[row['Status']] || 0) + 1;\n         }\n      });\n\n      let str = '';\n      Object.keys(obj).forEach((stt, i) => {\n         let code;\n         let init = i === 0 ? '' : ' + ';\n\n         if (stt === 'Not Started') code = 'NS';\n         if (stt === '1st cut of model in-progress') code = 'MIP';\n         if (stt === '1st cut of drawing in-progress') code = 'DIP';\n         if (stt === 'Pending design') code = 'PD';\n         if (stt === 'Consultant reviewing') code = 'CR';\n         if (stt === 'Reject and resubmit') code = 'RR';\n         if (stt === 'Approved with comments, to Resubmit') code = 'AR';\n         if (stt === 'Revise In-Progress') code = 'RP';\n         if (stt === 'Approved with Comment, no submission Required') code = 'AC';\n         if (stt === 'Approved for Construction') code = 'AP';\n         if (stt === 'INFO') code = 'NS';\n\n         str += `${init}${obj[stt]} ${code}`;\n\n      });\n      let end = rowsArr.length === 0 ? '' : ' : ';\n      info = ` - (${rowsArr.length} Drawings${end}${str})`;\n   };\n\n\n   const isLockedColumn = columnLocked(roleTradeCompany, rowData, modeGroup, column.key, projectIsAppliedRfaView, pageSheetTypeName);\n   const isLockedRow = rowLocked(roleTradeCompany, rowData, modeGroup, drawingTypeTree);\n\n\n   const inputRef = useRef();\n   const cellRef = useRef();\n   const panelRef = useRef();\n   const buttonRef = useRef();\n\n   const [inputRender, setInputRender] = useState(false);\n   const [valueInput, setValueInput] = useState({ current: cellData || '', init: cellData || '' });\n\n   const [btnShown, setBtnShown] = useState(false);\n   const [panelData, setPanelData] = useState(false);\n   const [btnDrawingShown, setBtnDrawingShown] = useState(false);\n\n   const cellDataTypeBtn = checkCellDataFormat(column.key);\n\n   const getCellTempId = () => `${rowData['id']}~#&&#~${column.key}`;\n\n   const cellEditDone = (value) => {\n      if (rowData._rowLevel === 1) {\n\n         const parentNode = drawingTypeTree.find(x => x.id === rowData._parentRow);\n         const tradeName = getTradeNameFnc(parentNode, drawingTypeTree);\n         let cellDrgTypeFormatArrText;\n         if (tradeName.includes('(SUBCON)')) {\n            cellDrgTypeFormatArrText = ['Other'];\n         } else {\n            cellDrgTypeFormatArrText = cellDrgTypeFormat[tradeName];\n         };\n\n         if (\n            (cellDataTypeBtn === 'cell-type-date' && !(moment(value, 'DD/MM/YY').format('DD/MM/YY') === value) && value !== '') ||\n            (column.key === 'Status' && cellStatusFormat.indexOf(value) === -1 && value !== '') ||\n            (column.key === 'Use For' && cellUseForFormat.indexOf(value) === -1 && value !== '') ||\n            ((column.key === 'Model Progress' || column.key === 'Drawing Progress') && cellProgressFormatData.indexOf(value) === -1 && value !== '') ||\n            (column.key === 'Drg Type' && cellDrgTypeFormatArrText.indexOf(value) === -1 && value !== '')\n         ) {\n            setValueInput({ ...valueInput, current: valueInput.init });\n            message.info('Data input should be in correct format', 1);\n\n         } else {\n            setValueInput({ ...valueInput, current: value });\n\n            getCellModifiedTemp({ [getCellTempId()]: value });\n            let row = rowsAll.find(r => r.id === rowData.id);\n            row[column.key] = value;\n\n            getSheetRows({\n               ...stateRow,\n               rowsAll\n            });\n         };\n      };\n   };\n\n\n   const onDoubleClick = () => {\n      if (isLockedColumn || isLockedRow) return;\n      setInputRender(true);\n      setBtnShown(false);\n      getCurrentDOMCell(); // double click to activate cell\n   };\n   const onClick = () => {\n      if (rowsSelected.length > 0 || rowsSelectedToMove.length > 0) {\n         getSheetRows({\n            ...stateRow, rowsSelected: [], rowsSelectedToMove: []\n         });\n      };\n      if (isLockedColumn || isLockedRow) return;\n\n\n      setBtnShown(true);\n      if (!inputRender) { // single click just highlight cell, not activate\n         setPosition({ cell: cellRef.current.parentElement, rowIndex, columnIndex });\n      };\n\n      if (rowsSelected.length > 0) {\n         getSheetRows({ ...stateRow, rowsSelected: [] });\n      };\n   };\n\n\n   useEffect(() => {\n      document.addEventListener('click', EventClickToHidePanelAndInput);\n      return () => document.removeEventListener('click', EventClickToHidePanelAndInput);\n   }, []);\n\n   const EventClickToHidePanelAndInput = (e) => {\n      if (!buttonRef.current && panelRef.current) {\n         setPanelData(false);\n      };\n   };\n\n\n   const onMouseLeave = () => {\n      if (btnShown) setBtnShown(false);\n      if (btnDrawingShown) setBtnDrawingShown(false);\n   };\n   const onMouseDown = (e) => {\n      if (e.button === 2) { // check mouse RIGHT CLICK ...\n         onRightClickCell(e, props);\n      } else {\n         if (isLockedColumn || isLockedRow) return;\n      };\n   };\n\n   const pickDataSelect = (type, value) => {\n      setBtnShown(false);\n      setPanelData(false);\n      setInputRender(false);\n      if (type === 'text') {\n         cellEditDone(value);\n      } else if (type === 'date') {\n         cellEditDone(moment(value).format('DD/MM/YY'));\n      } else if (type === 'div') {\n         cellEditDone(value.props.type);\n      };\n   };\n   const onBlur = () => {\n      cellEditDone(valueInput.current);\n      setBtnShown(false);\n      setPanelData(false);\n      setInputRender(false);\n   };\n   const onChange = (e) => {\n      setValueInput({ ...valueInput, current: e.target.value });\n   };\n\n\n\n\n   useEffect(() => { // after keydown ENTER to show input ...\n      if (\n         !inputRender &&\n         stateCell.cellActive &&\n         stateCell.cellActive.rowIndex === rowIndex &&\n         stateCell.cellActive.columnIndex === columnIndex &&\n         !isLockedColumn && !isLockedRow\n      ) {\n         setInputRender(true);\n      };\n   }, [stateCell.cellActive]);\n\n   useEffect(() => {\n      if (\n         !inputRender &&\n         stateCell.cellAppliedAction &&\n         stateCell.cellAppliedAction.currentDOMCell.rowIndex === rowIndex &&\n         stateCell.cellAppliedAction.currentDOMCell.columnIndex === columnIndex &&\n         !isLockedColumn && !isLockedRow\n      ) {\n         const { e } = stateCell.cellAppliedAction;\n         if (e.key === 'Delete') {\n            cellEditDone('');\n         } else if (e.key === 'v' && e.ctrlKey) {\n            cellEditDone(stateCell.tempCopiedText);\n         };\n      };\n   }, [stateCell.cellAppliedAction]);\n\n   useEffect(() => { // FOCUS right after press ENTER...\n      if (inputRender) {\n         inputRef.current.focus();\n      };\n   }, [inputRender]);\n\n   useEffect(() => { // Hide Button after pick on PANEL (setBtnShown fasle in pickDataSelect doesn't work)\n      if (btnShown) {\n         setBtnShown(false);\n      };\n   }, [valueInput]);\n\n   const onKeyDown = (e) => { // ENTER to hide input after finishing typing ...\n      if (\n         e.key === 'Enter' &&\n         inputRender &&\n         stateCell.cellActive &&\n         stateCell.cellActive.rowIndex === rowIndex &&\n         stateCell.cellActive.columnIndex === columnIndex &&\n         !isLockedColumn && !isLockedRow\n      ) {\n         inputRef.current.blur();\n         setCellActive(null);\n      };\n   };\n\n\n\n\n   const cellStatusFormat = projectIsAppliedRfaView ? [\n      'Not Started',\n      '1st cut of model in-progress',\n      '1st cut of drawing in-progress',\n      'Pending design',\n   ] : [\n      'Not Started',\n      '1st cut of model in-progress',\n      '1st cut of drawing in-progress',\n      'Pending design',\n\n\n      'Consultant reviewing',\n      'Reject and resubmit',\n      'Approved with comments, to Resubmit',\n      'Revise In-Progress',\n      'Approved with Comment, no submission Required',\n      'Approved for Construction',\n   ];\n\n\n   return (\n      <>\n         <div\n            ref={cellRef}\n            onDoubleClick={onDoubleClick}\n            onClick={onClick}\n            onMouseLeave={onMouseLeave}\n            onMouseDown={onMouseDown}\n            onMouseEnter={() => setBtnDrawingShown(true)}\n            style={{\n               width: '100%', height: '100%', padding: 5, position: 'relative', color: 'black', background: 'transparent',\n               paddingLeft: 5,\n               overflow: !rowData.treeLevel && column.key === columnKeyToPutFolderName ? 'hidden' : 'visible' // fix bug frozen panel move to the left\n            }}\n         >\n            {inputRender ? (\n               <input\n                  value={valueInput.current}\n                  onChange={onChange}\n                  onBlur={onBlur}\n                  onKeyDown={onKeyDown}\n                  ref={inputRef}\n                  style={{\n                     outline: 'none',\n                     border: 'none',\n                     background: 'transparent',\n                     width: column.width - 30\n                  }}\n               />\n\n            ) : (\n               <div style={{\n                  textOverflow: column.key === columnKeyToPutFolderName ? 'unset' : 'ellipsis',\n                  overflow: column.key === columnKeyToPutFolderName ? 'visible' : 'hidden',\n                  whiteSpace: 'nowrap',\n                  width: column.width - 30,\n                  color: (rowData['Status'] === 'Revise In-Progress' ? '#DAA520' : colorTextRow[rowData['Status']]) || 'black'\n               }}>\n                  {\n                     ((column.key === 'Model Progress' || column.key === 'Drawing Progress') && <BtnProgress type={cellData} />) ||\n                     (\n                        columnKeyToPutFolderName && columnKeyToPutFolderName === column.key &&\n                        <><span style={{ fontWeight: 'bold' }}>{rowData.title}</span><span>{info}</span></>\n                     ) ||\n                     stateCell.cellsModifiedTemp[getCellTempId()] ||  // there is modified data\n                     (getCellTempId() in stateCell.cellsModifiedTemp && ' ') || // there is modified data === empty, MUST BE ' ', not ''\n                     cellData // there is no modification\n                  }\n               </div>\n            )}\n\n\n            {btnShown && !cellBtnDisabled(column.key) && pageSheetTypeName === 'page-spreadsheet' && (\n               <div\n                  style={{\n                     cursor: 'pointer', position: 'absolute',\n                     right: 4, top: 5, height: 17, width: 17,\n                     backgroundSize: 17,\n                     backgroundImage: cellDataTypeBtn === 'cell-type-date' ? `url(${imgLink.btnDate})`\n                        : cellDataTypeBtn === 'cell-type-text' ? `url(${imgLink.btnText})`\n                           : null\n                  }}\n                  onMouseDown={(e) => {\n                     e.stopPropagation();\n                     setPanelData(!panelData);\n                  }}\n                  ref={buttonRef}\n               />\n            )}\n\n\n\n            {panelData && (\n               <div style={{\n                  position: 'absolute', background: 'white', top: 30, left: 0, zIndex: 999,\n                  padding: '3px 5px 3px 7px',\n                  boxShadow: 'rgba(0, 0, 0, 0.09) 0px 2px 1px, rgba(0, 0, 0, 0.09) 0px 4px 2px, rgba(0, 0, 0, 0.09) 0px 8px 4px, rgba(0, 0, 0, 0.09) 0px 16px 8px, rgba(0, 0, 0, 0.09) 0px 32px 16px',\n                  minWidth: column.width,\n                  maxHeight: 400, overflowY: 'scroll',\n               }}\n                  ref={panelRef}\n               >\n                  {cellDataTypeBtn === 'cell-type-date' ? (\n                     <PanelCalendar pickDate={(item) => pickDataSelect('date', item)} />\n                  ) : getColumnsValue(rowsAll, column.key, { rowData, drawingTypeTree }, cellStatusFormat).map(item => {\n                     return (\n                        <SelectStyled\n                           key={(column.key === 'Drawing Progress' || column.key === 'Model Progress') ? item.key : item}\n                           onMouseDown={(e) => {\n                              e.stopPropagation();\n                              if (column.key === 'Drawing Progress' || column.key === 'Model Progress') {\n                                 pickDataSelect('div', item);\n                              } else {\n                                 pickDataSelect('text', item);\n                              };\n                           }}\n                        >{item}</SelectStyled>\n                     );\n                  })}\n               </div>\n            )}\n         </div>\n      </>\n   );\n};\n\nexport default Cell;\n\nconst SelectStyled = styled.div`\n   padding: 4px;\n   &:hover {\n      background-color: ${colorType.grey4};\n      cursor: pointer;\n   };\n   transition: 0.2s;\n`;\n\n\nconst BtnProgress = ({ type }) => {\n   const img = type === 'Empty' ? imgLink.btnProgress0 :\n      type === 'Quarter' ? imgLink.btnProgress1 :\n         type === 'Half' ? imgLink.btnProgress2 :\n            type === 'Third Quarter' ? imgLink.btnProgress3 :\n               type === 'Full' ? imgLink.btnProgress4 :\n                  null;\n\n   return (\n      <div style={{ display: 'flex', textAlign: 'center', width: '100%' }}>\n         <div style={{\n            cursor: 'pointer',\n            height: 20,\n            width: 20,\n            backgroundImage: `url(${img})`,\n            backgroundSize: 20,\n            padding: 0\n         }}\n         />\n      </div>\n   );\n};\nconst cellProgressFormat = [\n   <BtnProgress key='0' type='Empty' />,\n   <BtnProgress key='1' type='Quarter' />,\n   <BtnProgress key='2' type='Half' />,\n   <BtnProgress key='3' type='Third Quarter' />,\n   <BtnProgress key='4' type='Full' />,\n];\nconst cellProgressFormatData = [\n   'Empty', 'Quarter', 'Half', 'Third Quarter', 'Full'\n];\n\nconst checkCellDataFormat = (header) => {\n   if (\n      header.includes('(A)') ||\n      header.includes('(T)') ||\n      header === 'Construction Issuance Date' ||\n      header === 'Construction Start'\n   ) return 'cell-type-date';\n\n   else if (\n      header === 'Index' ||\n      header === 'Drawing Number' ||\n      header === 'Drawing Name'\n      // header === 'RFA Ref'\n   ) return 'cell-type-none';\n\n   else return 'cell-type-text';\n};\nconst cellBtnDisabled = (headerId) => {\n   if (headerId === 'Index' || headerId === 'Drawing Number' || headerId === 'Drawing Name') return true;\n};\nconst getColumnsValue = (rows, headerKey, drgTypeCheckData, cellStatusFormat) => {\n   if (headerKey === 'Status') return cellStatusFormat;\n   if (headerKey === 'Use For') return cellUseForFormat;\n   if (headerKey === 'Model Progress' || headerKey === 'Drawing Progress') return cellProgressFormat;\n\n\n   if (headerKey === 'Drg Type') {\n      const { rowData, drawingTypeTree } = drgTypeCheckData;\n      const parentNode = drawingTypeTree.find(x => x.id === rowData._parentRow);\n      const tradeName = getTradeNameFnc(parentNode, drawingTypeTree);\n\n      if (tradeName.includes('(SUBCON)')) {\n         return ['Other'];\n      } else {\n         return cellDrgTypeFormat[tradeName];\n      };\n   };\n\n\n   let valueArr = [];\n   rows.filter(r => r._rowLevel === 1).forEach(row => {\n      valueArr.push(row[headerKey]);\n   });\n   valueArr = [...new Set(valueArr)].filter(e => e);\n   valueArr.sort((a, b) => a > b ? 1 : (b > a ? -1 : 0));\n\n   return valueArr;\n};\n\n\n\n\n\nconst cellUseForFormat = [\n   'Coordination',\n   'Issue for Construction',\n   'Request for Approval',\n   'Request for Confirmation',\n];\n\nconst cellDrgTypeFormat = {\n   'ARCHI': [\n      'Key plan',\n      'Wall setting out',\n      'Column wall setting out',\n      'Tile layout & detail',\n      'Reflected celing plan',\n      'Finishing layout',\n      'Door layout',\n      'Core layout & detail',\n      'Toilet',\n      'Edeck layout & detail',\n      'Staircase layout & detail',\n      'Surface drain',\n      'Lift lobby/ corridor',\n      'Material schedule',\n      'Other'\n   ],\n   'C&S': [\n      'CBP',\n      'Piling layout',\n      'Rebar shop drawing',\n      'Temporary work'\n   ],\n   'M&E': [\n      'CSD',\n      'Penetration drawing',\n      'M&E trade shop drawing'\n   ],\n   'PRECAST': [\n      'Precast layout',\n      'Precast detail',\n      'Precast shop drawing'\n   ],\n};\n\nconst columnsLockedModeller = [\n   'Model Start (T)',\n   'Model Finish (T)',\n   'Drawing Start (T)',\n   'Drawing Finish (T)',\n   'Drg To Consultant (T)',\n   'Consultant Reply (T)',\n   'Get Approval (T)',\n   'Construction Issuance Date',\n   'Construction Start',\n];\n\nexport const columnLocked = (roleTradeCompany, rowData, modeGroup, column, projectIsAppliedRfaView, pageSheetTypeName) => {\n   if (\n      (projectIsAppliedRfaView && pageSheetTypeName === 'page-spreadsheet' && (\n         column === 'RFA Ref' ||\n         column === 'Drg To Consultant (A)' ||\n         column === 'Rev' ||\n         column === 'Consultant Reply (T)' ||\n         column === 'Consultant Reply (A)'\n      )) ||\n      (isColumnWithReplyData(column)) ||\n      (rowData && !rowData._rowLevel) || // lock drawing type ...\n      (modeGroup && modeGroup.length > 0) ||\n      (roleTradeCompany.role === 'Modeller' && columnsLockedModeller.includes(column)) ||\n      (roleTradeCompany.role === 'View-Only User') ||\n      (roleTradeCompany.role === 'Production' && column !== 'Construction Start')\n   ) {\n      return true;\n   } else {\n      return false;\n   };\n};\nexport const rowLocked = (roleTradeCompany, rowData, modeGroup, drawingTypeTree) => {\n   if (!rowData._rowLevel || rowData._rowLevel < 1) return true;\n   if (modeGroup.length > 0) return true;\n   if (roleTradeCompany.role === 'Document Controller') return false;\n\n\n   const drawingTypeTreeClone = drawingTypeTree.map(x => ({ ...x }));\n   const dwgType = drawingTypeTreeClone.find(x => x.id === rowData._parentRow);\n\n   let companyName;\n   if (dwgType.treeLevel >= 1) {\n      companyName = getCompanyNameFnc(dwgType, drawingTypeTreeClone);\n   };\n\n   if (roleTradeCompany.role === 'Production' && companyName === 'Woh Hup Private Ltd') return false;\n\n   let tradeName;\n   if (companyName === 'Woh Hup Private Ltd' && dwgType.treeLevel >= 2) {\n      tradeName = getTradeNameFnc(dwgType, drawingTypeTreeClone);\n      return companyName !== roleTradeCompany.company || tradeName !== roleTradeCompany.trade;\n   } else {\n      return companyName !== roleTradeCompany.company;\n   };\n};\n\n\n\n","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\pageSpreadsheet\\ButtonAdminUploadDataPDD.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\pageSpreadsheet\\FormDrawingTypeOrder.js",["415"],"import { Icon, Input, Modal, Tooltip } from 'antd';\nimport React, { useContext, useState } from 'react';\nimport { DraggableArea } from 'react-draggable-tags';\nimport SortableTree from 'react-sortable-tree';\nimport 'react-sortable-tree/style.css';\nimport styled from 'styled-components';\nimport { colorType } from '../../constants';\nimport { Context as ProjectContext } from '../../contexts/projectContext';\nimport { Context as RowContext } from '../../contexts/rowContext';\nimport { mongoObjectId } from '../../utils';\nimport ButtonColumnTag from '../generalComponents/ButtonColumnTag';\nimport ButtonGroupComp from '../generalComponents/ButtonGroupComp';\n\n\n\nconst FormDrawingTypeOrder = ({ onClickCancelModal, applyFolderOrganize }) => {\n\n   const { state: stateProject } = useContext(ProjectContext);\n   const { state: stateRow } = useContext(RowContext);\n\n   const { rowsAll } = stateRow;\n\n   const { companies, projectName, roleTradeCompany } = stateProject.allDataOneSheet;\n   const { drawingTypeTree, viewTemplateNodeId } = stateRow;\n\n   const [input, setInput] = useState(addProjectHeaderToTree(drawingTypeTree, projectName));\n\n   const [tradeAndCompanyAndType, setTradeAndCompanyAndType] = useState(null);\n   const [modalTitle, setModalTitle] = useState(null);\n   const [itemNode, setItemNode] = useState(null);\n   const [mergeList, setMergeList] = useState([]);\n\n\n   const onClickApplyTradeOrCompany = ({ node, itemsAdded }) => {\n      itemsAdded.forEach(item => {\n         node.children.push({\n            title: item,\n            id: mongoObjectId(),\n            parentId: node.id,\n            treeLevel: node.treeLevel + 1,\n            expanded: true,\n            children: [],\n         });\n      });\n      setInput(addProjectHeaderToTree(flattenAllTreeChildNode1(input[0].children), projectName));\n      setTradeAndCompanyAndType(null);\n   };\n   const addFolderBelow = (node) => {\n      const arrSubcon = ['ARCHI (SUBCON)', 'C&S (SUBCON)', 'M&E (SUBCON)', 'PRECAST (SUBCON)'];\n      if (node.treeLevel === 2 && arrSubcon.indexOf(node.title) !== -1) {\n         let nodeTitle = node.title;\n         const trade = nodeTitle.slice(0, nodeTitle.length - 9);\n         const listCompany = companies.filter(x => x.companyType === 'Sub-con' && x.trade === trade);\n         setTradeAndCompanyAndType({ node, dataTreeArray: listCompany.map(x => x.company) });\n\n      } else {\n         node.children.push({\n            title: 'New Drawing Type',\n            id: mongoObjectId(),\n            parentId: node.id,\n            treeLevel: node.treeLevel + 1,\n            expanded: true,\n            children: []\n         });\n         setInput(addProjectHeaderToTree(flattenAllTreeChildNode1(input[0].children), projectName));\n         setTradeAndCompanyAndType(null);\n      };\n   };\n   const deleteFolder = (node) => {\n      setItemNode(node);\n      setModalTitle('Delete Drawing Type');\n   };\n   const editFolderName = (node) => {\n      setItemNode(node);\n      setModalTitle('Edit Drawing Type Name');\n   };\n   const mergeChildDrawings = (node) => {\n      setItemNode(node);\n      setModalTitle('Merge All Child Drawings');\n   };\n   const confirmAction = (modalTitle, text) => {\n      if (modalTitle === 'Delete Drawing Type') {\n         let idsToDelete = flattenAllTreeChildNode1(itemNode.children).map(x => x.id);\n         idsToDelete.push(itemNode.id);\n\n         let currentNodeFlatten = flattenAllTreeChildNode1(input[0].children);\n         let outputArray = currentNodeFlatten.filter(x => idsToDelete.indexOf(x.id) === -1);\n         setInput(addProjectHeaderToTree(outputArray, projectName));\n\n      } else if (modalTitle === 'Merge All Child Drawings') {\n         let idsToMerge = flattenAllTreeChildNode1(itemNode.children).map(x => x.id);\n         let mergeListUpdate = [...mergeList];\n         idsToMerge.forEach(id => {\n            if (mergeList.indexOf(id) !== -1) {\n               mergeListUpdate = mergeListUpdate.filter(x => x !== id);\n            };\n         });\n         setMergeList([...mergeListUpdate, itemNode.id]);\n\n         let currentNodeFlatten = flattenAllTreeChildNode1(input[0].children);\n         let outputArray = currentNodeFlatten.filter(x => idsToMerge.indexOf(x.id) === -1);\n\n         setInput(addProjectHeaderToTree(outputArray, projectName));\n\n      } else if (modalTitle === 'Edit Drawing Type Name') {\n         itemNode.title = text;\n         setInput(addProjectHeaderToTree(flattenAllTreeChildNode1(input[0].children), projectName));\n      };\n      setTradeAndCompanyAndType(null);\n      setModalTitle(null);\n   };\n\n   const isDocumentController = roleTradeCompany.role === 'Document Controller' && roleTradeCompany.company === 'Woh Hup Private Ltd';\n   const treeFlatten = flattenAllTreeChildNode1(input);\n\n   let eyeShownInit;\n   if (viewTemplateNodeId) {\n      const nodeTreeFound = treeFlatten.find(x => x.id === viewTemplateNodeId);\n      if (nodeTreeFound) {\n         const br = getTreeFlattenOfNodeInArray(treeFlatten, nodeTreeFound);\n         eyeShownInit = br.map(x => x.id);\n      };\n   };\n   const [iconBtnEyeShownArr, setIconBtnEyeShownArr] = useState(eyeShownInit || []);\n   const [nodeIsolated, setNodeIsolated] = useState(viewTemplateNodeId || null);\n   const isolateView = (node) => {\n      setNodeIsolated(node.id);\n      const nodeFound = treeFlatten.find(x => x.id === node.id);\n      const branch = getTreeFlattenOfNodeInArray(treeFlatten, nodeFound);\n      setIconBtnEyeShownArr(branch.map(x => x.id));\n   };\n\n   return (\n      <Container>\n         <PanelStyled>\n            <SortableTreeStyled\n               treeData={input}\n               onChange={treeData => setInput(treeData)}\n               isVirtualized={false}\n               onMoveNode={({ nextParentNode, node }) => {\n                  updateChildrenNode([node], nextParentNode.treeLevel + 1 - node.treeLevel);\n               }}\n\n               canDrag={({ node }) => {\n                  const treeNode = treeFlatten.find(x => x.id === node.id);\n\n                  let companyNode;\n                  if (node.treeLevel >= 1) {\n                     companyNode = getCompanyNameFnc(treeNode, treeFlatten);\n                  };\n\n                  let tradeNode;\n                  if (node.treeLevel >= 2) {\n                     tradeNode = getTradeNameFnc(treeNode, treeFlatten);\n                  };\n\n                  let tradeSubconNode;\n                  if (node.treeLevel >= 3) {\n                     tradeSubconNode = getCompanySubconNameFnc(treeNode, treeFlatten);\n                  };\n\n                  if (\n                     (node.treeLevel >= 3 && isDocumentController) ||\n                     (\n                        node.treeLevel >= 3 &&\n                        roleTradeCompany.role === 'Coordinator' &&\n                        roleTradeCompany.company === 'Woh Hup Private Ltd' &&\n                        companyNode === roleTradeCompany.company &&\n                        tradeNode === roleTradeCompany.trade\n                     ) ||\n                     (\n                        node.treeLevel >= 4 &&\n                        companyNode === 'SUBCON' &&\n                        tradeSubconNode === roleTradeCompany.company\n                     )\n                  ) {\n                     return true;\n                  };\n                  return false;\n               }}\n               canDrop={(props) => {\n                  const { prevParent, nextParent } = props;\n\n                  if (\n                     !prevParent ||\n                     !nextParent ||\n                     (prevParent && nextParent && prevParent.treeLevel !== nextParent.treeLevel)\n                  ) {\n                     return false;\n                  };\n\n                  let companyNodePrevParent, companyNodeNextParent;\n\n                  const nodePrevParentInTree = treeFlatten.find(x => x.id === prevParent.id);\n                  const nodeNextParentInTree = treeFlatten.find(x => x.id === nextParent.id);\n\n                  if (nodePrevParentInTree && nodeNextParentInTree) {\n                     companyNodePrevParent = getCompanyNameFnc(nodePrevParentInTree, treeFlatten);\n                     companyNodeNextParent = getCompanyNameFnc(nodeNextParentInTree, treeFlatten);\n                  };\n\n                  if (\n                     (companyNodePrevParent === 'Woh Hup Private Ltd' && companyNodeNextParent !== 'Woh Hup Private Ltd') ||\n                     (companyNodePrevParent === 'SUBCON' && companyNodeNextParent !== 'SUBCON')\n                  ) {\n                     return false;\n                  } else if (companyNodePrevParent === 'SUBCON' && companyNodePrevParent === companyNodeNextParent) {\n                     const subconTradePrevText = nodePrevParentInTree.title.slice(0, nodePrevParentInTree.title.length - 9);\n                     const subconTradeNextText = nodeNextParentInTree.title.slice(0, nodeNextParentInTree.title.length - 9);\n                     if (subconTradePrevText !== subconTradeNextText) {\n                        return false;\n                     };\n                  };\n                  return true;\n               }}\n               generateNodeProps={(props) => {\n\n                  const { node } = props;\n                  const treeNode = treeFlatten.find(x => x.id === node.id);\n\n                  let companyNode;\n                  if (node.treeLevel >= 1) {\n                     companyNode = getCompanyNameFnc(treeNode, treeFlatten);\n                  };\n\n                  let tradeNode;\n                  if (node.treeLevel >= 2) {\n                     tradeNode = getTradeNameFnc(treeNode, treeFlatten);\n                  };\n                  let tradeSubconNode;\n                  if (node.treeLevel >= 3) {\n                     tradeSubconNode = getCompanySubconNameFnc(treeNode, treeFlatten);\n                  };\n\n                  const isEyeShownColor = iconBtnEyeShownArr.indexOf(node.id) !== -1 ? 'black' : '#DCDCDC';\n                  const isEyeShownType = iconBtnEyeShownArr.indexOf(node.id) !== -1 ? 'eye' : 'eye-invisible';\n\n                  return ({\n                     className: 'xxx-xxx-xxx',\n                     buttons:\n                        (isDocumentController && node.treeLevel === 2) ? [\n                           <IconBtn type='plus' onClick={() => addFolderBelow(node)} />,\n                           companyNode === 'Woh Hup Private Ltd' && node.children.length > 0 && <IconBtn type='shrink' onClick={() => mergeChildDrawings(node)} />,\n                           <IconBtn type={isEyeShownType} onClick={() => isolateView(node)} color={isEyeShownColor} />\n\n                        ] : (isDocumentController && node.treeLevel === 3) ? [\n                           <IconBtn type='plus' onClick={() => addFolderBelow(node)} />,\n                           companyNode === 'Woh Hup Private Ltd' && <IconBtn type='edit' onClick={() => editFolderName(node)} />,\n                           <IconBtn type='delete' onClick={() => deleteFolder(node)} />,\n                           node.children.length > 0 && <IconBtn type='shrink' onClick={() => mergeChildDrawings(node)} />,\n                           <IconBtn type={isEyeShownType} onClick={() => isolateView(node)} color={isEyeShownColor} />\n\n                        ] : (isDocumentController && node.treeLevel >= 4) ? [\n                           <IconBtn type='plus' onClick={() => addFolderBelow(node)} />,\n                           <IconBtn type='edit' onClick={() => editFolderName(node)} />,\n                           <IconBtn type='delete' onClick={() => deleteFolder(node)} />,\n                           node.children.length > 0 && <IconBtn type='shrink' onClick={() => mergeChildDrawings(node)} />,\n                           <IconBtn type={isEyeShownType} onClick={() => isolateView(node)} color={isEyeShownColor} />\n\n\n\n\n                        ] : (\n                           roleTradeCompany.role === 'Coordinator' &&\n                           node.treeLevel === 2 &&\n                           companyNode === 'Woh Hup Private Ltd' &&\n                           companyNode === roleTradeCompany.company &&\n                           tradeNode === roleTradeCompany.trade\n                        ) ? [\n                           <IconBtn type='plus' onClick={() => addFolderBelow(node)} />,\n                           node.children.length > 0 && <IconBtn type='shrink' onClick={() => mergeChildDrawings(node)} />,\n                           <IconBtn type={isEyeShownType} onClick={() => isolateView(node)} color={isEyeShownColor} />\n                        ] : (\n                           roleTradeCompany.role === 'Coordinator' &&\n                           node.treeLevel >= 3 &&\n                           companyNode === 'Woh Hup Private Ltd' &&\n                           companyNode === roleTradeCompany.company &&\n                           tradeNode === roleTradeCompany.trade\n                        ) ? [\n                           <IconBtn type='plus' onClick={() => addFolderBelow(node)} />,\n                           <IconBtn type='edit' onClick={() => editFolderName(node)} />,\n                           <IconBtn type='delete' onClick={() => deleteFolder(node)} />,\n                           node.children.length > 0 && <IconBtn type='shrink' onClick={() => mergeChildDrawings(node)} />,\n                           <IconBtn type={isEyeShownType} onClick={() => isolateView(node)} color={isEyeShownColor} />\n\n\n\n\n                        ] : (\n                           companyNode === 'SUBCON' &&\n                           tradeSubconNode === roleTradeCompany.company &&\n                           node.treeLevel >= 3\n                        ) ? [\n                           <IconBtn type='plus' onClick={() => addFolderBelow(node)} />,\n                           node.treeLevel > 3 && <IconBtn type='edit' onClick={() => editFolderName(node)} />,\n                           node.treeLevel > 3 && <IconBtn type='delete' onClick={() => deleteFolder(node)} />,\n                           node.children.length > 0 && <IconBtn type='shrink' onClick={() => mergeChildDrawings(node)} />,\n                           <IconBtn type={isEyeShownType} onClick={() => isolateView(node)} color={isEyeShownColor} />\n\n\n                        ] : [\n                           <IconBtn type='eye' onClick={() => isolateView(node)} color={isEyeShownColor} />\n                        ]\n                  });\n               }}\n            />\n         </PanelStyled>\n\n         <div style={{ padding: 20, display: 'flex', flexDirection: 'row-reverse' }}>\n            <ButtonGroupComp\n               onClickCancel={onClickCancelModal}\n               onClickApply={() => applyFolderOrganize(input[0].children, mergeList, nodeIsolated)} // remove projectName item before apply...\n            />\n         </div>\n\n\n\n         {modalTitle && (\n            <ModalStyledSetting\n               title={modalTitle}\n               visible={modalTitle !== null ? true : false}\n               footer={null}\n               onCancel={() => setModalTitle(null)}\n               destroyOnClose={true}\n               centered={true}\n               width={window.innerWidth * 0.6}\n            >\n               <ConfirmOrEditNameModal\n                  modalTitle={modalTitle}\n                  confirmAction={confirmAction}\n                  itemNode={itemNode}\n                  input={input}\n                  rowsAll={rowsAll}\n                  onClickCancel={() => setModalTitle(null)}\n               />\n            </ModalStyledSetting>\n         )}\n\n\n         {tradeAndCompanyAndType && (\n            <ModalStyledSetting\n               title={modalTitle}\n               visible={tradeAndCompanyAndType !== null ? true : false}\n               footer={null}\n               onCancel={() => setTradeAndCompanyAndType(null)}\n               destroyOnClose={true}\n               centered={true}\n               width={window.innerWidth * 0.6}\n            >\n               <RearrangeItemsForm\n                  tradeAndCompanyAndType={tradeAndCompanyAndType}\n                  onClickApplyTradeOrCompany={onClickApplyTradeOrCompany}\n                  onClickCancel={() => setTradeAndCompanyAndType(null)}\n               />\n            </ModalStyledSetting>\n         )}\n      </Container>\n   );\n};\n\nexport default FormDrawingTypeOrder;\n\n\nconst SortableTreeStyled = styled(SortableTree)`\n   .xxx-xxx-xxx {\n\n   }\n   .rst__node {\n      height: 45px !important;\n   }\n   .rst__rowContents {\n      min-width: fit-content;\n      background-color: transparent !important;\n   }\n`;\nconst IconStyle = styled(Icon)`\n   font-size: 14px;\n   margin: 2px;\n   padding: 4px;\n   &:hover {\n      background-color: ${colorType.grey0};\n   };\n`;\nconst ModalStyledSetting = styled(Modal)`\n    .ant-modal-content {\n        border-radius: 0;\n    }\n   .ant-modal-close {\n      display: none;\n   }\n   .ant-modal-header {\n      padding: 10px;\n   }\n   .ant-modal-title {\n        padding-left: 10px;\n        font-size: 20px;\n        font-weight: bold;\n   }\n   .ant-modal-body {\n      padding: 0;\n      display: flex;\n      justify-content: center;\n   }\n`;\nconst Container = styled.div`\n   max-height: ${`${window.innerHeight * 0.8}` + 'px'};\n   width: 100%;\n   display: flex;\n   flex-direction: column;\n`;\nconst PanelStyled = styled.div`\n   width: 100%;\n   float: right;\n   overflow-x: hidden;\n   border-bottom: 1px solid ${colorType.grey4};\n`;\n\nconst IconBtn = ({ type, onClick, color }) => {\n   const text = type === 'plus' ? 'Add Sub Drawing Type'\n      : type === 'delete' ? 'Delete Drawing Type'\n         : type === 'edit' ? 'Edit Name'\n            : type === 'eye' ? 'Isolate View'\n               : type === 'eye-invisible' ? 'Isolate View'\n                  : 'Merge All Sub Drawing Type'\n\n   return (\n      <Tooltip title={text}>\n         <IconStyle type={type} onClick={onClick} style={{ color: color || 'black' }} />\n      </Tooltip>\n   );\n};\nconst RearrangeItemsForm = ({ tradeAndCompanyAndType, onClickApplyTradeOrCompany, onClickCancel }) => {\n\n   const { dataTreeArray, node } = tradeAndCompanyAndType;\n   const onClickApply = () => {\n      let itemsAdded = tags.filter(x => x.mode === 'shown').map(x => x.header);\n      onClickApplyTradeOrCompany({ node, itemsAdded });\n   };\n\n   const setMode = (obj) => {\n      tags.forEach(tg => {\n         if (tg.header === obj.header) tg.mode = obj.mode;\n      });\n   };\n\n   const getTags = () => {\n      const arrItem = node.children.map(x => x.title);\n      const items = dataTreeArray.filter(x => arrItem.indexOf(x) === -1);\n\n      let arr = [];\n      items.forEach((header, index) => {\n         arr.push({ id: index, header, mode: 'hidden' });\n      });\n      return arr;\n   };\n\n   const [tags, setTags] = useState(getTags());\n\n   return (\n      <div style={{ width: '100%', height: '100%' }}>\n         <PanelItemsStyled>\n            <div style={{ fontSize: 11, paddingLeft: 20 }}>Click to add items</div>\n            <div style={{ width: '100%', paddingTop: 20 }}>\n               <DraggableArea\n                  isList\n                  tags={tags}\n                  render={({ tag }) => <ButtonColumnTag tag={tag} setMode={setMode} actionType='rearrange-drawing-type-tree-action' />}\n                  onChange={(tags) => setTags(tags)}\n               />\n            </div>\n         </PanelItemsStyled>\n         <div style={{ padding: 20, display: 'flex', flexDirection: 'row-reverse' }}>\n            <ButtonGroupComp\n               onClickCancel={onClickCancel}\n               onClickApply={onClickApply}\n            />\n         </div>\n      </div>\n   );\n};\nconst PanelItemsStyled = styled.div`\n   height: 60vh;\n   width: 100%;\n   overflow-y: scroll;\n   overflow-x: hidden;\n   border-bottom: 1px solid ${colorType.grey4};\n`;\nconst ConfirmOrEditNameModal = ({ modalTitle, confirmAction, itemNode, input, rowsAll, onClickCancel }) => {\n\n   let dwgsToWarn = [];\n   if (modalTitle === 'Delete Drawing Type') {\n      const currentTree = flattenAllTreeChildNode1(input[0].children);\n      const currentTreeNode = currentTree.find(x => x.id === itemNode.id);\n      const nodeArray = getTreeFlattenOfNodeInArray(currentTree, currentTreeNode);\n      nodeArray.forEach(nd => {\n         dwgsToWarn = [...dwgsToWarn, ...rowsAll.filter(x => x._parentRow === nd.id)];\n      });\n   };\n\n\n   const [value, setValue] = useState(null);\n   const onClickApplyModal = () => {\n      if (modalTitle === 'Delete Drawing Type') {\n         confirmAction(modalTitle);\n      } else if (modalTitle === 'Edit Drawing Type Name') {\n         confirmAction(modalTitle, value);\n      } else if (modalTitle === 'Merge All Child Drawings') {\n         confirmAction(modalTitle);\n      };\n   };\n\n   return (\n      <div style={{ padding: 20, width: '100%', maxHeight: window.innerHeight * 0.7 }}>\n         {modalTitle === 'Delete Drawing Type' ? (\n            <div>\n               <div>Are you sure to delete the drawing type <span style={{ fontWeight: 'bold' }}>{itemNode.title}</span>?</div>\n               <div>All the following <span style={{ fontWeight: 'bold' }}>{dwgsToWarn.length}</span> drawings will be deleted accordingly:</div>\n               <br />\n               <div style={{ maxHeight: 300, overflowY: 'scroll' }}>\n                  {dwgsToWarn.map((dr, i) => (\n                     <div key={i}>({i + 1}) - {dr['Drawing Number']} - {dr['Drawing Name']}</div>\n                  ))}\n               </div>\n            </div>\n         ) : modalTitle === 'Merge All Child Drawings' ? (\n            <div>Are you sure to delete all sub folders and retains all drawings</div>\n         ) : (\n            <Input\n               placeholder='Enter new name...'\n               style={{ width: '100%' }}\n               value={value || itemNode.title}\n               onChange={(e) => setValue(e.target.value)}\n            />\n         )}\n\n         <div style={{ padding: 20, display: 'flex', flexDirection: 'row-reverse' }}>\n            <ButtonGroupComp\n               onClickCancel={onClickCancel}\n               onClickApply={onClickApplyModal}\n            />\n         </div>\n      </div>\n   );\n};\n\n\n\n\nexport const getCompanyNameFnc = (dwgType, drawingTypeTreeClone) => {\n   if (dwgType.treeLevel === 1) return dwgType.title;\n   let result;\n   const getCompanyFnc = (dwgType, drawingTypeTreeClone) => {\n      const parent = drawingTypeTreeClone.find(x => x.id === dwgType.parentId);\n      if (parent.treeLevel === 1) {\n         result = parent.title;\n      } else {\n         getCompanyFnc(parent, drawingTypeTreeClone);\n      };\n      return result;\n   };\n   getCompanyFnc(dwgType, drawingTypeTreeClone);\n   return result;\n};\nexport const getCompanySubconNameFnc = (dwgType, drawingTypeTreeClone) => {\n   if (dwgType.treeLevel === 3) return dwgType.title;\n   let result;\n   const getCompanyFnc = (dwgType, drawingTypeTreeClone) => {\n      const parent = drawingTypeTreeClone.find(x => x.id === dwgType.parentId);\n      if (parent.treeLevel === 3) {\n         result = parent.title;\n      } else {\n         getCompanyFnc(parent, drawingTypeTreeClone);\n      };\n      return result;\n   };\n   getCompanyFnc(dwgType, drawingTypeTreeClone);\n   return result;\n};\nexport const getTradeNameFnc = (dwgType, drawingTypeTreeClone) => {\n   const tree = drawingTypeTreeClone.filter(x => x.treeLevel !== 1);\n   if (dwgType.treeLevel === 2) return dwgType.title;\n   let result;\n   const getTradeFnc = (dwgType, dwgTypeTree) => {\n      const parent = dwgTypeTree.find(x => x.id === dwgType.parentId);\n      if (parent.treeLevel === 2) {\n         result = parent.title;\n      } else {\n         getTradeFnc(parent, dwgTypeTree);\n      };\n      return result;\n   };\n   getTradeFnc(dwgType, tree);\n   return result;\n};\n\n\n\nexport const flattenAllTreeChildNode1 = (root) => {\n   let temp = [];\n   let queue = [...root];\n   while (queue.length > 0) {\n      let node = queue.shift();\n      if (node.children) {\n         let childNode = [];\n         node.children.forEach(nd => {\n            childNode.push({ ...nd, parentId: node.id });\n         });\n         queue = [...queue, ...childNode];\n         let nodeObj = { ...node };\n         delete nodeObj.children;\n         temp.push(nodeObj);\n      } else {\n         let nodeObj = { ...node };\n         delete nodeObj.children;\n         temp.push(nodeObj);\n      };\n   };\n   return temp;\n};\nexport const convertFlattenArraytoTree1 = (list) => {\n   let map = {}, node, roots = [], i;\n   for (i = 0; i < list.length; i += 1) {\n      map[list[i].id] = i;\n      if (list[i]._rowLevel !== 1) {\n         list[i].children = list[i].children || [];\n      };\n   };\n\n   let arrayOfTreeLevel = [];\n   list.forEach(tr => {\n      arrayOfTreeLevel.push(tr.treeLevel);\n   });\n   const treeLevelOfTopTree = Math.min(...arrayOfTreeLevel);\n\n   for (i = 0; i < list.length; i++) {\n      node = list[i];\n      if (node.treeLevel > treeLevelOfTopTree) {\n         list[map[node.parentId]].children.push(node);\n      } else {\n         roots.push(node);\n      };\n   };\n   return roots;\n};\nconst addProjectHeaderToTree = (tree, projectName) => {\n   return [{\n      title: projectName,\n      id: 'node-project-level-sheet-id',\n      treeLevel: 0,\n      expanded: true,\n      children: convertFlattenArraytoTree1(tree.map(x => ({ ...x })))\n   }];\n};\nconst updateChildrenNode = (arr, n) => {\n   arr.forEach(i => {\n      i.treeLevel = i.treeLevel + n;\n      if (i.children.length > 0) {\n         updateChildrenNode(i.children, n);\n      };\n   });\n};\nconst updateChildrenNodeTreeLevel = (arr) => {\n   arr.forEach(i => {\n      let childrenArr = i.children;\n      if (childrenArr && childrenArr.length > 0) {\n         childrenArr.forEach(ch => {\n            ch.treeLevel = i.treeLevel + 1;\n         });\n         updateChildrenNodeTreeLevel(childrenArr);\n      };\n   });\n};\nconst getListOfBranchesTree = (inputArr) => {\n   const arr = inputArr.map(x => ({ ...x }));\n   arr.sort((a, b) => { return b.treeLevel - a.treeLevel });\n\n   const parentArrIds = [];\n   arr.forEach(x => {\n      let item = arr.find(fld => fld.id === x.parentId);\n      if (item) {\n         item.children = [...item.children || [], x];\n      } else {\n         parentArrIds.push(x.id);\n      };\n   });\n   return arr.filter(x => parentArrIds.indexOf(x.id) !== -1);\n};\nexport const getTreeFlattenOfNodeInArray = (treeArray, node) => {\n   let obj = { ...node };\n   let arrayTree = treeArray.map(x => ({ ...x })).filter(x => x.treeLevel > obj.treeLevel);\n   arrayTree = [...arrayTree, obj];\n   const treeOfFound = getListOfBranchesTree(arrayTree).find(x => x.id === obj.id);\n   return flattenAllTreeChildNode1([treeOfFound]);\n};\nexport const compareCurrentTreeAndTreeFromDB = (treeFromCurrentInit, treeFromCurrentInput, treeDeletedFromCurrent, treeFromDBInput, treeDeletedFromDB) => {\n\n   let treeFromCurrent = treeFromCurrentInput.map(i => ({ ...i }));\n   let treeFromDB = treeFromDBInput.map(i => ({ ...i }));\n\n   // check if need to save tree or not\n   if (treeFromCurrent.length === treeFromCurrentInit.length) {\n      const stringTreeCurrent = treeFromCurrent.reduce((acc, current) => acc + `${current.id}-${current.parentId}-${current.title}-`, '');\n      const stringTreeInit = treeFromCurrentInit.reduce((acc, current) => acc + `${current.id}-${current.parentId}-${current.title}-`, '');\n      if (stringTreeCurrent === stringTreeInit) {\n         return {\n            needToSaveTree: false,\n            treeDBModifiedToSave: treeFromDB,\n            nodesToAddToDB: [],\n            nodesToRemoveFromDB: [],\n         };\n      };\n   };\n\n   let treeCurrentModified = removeNodesDeletedByOtherUsersFromTreeCurrent(treeFromCurrent, treeDeletedFromDB);\n\n   let { nodesToRemoveFromDB, treeFromDB: treeFromDBModified, nodesIdNoNeedToAddNew } = removeNodesDeletedByCurrentUserFromTreeDB(treeFromDB, treeDeletedFromCurrent, treeCurrentModified);\n\n   let { nodesToAddToDB, treeDBModifiedToSave: treeDBModified } = haveChangedNodesInDBAndNewNodesInCurrentBackToDB(treeFromDBModified, treeCurrentModified, treeFromCurrentInit, nodesIdNoNeedToAddNew);\n\n\n\n   // reorder item follow new order...\n   let treeDBModifiedToSave = [];\n   treeFromCurrentInput.forEach(item => {\n      const found = treeDBModified.find(x => x.id === item.id);\n      if (found) {\n         treeDBModifiedToSave.push(found);\n         treeDBModified = treeDBModified.filter(x => x.id !== found.id);\n      };\n   });\n   treeDBModifiedToSave = [...treeDBModifiedToSave, ...treeDBModified].sort((a, b) => { return a.treeLevel - b.treeLevel });\n\n   return {\n      needToSaveTree: true,\n      treeDBModifiedToSave,\n      nodesToAddToDB,\n      nodesToRemoveFromDB,\n   };\n};\nconst removeNodesDeletedByOtherUsersFromTreeCurrent = (treeCurrent, treeDeletedFromDB) => {\n   let idsToCheckCurrent = [];\n   treeDeletedFromDB.forEach(item => {\n      const found = treeCurrent.find(x => x.id === item.id);\n      if (found) {\n         idsToCheckCurrent = [\n            ...idsToCheckCurrent,\n            ...getTreeFlattenOfNodeInArray(treeCurrent, found).map(x => x.id)\n         ];\n      };\n   });\n   idsToCheckCurrent = [...new Set(idsToCheckCurrent)];\n\n   const nodesArray = treeCurrent.filter(x => idsToCheckCurrent.indexOf(x.id) !== -1);\n\n   const branchTrees = getListOfBranchesTree(nodesArray);\n\n   const newIdObj = {};\n   treeDeletedFromDB.forEach(item => {\n      newIdObj[item.id] = mongoObjectId();\n   });\n\n   branchTrees.forEach(tree => {\n      let flattenArray = flattenAllTreeChildNode1([tree]);\n      let isAbleToDelete = true;\n\n      flattenArray.forEach(item => {\n         if (!treeDeletedFromDB.find(x => x.id === item.id)) isAbleToDelete = false;\n      });\n\n      if (isAbleToDelete) {\n         treeCurrent = treeCurrent.filter(x => !flattenArray.find(item => item.id === x.id));\n      } else {\n         const arrayToModify = treeCurrent.filter(item => flattenArray.find(x => x.id === item.id));\n         treeDeletedFromDB.forEach(item => {\n            const found = arrayToModify.find(x => x.id === item.id);\n            if (found) {\n               found.id = newIdObj[item.id];\n            };\n            const childrenFound = arrayToModify.filter(x => x.parentId === item.id);\n            if (childrenFound.length > 0) {\n               childrenFound.forEach(child => {\n                  child.parentId = newIdObj[item.id];\n               });\n            };\n         });\n      };\n   });\n   return treeCurrent;\n};\nconst removeNodesDeletedByCurrentUserFromTreeDB = (treeFromDB, treeDeletedFromCurrent, treeCurrent) => {\n   let listIdToRemoveFromDB = [];\n   treeDeletedFromCurrent.forEach(item => {\n      const found = treeFromDB.find(x => x.id === item.id);\n      if (found) {\n         listIdToRemoveFromDB = [\n            ...listIdToRemoveFromDB,\n            ...getTreeFlattenOfNodeInArray(treeFromDB, found).map(x => x.id)\n         ];\n      };\n   });\n\n   const nodesToRemoveFromDB = treeFromDB.filter(x => {\n      return listIdToRemoveFromDB.indexOf(x.id) !== -1 && !treeCurrent.find(item => item.id === x.id);\n   });\n   const nodesIdNoNeedToAddNew = listIdToRemoveFromDB.filter(id => treeCurrent.find(item => item.id === id))\n\n   treeFromDB = treeFromDB.filter(x => listIdToRemoveFromDB.indexOf(x.id) === -1);\n\n   return {\n      nodesToRemoveFromDB,\n      nodesIdNoNeedToAddNew,\n      treeFromDB\n   };\n};\nconst haveChangedNodesInDBAndNewNodesInCurrentBackToDB = (treeFromDB, treeCurrent, treeCurrentInit, nodesIdNoNeedToAddNew) => {\n   let nodesToAddToDB = [];\n   treeCurrent.forEach(item => {\n      if (!treeFromDB.find(x => x.id === item.id)) {\n         nodesToAddToDB.push(item);\n      };\n   });\n\n   let dwgTypeExistedInDBButLevelOrParentChangesArr = [];\n   let childrenIdsToWithdrawFromDB = [];\n   treeFromDB.forEach(item => {\n      const found = treeCurrent.find(r => r.id === item.id);\n      const foundInit = treeCurrentInit.find(r => r.id === item.id);\n      if (found && foundInit) {\n         if (found.title !== foundInit.title) item.title = found.title;\n\n         if (found.parentId !== item.parentId && found.parentId !== foundInit.parentId) {\n            dwgTypeExistedInDBButLevelOrParentChangesArr.push({ ...found, title: item.title });\n\n            const arrIdsChildrenInDB = getTreeFlattenOfNodeInArray(treeFromDB, item).filter((x, i) => i !== 0).map(x => x.id);\n\n            childrenIdsToWithdrawFromDB = [...childrenIdsToWithdrawFromDB, ...arrIdsChildrenInDB];\n         };\n      };\n   });\n   childrenIdsToWithdrawFromDB = [...new Set(childrenIdsToWithdrawFromDB)];\n\n   const dwgTypeToWithdrawFromDB = treeFromDB.filter(x => childrenIdsToWithdrawFromDB.indexOf(x.id) !== -1);\n\n   treeFromDB = treeFromDB.filter(item => {\n      return childrenIdsToWithdrawFromDB.indexOf(item.id) === -1 && !dwgTypeExistedInDBButLevelOrParentChangesArr.find(x => x.id === item.id)\n   });\n\n\n   const listBranchesTreeToPushToDB = getListOfBranchesTree([\n      ...nodesToAddToDB,\n      ...dwgTypeExistedInDBButLevelOrParentChangesArr,\n      ...dwgTypeToWithdrawFromDB\n   ]);\n\n   listBranchesTreeToPushToDB.forEach(itemTree => {\n      treeFromDB = [...treeFromDB, ...flattenAllTreeChildNode1([itemTree])];\n   });\n\n   const treeDBModifiedToSave = convertFlattenArraytoTree1(treeFromDB);\n   updateChildrenNodeTreeLevel(treeDBModifiedToSave);\n\n   return {\n      nodesToAddToDB: nodesToAddToDB.filter(item => nodesIdNoNeedToAddNew.indexOf(item.id) === -1),\n      treeDBModifiedToSave: flattenAllTreeChildNode1(treeDBModifiedToSave)\n   };\n};\n\n\n\n\n\n\n\n","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\pageSpreadsheet\\ExcelExport.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\pageSpreadsheet\\PanelSetting.js",["416","417","418","419","420","421","422","423","424","425","426","427","428","429","430","431","432","433","434","435","436"],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\pageSpreadsheet\\PanelFunction.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\pageSpreadsheet\\CellIndex.js",["437","438"],"import React from 'react';\nimport styled from 'styled-components';\nimport { rowLocked } from './Cell';\n\n\nconst CellIndex = (props) => {\n\n   const { rowData, contextInput, rowIndex } = props;\n   const { contextCell, contextRow, contextProject } = contextInput;\n   const { setCellActive } = contextCell;\n   const { stateRow, getSheetRows } = contextRow;\n   const { stateProject } = contextProject;\n\n   const { drawingTypeTree, rowsAll, rowsRfaAll, modeGroup, rowsSelected } = stateRow;\n   const { roleTradeCompany } = stateProject.allDataOneSheet;\n   \n   const isLockedRow = rowLocked(roleTradeCompany, rowData, modeGroup, drawingTypeTree);\n\n   const onClickCellIndex = () => {\n      setCellActive(null);\n      if (isLockedRow) return;\n      const row = rowsAll.find(x => x.id === rowData.id);\n      if (!rowsSelected.find(x => x.id === rowData.id) && rowData._rowLevel === 1) {\n         getSheetRows({\n            ...stateRow,\n            rowsSelected: [...rowsSelected, row],\n            rowsSelectedToMove: []\n         });\n      };\n   };\n\n   return (\n      <Styled onClick={onClickCellIndex}>\n         {rowData._rowLevel === 1 ? rowsAll.indexOf(rowsAll.find(r => r.id === rowData.id)) + 1 : ''}\n         {/* {rowIndex + 1} */}\n      </Styled>\n   );\n};\n\nexport default CellIndex;\n\n\n\nconst Styled = styled.div`\n   color: grey;\n   font-size: 12px;\n   cursor: pointer;\n   width: 100%;\n   height: 100%;\n   padding: 5px;\n   padding-right: 8px;\n   text-align: right\n`;\n\n","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\constants\\index.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\utils\\index.js",["439","440","441","442"],"import moment from 'moment';\nimport { isColumnWithReplyData } from '../layouts/pageSpreadsheet/CellRFA';\n\n\nexport const colorTypeStatus = {\n   yellow: '#fff200',\n   dark: '#1e272e',\n   grey0: '#ecf0f1',\n   grey1: '#bdc3c7',\n   grey2: '#636e72',\n   grey3: '#dfe4ea',\n   grey4: '#f1f2f6',\n   red: '#FA8072',\n   green: '#009432',\n   blue: '#0984e3',\n   orange: '#cc8e35',\n   purple: '#303952',\n   rose: '#e84118',\n   black: 'black',\n   orange2: '#f1c40f',\n   pp: '#9b59b6',\n   pp2: '#10ac84',\n};\n\nexport const randomColorRangeStatus = {\n   'Approved with comments, to Resubmit': colorTypeStatus.purple,\n   'Approved with Comment, no submission Required': colorTypeStatus.blue,\n   'Approved for Construction': colorTypeStatus.green,\n   'Consultant reviewing': colorTypeStatus.grey2,\n   'Not Started': colorTypeStatus.orange,\n   'Revise In-Progress': colorTypeStatus.yellow,\n   '1st cut of drawing in-progress': colorTypeStatus.pp2,\n   '1st cut of model in-progress': colorTypeStatus.pp,\n   'Pending design': colorTypeStatus.orange2,\n   'Reject and resubmit': colorTypeStatus.red,\n   'Consultant review and reply': colorTypeStatus.blue,\n   'Create update drawing': colorTypeStatus.orange,\n   'Create update model': colorTypeStatus.green,\n};\n\n\n\n\n\n\nexport const processRowsFromDB = (sheetHeaders, rows) => {\n   let rowsProcessed = [];\n   const _formalRowData = (row, sheetHeaders) => {\n      let { _id, data, level, parentRow, preRow } = row;\n      let rowFormal = {\n         id: _id,\n         _rowLevel: level,\n         _parentRow: parentRow,\n         _preRow: preRow\n      };\n      if (data instanceof Object) {\n         for (let header of sheetHeaders) {\n            let { key, text } = header;\n            if (header.type === 'checkbox') {\n               if (key && text && data[key] !== undefined) rowFormal[text] = data[key];\n            } else {\n               if (key && text && data[key]) rowFormal[text] = data[key];\n            };\n         };\n      };\n      return rowFormal;\n   };\n   let firstRowIndex = rows.findIndex((row) => row.preRow === null);\n   while (firstRowIndex >= 0) {\n      let preRow = rows.splice(firstRowIndex, 1)[0];\n      while (preRow) {\n         const rowFormal = _formalRowData(preRow, sheetHeaders);\n         rowsProcessed.push(rowFormal);\n         let nextRowIndex = rows.findIndex(row => String(row.preRow) == String(preRow._id));\n         if (nextRowIndex >= 0) {\n            preRow = rows.splice(nextRowIndex, 1)[0];\n         } else {\n            preRow = null;\n         };\n      };\n      firstRowIndex = rows.findIndex((row) => row.preRow === null);\n   };\n   return rowsProcessed;\n};\n\n\n\n\n\nexport const getRandomColor = () => {\n   let letters = '0123456789ABCDEF';\n   let color = '#';\n   for (var i = 0; i < 6; i++) {\n      color += letters[Math.floor(Math.random() * 16)];\n   };\n   return color;\n};\n\n\nexport const randomColorRange = [\n   '#FFDEAD',\n   '#98FB98',\n   '#e74c3c',\n   '#9b59b6',\n   '#1abc9c',\n   '#95a5a6'\n];\n\nexport const genId = (xxx) => {\n   let arr = [];\n   for (let i = 0; i < xxx; i++) {\n      arr.push(mongoObjectId());\n   };\n   return arr;\n};\n\nexport const debounceFnc = (func, delay) => {\n   let timeout;\n   return function (...args) {\n      const context = this;\n      if (timeout) clearTimeout(timeout);\n      timeout = setTimeout(() => {\n         timeout = null;\n         func.apply(context, args);\n      }, delay);\n   };\n};\n\n\n\n\nexport const mongoObjectId = () => {\n   var timestamp = (new Date().getTime() / 1000 | 0).toString(16);\n   return timestamp + 'xxxxxxxxxxxxxxxx'.replace(/[x]/g, function () {\n      return (Math.random() * 16 | 0).toString(16);\n   }).toLowerCase();\n};\n\n\n\nconst getHeaderKey = (headers, headerText) => {\n   if (!headers) return;\n   return headers.find(hd => hd.text === headerText).key;\n};\n\n\n\n\nconst _newParent = (level, iddd) => {\n   return {\n      id: iddd,\n      _rowLevel: level,\n      count: 0,\n      children: []\n   };\n};\nexport const groupByHeaders = (data, headers) => {\n   let res = [];\n   let _map = {};\n   // push all rowIds have children in here\n   let parentIdsArr = [];\n   let _mapParentIds = {};\n   for (let item of data) {\n      let _prevLevelKey = '';\n      let _prevLevelParent = null;\n      for (let i = 0, level = headers.length * (-1) + 1; i < headers.length; i++, level++) {\n         let arrayParent = i == 0 ? res : _prevLevelParent.children;\n\n         let header = headers[i];\n         let value = (item[header] || '').trim();\n\n         let levelKey = `${_prevLevelKey}_._${value}`;\n         let levelParentIndex = _map[levelKey];\n         let levelParent = arrayParent[levelParentIndex];\n\n         if (!levelParent) {\n\n            let iddd = levelKey + value;\n            levelParent = _newParent(level, iddd);\n\n            _map[levelKey] = arrayParent.length;\n            arrayParent.push(levelParent);\n         };\n\n         levelParent.count++;\n\n\n         levelParent.title = `${item[header] || 'No data'}: (${levelParent.count} nos)`;\n\n\n         if (!_mapParentIds[levelParent.id]) { // levelParent id not yet been push to parentIdsArr\n            parentIdsArr.push(levelParent.id);\n            _mapParentIds[levelParent.id] = true;\n         };\n\n         if (i == headers.length - 1) {\n            levelParent.children.push(item);\n         } else {\n            _prevLevelKey = levelKey;\n            _prevLevelParent = levelParent;\n         };\n      };\n   };\n   return {\n      rows: res,\n      expandedRows: parentIdsArr\n   };\n};\n\n\n\nexport const extractCellInfo = (key) => {\n   const idexOfSplitDigit = key.indexOf('~#&&#~');\n   return {\n      rowId: key.slice(0, idexOfSplitDigit),\n      headerName: key.slice(idexOfSplitDigit + 6, key.length)\n   }\n};\nexport const convertCellTempToHistory = (\n   cellsModifiedTemp,\n   stateProject,\n   isOutputDataText\n) => {\n   const { email, publicSettings } = stateProject.allDataOneSheet;\n   const cellsHistoryData = Object.keys(cellsModifiedTemp).map(key => {\n      const { rowId, headerName } = extractCellInfo(key);\n      const dataOut = {\n         rowId,\n         headerKey: isOutputDataText ? headerName : getHeaderKey(publicSettings.headers, headerName),\n         history: {\n            text: cellsModifiedTemp[key],\n            email,\n            createdAt: new Date(),\n         }\n      };\n      return dataOut;\n   });\n   return cellsHistoryData;\n};\n\n\n\nexport const convertHistoryData = (data) => {\n   let arr = [];\n   data.forEach(ch => {\n      const { histories, headerKey, row } = ch;\n      histories.forEach(dt => {\n         arr.push({\n            ...dt,\n            headerKey, row\n         });\n      });\n   });\n   return arr\n};\n\nexport const convertDrawingVersionToHistory = (rowsHistory, stateProject) => {\n\n   const { publicSettings } = stateProject.allDataOneSheet;\n\n   const rowsHistoryOutput = rowsHistory.map(rowsH => {\n      let obj = {};\n\n      Object.keys(rowsH).forEach(key => {\n         if (key === 'rfaNumber' || key.includes('reply-$$$-') || key.includes('submission-$$$-')) {\n            obj[key] = rowsH[key];\n         };\n      });\n\n      publicSettings.headers.forEach(hd => {\n         if (rowsH[hd.text]) obj = { ...obj || {}, [hd.key]: rowsH[hd.text] };\n      });\n\n      return {\n         row: rowsH.id,\n         history: obj,\n      };\n   });\n\n   return rowsHistoryOutput;\n};\nexport const getHeaderWidthForRFAView = (header) => {\n   if (header === 'RFA Ref') return 380;\n   else if (header === 'Drawing Number') return 250;\n   else if (header === 'Drawing Name') return 400;\n   else if (header === 'Due Date') return 80;\n   else if (header === 'Submission Date') return 80;\n   else if (header === 'Rev') return 40;\n   else if (header === 'Requested By') return 100;\n   return getHeaderWidth(header);\n};\nexport const getHeaderWidth = (header) => {\n\n   if (header === 'RFA Ref') return 200;\n   else if (\n      header === 'Block/Zone' ||\n      header === 'Level' || header === 'Unit/CJ' ||\n      header === 'Use For' ||\n      header === 'Coordinator In Charge' || header === 'Modeller' ||\n      header === 'Construction Start'\n   ) return 120;\n   else if (header === 'Model Progress' || header === 'Drawing Progress') return 80;\n   else if (header === 'Drg Type') return 180;\n   else if (header === 'Construction Issuance Date') return 120;\n\n   else if (\n      header === 'Drg To Consultant (A)' ||\n      header === 'Drg To Consultant (T)' ||\n      header === 'Get Approval (A)' ||\n      header === 'Get Approval (T)'\n   ) return 120;\n\n   else if (header.includes('(A)') || header.includes('(T)')) return 90;\n\n   else if (header === 'Rev') return 60;\n   else if (header === 'Status') return 280;\n   else if (header === 'Remark') return 400;\n   else if (header === 'Drawing Number') return 400;\n   else if (header === 'Drawing Name') return 450;\n\n   else if (isColumnWithReplyData(header)) return 180;\n\n   else return 300;\n\n};\n\nexport const addZero = (num) => {\n   if (num < 10) return '0' + num;\n   return num;\n};\n\n\n\n\nexport const getActionName = (type) => {\n   if (type === 'filter-ICON') return 'Create New Filter';\n   if (type === 'reorderColumn-ICON') return 'Columns Layout';\n   if (type === 'group-ICON') return 'Group Data';\n   if (type === 'sort-ICON') return 'Sort Data';\n   if (type === 'swap-ICON-1') return 'Quit Grouping Mode';\n   if (type === 'swap-ICON-2') return 'Clear Filter/Sort/Search';\n   if (type === 'addDrawingType-ICON') return 'Drawing Type Organization';\n   if (type === 'color-cell-history-ICON') return 'Check Data Changed';\n   if (type === 'View Cell History') return 'Cell History';\n   if (type === 'Delete Drawing') return 'Delete Drawing';\n   if (type === 'colorized-ICON') return 'Drawing Colorization';\n   if (type === 'viewTemplate-ICON') return 'View Template';\n\n   if (type === 'form-submit-RFA') return 'Add New RFA';\n   if (type === 'form-resubmit-RFA') return 'Resubmitted RFA';\n   if (type === 'form-reply-RFA') return 'Reply RFA';\n   if (type === 'form-RFA-submit-for-admin') return 'Choose Admin Action';\n\n\n   if (type === 'Date Automation') return 'Date Automation';\n   \n   if (type && (type.includes('Insert Drawings') || type === 'Duplicate Drawings')) return 'Nos Of Drawings';\n\n   else return '';\n};\n\n\n\n\nexport const ExcelDateToJSDate = (serial) => {\n   let utc_days = Math.floor(serial - 25569);\n   let utc_value = utc_days * 86400;\n   let date_info = new Date(utc_value * 1000);\n\n   let fractional_day = serial - Math.floor(serial) + 0.0000001;\n\n   let total_seconds = Math.floor(86400 * fractional_day);\n\n   let seconds = total_seconds % 60;\n\n   total_seconds -= seconds;\n\n   let hours = Math.floor(total_seconds / (60 * 60));\n   let minutes = Math.floor(total_seconds / 60) % 60;\n\n   return new Date(date_info.getFullYear(), date_info.getMonth(), date_info.getDate(), hours, minutes, seconds);\n};\n\n\n\nexport const sortRfaDrawingNumber = (a, b) => {\n\n   if (a['RFA Ref'] > b['RFA Ref']) return -1;\n   if (a['RFA Ref'] < b['RFA Ref']) return 1;\n\n   if (a['Drawing Number'] > b['Drawing Number']) return 1;\n   if (a['Drawing Number'] < b['Drawing Number']) return -1;\n\n};\n\n\nexport const compareDates = (dateInput1, dateInput2) => {\n   let date1 = dateInput1;\n   let date2 = dateInput2;\n   if (dateInput1 && dateInput1.length === 8 && dateInput1.includes('/')) date1 = moment(dateInput1, 'DD/MM/YY').format('YYYY-MM-DD');\n   if (dateInput2 && dateInput2.length === 8 && dateInput2.includes('/')) date2 = moment(dateInput2, 'DD/MM/YY').format('YYYY-MM-DD');\n\n   if (date1 && date2) {\n      return moment(date1).diff(moment(date2), 'days');\n   } else if (date1 && !date2) {\n      return moment(date1).diff(moment(), 'days');\n   };\n};\n\n\n\nexport const validateEmailInput = (email) => {\n   const re = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n   return re.test(String(email).toLowerCase());\n};\n\n\n\n\nexport const getUserRoleTradeCompany = (role, company) => {\n\n   const roleArray = [\n      'Document Controller',\n\n      'WH Archi Coordinator',\n      'WH C&S Design Engineer',\n      'WH M&E Coordinator',\n      'WH PRECAST Coordinator',\n\n      'WH Archi Modeller',\n      'WH C&S Modeller',\n      'WH M&E Modeller',\n      'WH PRECAST Modeller',\n\n      'Production',\n\n      'WH Archi Manager',\n      'WH C&S Manager',\n      'WH M&E Manager',\n      'WH PRECAST Manager',\n\n      'Planning Engineer',\n      'QS',\n      'Project Manager',\n      'Corporate Manager',\n      'QAQC',\n      'Safety',\n      'Client',\n\n      'Sub-Con',\n      'Consultant',\n      'RE/RTO'\n   ];\n\n\n   if (\n      !role || !company || roleArray.indexOf(role) === -1 ||\n      role === 'WH Archi Manager' || role === 'WH C&S Manager' || role === 'WH M&E Manager' || role === 'WH PRECAST Manager' ||\n      role === 'Planning Engineer' || role === 'QS' || role === 'Project Manager' || role === 'Corporate Manager' ||\n      role === 'Client' || role === 'QAQC' || role === 'Safety' || role === 'RE/RTO'\n   ) {\n      return { role: 'View-Only User', trade: null, company: null };\n   };\n\n   if (role === 'WH Archi Coordinator') return { role: 'Coordinator', trade: 'ARCHI', company };\n   if (role === 'WH C&S Design Engineer') return { role: 'Coordinator', trade: 'C&S', company };\n   if (role === 'WH M&E Coordinator') return { role: 'Coordinator', trade: 'M&E', company };\n   if (role === 'WH PRECAST Coordinator') return { role: 'Coordinator', trade: 'PRECAST', company };\n\n   if (role === 'WH Archi Modeller') return { role: 'Modeller', trade: 'ARCHI', company };\n   if (role === 'WH C&S Modeller') return { role: 'Modeller', trade: 'C&S', company };\n   if (role === 'WH M&E Modeller') return { role: 'Modeller', trade: 'M&E', company };\n   if (role === 'WH PRECAST Modeller') return { role: 'Modeller', trade: 'PRECAST', company };\n\n   return { role, trade: null, company };\n};","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\DashboardLayout\\componentsDashboard\\CardPanel.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\DashboardLayout\\componentsDashboard\\ChartBarRecordPanel.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\DashboardLayout\\componentsDashboard\\PanelSettingDashboard.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\contexts\\createDataContext.js",["443"],"import React, { createContext, useReducer } from 'react';\n\n\nexport default (reducer, actions, initValue) => {\n\n    const Context = createContext();\n\n    const Provider = ({ children }) => {\n        const [state, dispatch] = useReducer(reducer, initValue);\n\n        const boundActions = {};\n        for (let key in actions) {\n            boundActions[key] = actions[key](dispatch);\n        };\n\n        return (\n            <Context.Provider value={{ state, ...boundActions }}>\n                {children}\n            </Context.Provider>\n        );\n    };\n    return { Context, Provider };\n};\n\n\n","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\generalComponents\\ButtonGroupComp.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\generalComponents\\PanelCalendar.js",["444","445"],"import { Calendar, Radio } from 'antd';\nimport React from 'react';\n\n\nconst { Group, Button } = Radio;\n\n\nconst PanelCalendar = ({ pickDate }) => {\n\n    return (\n        <div style={{ width: 300 }}>\n            <Calendar\n                fullscreen={false}\n                onSelect={pickDate}\n            />\n        </div>\n    );\n};\n\nexport default PanelCalendar;\n","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\generalComponents\\ButtonColumnTag.js",["446"],"\nimport React, { useEffect, useState } from 'react';\nimport { colorType } from '../../constants';\n\n\nconst ButtonColumnTag = ({ tag, setMode, actionType }) => {\n\n   const styleShown = { background: '#f1a99f', color: 'black' };\n   const styleFrozen = { background: colorType.primary, color: 'white' };\n   const styleHidden = { background: colorType.grey4, color: 'grey' };\n\n   const [btnStyle, setBtnStyle] = useState(\n      tag.mode === 'hidden' ? styleHidden :\n         tag.mode === 'frozen' ? styleFrozen :\n            styleShown\n   );\n\n   const [type, setType] = useState(tag.mode);\n\n   useEffect(() => {\n      if (actionType === 'reset-mode-action' || actionType === 'admin-pick-consultant-to-reply') {\n         setType(tag.mode);\n         setBtnStyle(\n            tag.mode === 'hidden' ? styleHidden :\n               tag.mode === 'frozen' ? styleFrozen :\n                  styleShown\n         );\n      };\n   }, [tag.mode]);\n\n\n   const onClick = () => {\n      if (actionType === 'reorder-columns-action') {\n         if (type === 'shown') {\n            setBtnStyle(styleFrozen);\n            setMode({ header: tag.header, id: tag.id, mode: 'frozen' });\n            setType('frozen');\n         } else if (type === 'frozen') {\n            setBtnStyle(styleHidden);\n            setMode({ header: tag.header, id: tag.id, mode: 'hidden' });\n            setType('hidden');\n         } else if (type === 'hidden') {\n            setBtnStyle(styleShown);\n            setMode({ header: tag.header, id: tag.id, mode: 'shown' });\n            setType('shown');\n         };\n      } else if (actionType === 'rearrange-drawing-type-tree-action') {\n         if (type === 'shown') {\n            setBtnStyle(styleHidden);\n            setMode({ header: tag.header, id: tag.id, mode: 'hidden' });\n            setType('hidden');\n         } else if (type === 'hidden') {\n            setBtnStyle(styleShown);\n            setMode({ header: tag.header, id: tag.id, mode: 'shown' });\n            setType('shown');\n         };\n      } else if (actionType === 'reset-mode-action' || actionType === 'admin-pick-consultant-to-reply') {\n         setMode({ id: tag.id });\n      };\n   };\n\n   return (\n      <div\n         style={{\n            ...btnStyle,\n            padding: 9,\n            cursor: (actionType === 'reset-mode-action' || actionType === 'admin-pick-consultant-to-reply') && 'pointer',\n            textAlign: 'center',\n            fontWeight: 'bold',\n            width: '70%',\n            margin: 'auto',\n            marginBottom: 10\n         }}\n         onClick={onClick}\n      >\n         {tag.header}\n      </div>\n   );\n};\n\nexport default ButtonColumnTag;","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\pageSpreadsheet\\TableDrawingDetail.js",["447"],"\nimport { Icon, Timeline } from 'antd';\nimport Axios from 'axios';\nimport React, { useContext, useEffect, useState } from 'react';\nimport BaseTable, { AutoResizer } from 'react-base-table';\nimport styled from 'styled-components';\nimport { colorType, SERVER_URL } from '../../constants';\nimport { Context as ProjectContext } from '../../contexts/projectContext';\nimport { Context as RowContext } from '../../contexts/rowContext';\nimport { mongoObjectId } from '../../utils';\nimport { headersConsultantWithNumber } from '../generalComponents/OverallComponentDMS';\nimport CellRFA, { getConsultantReplyData, isColumnWithReplyData } from './CellRFA';\n\n\n\n\nconst Table = (props) => {\n   return (\n      <AutoResizer>\n         {({ width, height }) => {\n            return (\n               <BaseTable\n                  {...props}\n                  width={width}\n                  height={height}\n               />\n            );\n         }}\n      </AutoResizer>\n   );\n};\n\n\n\nconst TableDrawingDetail = (props) => {\n\n   const { rowData } = props;\n   const { id: rowId } = rowData;\n   const { state: stateProject } = useContext(ProjectContext);\n   const { state: stateRow } = useContext(RowContext);\n   const { headers } = stateProject.allDataOneSheet.publicSettings;\n   const { _id: projectId, token, companies, projectIsAppliedRfaView } = stateProject.allDataOneSheet;\n\n   const { rowsVersionsToSave } = stateRow;\n\n\n   const [rowsHistoryDatabase, setRowsHistoryDatabase] = useState(null);\n   const [rowsHistoryPrevious, setRowsHistoryPrevious] = useState([]);\n   const [rowCurrent, setRowCurrent] = useState(null);\n\n\n   useEffect(() => {\n      const fetchRowsHistory = async () => {\n         try {\n            const res = await Axios.get(`${SERVER_URL}/row/history/one-row/`, { params: { token, projectId, rowId } });\n\n            let rowsHistory = [];\n            res.data.forEach((r, i) => {\n               const { history } = r;\n               if (history) {\n                  let data = { id: mongoObjectId() };\n                  Object.keys(history).forEach(key => {\n                     if (key !== 'rfaNumber' && !key.includes('reply-$$$-') && !key.includes('submission-$$$-')) {\n                        const hdText = headers.find(hd => hd.key === key).text;\n                        data[hdText] = history[key];\n                     } else {\n                        data[key] = history[key];\n                     };\n                  });\n                  rowsHistory.push(data);\n               };\n            });\n            setRowsHistoryDatabase(rowsHistory);\n\n\n            let rowsHistoryPrevious = [];\n            if (rowsVersionsToSave) {\n               rowsHistoryPrevious = rowsVersionsToSave.filter(r => r.id === rowId);\n               rowsHistoryPrevious.forEach((r, i) => {\n                  r.id = mongoObjectId();\n               });\n               setRowsHistoryPrevious(rowsHistoryPrevious);\n            };\n\n            setRowCurrent({\n               ...rowData,\n               key: rowsHistory.length + rowsHistoryPrevious.length + 1\n            });\n\n\n         } catch (err) {\n            console.log(err);\n         };\n      };\n      fetchRowsHistory();\n   }, []);\n\n   let data, input, columnsData;\n   if (rowsHistoryDatabase && rowCurrent) {\n      input = [\n         ...rowsHistoryDatabase,\n         ...rowsHistoryPrevious,\n         rowCurrent\n      ];\n      data = convertToVerticalTable(input, headers, companies, projectIsAppliedRfaView);\n      columnsData = ['Info', ...input.map((hd, i) => `Version ${i}`)];\n   };\n\n\n   const panelHeight = window.innerHeight * 0.8;\n   const columnWidth = 210;\n   const columnHeaderWidth = 210;\n\n   return (\n      <div style={{\n         height: panelHeight,\n         background: 'white',\n         padding: 10,\n         display: 'flex',\n         justifyContent: 'center',\n         // flexDirection: 'column',\n      }}>\n         {rowsHistoryDatabase && rowCurrent && (\n            <>\n               <div style={{\n                  width: columnHeaderWidth + columnWidth * input.length + 17,\n                  height: panelHeight - 100,\n                  margin: '0 auto',\n                  textAlign: 'center'\n               }}>\n                  <div style={{ fontSize: 20, fontWeight: 'bold' }}>DRAWING HISTORY</div>\n                  <TableStyled\n                     fixed\n                     columns={generateColumns(columnsData, { columnWidth, columnHeaderWidth })}\n                     data={data}\n                     rowHeight={28}\n                  />\n               </div>\n\n               <div style={{ display: 'flex', padding: '15px 30px' }}>\n                  {input.map((item, i) => (\n                     <TimeLineDrawing\n                        key={i}\n                        data={item}\n                        version={i + 1}\n                     />\n                  ))}\n               </div>\n            </>\n         )}\n      </div>\n   );\n};\n\nexport default TableDrawingDetail;\n\n\n\n\nconst generateColumns = (headers, { columnWidth, columnHeaderWidth }) => headers.map((column, columnIndex) => ({\n   key: column,\n   dataKey: column,\n   title: column === 'Info' ? '' : column,\n   resizable: true,\n   width: columnIndex === 0 ? columnHeaderWidth : columnWidth,\n   className: columnIndex === 0 ? 'column-header' : 'column-data',\n   cellRenderer: (props) => {\n\n      const { cellData, rowData, column } = props;\n      const infoCol = rowData['Info'];\n\n      if ((headersConsultantWithNumber.indexOf(infoCol) !== -1 || infoCol === 'RFA Ref') && column.key !== 'Info') {\n         return (\n            <CellRFA {...props} />\n         );\n      } else {\n         return (\n            <div style={{\n               textOverflow: 'ellipsis',\n               overflow: 'hidden',\n               whiteSpace: 'nowrap',\n               padding: 10\n            }}>{cellData}</div>\n         );\n      };\n   }\n}));\n\n\n\nconst convertToVerticalTable = (data, headers, companies, projectIsAppliedRfaView) => {\n\n   let dwgArray = [];\n\n   const additionalHeadersForProjectWithRFA = projectIsAppliedRfaView\n      ? headersConsultantWithNumber.map(text => ({ key: mongoObjectId(), text }))\n      : [];\n\n\n   const headersArr = [\n      ...headers.filter(hd => hd.text !== 'Drawing'),\n      ...additionalHeadersForProjectWithRFA\n   ];\n\n\n   headersArr.filter(hd => hd.text !== 'Drawing').forEach(hd => {\n      let obj = {\n         id: mongoObjectId(),\n         Info: hd.text\n      };\n      data.forEach((row, i) => {\n         if (isColumnWithReplyData(hd.text)) {\n            const rfaNumber = row.rfaNumber;\n            const rfaRef = row['RFA Ref'];\n            if (rfaNumber && rfaRef) {\n               const { replyStatus, replyCompany, replyDate } = getConsultantReplyData(row, hd.text, companies);\n               if (replyStatus) {\n                  obj[i] = { ...obj[i] || {}, [`reply-$$$-status-${replyCompany}`]: replyStatus };\n                  obj[i] = { ...obj[i] || {}, [`reply-$$$-date-${replyCompany}`]: replyDate };\n                  obj[i] = { ...obj[i] || {}, [`reply-$$$-drawing-${replyCompany}`]: row[`reply-$$$-drawing-${replyCompany}`] };\n                  obj[i] = { ...obj[i] || {}, [`reply-$$$-comment-${replyCompany}`]: row[`reply-$$$-comment-${replyCompany}`] };\n                  obj[i] = { ...obj[i] || {}, [`reply-$$$-user-${replyCompany}`]: row[`reply-$$$-user-${replyCompany}`] };\n               };\n            };\n         } else if (hd.text === 'RFA Ref') {\n            const rfaNumber = row.rfaNumber;\n            const rfaRef = row['RFA Ref'];\n            if (rfaNumber && rfaRef) {\n               for (const key in row) {\n                  if (key.includes('submission-$$$-') && row[key]) {\n                     obj[i] = { ...obj[i] || {}, [key]: row[key] };\n                  };\n               };\n\n               if (rfaRef) {\n                  obj[i] = { ...obj[i] || {}, rfaRef };\n               };\n            };\n         } else {\n            obj[`Version ${i}`] = row[hd.text] || '';\n         };\n      });\n\n      dwgArray.push(obj);\n   });\n   return dwgArray;\n};\n\n\n\n\nconst TableStyled = styled(Table)`\n\n   color: black;\n   \n   .BaseTable__row-cell-text {\n      /* color: black; */\n   }\n   .column-header {\n      background: ${colorType.primary};\n      color: white;\n      font-weight: bold;\n   }\n   \n\n   .BaseTable__table .BaseTable__body {\n      /* -webkit-touch-callout: none;\n      -webkit-user-select: none;\n      -khtml-user-select: none;\n      -moz-user-select: none;\n      -ms-user-select: none;\n      user-select: none; */\n   }\n   .BaseTable__header-cell {\n      padding: 10px;\n      border-right: 1px solid #DCDCDC;\n      background: ${colorType.primary};\n      color: white\n   }\n\n   .BaseTable__row-cell {\n      border-right: 1px solid #DCDCDC;\n      overflow: visible !important;\n      padding: 0;\n   };\n\n   .BaseTable__table-main .BaseTable__row-cell:last-child {\n      padding-right: 0;\n   };\n   \n`;\n\n\n\nconst TimeLineDrawing = ({ data, version }) => {\n\n\n   const { state: stateProject } = useContext(ProjectContext);\n   const { headers } = stateProject.allDataOneSheet.publicSettings;\n\n   const headersForTimeline = headers.filter(hd => {\n      return (hd.text.includes('(A)') ||\n         hd.text === 'Construction Issuance Date' ||\n         hd.text === 'Construction Start') &&\n         hd.text !== 'Model Start (A)' && hd.text !== 'Model Finish (A)';\n   });\n\n   return (\n      <div style={{ width: 350 }}>\n         <div style={{ marginBottom: 15, fontSize: 17, fontWeight: 'bold' }}>Version {version}</div>\n         <Timeline>\n            {headersForTimeline.map((hd, i) => {\n               return (\n                  <Timeline.Item\n                     dot={<Icon type='clock-circle-o' style={{ fontSize: '16px' }} />}\n                     color={colorType.primary}\n                     key={i}\n                  >\n                     ({data[hd.text] || 'n/a'}) - (<span style={{ fontWeight: 'bold' }}>{hd.text}</span>)\n                  </Timeline.Item>\n               );\n            })}\n         </Timeline>\n      </div>\n   );\n};\n\n","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\pageSpreadsheet\\FormDateAutomation.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\pageSpreadsheet\\TableCellHistory.js",["448","449"],"import { List } from 'antd';\nimport Axios from 'axios';\nimport moment from 'moment';\nimport React, { useContext, useEffect, useState } from 'react';\nimport { SERVER_URL } from '../../constants';\nimport { Context as ProjectContext } from '../../contexts/projectContext';\nimport { Context as RowContext } from '../../contexts/rowContext';\nimport { getConsultantReplyData, isColumnWithReplyData } from './CellRFA';\n\n\n\nconst TableCellHistory = (props) => {\n\n   const { rowData, column } = props;\n   const { id: rowId } = rowData;\n\n   const { state: stateProject } = useContext(ProjectContext);\n   const { state: stateRow } = useContext(RowContext);\n\n   const [history, setHistory] = useState([]);\n\n   const { projectId, token, companies, publicSettings } = stateProject.allDataOneSheet;\n   const { headers } = publicSettings;\n\n   let headerKey;\n   const headerFound = headers.find(hd => hd.text === column.key);\n\n   if (headerFound) {\n      headerKey = headerFound.key;\n   } else if (isColumnWithReplyData(column.key)) {\n      const { replyCompany } = getConsultantReplyData(rowData, column.key, companies);\n      headerKey = replyCompany;\n   };\n\n\n   useEffect(() => {\n      const fetchCellHistory = async () => {\n         try {\n            const res = await Axios.get(`${SERVER_URL}/cell/history/one-cell/`, { params: { token, projectId, rowId, headerKey } });\n            setHistory(res.data.histories.reverse());\n         } catch (err) {\n            console.log(err);\n         };\n      };\n      fetchCellHistory();\n   }, [])\n\n\n   return (\n      <div style={{ width: '100%', padding: 15, maxHeight: window.innerHeight * 0.7, overflowY: 'scroll' }}>\n         <List\n            size='small'\n            header={null}\n            footer={null}\n            bordered\n            dataSource={history}\n            renderItem={item => (\n               <List.Item>\n                  <div>\n                     <div>{`${item.email}`}</div>\n                     <div style={{ fontSize: 12, color: 'grey' }}>{moment(item.createdAt).format('DD/MM/YY - HH:mm')}</div>\n                     <div style={{ fontWeight: 'bold' }}>{item.text}</div>\n                  </div>\n               </List.Item>\n            )}\n         />\n      </div>\n   );\n};\n\nexport default TableCellHistory;\n","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\pageSpreadsheet\\ColorizedForm.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\pageSpreadsheet\\FormCellColorizedCheck.js",["450","451"],"import Axios from 'axios';\nimport moment from 'moment';\nimport React, { useContext, useEffect, useState } from 'react';\nimport { SERVER_URL } from '../../constants';\nimport { Context as ProjectContext } from '../../contexts/projectContext';\nimport { convertHistoryData } from '../../utils';\nimport ButtonStyle from '../generalComponents/ButtonStyle';\nimport PanelCalendarDuration from '../generalComponents/PanelCalendarDuration';\n\n\n\n\nconst FormCellColorizedCheck = ({ setCellHistoryArr }) => {\n\n   const { state: stateProject } = useContext(ProjectContext);\n\n   const { projectId, token } = stateProject.allDataOneSheet;\n   const headersArr = stateProject.allDataOneSheet.publicSettings.headers;\n\n   useEffect(() => {\n      const fetchProjectHistory = async () => {\n         try {\n            const res = await Axios.get(`${SERVER_URL}/cell/history/`, { params: { token, projectId } });\n            setHistoryData(res.data);\n         } catch (err) {\n            console.log(err);\n         };\n      };\n      fetchProjectHistory();\n   }, []);\n\n   const [historyData, setHistoryData] = useState([]);\n\n   const [dateRange, setDateRange] = useState(null);\n   const onClickCheck = ({ start, end }) => {\n      let filterCells = convertHistoryData(historyData).filter(cell => {\n         let createdAt = moment(cell.createdAt).toDate();\n         return createdAt >= start && createdAt <= end;\n      });\n      const cellArr = filterCells.map(ch => {\n         const { row: rowId, headerKey } = ch;\n         let headerText = headersArr.find(hd => hd.key === headerKey).text;\n         return {\n            rowId,\n            header: headerText\n         }\n      });\n      let unique = cellArr.reduce((res, itm) => {\n         let result = res.find(item => JSON.stringify(item) == JSON.stringify(itm));\n         if (!result) return res.concat(itm);\n         return res;\n      }, []);\n\n      setCellHistoryArr(unique);\n   };\n   const checkCellWithinDates = (nos) => {\n      const addDays = (date, days) => {\n         let result = new Date(date);\n         result.setDate(result.getDate() + days);\n         return result;\n      };\n      let today = new Date();\n      let dateBefore = addDays(today, nos);\n      return {\n         start: dateBefore,\n         end: today\n      };\n   };\n\n\n   return (\n      <div style={{\n         padding: 15\n      }}>\n         <div style={{ display: 'flex', marginBottom: 10 }}>\n            <PanelCalendarDuration pickRangeDate={(e) => setDateRange(e)} />\n            <ButtonStyle\n               onClick={() => dateRange && onClickCheck({ start: dateRange[0], end: dateRange[1] })}\n               marginLeft={5}\n               name='Check Data Changed'\n            />\n         </div>\n         <div style={{ display: 'flex', marginBottom: 20, width: '100%' }}>\n            <ButtonStyle marginRight={5} name='Today'\n               onClick={() => onClickCheck(checkCellWithinDates(-1))}\n            />\n            <ButtonStyle marginRight={5} name='Last 3 Days'\n               onClick={() => onClickCheck(checkCellWithinDates(-3))}\n            />\n            <ButtonStyle marginRight={5} name='Last 7 Days'\n               onClick={() => onClickCheck(checkCellWithinDates(-7))}\n            />\n            <ButtonStyle marginRight={5} name='Last 14 Days'\n               onClick={() => onClickCheck(checkCellWithinDates(-14))}\n            />\n            <ButtonStyle marginRight={5} name='This Month'\n               onClick={() => onClickCheck(checkCellWithinDates(-31))}\n            />\n         </div>\n      </div>\n   );\n};\n\nexport default FormCellColorizedCheck;\n\n","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\pageSpreadsheet\\TableActivityHistory.js",["452","453"],"import { message, Modal } from 'antd';\nimport Axios from 'axios';\nimport moment from 'moment';\nimport React, { useContext, useEffect, useState } from 'react';\nimport BaseTable, { AutoResizer } from 'react-base-table';\nimport styled from 'styled-components';\nimport { colorType, SERVER_URL } from '../../constants';\nimport { Context as ProjectContext } from '../../contexts/projectContext';\nimport { Context as RowContext } from '../../contexts/rowContext';\nimport { convertHistoryData, mongoObjectId } from '../../utils';\nimport ButtonStyle from '../generalComponents/ButtonStyle';\nimport FormFilterActivityHistory from '../generalComponents/FormFilterActivityHistory';\nimport IconTable from '../generalComponents/IconTable';\nimport PanelCalendarDuration from '../generalComponents/PanelCalendarDuration';\n\n\n\nconst Table = (props) => {\n   return (\n      <AutoResizer>\n         {({ width, height }) => {\n            return (\n               <BaseTable\n                  {...props}\n                  width={width}\n                  height={height}\n               />\n            );\n         }}\n      </AutoResizer>\n   );\n};\n\nconst panelWidth = window.innerWidth * 0.8;\nconst panelHeight = window.innerHeight * 0.8;\n\n\nconst TableActivityHistory = (props) => {\n\n   const { state: stateProject } = useContext(ProjectContext);\n   const { state: stateRow } = useContext(RowContext);\n   const { allDataOneSheet: { publicSettings: { activityRecorded } } } = stateProject;\n\n\n\n   const { projectId, token } = stateProject.allDataOneSheet;\n   const { headers } = stateProject.allDataOneSheet.publicSettings;\n\n   const [historyAll, setHistoryAll] = useState(null);\n   const [historyAllInit, setHistoryAllInit] = useState(null);\n\n   const [loading, setLoading] = useState(false);\n\n\n   const headersShown = [\n      'Drawing Number',\n      'Drawing Name',\n      'Column',\n      'Value',\n      'User',\n      'Created At',\n      'Action'\n   ];\n\n   const revKey = headers.find(hd => hd.text === 'Rev').key;\n   const statusKey = headers.find(hd => hd.text === 'Status').key;\n   const dwgNumber = headers.find(hd => hd.text === 'Drawing Number').key;\n   const dwgName = headers.find(hd => hd.text === 'Drawing Name').key;\n\n   useEffect(() => {\n      const fetchRowsAndCellHistory = async () => {\n         setLoading(true);\n         try {\n            const resRows = await Axios.get(`${SERVER_URL}/row/history/`, { params: { token, projectId } });\n            const resCells = await Axios.get(`${SERVER_URL}/cell/history/`, { params: { token, projectId } });\n\n            let rowsOutput = [];\n            resRows.data.forEach(row => {\n               const { history } = row;\n               if (history) rowsOutput.push({\n                  'Drawing Number': history[dwgNumber],\n                  'Drawing Name': history[dwgName],\n                  'Column': 'Rev & Status',\n                  'Value': `${history[revKey] || ''} - ${history[statusKey] || ''}`,\n                  'User': row.userId || 'n/a',\n                  // 'Created At': moment(row.createdAt).format('DD/MM/YY - HH:mm'),\n                  'Created At': row.createdAt,\n                  'Action': 'Save Drawing Version',\n                  id: mongoObjectId()\n               });\n            });\n\n            let cellsOutput = [];\n            convertHistoryData(resCells.data).forEach(cell => {\n               const row = stateRow.rowsAll.find(r => r.id === cell.row);\n               const headerFound = headers.find(hd => hd.key === cell.headerKey);\n               if (row && headerFound) cellsOutput.push({\n                  'Drawing Number': row['Drawing Number'],\n                  'Drawing Name': row['Drawing Name'],\n                  'Column': headerFound.text,\n                  'Value': cell.text || '',\n                  'User': cell.email || 'n/a',\n                  // 'Created At': moment(cell.createdAt).format('DD/MM/YY - HH:mm'),\n                  'Created At': cell.createdAt,\n                  'Action': 'Edit Cell',\n                  id: mongoObjectId()\n               });\n            });\n\n            const activityRecordedData = activityRecorded.map(r => {\n               return {\n                  'Drawing Number': r[dwgNumber],\n                  'Drawing Name': r[dwgName],\n                  'Column': undefined,\n                  'Value': undefined,\n                  'User': r.email || 'n/a',\n                  // 'Created At': moment(r.createdAt).format('DD/MM/YY - HH:mm'),\n                  'Created At': r.createdAt,\n                  'Action': r.action,\n                  id: mongoObjectId()\n               };\n            });\n            let outputArr = [...rowsOutput, ...cellsOutput, ...activityRecordedData];\n\n            setHistoryAll(sortDataBeforePrint(outputArr));\n            setHistoryAllInit(sortDataBeforePrint(outputArr));\n\n            setLoading(false);\n         } catch (err) {\n            setLoading(false);\n            message.warn('Network Error!');\n            console.log(err);\n         };\n      };\n      fetchRowsAndCellHistory();\n   }, []);\n\n   const [modalFilter, setModalFilter] = useState(false);\n\n   const applyFilter = (data) => {\n      setHistoryAll(data);\n      setModalFilter(false);\n   };\n\n   const sortDataBeforePrint = (data) => {\n      data.sort((b, a) => {\n         return new Date(a['Created At']) - new Date(b['Created At']);\n      });\n      data.forEach((dt, i) => {\n         dt.index = i + 1;\n      });\n      return data;\n   };\n\n\n   const [dateRange, setDateRange] = useState(null);\n   const onClick = () => {\n      if (!dateRange) return;\n      let newData = historyAll.filter(r => {\n         let xxx = moment(r['Created At']);\n         return xxx <= dateRange[1] && xxx >= dateRange[0];\n      });\n      setHistoryAll(sortDataBeforePrint(newData));\n   };\n   const resetDataFilter = () => {\n      setHistoryAll(sortDataBeforePrint(historyAllInit));\n   };\n\n   const checkDataWithinDays = (nos) => {\n      const addDays = (date, days) => {\n         let result = new Date(date);\n         result.setDate(result.getDate() + days);\n         return result;\n      };\n\n      let today = new Date();\n      let dateBefore = addDays(today, nos);\n      let newData = historyAllInit.filter(r => {\n         let xxx = moment(r['Created At']);\n         return xxx <= today && xxx >= dateBefore;\n      });\n      setHistoryAll(sortDataBeforePrint(newData));\n   };\n\n\n   return (\n      <>\n         {historyAll && (\n            <div style={{\n               height: panelHeight,\n               background: 'white',\n               padding: 10,\n               display: 'flex',\n               justifyContent: 'center',\n               flexDirection: 'column',\n            }}>\n               <div style={{ paddingBottom: 10, fontSize: 20, fontWeight: 'bold', textAlign: 'center' }}>ACTIVITY HISTORY</div>\n               <div style={{ display: 'flex', marginBottom: 10 }}>\n                  <PanelCalendarDuration pickRangeDate={(e) => setDateRange(e)} />\n                  <ButtonStyle\n                     onClick={onClick}\n                     marginLeft={5}\n                     name='Check History'\n                  />\n               </div>\n               <div style={{ display: 'flex', marginBottom: 10 }}>\n                  <div style={{ marginRight: 10, display: 'flex' }}>\n                     <IconTable type='filter' onClick={() => setModalFilter(true)} isActivityTable={true} />\n                     <IconTable type='swap' onClick={resetDataFilter} />\n                  </div>\n\n                  <ButtonStyle\n                     marginRight={5} name='Today'\n                     onClick={() => checkDataWithinDays(-1)}\n                  />\n                  <ButtonStyle\n                     marginRight={5} name='Last 3 Days'\n                     onClick={() => checkDataWithinDays(-3)}\n                  />\n\n                  <ButtonStyle\n                     marginRight={5} name='Last 7 Days'\n                     onClick={() => checkDataWithinDays(-7)}\n                  />\n                  <ButtonStyle\n                     marginRight={5} name='Last 14 Days'\n                     onClick={() => checkDataWithinDays(-14)}\n                  />\n                  <ButtonStyle\n                     marginRight={5} name='This Month'\n                     onClick={() => checkDataWithinDays(-31)}\n                  />\n               </div>\n\n               <div style={{\n                  width: panelWidth,\n                  height: '100%',\n                  margin: '0 auto',\n                  textAlign: 'center'\n               }}>\n                  <TableStyled\n                     fixed\n                     columns={generateColumns(headersShown)}\n                     data={historyAll}\n                     rowHeight={28}\n                  />\n               </div>\n            </div>\n         )}\n\n         {modalFilter && (\n            <ModalStyledSetting\n               title='Filter Data Activity History'\n               visible={modalFilter}\n               footer={null}\n               onCancel={() => {\n                  setModalFilter(false);\n               }}\n               destroyOnClose={true}\n               centered={true}\n            >\n               <FormFilterActivityHistory\n                  applyFilter={applyFilter}\n                  onClickCancelModal={() => setModalFilter(false)}\n                  rowsAll={historyAll}\n                  headers={headersShown}\n               />\n            </ModalStyledSetting>\n         )}\n      </>\n   );\n};\n\nexport default TableActivityHistory;\n\n\nconst generateColumns = (headers) => {\n\n   return [\n      {\n         key: 'index',\n         dataKey: 'index',\n         title: '',\n         width: 70,\n      },\n      ...headers.map((column, columnIndex) => ({\n         key: column,\n         dataKey: column,\n         title: column,\n         resizable: true,\n         width: getHeaderWidth2(column),\n         cellRenderer: column !== 'Created At'\n         ? null\n         : ({ cellData }) => {\n            return (\n               <div style={{ color: 'black' }}>{moment(cellData).format('DD/MM/YY - HH:mm')}</div>\n            );\n         }\n      }))\n   ];\n};\nconst getHeaderWidth2 = (header) => {\n   if (header === 'Drawing Number') return 300;\n   if (header === 'Drawing Name') return 300;\n   if (header === 'Column') return 200;\n   if (header === 'Value') return 300;\n   if (header === 'User') return 200;\n   if (header === 'Created At') return 200;\n   if (header === 'Action') return 200;\n};\n\nconst ModalStyledSetting = styled(Modal)`\n    .ant-modal-content {\n        border-radius: 0;\n    }\n   .ant-modal-close {\n      display: none;\n   }\n   .ant-modal-header {\n      padding: 10px;\n   }\n   .ant-modal-title {\n        padding-left: 10px;\n        font-size: 20px;\n        font-weight: bold;\n   }\n   .ant-modal-body {\n      padding: 0;\n      display: flex;\n      justify-content: center;\n   }\n`;\nconst TableStyled = styled(Table)`\n\n   .BaseTable__row-cell-text {\n      color: black\n   }\n\n   .BaseTable__header-cell {\n      padding: 10px;\n      border-right: 1px solid #DCDCDC;\n      background: ${colorType.grey1};\n      color: black\n   }\n\n   .BaseTable__row-cell {\n      padding: 10px;\n      border-right: 1px solid #DCDCDC;\n      overflow: visible !important;\n   }\n`;\n\n\n\n\n","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\generalComponents\\ReorderColumnForm.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\generalComponents\\PanelConfirmResetMode.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\generalComponents\\PanelConfirm.js",["454"],"import { Input } from 'antd';\nimport React, { useState } from 'react';\nimport ButtonGroupComp from './ButtonGroupComp';\n\n\n\nconst PanelConfirm = ({ onClickCancel, onClickApply, content, newTextBtnApply, newTextBtnCancel }) => {\n\n    const [value, setValue] = useState('');\n\n\n    return (\n        <div style={{\n            width: '100%',\n            height: '100%',\n            color: 'black'\n        }}>\n            <div style={{ padding: 20 }}>\n                {(content === 'Do you want to save a new view template ?' ? (\n                    <div>\n                        <div>Do you want to save a new view template ?</div>\n                        <Input\n                            placeholder='Enter view template name...'\n                            style={{ width: '100%' }}\n                            value={value}\n                            onChange={(e) => setValue(e.target.value)}\n                            style={{\n                                marginBottom: 20,\n                                borderRadius: 0\n                             }}\n                        />\n                    </div>\n\n                ) : content) || 'Are you sure ?'}\n            </div>\n            <div style={{ padding: 20, paddingTop: 0, display: 'flex', flexDirection: 'row-reverse' }}>\n                <ButtonGroupComp\n                    onClickCancel={onClickCancel}\n                    onClickApply={() => onClickApply(value)}\n                    newTextBtnApply={newTextBtnApply}\n                    newTextBtnCancel={newTextBtnCancel}\n                />\n            </div>\n\n        </div>\n    );\n};\n\nexport default PanelConfirm;\n","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\generalComponents\\PanelPickNumber.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\generalComponents\\FormFilter.js",["455"],"import { Checkbox, Icon, Select, Tooltip } from 'antd';\nimport React, { useEffect, useState } from 'react';\nimport styled from 'styled-components';\nimport { colorType } from '../../constants';\nimport { mongoObjectId } from '../../utils/index';\nimport { getConsultantReplyData, getInfoValueFromRfaData, isColumnWithReplyData } from '../pageSpreadsheet/CellRFA';\nimport ButtonGroupComp from './ButtonGroupComp';\nimport ButtonStyle from './ButtonStyle';\n\n\nconst { Option } = Select;\n\n\nconst FormFilter = ({ applyFilter, onClickCancelModal, headers, rowsAll, modeFilter, pageSheetTypeName, rowsRfaAll, companies }) => {\n\n\n\n   const [filterColumn, setFilterColumn] = useState(\n      pageSheetTypeName === 'page-spreadsheet'\n         ? (modeFilter.length > 1\n            ? modeFilter.map(item => ({...item}))\n            : [\n               {\n                  id: mongoObjectId(),\n                  header: 'Status',\n                  value: 'Select Value...'\n               },\n               {\n                  isIncludedParent: 'included'\n               }\n            ])\n         : (modeFilter.length > 1\n            ? modeFilter.map(item => ({...item}))\n            : [\n               {\n                  id: mongoObjectId(),\n                  header: 'Overdue RFA',\n                  value: 'Select Value...'\n               },\n               {\n                  isIncludedParent: 'included'\n               }\n            ])\n   );\n\n   const setFilterSelect = (dataFilter) => {\n      let found = filterColumn.find(x => x.id === dataFilter.id);\n      found.header = dataFilter.header;\n      found.value = dataFilter.value;\n      setFilterColumn([...filterColumn]);\n   };\n\n\n   const onClickAddField = () => {\n      setFilterColumn([\n         ...filterColumn,\n         { id: mongoObjectId(), header: 'Select Field...', value: 'Select Value...' }\n      ]);\n   };\n\n   const removeFilterTag = (id) => {\n      const arr = filterColumn.filter(x => x.id !== id);\n      setFilterColumn([...arr]);\n   };\n\n   const filterObj = modeFilter.find(x => x.isIncludedParent);\n\n   const [isChecked, setIsChecked] = useState(\n      filterObj && filterObj.isIncludedParent === 'included' ? true :\n         filterObj && filterObj.isIncludedParent === 'not included' ? false :\n            true);\n   const onChangeBox = () => {\n\n      setIsChecked(!isChecked);\n      const found = filterColumn.find(x => x.isIncludedParent);\n\n      if (found) {\n         found.isIncludedParent = isChecked ? 'not included' : 'included';\n         setFilterColumn(filterColumn);\n      } else {\n         let arr = [...filterColumn, { isIncludedParent: isChecked ? 'not included' : 'included' }];\n         setFilterColumn(arr);\n      };\n   };\n\n   const onClickApply = () => {\n\n      const output = filterColumn.filter(x => {\n         return (x.header !== 'Select Field...' && x.value !== 'Select Value...') || x.isIncludedParent;\n      });\n\n      if (!filterColumn.find(item => item.isIncludedParent)) {\n         output.push({ isIncludedParent: 'not included' });\n      };\n\n      if (output.length === 1 && output[0].isIncludedParent === 'included') {\n         applyFilter([]);\n      } else {\n         applyFilter(output);\n      };\n   };\n\n\n   return (\n      <div style={{ width: '100%', height: '100%' }}>\n         <div style={{ padding: 20, borderBottom: `1px solid ${colorType.grey4}` }}>\n\n            <ButtonStyle\n               colorText='black'\n               marginRight={10}\n               borderColor={colorType.grey1}\n               background={colorType.grey4}\n               onClick={onClickAddField}\n               name='Add Field'\n               marginBottom={10}\n            />\n\n            {filterColumn.filter(x => x.id).map(item => (\n               <SelectComp\n                  key={item.id}\n                  id={item.id}\n                  data={item}\n                  setFilterSelect={setFilterSelect}\n                  removeFilterTag={removeFilterTag}\n                  headers={headers}\n                  rows={pageSheetTypeName === 'page-spreadsheet' ? rowsAll : rowsRfaAll}\n                  pageSheetTypeName={pageSheetTypeName}\n                  companies={companies}\n               />\n            ))}\n\n            {pageSheetTypeName === 'page-spreadsheet' && (\n               <div>\n                  <CheckboxStyled\n                     onChange={onChangeBox}\n                     checked={isChecked}\n                  >\n                     Include Parent Rows\n                  </CheckboxStyled>\n               </div>\n            )}\n\n         </div>\n\n         <div style={{ padding: 20, display: 'flex', flexDirection: 'row-reverse' }}>\n            <ButtonGroupComp\n               onClickCancel={onClickCancelModal}\n               onClickApply={onClickApply}\n            />\n         </div>\n      </div>\n   );\n};\nexport default FormFilter;\n\n\nconst CheckboxStyled = styled(Checkbox)`\n   .ant-checkbox-inner {\n      border-radius: 0;\n      border: none;\n      background: ${colorType.primary}\n   }\n`;\n\n\nconst IconStyled = styled.div`\n    margin-left: 7px;\n    width: 18px; \n    height: 18px; \n    border: 1px solid ${colorType.grey1};\n    text-align: center;\n    &:hover {\n        background-color: ${colorType.grey4};\n        cursor: pointer;\n    };\n`;\n\n\n\nconst SelectComp = ({ setFilterSelect, data, id, removeFilterTag, headers, rows, pageSheetTypeName, companies }) => {\n\n\n   const columnsValueArr = getColumnsValue(rows, headers, pageSheetTypeName, companies);\n\n   const [column, setColumn] = useState(data.header);\n\n   const [value, setValue] = useState(null);\n\n   useEffect(() => {\n      if (column) {\n         setValue(data.value || 'Select Value...');\n         setFilterSelect({ id, header: column, value: data.value || 'Select Value...' });\n      };\n   }, [column]);\n\n   return (\n      <div style={{ display: 'flex', paddingBottom: 10, width: '100%' }}>\n\n         <SelectStyled\n            defaultValue='Select Field...'\n            value={column}\n            style={{ marginRight: 13, width: '47%' }}\n            onChange={(column) => setColumn(column)}\n         >\n            {headers.map(hd => (\n               <Option key={hd} value={hd}>{hd}</Option>\n            ))}\n         </SelectStyled>\n\n\n         <SelectStyled\n            showSearch\n            optionFilterProp='children'\n            filterOption={(input, option) => {\n               let stringArray = input.split(/(\\s+)/).filter(str => str !== ' ');\n               let isFound = true;\n               stringArray.forEach(str => {\n                  if (option.props.children.toLowerCase().indexOf(str.toLowerCase()) === -1) {\n                     isFound = false;\n                  };\n               });\n               return isFound;\n            }}\n\n            style={{ width: '47%' }}\n            onChange={(value) => {\n               setFilterSelect({ id, header: column, value });\n               setValue(value);\n            }}\n            disabled={!column ? true : false}\n            value={value}\n         >\n            {column && columnsValueArr[column] && columnsValueArr[column].map(hd => (\n               <Option key={hd} value={hd}>{hd}</Option>\n            ))}\n         </SelectStyled>\n\n\n         <Tooltip title='Remove Field'>\n            <IconStyled>\n               <Icon\n                  type='delete'\n                  style={{ transform: 'translate(0, -3px)', color: colorType.grey2, fontSize: 12 }}\n                  onClick={() => removeFilterTag(id)}\n               />\n            </IconStyled>\n         </Tooltip>\n\n      </div>\n   );\n};\n\n\nconst SelectStyled = styled(Select)`\n    .ant-select-selection {\n        border-radius: 0;\n    }\n`;\n\n\nconst getColumnsValue = (rows, headers, pageSheetTypeName, companies) => {\n\n   let valueObj = {};\n\n   const arrayHeaderRFA = [\n      'Requested By',\n      'Submission Date',\n      'Overdue RFA'\n   ];\n\n   [...headers, ...arrayHeaderRFA].forEach(hd => {\n      let valueArr = [];\n      rows.forEach(row => {\n         if (pageSheetTypeName !== 'page-spreadsheet' && isColumnWithReplyData(hd)) {\n            const { replyCompany } = getConsultantReplyData(row, hd, companies);\n            valueArr.push(replyCompany || '');\n\n         } else if (pageSheetTypeName !== 'page-spreadsheet' && hd === 'Overdue RFA') {\n            valueArr = [...valueArr, 'Overdue', 'Due in 3 days', 'RFA outstanding'];\n\n         } else if (pageSheetTypeName !== 'page-spreadsheet' && hd === 'Due Date') {\n            const dueDate = row['Consultant Reply (T)'];\n            valueArr.push(dueDate || '');\n\n         } else if (pageSheetTypeName !== 'page-spreadsheet' && hd === 'Requested By') {\n            const requestedBy = getInfoValueFromRfaData(row, 'submission', 'requestedBy');\n            valueArr.push(requestedBy || '');\n\n         } else if (pageSheetTypeName !== 'page-spreadsheet' && hd === 'Submission Date') {\n            const submissionDate = row['Drg To Consultant (A)'];\n            valueArr.push(submissionDate || '');\n            \n         } else {\n            valueArr.push(row[hd] || '');\n         };\n      });\n      valueArr = [...new Set(valueArr)].filter(e => e);\n      valueArr.sort((a, b) => a > b ? 1 : (b > a ? -1 : 0));\n      if (valueArr.length > 0) valueObj[hd] = valueArr;\n   });\n   return valueObj;\n};\n","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\pageDataEntrySheet\\TableActivityHistory2.js",["456","457","458","459","460","461","462","463"],"import { Modal } from 'antd';\nimport moment from 'moment';\nimport React, { useContext, useEffect, useState } from 'react';\nimport BaseTable, { AutoResizer } from 'react-base-table';\nimport styled from 'styled-components';\nimport { colorType } from '../../constants';\nimport { Context as ProjectContext } from '../../contexts/projectContext';\nimport { Context as RowContext } from '../../contexts/rowContext';\nimport { convertHistoryData, mongoObjectId } from '../../utils';\nimport ButtonStyle from '../generalComponents/ButtonStyle';\nimport FormFilterActivityHistory from '../generalComponents/FormFilterActivityHistory';\nimport IconTable from '../generalComponents/IconTable';\nimport PanelCalendarDuration from '../generalComponents/PanelCalendarDuration';\n\n\n\n\n\nconst Table = (props) => {\n    return (\n        <AutoResizer>\n            {({ width, height }) => {\n                return (\n                    <BaseTable\n                        {...props}\n                        width={width}\n                        height={height}\n                    />\n                );\n            }}\n        </AutoResizer>\n    );\n};\n\nconst panelWidth = window.innerWidth * 0.8;\nconst panelHeight = window.innerHeight * 0.8;\n\nconst TableActivityHistory2 = ({ cellsHistoryInCurrentSheet }) => {\n\n    const { state: stateProject } = useContext(ProjectContext);\n    const { state: stateRow } = useContext(RowContext);\n    const { allDataOneSheet: { publicSettings: { activityRecorded } } } = stateProject;\n\n\n    const { projectId, token } = stateProject.allDataOneSheet;\n    const { headers } = stateProject.allDataOneSheet.publicSettings;\n\n    const [historyAll, setHistoryAll] = useState(null);\n    const [historyAllInit, setHistoryAllInit] = useState(null);\n\n    const headersShown = [\n        'Column',\n        'Value',\n        'User',\n        'Created At',\n        'Action'\n    ];\n\n\n    // useEffect(() => {\n    //    const fetchRowsAndCellHistory = async () => {\n    //       try {\n    //          const res = await Axios.get(`${SERVER_URL}/cell/history/`, { params: { token, projectId } });\n\n    //          let cellsOutput = [];\n    //          convertHistoryData(res.data).forEach(cell => {\n    //             const row = stateRow.rowsAll.find(r => r.id === cell.row);\n    //             if (row) cellsOutput.push({\n    //                'Column': headers.find(hd => hd.key === cell.headerKey).text,\n    //                'Value': cell.text || '',\n    //                'User': cell.email || 'n/a',\n    //                'Created At': moment(cell.createdAt).format('DD/MM/YY - HH:mm'),\n    //                'Action': 'Edit Cell',\n    //                id: mongoObjectId()\n    //             });\n    //          });\n    //          const activityRecordedData = activityRecorded.map(r => {\n    //             return {\n    //                'Column': undefined,\n    //                'Value': undefined,\n    //                'User': r.email || 'n/a',\n    //                'Created At': moment(r.createdAt).format('DD/MM/YY - HH:mm'),\n    //                'Action': r.action,\n    //                id: mongoObjectId()\n    //             };\n    //          });\n    //          let outputArr = [...cellsOutput, ...activityRecordedData];\n\n    //          setHistoryAll(sortDataBeforePrint(outputArr));\n    //          setHistoryAllInit(sortDataBeforePrint(outputArr));\n\n    //       } catch (err) {\n    //          console.log(err);\n    //       };\n    //    };\n    //    fetchRowsAndCellHistory();\n    // }, []);\n\n\n\n    useEffect(() => {\n        let cellsOutput = [];\n        convertHistoryData(cellsHistoryInCurrentSheet).forEach(cell => {\n            const row = stateRow.rowsAll.find(r => r.id === cell.row);\n            if (row) cellsOutput.push({\n                'Column': headers.find(hd => hd.key === cell.headerKey).text,\n                'Value': cell.text || '',\n                'User': cell.email || 'n/a',\n                'Created At': moment(cell.createdAt).format('DD/MM/YY - HH:mm'),\n                'Action': 'Edit Cell',\n                id: mongoObjectId()\n            });\n        });\n        const activityRecordedData = activityRecorded.map(r => {\n            return {\n                'Column': undefined,\n                'Value': undefined,\n                'User': r.email || 'n/a',\n                'Created At': moment(r.createdAt).format('DD/MM/YY - HH:mm'),\n                'Action': r.action,\n                id: mongoObjectId()\n            };\n        });\n        let outputArr = [...cellsOutput, ...activityRecordedData];\n\n        setHistoryAll(sortDataBeforePrint(outputArr));\n        setHistoryAllInit(sortDataBeforePrint(outputArr));\n    }, []);\n\n\n\n\n\n    const [modalFilter, setModalFilter] = useState(false);\n\n    const applyFilter = (data) => {\n        setHistoryAll(data);\n        setModalFilter(false);\n    };\n\n    const sortDataBeforePrint = (data) => {\n        data.sort((b, a) => {\n            let aa = moment(a['Created At'], 'DD/MM/YY - HH:mm').toDate();\n            let bb = moment(b['Created At'], 'DD/MM/YY - HH:mm').toDate();\n            return aa > bb ? 1 : bb > aa ? -1 : 0\n        });\n\n        data.forEach((dt, i) => {\n            dt.index = i + 1;\n        });\n\n        return data;\n    };\n\n\n    const [dateRange, setDateRange] = useState(null);\n    const onClick = () => {\n        if (!dateRange) return;\n        let newData = historyAll.filter(r => {\n            let xxx = moment(r['Created At'], 'DD/MM/YY - HH:mm').toDate();\n            return xxx <= dateRange[1] && xxx >= dateRange[0];\n        });\n        setHistoryAll(sortDataBeforePrint(newData));\n    };\n    const resetDataFilter = () => {\n        setHistoryAll(sortDataBeforePrint(historyAllInit));\n    };\n\n    const checkDataWithinDays = (nos) => {\n        const addDays = (date, days) => {\n            let result = new Date(date);\n            result.setDate(result.getDate() + days);\n            return result;\n        };\n\n        let today = new Date();\n        let dateBefore = addDays(today, nos);\n        let newData = historyAllInit.filter(r => {\n            let xxx = moment(r['Created At'], 'DD/MM/YY - HH:mm').toDate();\n            return xxx <= today && xxx >= dateBefore;\n        });\n        setHistoryAll(sortDataBeforePrint(newData));\n    };\n\n\n    return (\n        <>\n            {historyAll && (\n                <div style={{\n                    height: panelHeight,\n                    background: 'white',\n                    padding: 10,\n                    display: 'flex',\n                    justifyContent: 'center',\n                    flexDirection: 'column',\n                }}>\n                    <div style={{ paddingBottom: 10, fontSize: 20, fontWeight: 'bold', textAlign: 'center' }}>ACTIVITY HISTORY</div>\n                    <div style={{ display: 'flex', marginBottom: 10 }}>\n                        <PanelCalendarDuration pickRangeDate={(e) => setDateRange(e)} />\n                        <ButtonStyle\n                            onClick={onClick}\n                            marginLeft={5}\n                            name='Check History'\n                        />\n                    </div>\n                    <div style={{ display: 'flex', marginBottom: 10 }}>\n                        <div style={{ marginRight: 10, display: 'flex' }}>\n                            <IconTable type='filter' onClick={() => setModalFilter(true)} />\n                            <IconTable type='swap' onClick={resetDataFilter} />\n                        </div>\n\n                        <ButtonStyle\n                            onClick={() => { }}\n                            marginRight={5}\n                            name='Today'\n                            onClick={() => checkDataWithinDays(-1)}\n                        />\n                        <ButtonStyle\n                            onClick={() => { }}\n                            marginRight={5}\n                            name='Last 3 Days'\n                            onClick={() => checkDataWithinDays(-3)}\n                        />\n\n                        <ButtonStyle\n                            onClick={() => { }}\n                            marginRight={5}\n                            name='Last 7 Days'\n                            onClick={() => checkDataWithinDays(-7)}\n                        />\n                        <ButtonStyle\n                            onClick={() => { }}\n                            marginRight={5}\n                            name='Last 14 Days'\n                            onClick={() => checkDataWithinDays(-14)}\n                        />\n                        <ButtonStyle\n                            onClick={() => { }}\n                            marginRight={5}\n                            name='This Month'\n                            onClick={() => checkDataWithinDays(-31)}\n                        />\n                    </div>\n\n                    <div style={{\n                        width: panelWidth,\n                        height: '100%',\n                        margin: '0 auto',\n                        textAlign: 'center'\n                    }}>\n                        <TableStyled\n                            fixed\n                            columns={generateColumns(headersShown)}\n                            data={historyAll}\n                            rowHeight={28}\n                        />\n                    </div>\n                </div>\n            )}\n\n            {modalFilter && (\n                <ModalStyledSetting\n                    title='Filter Data Activity History'\n                    visible={modalFilter}\n                    footer={null}\n                    onCancel={() => {\n                        setModalFilter(false);\n                    }}\n                    destroyOnClose={true}\n                    centered={true}\n                >\n                    <FormFilterActivityHistory\n                        applyFilter={applyFilter}\n                        onClickCancelModal={() => setModalFilter(false)}\n                        rowsAll={historyAll}\n                        headers={headersShown}\n                    />\n                </ModalStyledSetting>\n            )}\n        </>\n    );\n};\n\nexport default TableActivityHistory2;\n\n\nconst generateColumns = (headers) => {\n\n    return [\n        {\n            key: 'index',\n            dataKey: 'index',\n            title: '',\n            width: 70,\n        },\n        ...headers.map((column) => ({\n            key: column,\n            dataKey: column,\n            title: column,\n            resizable: true,\n            width: 300,\n        }))\n    ];\n};\n\n\nconst ModalStyledSetting = styled(Modal)`\n    .ant-modal-content {\n        border-radius: 0;\n    }\n   .ant-modal-close {\n      display: none;\n   }\n   .ant-modal-header {\n      padding: 10px;\n   }\n   .ant-modal-title {\n        padding-left: 10px;\n        font-size: 20px;\n        font-weight: bold;\n   }\n   .ant-modal-body {\n      padding: 0;\n      display: flex;\n      justify-content: center;\n   }\n`;\nconst TableStyled = styled(Table)`\n\n\n   .BaseTable__row-cell-text {\n      color: black\n   }\n\n   .BaseTable__table .BaseTable__body {\n      /* -webkit-touch-callout: none;\n      -webkit-user-select: none;\n      -khtml-user-select: none;\n      -moz-user-select: none;\n      -ms-user-select: none;\n      user-select: none; */\n   }\n\n   .BaseTable__header-cell {\n      padding: 10px;\n      border-right: 1px solid #DCDCDC;\n      background: ${colorType.grey1};\n      color: black\n   }\n\n   .BaseTable__row-cell {\n      padding: 10px;\n      border-right: 1px solid #DCDCDC;\n      overflow: visible !important;\n   }\n`;\n\n\n\n\n","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\generalComponents\\FormGroup.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\pageDataEntrySheet\\TableCellHistory2.js",["464","465","466","467","468","469"],"import { List } from 'antd';\nimport moment from 'moment';\nimport React, { useContext, useState } from 'react';\nimport { Context as ProjectContext } from '../../contexts/projectContext';\nimport { Context as RowContext } from '../../contexts/rowContext';\n\n\n\nconst TableCellHistory2 = (props) => {\n\n    const { rowData: { id: rowId }, column, cellOneHistory } = props;\n\n    const {\n        state: stateProject\n    } = useContext(ProjectContext);\n\n    const { state: stateRow } = useContext(RowContext);\n\n    const { projectId, token } = stateProject.allDataOneSheet;\n    const headers = stateProject.allDataOneSheet.publicSettings.headers;\n    const headerKey = headers.find(hd => hd.text === column.key).key;\n\n\n    const [history, setHistory] = useState(cellOneHistory);\n\n    // useEffect(() => {\n    //    const fetchCellHistory = async () => {\n    //       try {\n    //          const res = await Axios.get(`${SERVER_URL}/cell/history/one-cell/`, { params: { token, projectId, rowId, headerKey } });\n    //          setHistory(res.data.histories.reverse());\n    //       } catch (err) {\n    //          console.log(err);\n    //       };\n    //    };\n    //    fetchCellHistory();\n    // }, [])\n\n\n    return (\n        <div style={{ width: '100%', padding: 15, maxHeight: window.innerHeight * 0.7, overflowY: 'scroll' }}>\n            <List\n                size='small'\n                header={null}\n                footer={null}\n                bordered\n                dataSource={history}\n                renderItem={item => (\n                    <List.Item>\n                        <div>\n                            <div>{`${item.email}`}</div>\n                            <div style={{ fontSize: 12, color: 'grey' }}>{moment(item.createdAt).format('DD/MM/YY - HH:mm')}</div>\n                            <div style={{ fontWeight: 'bold' }}>{item.text}</div>\n                        </div>\n                    </List.Item>\n                )}\n            />\n        </div>\n    );\n};\n\nexport default TableCellHistory2;\n","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\pageDataEntrySheet\\ColorizedForm2.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\pageDataEntrySheet\\FormCellColorizedCheck2.js",["470","471","472","473"],"import moment from 'moment';\nimport React, { useContext, useState } from 'react';\nimport { Context as ProjectContext } from '../../contexts/projectContext';\nimport { convertHistoryData } from '../../utils';\nimport ButtonStyle from '../generalComponents/ButtonStyle';\nimport PanelCalendarDuration from '../generalComponents/PanelCalendarDuration';\n\n\n\n\n\n\nconst FormCellColorizedCheck2 = ({ setCellHistoryArr, cellsHistoryInCurrentSheet }) => {\n\n    const { state: stateProject } = useContext(ProjectContext);\n\n    const { projectId, token, publicSettings } = stateProject.allDataOneSheet;\n\n    const { headers: headersArr } = publicSettings;\n\n\n    // useEffect(() => {\n    //    const fetchProjectHistory = async () => {\n    //       try {\n    //          const res = await Axios.get(`${SERVER_URL}/cell/history/`, { params: { token, projectId } });\n    //          setHistoryData(res.data);\n    //       } catch (err) {\n    //          console.log(err);\n    //       };\n    //    };\n    //    fetchProjectHistory();\n    // }, []);\n\n\n    const [historyData, setHistoryData] = useState(cellsHistoryInCurrentSheet);\n\n    const [dateRange, setDateRange] = useState(null);\n    const onClickCheck = ({ start, end }) => {\n        let filterCells = convertHistoryData(historyData).filter(cell => {\n            let createdAt = moment(cell.createdAt).toDate();\n            return createdAt >= start && createdAt <= end;\n        });\n        const cellArr = filterCells.map(ch => {\n            const { row: rowId, headerKey } = ch;\n            let headerText = headersArr.find(hd => hd.key === headerKey).text;\n            return {\n                rowId,\n                header: headerText\n            };\n        });\n        let unique = cellArr.reduce((res, itm) => {\n            let result = res.find(item => JSON.stringify(item) == JSON.stringify(itm));\n            if (!result) return res.concat(itm);\n            return res;\n        }, []);\n\n        setCellHistoryArr(unique);\n    };\n    const checkCellWithinDates = (nos) => {\n        const addDays = (date, days) => {\n            let result = new Date(date);\n            result.setDate(result.getDate() + days);\n            return result;\n        };\n        let today = new Date();\n        let dateBefore = addDays(today, nos);\n        return {\n            start: dateBefore,\n            end: today\n        };\n    };\n\n\n    return (\n        <div style={{\n            padding: 15\n        }}>\n            <div style={{ display: 'flex', marginBottom: 10 }}>\n                <PanelCalendarDuration pickRangeDate={(e) => setDateRange(e)} />\n                <ButtonStyle\n                    onClick={() => dateRange && onClickCheck({ start: dateRange[0], end: dateRange[1] })}\n                    marginLeft={5}\n                    name='Check Data Changed'\n                />\n            </div>\n            <div style={{ display: 'flex', marginBottom: 20, width: '100%' }}>\n                <ButtonStyle marginRight={5} name='Today'\n                    onClick={() => onClickCheck(checkCellWithinDates(-1))}\n                />\n                <ButtonStyle marginRight={5} name='Last 3 Days'\n                    onClick={() => onClickCheck(checkCellWithinDates(-3))}\n                />\n                <ButtonStyle marginRight={5} name='Last 7 Days'\n                    onClick={() => onClickCheck(checkCellWithinDates(-7))}\n                />\n                <ButtonStyle marginRight={5} name='Last 14 Days'\n                    onClick={() => onClickCheck(checkCellWithinDates(-14))}\n                />\n                <ButtonStyle marginRight={5} name='This Month'\n                    onClick={() => onClickCheck(checkCellWithinDates(-31))}\n                />\n            </div>\n        </div>\n    );\n};\n\nexport default FormCellColorizedCheck2;\n\n","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\DashboardLayout\\componentsDashboard\\ChartBarRecord.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\generalComponents\\ButtonStyle.js",["474"],"import { Button } from 'antd';\nimport React, { useContext } from 'react';\nimport { Context as RowContext } from '../../contexts/rowContext';\n\n\n\n\nconst ButtonStyle = ({\n   colorText,\n   marginRight,\n   marginLeft,\n   borderColor,\n   borderOverwritten,\n   marginBottom,\n   background,\n   name,\n   onClick,\n   disabled\n}) => {\n\n   const { state: stateRow } = useContext(RowContext);\n   const { loading } = stateRow;\n\n   return (\n      <Button\n         style={{\n            borderRadius: 0,\n            background: background,\n            color: colorText,\n            border: 'none',\n            marginRight,\n            marginBottom,\n            marginLeft,\n            border: `1px solid ${borderOverwritten ? borderColor : (borderColor || background)}`,\n         }}\n         onClick={onClick}\n         disabled={disabled || (loading && name !== 'Yes')}\n         loading={loading && name === 'Yes'}\n      >\n         {name}\n      </Button>\n   );\n};\n\nexport default ButtonStyle;\n\n\n","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\generalComponents\\PanelCalendarDuration.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\generalComponents\\FormFilterActivityHistory.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\pageSpreadsheet\\ButtonAdminUpdateProjectSettings.js",["475"],"import { Icon, message, Tooltip } from 'antd';\r\nimport Axios from 'axios';\r\nimport React, { useContext, useState } from 'react';\r\nimport { SERVER_URL } from '../../constants';\r\nimport { Context as ProjectContext } from '../../contexts/projectContext';\r\n\r\n\r\nconst ButtonAdminUpdateProjectSettings = () => {\r\n\r\n   const { state: stateProject } = useContext(ProjectContext);\r\n   const token = stateProject.allDataOneSheet && stateProject.allDataOneSheet.token;\r\n   const projectId = stateProject.allDataOneSheet && stateProject.allDataOneSheet.projectId;\r\n   const email = stateProject.allDataOneSheet && stateProject.allDataOneSheet.email;\r\n   const [file, setFile] = useState('');\r\n\r\n   const handleChange = e => {\r\n      const fileReader = new FileReader();\r\n      fileReader.readAsText(e.target.files[0], 'UTF-8');\r\n      fileReader.onload = e => {\r\n         setFile(JSON.parse(e.target.result));\r\n         // setFile(getDataSumangAndHandy(JSON.parse(e.target.result)));\r\n      };\r\n   };\r\n\r\n\r\n\r\n\r\n\r\n   const uploadCurrentDataToServer = async () => {\r\n      try {\r\n         await Promise.all(file.map(async setting => {\r\n            await Axios.post(`${SERVER_URL}/sheet/update-setting-public/`, {\r\n               token,\r\n               email,\r\n               projectId: setting.sheetId,\r\n               publicSettings: { drawingTypeTree: setting.drawingTypeTree }\r\n            });\r\n         }));\r\n         message.info('DONE...');\r\n      } catch (err) {\r\n         console.log(err);\r\n      };\r\n   };\r\n\r\n\r\n   return (\r\n      <Tooltip title='Update Project Settings'>\r\n         {file ? (\r\n            <Icon type='align-center' onClick={uploadCurrentDataToServer} style={{ marginRight: 10 }} />\r\n         ) : (\r\n            <label style={{\r\n               border: '1px solid black',\r\n               display: 'inline-block',\r\n               width: 20,\r\n               height: 20,\r\n               padding: 3,\r\n               margin: 3,\r\n               cursor: 'pointer'\r\n            }}>\r\n               <input style={{ height: 25, fontSize: 8, marginRight: 6, display: 'none' }} type='file' onChange={handleChange} />\r\n               <div style={{ transform: 'translateX(-2px) translateY(-5px)' }}>(6)</div>\r\n            </label>\r\n         )}\r\n      </Tooltip>\r\n   );\r\n};\r\n\r\nexport default ButtonAdminUpdateProjectSettings;\r\n\r\n\r\n","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\contexts\\sheetContextProvider.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\pageSpreadsheet\\CellRFA.js",["476","477"],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\pageSpreadsheet\\PanelAddNewRFA.js",["478","479","480","481","482","483","484","485","486","487","488"],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\pageSpreadsheet\\TableDrawingRFA.js",["489","490"],"import { message, Select } from 'antd';\nimport React, { useContext, useEffect, useState } from 'react';\nimport BaseTable, { AutoResizer } from 'react-base-table';\nimport styled from 'styled-components';\nimport { colorType } from '../../constants';\nimport { Context as ProjectContext } from '../../contexts/projectContext';\nimport { Context as RowContext } from '../../contexts/rowContext';\nimport { getHeaderWidth } from '../../utils';\nimport ButtonGroupComp from '../generalComponents/ButtonGroupComp';\nimport { convertTradeCodeInverted, findTradeOfDrawing } from './PanelAddNewRFA';\n\n\nconst { Option } = Select;\n\nconst Table = (props) => {\n   return (\n      <AutoResizer>\n         {({ width, height }) => {\n            return (\n               <BaseTable\n                  {...props}\n                  width={width}\n                  height={height}\n               />\n            );\n         }}\n      </AutoResizer>\n   );\n};\n\n\nconst TableDrawingRFA = ({ onClickCancelModalPickDrawing, onClickApplyModalPickDrawing, dwgsToAddNewRFA, tradeOfRfaForFirstTimeSubmit }) => {\n\n\n   const { state: stateProject } = useContext(ProjectContext);\n   const { state: stateRow } = useContext(RowContext);\n   const { headers } = stateProject.allDataOneSheet.publicSettings;\n   const { rowsAll, drawingTypeTreeDmsView } = stateRow;\n\n   const [drawingTrade, setDrawingTrade] = useState(convertTradeCodeInverted(tradeOfRfaForFirstTimeSubmit) || 'ARCHI');\n   const [rowsTableInput, setRowsTableInput] = useState([]);\n\n\n   useEffect(() => {\n\n      if (drawingTrade !== convertTradeCodeInverted(tradeOfRfaForFirstTimeSubmit)) {\n         setSelectedIdRows([]);\n      };\n\n      const rowsList = rowsAll.filter(r => {\n         const trade = findTradeOfDrawing(r, drawingTypeTreeDmsView);\n\n         return (r['Drawing Number'] || r['Drawing Name']) &&\n            !r.rfaNumber &&\n            trade.includes(drawingTrade);\n      });\n      setRowsTableInput(rowsList);\n   }, [drawingTrade]);\n\n\n   const [selectedIdRows, setSelectedIdRows] = useState(dwgsToAddNewRFA ? dwgsToAddNewRFA.map(x => x.id) : []);\n\n\n   const generateColumnsRFA = (headers) => {\n      return [\n         {\n            key: 'index',\n            dataKey: 'index',\n            title: '',\n            width: 50,\n            cellRenderer: ({ rowIndex }) => <div>{rowIndex + 1}</div>\n         },\n         ...headers.map(column => ({\n            key: column,\n            dataKey: column,\n            title: column,\n            resizable: true,\n            width: getHeaderWidth(column),\n         }))\n      ];\n   };\n   const rowClassName = ({ rowData }) => {\n      if (selectedIdRows.indexOf(rowData.id) !== -1) {\n         return 'row-selected-rfa';\n      };\n   };\n\n\n   const rowEventHandlers = {\n      onClick: (props) => {\n         const { rowKey, rowData } = props;\n         if (selectedIdRows.indexOf(rowKey) === -1) {\n            setSelectedIdRows([...selectedIdRows, rowKey]);\n         } else {\n            setSelectedIdRows(selectedIdRows.filter(id => id !== rowKey));\n         };\n      },\n   };\n\n   return (\n      <div style={{\n         width: '100%',\n         height: window.innerHeight * 0.85 - 20,\n         margin: '0 auto',\n         padding: 10,\n         textAlign: 'center',\n      }}>\n         <div style={{ display: 'flex' }}>\n            <SelectStyled\n               style={{ minWidth: 100, paddingRight: 10 }}\n               value={drawingTrade}\n               onChange={(e) => setDrawingTrade(e)}\n            >\n               {['ARCHI', 'C&S', 'M&E', 'PRECAST'].map(item => (\n                  <Option key={item} value={item}>{item}</Option>\n               ))}\n            </SelectStyled>\n            <div style={{ fontWeight: 'bold', marginBottom: 10 }}>{`Number of drawings selected: ${selectedIdRows.length}`}</div>\n         </div>\n\n         <div style={{ width: '100%', height: window.innerHeight * 0.8 - 150 }}>\n            <TableStyled\n               fixed\n               columns={generateColumnsRFA(headers.map(hd => hd.text))}\n               data={rowsTableInput}\n               rowHeight={28}\n               rowEventHandlers={rowEventHandlers}\n               rowClassName={rowClassName}\n            />\n         </div>\n         <div style={{ padding: 20, display: 'flex', flexDirection: 'row-reverse' }}>\n            <ButtonGroupComp\n               onClickCancel={onClickCancelModalPickDrawing}\n               onClickApply={() => {\n                  if (selectedIdRows.length === 0) {\n                     return message.info('Please select drawings to submit!', 3);\n                  } else {\n                     onClickApplyModalPickDrawing(drawingTrade, selectedIdRows);\n                  };\n               }}\n            />\n         </div>\n      </div>\n   );\n};\n\nexport default TableDrawingRFA;\n\n\n\n\nconst SelectStyled = styled(Select)`\n   .ant-select-selection {\n      border-radius: 0;\n   }\n`;\n\n\nconst TableStyled = styled(Table)`\n\n   .row-selected-rfa {\n      background-color: ${colorType.cellHighlighted};\n   };\n   .row-with-rfa-locked {\n      background-color: ${colorType.lockedCell}\n   };\n\n   \n   .BaseTable__row-cell-text {\n      color: black\n   }\n\n   .BaseTable__table .BaseTable__body {\n      /* -webkit-touch-callout: none;\n      -webkit-user-select: none;\n      -khtml-user-select: none;\n      -moz-user-select: none;\n      -ms-user-select: none;\n      user-select: none; */\n   }\n\n   .BaseTable__header-cell {\n      padding: 10px;\n      border-right: 1px solid #DCDCDC;\n      background: ${colorType.grey1};\n      color: black\n   }\n\n   .BaseTable__row-cell {\n      padding: 10px;\n      border-right: 1px solid #DCDCDC;\n      overflow: visible !important;\n   }\n`;\n","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\generalComponents\\LoadingIcon.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\generalComponents\\OverallComponentDMS.js",["491","492","493","494","495"],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\PageRFA.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\PageRFAM.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\pageSpreadsheet\\CellForm.js",["496","497","498","499","500","501","502","503","504","505","506","507","508","509","510","511","512","513","514","515","516","517"],"import { Icon, message, Modal, Tooltip } from 'antd';\r\nimport moment from 'moment';\r\nimport React, { useEffect, useState } from 'react';\r\nimport styled from 'styled-components';\r\nimport { colorType } from '../../constants';\r\nimport { mongoObjectId } from '../../utils';\r\nimport ButtonColumnTag from '../generalComponents/ButtonColumnTag';\r\nimport ButtonGroupComp from '../generalComponents/ButtonGroupComp';\r\nimport { getInfoValueFromRfaData } from './CellRFA';\r\n\r\n\r\n\r\n\r\nconst CellForm = (props) => {\r\n\r\n   const { rowData, cellData, column, buttonPanelFunction, contextInput } = props;\r\n\r\n   const arrayExpandedColumn = ['RFAM Ref'];\r\n\r\n   const { contextCell, contextRow, contextProject } = contextInput;\r\n   const { stateCell, getCellModifiedTemp, setCellActive } = contextCell;\r\n   const { stateRow, getSheetRows } = contextRow;\r\n   const { stateProject } = contextProject;\r\n\r\n   const [activeBtn, setActiveBtn] = useState('All');\r\n\r\n   const [btnShown, setBtnShown] = useState(false);\r\n\r\n   const { rowsRfamAllInit, rowsRfamAll } = stateRow;\r\n\r\n   const [refText, setRefText] = useState(null);\r\n   const [refData, setRefData] = useState({});\r\n\r\n   useEffect(() => {\r\n\r\n      if (rowData.treeLevel === 3 && arrayExpandedColumn.indexOf(column.key) !== -1) {\r\n\r\n         const refNumber = rowData.id;\r\n         const allBtn = rowData['btn'];\r\n         const allRowsChildren = rowData.children;\r\n         const lastBtn = allBtn[allBtn.length - 1];\r\n\r\n\r\n         let ref;\r\n         if (activeBtn === '0') {\r\n            ref = refNumber;\r\n         } else if (activeBtn === 'All') {\r\n            ref = refNumber + (lastBtn === '0' ? '' : lastBtn);\r\n         } else if (activeBtn) { // A, B, C, ....\r\n            ref = refNumber + activeBtn;\r\n         };\r\n\r\n         const rowsWithThisRef = rowsRfamAllInit.filter(x => {\r\n            return x['rfamRef'] === rowData['rfamRef'];\r\n         });\r\n         const oneRowChildren = rowsWithThisRef[0];\r\n\r\n         const refDataObj = cloneRefData(oneRowChildren);\r\n         setRefText(ref);\r\n         setRefData(refDataObj);\r\n\r\n         // const consultantMustReplyArray = getInfoValueFromRfaData(refDataObj, 'submission', 'consultantMustReply');\r\n\r\n         // if (isUserCanSubmitRfaBothSide) {\r\n         //    if (allRowsChildren.find(row => !row['RFA Ref'])) {\r\n         //       setThereIsDrawingWithNoRfaRef(true);\r\n         //    } else {\r\n         //       setThereIsDrawingWithNoRfaRef(false);\r\n         //    };\r\n         //    let arrayConsultantNotReplyYet = [];\r\n\r\n         //    consultantMustReplyArray.forEach(cst => {\r\n         //       const statusReply = getInfoValueFromRfaData(refDataObj, 'reply', 'status', cst);\r\n         //       if (!statusReply) {\r\n         //          arrayConsultantNotReplyYet.push(cst);\r\n         //       };\r\n         //    });\r\n\r\n         //    if (arrayConsultantNotReplyYet.length > 0) {\r\n         //       setThereIsDrawingWithNoReplyAndConsultantAllowedReply(true);\r\n         //       setConsultantsNotReplyYet(arrayConsultantNotReplyYet);\r\n         //    } else {\r\n         //       setThereIsDrawingWithNoReplyAndConsultantAllowedReply(false);\r\n         //    };\r\n\r\n         // } else if (roleTradeCompany.role === 'Consultant') {\r\n         //    if (\r\n         //       !refDataObj[`reply-$$$-status-${roleTradeCompany.company}`] &&\r\n         //       consultantMustReplyArray && consultantMustReplyArray.indexOf(company) !== -1\r\n         //    ) {\r\n         //       setThereIsDrawingWithNoReplyAndConsultantAllowedReply(true);\r\n         //    } else {\r\n         //       setThereIsDrawingWithNoReplyAndConsultantAllowedReply(false);\r\n         //    };\r\n         // } else if (roleTradeCompany.role === 'Document Controller') {\r\n\r\n         //    if (allRowsChildren.find(row => !row['RFA Ref'])) {\r\n         //       setThereIsDrawingWithNoRfaRef(true);\r\n         //    } else {\r\n         //       setThereIsDrawingWithNoRfaRef(false);\r\n         //    };\r\n         // };\r\n\r\n      } else if (!rowData.treeLevel && rowData['rfaNumber'] && rowData['RFA Ref']) {\r\n\r\n         // const refDataObj = cloneRefData(rowData);\r\n         // setRefData(refDataObj);\r\n\r\n         // if (column.key === 'Requested By') {\r\n         //    setRequestedByCellData(getInfoValueFromRfaData(refDataObj, 'submission', 'requestedBy'));\r\n\r\n         // } else if (isColumnWithReplyData(column.key)) {\r\n         //    const { replyStatus: replyStatusData, replyCompany: replyCompanyData, replyDate: replyDateData } = getConsultantReplyData(rowData, column.key, companies);\r\n\r\n         //    setReplyStatus(replyStatusData);\r\n         //    setReplyCompany(replyCompanyData);\r\n         //    setReplyDate(convertReplyOrSubmissionDate(replyDateData));\r\n\r\n         // } else if (isColumnConsultant(column.key)) {\r\n         //    if (roleTradeCompany.role !== 'Consultant') {\r\n         //       const consultantLead = getInfoValueFromRfaData(refDataObj, 'submission', 'consultantMustReply')[0];\r\n\r\n         //       setReplyStatus(getInfoValueFromRfaData(refDataObj, 'reply', 'status', consultantLead));\r\n         //       setReplyCompany(consultantLead);\r\n\r\n         //       const dateInfo = getInfoValueFromRfaData(refDataObj, 'reply', 'date', consultantLead);\r\n         //       setReplyDate(convertReplyOrSubmissionDate(dateInfo));\r\n         //    } else {\r\n         //       const consultantMustReplyValue = getInfoValueFromRfaData(refDataObj, 'submission', 'consultantMustReply');\r\n         //       if (consultantMustReplyValue.indexOf(company) !== -1) {\r\n\r\n         //          setReplyStatus(refDataObj[`reply-$$$-status-${company}`]);\r\n         //          setReplyCompany(company);\r\n         //          const dateInfo = refDataObj[`reply-$$$-date-${company}`];\r\n         //          setReplyDate(convertReplyOrSubmissionDate(dateInfo));\r\n         //       };\r\n         //    };\r\n\r\n         // } else if (column.key === 'Due Date') {\r\n         //    const consultantMustReplyArray = getInfoValueFromRfaData(refDataObj, 'submission', 'consultantMustReply');\r\n         //    if (!rowData[`reply-$$$-status-${consultantMustReplyArray[0]}`]) {\r\n         //       const compare = compareDates(rowData['Consultant Reply (T)']);\r\n         //       setOverdueCount(compare);\r\n         //    };\r\n         // };\r\n      };\r\n   }, [activeBtn]);\r\n\r\n\r\n\r\n\r\n   const [isDrawingDetailTableDms, setIsDrawingDetailTableDms] = useState(null);\r\n   const [is3dModelAttached, setIs3dModelAttached] = useState(false);\r\n\r\n   useEffect(() => {\r\n      // if (column.key.includes('Version ')) {\r\n      //    const versionIndex = column.key.slice(8, column.key.length);\r\n      //    const infoData = rowData['Info'];\r\n      //    if (isColumnWithReplyData(infoData)) {\r\n      //       const dataStatus = getInfoValueFromRfaData(rowData[versionIndex], 'reply', 'status');\r\n      //       if (dataStatus) {\r\n      //          const dataDate = getInfoValueFromRfaData(rowData[versionIndex], 'reply', 'date');\r\n      //          const keyStatus = getInfoKeyFromRfaData(rowData[versionIndex], 'reply', 'status');\r\n      //          const companyName = keyStatus.slice(17, keyStatus.length);\r\n\r\n      //          setReplyStatus(dataStatus);\r\n      //          setReplyCompany(companyName);\r\n      //          setReplyDate(convertReplyOrSubmissionDate(dataDate));\r\n\r\n      //          setRefData(rowData[versionIndex]);\r\n\r\n      //          setIsDrawingDetailTableDms('drawing-detail-consultant');\r\n      //       };\r\n      //    } else if (infoData === 'RFA Ref') {\r\n      //       setRefData(rowData[versionIndex]);\r\n\r\n      //       setIsDrawingDetailTableDms('drawing-detail-rfa');\r\n\r\n      //       const dwfxLink = getInfoValueFromRfaData(rowData[versionIndex], 'submission', 'dwfxLink');\r\n      //       if (dwfxLink) {\r\n      //          setIs3dModelAttached(true);\r\n      //       };\r\n      //    };\r\n      // };\r\n\r\n      // if (!rowData.treeLevel && projectIsAppliedRfaView && column.key === 'RFA Ref' && rowData['RFA Ref']) {\r\n      //    const dwfxLink = getInfoValueFromRfaData(rowData, 'submission', 'dwfxLink');\r\n      //    if (dwfxLink) {\r\n      //       setIs3dModelAttached(true);\r\n      //    };\r\n      // };\r\n   }, []);\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n   const onClickRefDrawing = (btn) => {\r\n\r\n      const rowsNotThisRef = rowsRfamAll.filter(r => r['rfamRef'] !== refData['rfamRef']);\r\n\r\n      let rowsThisRefFiltered;\r\n\r\n      if (btn === 'All') {\r\n         const rowsFilter = rowsRfamAllInit.filter(r => r['rfamRef'] === refData['rfamRef']);\r\n         const arrayVersion = [...new Set(rowsFilter.map(x => x.revision))];\r\n         const latestVersion = arrayVersion.sort()[arrayVersion.length - 1];\r\n\r\n         rowsThisRefFiltered = rowsRfamAllInit.filter(r => {\r\n            return r.revision === latestVersion && r['rfamRef'] === refData['rfamRef'];\r\n         });\r\n      } else {\r\n         rowsThisRefFiltered = rowsRfamAllInit.filter(r => {\r\n            return r.revision === btn && r['rfamRef'] === refData['rfamRef'];\r\n         });\r\n      };\r\n\r\n      \r\n      getSheetRows({\r\n         ...stateRow,\r\n         rowsRfamAll: [...rowsNotThisRef, ...rowsThisRefFiltered]\r\n      });\r\n      setActiveBtn(btn);\r\n   };\r\n\r\n   const onClickSubmitOrReplyRFA = (btn) => {\r\n      // if (!isUserCanSubmitRfaBothSide) {\r\n      //    if (btn === 'form-reply-RFA') {\r\n      //       const isEditTimeOver = checkIfEditTimeIsOver(rfaData, null, EDIT_DURATION_MIN, 'consultant-check-if-rfa-ready-to-reply');\r\n      //       if (!isEditTimeOver) {\r\n      //          return message.warn('Woh Hup is submitting this RFA, please wait ...');\r\n      //       };\r\n      //    } else if (btn === 'form-resubmit-RFA') {\r\n      //       const isEditTimeOver = checkIfEditTimeIsOver(rfaData, null, EDIT_DURATION_MIN, 'wohhup-check-if-rfa-ready-to-resubmit');\r\n      //       if (!isEditTimeOver) {\r\n      //          return message.warn('Consultant is replying this RFA, please wait ...');\r\n      //       };\r\n      //    };\r\n      // };\r\n\r\n      // if (isUserCanSubmitRfaBothSide) {\r\n      //    setModalActionTypeForAdmin(btn);\r\n      // } else {\r\n      //    buttonPanelFunction(btn);\r\n      //    getSheetRows({\r\n      //       ...stateRow,\r\n      //       currentRfaToAddNewOrReplyOrEdit: {\r\n      //          currentRfaNumber: rowData.rfaNumber,\r\n      //          currentRfaRef: rfaRefText,\r\n      //          currentRfaData: rfaData,\r\n      //          formRfaType: btn,\r\n      //          isFormEditting: false\r\n      //       },\r\n      //    });\r\n      // };\r\n   };\r\n\r\n\r\n\r\n\r\n   const onMouseDownCellButtonConsultant = async (btn, replyCompany, rfaData) => {\r\n\r\n      // try {\r\n      //    let userReply, isEditTimeOver;\r\n      //    if (isDrawingDetailTableDms === 'drawing-detail-consultant') {\r\n      //       userReply = getInfoValueFromRfaData(rfaData, 'reply', 'user', replyCompany);\r\n      //       isEditTimeOver = checkIfEditTimeIsOver(rfaData, replyCompany, EDIT_DURATION_MIN, 'check-if-status-button-ready');\r\n      //    } else {\r\n      //       userReply = getInfoValueFromRfaData(rowData, 'reply', 'user', replyCompany);\r\n      //       isEditTimeOver = checkIfEditTimeIsOver(rowData, replyCompany, EDIT_DURATION_MIN, 'check-if-status-button-ready');\r\n      //    };\r\n\r\n      //    if (isEditTimeOver || userReply === email) {\r\n      //       if (btn === 'See Note') {\r\n      //          setModalContent(\r\n      //             <div>\r\n      //                <div style={{ fontWeight: 'bold' }}>{rfaData[`reply-$$$-user-${replyCompany}`] || ''}</div>\r\n      //                <div style={{ fontWeight: 'bold' }}>{rfaData[`reply-$$$-status-${replyCompany}`] || ''}</div>\r\n      //                <div>{rfaData[`reply-$$$-comment-${replyCompany}`] || ''}</div>\r\n      //             </div>\r\n      //          );\r\n\r\n      //       } else if (btn === 'Open Drawing File') {\r\n      //          const res = await Axios.get('/api/issue/get-public-url', { params: { key: rfaData[`reply-$$$-drawing-${replyCompany}`], expire: 1000 } });\r\n      //          window.open(res.data);\r\n\r\n      //       } else if (btn === 'Open Form') {\r\n\r\n      //       } else if (btn === 'Edit') {\r\n      //          let adminEditData = {};\r\n      //          const listEmailTo = getInfoValueFromRfaData(rfaData, 'reply', 'emailTo', replyCompany);\r\n      //          if (isUserCanSubmitRfaBothSide) {\r\n      //             adminEditData = {\r\n      //                isAdminAction: true,\r\n      //                isAdminActionWithNoEmailSent: !listEmailTo || listEmailTo.length === 0,\r\n      //                adminActionConsultantToReply: replyCompany\r\n      //             };\r\n      //          };\r\n\r\n      //          buttonPanelFunction('form-reply-RFA');\r\n      //          getSheetRows({\r\n      //             ...stateRow,\r\n      //             currentRfaToAddNewOrReplyOrEdit: {\r\n      //                currentRfaNumber: rowData.rfaNumber,\r\n      //                currentRfaRef: rowData['RFA Ref'],\r\n      //                currentRfaData: rfaData,\r\n      //                formRfaType: 'form-reply-RFA',\r\n      //                isFormEditting: true,\r\n      //                ...adminEditData\r\n      //             },\r\n      //          });\r\n      //       };\r\n      //    } else {\r\n      //       return message.warn('Consultant is replying this RFA, please wait ...');\r\n      //    };\r\n      // } catch (err) {\r\n      //    console.log(err);\r\n      // };\r\n   };\r\n\r\n\r\n   const onMouseDownCellButtonRfaRef = async (btn) => {\r\n      // try {\r\n      //    let userSubmission, isEditTimeOver;\r\n      //    if (isDrawingDetailTableDms === 'drawing-detail-rfa') {\r\n      //       userSubmission = getInfoValueFromRfaData(rfaData, 'submission', 'user');\r\n      //       isEditTimeOver = checkIfEditTimeIsOver(rfaData, null, EDIT_DURATION_MIN, 'check-if-rfa-button-ready');\r\n      //    } else {\r\n      //       userSubmission = getInfoValueFromRfaData(rowData, 'submission', 'user');\r\n      //       isEditTimeOver = checkIfEditTimeIsOver(rowData, null, EDIT_DURATION_MIN, 'check-if-rfa-button-ready');\r\n      //    };\r\n\r\n      //    if (!isEditTimeOver && userSubmission === email && btn === 'Open Form') {\r\n      //       return message.warn('3D model is uploading, please wait ...');\r\n      //    };\r\n\r\n      //    if (isEditTimeOver || userSubmission === email) {\r\n      //       if (btn === 'Open Drawing File') {\r\n      //          const dwgLink = getInfoValueFromRfaData(rfaData, 'submission', 'drawing');\r\n      //          const res = await Axios.get('/api/issue/get-public-url', { params: { key: dwgLink, expire: 1000 } });\r\n      //          window.open(res.data);\r\n      //       } else if (btn === 'Open Form') {\r\n      //          const dwgLink = getInfoValueFromRfaData(rfaData, 'submission', 'dwfxLink');\r\n      //          if (dwgLink) {\r\n      //             window.open(dwgLink);\r\n      //          } else {\r\n      //             message.info('There is no 3D model attached!');\r\n      //          };\r\n\r\n      //       } else if (btn === 'Edit') {\r\n      //          const typeBtn = rowData['RFA Ref'] !== rowData.rfaNumber ? 'form-resubmit-RFA' : 'form-submit-RFA';\r\n      //          if (isUserCanSubmitRfaBothSide) {\r\n\r\n      //          } else {\r\n\r\n      //             buttonPanelFunction(typeBtn);\r\n      //             getSheetRows({\r\n      //                ...stateRow,\r\n      //                currentRfaToAddNewOrReplyOrEdit: {\r\n      //                   currentRfaNumber: rowData.rfaNumber,\r\n      //                   currentRfaRef: rowData['RFA Ref'],\r\n      //                   currentRfaData: rfaData,\r\n      //                   formRfaType: typeBtn,\r\n      //                   isFormEditting: true\r\n      //                },\r\n      //             });\r\n      //          };\r\n      //       };\r\n      //    } else {\r\n      //       return message.warn('Woh Hup is submitting this RFA, please wait ...');\r\n      //    };\r\n      // } catch (err) {\r\n      //    console.log(err);\r\n      // };\r\n   };\r\n\r\n\r\n\r\n\r\n   // roleTradeCompany.role === 'Consultant' ? 'reply' : roleTradeCompany.role === 'Document Controller' ? 'submission' : '',\r\n\r\n   const checkIfEditBtnShown = (header) => {\r\n\r\n      // if (header === 'RFA Ref' && (roleTradeCompany.role === 'Document Controller' || isUserCanSubmitRfaBothSide)) {\r\n\r\n      //    const userSubmission = getInfoValueFromRfaData(rowData, 'submission', 'user');\r\n      //    const isEditTimeOver = checkIfEditTimeIsOver(rowData, null, EDIT_DURATION_MIN, 'check-if-rfa-button-ready');\r\n      //    if (!isEditTimeOver && userSubmission === email) {\r\n      //       setIsEditButtonShownInCell(true);\r\n      //    } else {\r\n      //       setIsEditButtonShownInCell(false);\r\n      //    };\r\n\r\n      // } else if (\r\n      //    (isColumnWithReplyData(column.key) || isColumnConsultant(column.key) || column.key.includes('Version ')) &&\r\n      //    (roleTradeCompany.role === 'Consultant' || isUserCanSubmitRfaBothSide)\r\n      // ) {\r\n      //    const userReply = getInfoValueFromRfaData(rowData, 'reply', 'user', replyCompany);\r\n      //    const isEditTimeOver = checkIfEditTimeIsOver(rowData, replyCompany, EDIT_DURATION_MIN, 'check-if-status-button-ready');\r\n      //    if (!isEditTimeOver && userReply === email) {\r\n      //       setIsEditButtonShownInCell(true);\r\n      //    } else {\r\n      //       setIsEditButtonShownInCell(false);\r\n      //    };\r\n      // } else {\r\n      //    setIsEditButtonShownInCell(false);\r\n      // };\r\n   };\r\n\r\n\r\n\r\n\r\n   const applyChooseConsultantToReplyForAdminOnly = (consultantToReply) => {\r\n      // setModalPickConsultantForAdmin(false);\r\n      // buttonPanelFunction('form-reply-RFA');\r\n      // getSheetRows({\r\n      //    ...stateRow,\r\n      //    currentRfaToAddNewOrReplyOrEdit: {\r\n      //       currentRfaNumber: rowData.rfaNumber,\r\n      //       currentRfaRef: rfaRefText,\r\n      //       currentRfaData: rfaData,\r\n      //       formRfaType: 'form-reply-RFA',\r\n      //       isFormEditting: false,\r\n\r\n      //       isAdminAction: true,\r\n      //       isAdminActionWithNoEmailSent,\r\n      //       adminActionConsultantToReply: consultantToReply\r\n      //    },\r\n      // });\r\n   };\r\n\r\n   const applyResubmitForAdminOnly = (isNoEmailSent) => {\r\n      // buttonPanelFunction('form-resubmit-RFA');\r\n      // getSheetRows({\r\n      //    ...stateRow,\r\n      //    currentRfaToAddNewOrReplyOrEdit: {\r\n      //       currentRfaNumber: rowData.rfaNumber,\r\n      //       currentRfaRef: rfaRefText,\r\n      //       currentRfaData: rfaData,\r\n      //       formRfaType: 'form-resubmit-RFA',\r\n      //       isFormEditting: false,\r\n\r\n      //       isAdminAction: true,\r\n      //       isAdminActionWithNoEmailSent: isNoEmailSent,\r\n      //    },\r\n      // });\r\n   };\r\n\r\n\r\n\r\n\r\n   // const additionalBtnToEdit = (isEditButtonShownInCell && pageSheetTypeName !== 'page-spreadsheet') ? ['Edit'] : [];\r\n   // const additionalBtn3DModel = is3dModelAttached ? ['Open Form'] : [];\r\n\r\n   // let arrayButtonReplyAndResubmit = [];\r\n   // if (isUserCanSubmitRfaBothSide) {\r\n   //    if (thereIsDrawingWithNoRfaRef) {\r\n   //       arrayButtonReplyAndResubmit = [...arrayButtonReplyAndResubmit, 'plus-square'];\r\n   //    };\r\n   //    if (thereIsDrawingWithNoReplyAndConsultantAllowedReply) {\r\n   //       arrayButtonReplyAndResubmit = [...arrayButtonReplyAndResubmit, 'edit'];\r\n   //    };\r\n   // } else {\r\n   //    if (thereIsDrawingWithNoReplyAndConsultantAllowedReply && roleTradeCompany.role === 'Consultant') {\r\n   //       arrayButtonReplyAndResubmit = ['edit'];\r\n   //    } else if (thereIsDrawingWithNoRfaRef && roleTradeCompany.role === 'Document Controller') {\r\n   //       arrayButtonReplyAndResubmit = ['plus-square'];\r\n   //    };\r\n   // };\r\n\r\n\r\n   const additionalBtnToEdit = [];\r\n\r\n\r\n   return (\r\n      <div\r\n         style={{\r\n            width: '100%', height: '100%',\r\n            position: 'relative', padding: 5, color: 'black',\r\n            // background: (column.key === 'Due Date' && overdueCount < 0)\r\n            //    ? '#FFEBCD'\r\n            //    : (colorTextRow[replyStatus] || 'transparent'),\r\n            // fontWeight: (column.key === 'RFA Ref' && rowData.treeLevel) && 'bold'\r\n         }}\r\n         onMouseOver={() => {\r\n            // if (\r\n            //    !rowData.treeLevel &&\r\n            //    (isColumnWithReplyData(column.key) || isColumnConsultant(column.key) || column.key === 'RFA Ref')\r\n            // ) {\r\n            //    checkIfEditBtnShown(column.key);\r\n            // };\r\n            if (!btnShown) setBtnShown(true);\r\n         }}\r\n         onMouseLeave={() => {\r\n            if (btnShown) setBtnShown(false);\r\n         }}\r\n      >\r\n         {(rowData.treeLevel === 3 && arrayExpandedColumn.indexOf(column.key) !== -1) ? (\r\n            <div style={{ display: 'flex', position: 'relative', color: 'black', fontWeight: 'bold' }}>\r\n               <span style={{ marginRight: 5 }}>{rowData['rfamRef']}</span>\r\n               <div style={{ display: 'flex' }}>\r\n                  {[...rowData['btn'].sort(), 'All'].map(btn => (\r\n                     <ButtonForm\r\n                        key={btn}\r\n                        onClick={() => onClickRefDrawing(btn)}\r\n                        isActive={btn === activeBtn}\r\n                     >{btn}</ButtonForm>\r\n                  ))}\r\n               </div>\r\n\r\n               {/* {arrayButtonReplyAndResubmit.map(button => (\r\n                  <Tooltip key={button} placement='top' title={button === 'edit' ? 'Reply To This RFA' : button === 'plus-square' ? 'Add New RFA For This RFA' : null} >\r\n                     <Icon\r\n                        type={button}\r\n                        style={{\r\n                           fontSize: 17,\r\n                           transform: 'translateY(1.5px)',\r\n                           position: 'absolute',\r\n                           right: arrayButtonReplyAndResubmit.length === 2 ? (button === 'edit' ? 30 : 3) : 3,\r\n                           top: 0\r\n                        }}\r\n                        onClick={() => onClickSubmitOrReplyRFA(button === 'edit' ? 'form-reply-RFA' : button === 'plus-square' ? 'form-resubmit-RFA' : null)}\r\n                     />\r\n                  </Tooltip>\r\n               ))} */}\r\n            </div>\r\n         ) : (rowData.treeLevel >= 2 && arrayExpandedColumn.indexOf(column.key) !== -1) ? (\r\n            <div style={{ color: 'black', fontWeight: 'bold' }}>{rowData.title}</div>\r\n         )\r\n            : (!rowData.treeLevel) ? (\r\n               <div>{getCellFormData(rowData, column.key)}</div>\r\n            ) : ''}\r\n\r\n\r\n\r\n         {(btnShown && !rowData.treeLevel && isColumnSubmitOrReply(column.key) === 'column-submit') && (\r\n               <>\r\n                  {['Open Drawing File', 'Open Form', ...additionalBtnToEdit].map(btn => (\r\n                     <Tooltip key={btn} placement='top' title={btn}>\r\n                        <div\r\n                           style={{\r\n                              cursor: 'pointer', position: 'absolute',\r\n                              right: btn === 'Open Drawing File' ? 5 : btn === 'Open Form' ? 27 : 51,\r\n                              top: 5, height: 17, width: 17,\r\n                           }}\r\n                           onMouseDown={() => onMouseDownCellButtonRfaRef(btn)}\r\n                        >\r\n                           <Icon\r\n                              type={btn === 'Open Drawing File' ? 'file' : btn === 'Open Form' ? 'shake' : 'edit'}\r\n                              style={{ color: 'black', fontSize: 15 }}\r\n                           />\r\n                        </div>\r\n                     </Tooltip>\r\n                  ))}\r\n               </>\r\n            )\r\n         }\r\n\r\n\r\n      </div>\r\n   );\r\n};\r\n\r\nexport default CellForm;\r\n\r\n\r\n\r\nconst ButtonForm = styled.div`\r\n   &:hover {\r\n      cursor: pointer;\r\n      /* background: yellow; */\r\n   };\r\n   border-radius: 0;\r\n   border: 1px solid grey;\r\n   background: ${props => props.isActive ? colorType.yellow : 'white'};\r\n   min-width: 24px;\r\n   margin-right: 3px;\r\n   \r\n   text-align: center;\r\n   transition: 0.3s;\r\n`;\r\n\r\nconst ModalStyledSetting = styled(Modal)`\r\n   .ant-modal-content {\r\n      border-radius: 0;\r\n   }\r\n   .ant-modal-close {\r\n      display: none;\r\n   }\r\n   .ant-modal-header {\r\n      padding: 10px;\r\n   }\r\n   .ant-modal-title {\r\n        padding-left: 10px;\r\n        font-size: 20px;\r\n        font-weight: bold;\r\n   }\r\n   .ant-modal-body {\r\n      padding: 20px;\r\n      display: flex;\r\n      justify-content: center;\r\n   }\r\n`;\r\n\r\n\r\n\r\nconst cloneRefData = (row) => {\r\n   let obj = {};\r\n   for (const key in row) {\r\n      if (\r\n         key.includes('reply') ||\r\n         key.includes('submission') ||\r\n         key === 'rfamRef' ||\r\n         key === 'revision'\r\n      ) {\r\n         obj[key] = row[key];\r\n      };\r\n   };\r\n   return obj;\r\n};\r\n\r\n\r\n\r\nconst checkIfEditTimeIsOver = (rowData, replyCompany, editTimeAllowed, type) => {\r\n   let result = false;\r\n   let duration;\r\n\r\n   if (type === 'consultant-check-if-rfa-ready-to-reply' || type === 'check-if-rfa-button-ready') {\r\n      const dateSubmission = getInfoValueFromRfaData(rowData, 'submission', 'date');\r\n      if (dateSubmission) {\r\n         duration = moment.duration(moment(new Date()).diff(dateSubmission)).asMinutes();\r\n      } else {\r\n         return true;\r\n      };\r\n   } else if (type === 'check-if-status-button-ready') {\r\n      const dateReply = getInfoValueFromRfaData(rowData, 'reply', 'date', replyCompany);\r\n\r\n      if (typeof dateReply === 'string' && dateReply.length > 8) {\r\n         duration = moment.duration(moment(new Date()).diff(dateReply)).asMinutes();\r\n      } else if (typeof dateReply === 'string' && dateReply.length === 8) {\r\n         return true;\r\n      };\r\n   } else if (type === 'wohhup-check-if-rfa-ready-to-resubmit') {\r\n      const consultantLead = getInfoValueFromRfaData(rowData, 'submission', 'consultantMustReply')[0];\r\n      const dateConsultantLeadReply = getInfoValueFromRfaData(rowData, 'reply', 'date', consultantLead);\r\n      if (typeof dateConsultantLeadReply === 'string' && dateConsultantLeadReply.length > 8) {\r\n         duration = moment.duration(moment(new Date()).diff(dateConsultantLeadReply)).asMinutes();\r\n\r\n      } else if (typeof dateConsultantLeadReply === 'string' && dateConsultantLeadReply.length === 8) {\r\n         return true;\r\n      };\r\n   };\r\n\r\n   if (duration && duration > editTimeAllowed) {\r\n      return true;\r\n   };\r\n   return result;\r\n};\r\n\r\n\r\n\r\nconst isColumnSubmitOrReply = (header) => {\r\n   if (header === 'RFAM Ref') return 'column-submit';\r\n};\r\n\r\nconst getCellFormData = (row, header) => {\r\n\r\n   if (header === 'RFAM Ref') return row['rfamRef'] + row.revision;\r\n   if (header === 'Description') return getInfoValueFromRfaDataForm(row, 'submission', 'rfam',  'description');\r\n   if (header === 'Requested By') return getInfoValueFromRfaDataForm(row, 'submission', 'rfam',  'requestedBy');\r\n\r\n   return 'xxx';\r\n};\r\n\r\nexport const getInfoValueFromRfaDataForm = (obj, typeSubmit, typeForm, info, company = '') => {\r\n   for (const key in obj) {\r\n      if (key.includes(`${typeSubmit}-${typeForm}-${info}-${company}`)) {\r\n         return obj[key];\r\n      };\r\n   };\r\n};\r\nconst getInfoKeyFromRfaDataForm = (obj, typeSubmit, typeForm, info, company = '') => {\r\n   for (const key in obj) {\r\n      if (key.includes(`${typeSubmit}-${typeForm}-${info}-${company}`)) {\r\n         return key;\r\n      };\r\n   };\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst FormPickConsultantToReplyForAdmin = ({ applyChooseConsultantToReplyForAdminOnly, onClickCancelModal, listConsultants }) => {\r\n\r\n\r\n   const [list, setList] = useState(listConsultants.map(cst => ({\r\n      id: mongoObjectId(),\r\n      header: cst,\r\n      mode: 'hidden'\r\n   })));\r\n\r\n   const onClickApply = () => {\r\n      const consultantToReply = list.find(x => x.mode === 'shown');\r\n      if (!consultantToReply) {\r\n         return message.warn('Please choose consultant to reply!');\r\n      };\r\n      applyChooseConsultantToReplyForAdminOnly(consultantToReply.header);\r\n   };\r\n\r\n   const setMode = (item) => {\r\n      list.forEach(tag => {\r\n         if (tag.id === item.id) {\r\n            tag.mode = 'shown';\r\n         } else {\r\n            tag.mode = 'hidden';\r\n         };\r\n      });\r\n      setList([...list]);\r\n   };\r\n\r\n\r\n\r\n   return (\r\n      <div style={{ width: '100%', height: '100%' }}>\r\n         <PanelStyled>\r\n            <div style={{ fontSize: 11, paddingLeft: 20 }}>Click to select consultant to reply.</div>\r\n            <div style={{ width: '100%', paddingTop: 20 }}>\r\n               {list.map((tag, i) => (\r\n                  <ButtonColumnTag\r\n                     key={i}\r\n                     tag={tag}\r\n                     setMode={setMode}\r\n                     actionType='admin-pick-consultant-to-reply'\r\n                  />\r\n               ))}\r\n\r\n            </div>\r\n\r\n         </PanelStyled>\r\n         <div style={{ marginTop: 20, padding: 10, display: 'flex', flexDirection: 'row-reverse' }}>\r\n            <ButtonGroupComp\r\n               onClickCancel={onClickCancelModal}\r\n               onClickApply={onClickApply}\r\n            />\r\n         </div>\r\n\r\n      </div>\r\n   );\r\n};\r\n\r\nconst PanelStyled = styled.div`\r\n   max-height: 60vh;\r\n   width: 100%;\r\n   /* overflow-y: scroll;\r\n   overflow-x: hidden; */\r\n   border-bottom: 1px solid ${colorType.grey4};\r\n`;\r\n\r\n\r\n\r\n\r\n","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\components\\pages\\DMSApp\\SpreadSheetLayout\\layouts\\generalComponents\\PanelAddNewMultiForm.js",["518","519","520","521","522","523","524","525","526","527","528","529","530","531","532","533","534","535","536","537","538","539"],{"ruleId":"540","replacedBy":"541"},{"ruleId":"542","replacedBy":"543"},{"ruleId":"544","severity":1,"message":"545","line":202,"column":85,"nodeType":"546","messageId":"547","endLine":202,"endColumn":87},{"ruleId":"544","severity":1,"message":"545","line":204,"column":53,"nodeType":"546","messageId":"547","endLine":204,"endColumn":55},{"ruleId":"544","severity":1,"message":"545","line":206,"column":53,"nodeType":"546","messageId":"547","endLine":206,"endColumn":55},{"ruleId":"544","severity":1,"message":"545","line":208,"column":54,"nodeType":"546","messageId":"547","endLine":208,"endColumn":56},{"ruleId":"544","severity":1,"message":"545","line":210,"column":52,"nodeType":"546","messageId":"547","endLine":210,"endColumn":54},{"ruleId":"544","severity":1,"message":"548","line":210,"column":87,"nodeType":"546","messageId":"547","endLine":210,"endColumn":89},{"ruleId":"549","severity":1,"message":"550","line":65,"column":7,"nodeType":"551","endLine":65,"endColumn":9,"suggestions":"552"},{"ruleId":"549","severity":1,"message":"553","line":72,"column":7,"nodeType":"551","endLine":72,"endColumn":26,"suggestions":"554"},{"ruleId":"549","severity":1,"message":"555","line":106,"column":7,"nodeType":"551","endLine":106,"endColumn":9,"suggestions":"556"},{"ruleId":"557","severity":1,"message":"558","line":226,"column":45,"nodeType":"559","messageId":"560","endLine":226,"endColumn":67},{"ruleId":"557","severity":1,"message":"561","line":233,"column":10,"nodeType":"559","messageId":"560","endLine":233,"endColumn":28},{"ruleId":"562","severity":1,"message":"563","line":813,"column":19,"nodeType":"564","messageId":"565","endLine":813,"endColumn":21},{"ruleId":"557","severity":1,"message":"566","line":902,"column":7,"nodeType":"559","messageId":"560","endLine":902,"endColumn":17},{"ruleId":"562","severity":1,"message":"563","line":1146,"column":24,"nodeType":"564","messageId":"565","endLine":1146,"endColumn":26},{"ruleId":"557","severity":1,"message":"567","line":66,"column":21,"nodeType":"559","messageId":"560","endLine":66,"endColumn":26},{"ruleId":"568","severity":1,"message":"569","line":167,"column":22,"nodeType":"570","endLine":167,"endColumn":40},{"ruleId":"544","severity":1,"message":"548","line":79,"column":23,"nodeType":"546","messageId":"547","endLine":79,"endColumn":25},{"ruleId":"544","severity":1,"message":"548","line":89,"column":23,"nodeType":"546","messageId":"547","endLine":89,"endColumn":25},{"ruleId":"544","severity":1,"message":"548","line":99,"column":23,"nodeType":"546","messageId":"547","endLine":99,"endColumn":25},{"ruleId":"544","severity":1,"message":"548","line":119,"column":28,"nodeType":"546","messageId":"547","endLine":119,"endColumn":30},{"ruleId":"544","severity":1,"message":"548","line":120,"column":18,"nodeType":"546","messageId":"547","endLine":120,"endColumn":20},{"ruleId":"544","severity":1,"message":"548","line":121,"column":21,"nodeType":"546","messageId":"547","endLine":121,"endColumn":23},{"ruleId":"544","severity":1,"message":"548","line":138,"column":28,"nodeType":"546","messageId":"547","endLine":138,"endColumn":30},{"ruleId":"544","severity":1,"message":"548","line":139,"column":18,"nodeType":"546","messageId":"547","endLine":139,"endColumn":20},{"ruleId":"544","severity":1,"message":"548","line":140,"column":21,"nodeType":"546","messageId":"547","endLine":140,"endColumn":23},{"ruleId":"557","severity":1,"message":"571","line":179,"column":13,"nodeType":"559","messageId":"560","endLine":179,"endColumn":19},{"ruleId":"544","severity":1,"message":"548","line":179,"column":28,"nodeType":"546","messageId":"547","endLine":179,"endColumn":30},{"ruleId":"544","severity":1,"message":"548","line":180,"column":18,"nodeType":"546","messageId":"547","endLine":180,"endColumn":20},{"ruleId":"544","severity":1,"message":"548","line":181,"column":21,"nodeType":"546","messageId":"547","endLine":181,"endColumn":23},{"ruleId":"557","severity":1,"message":"572","line":10,"column":46,"nodeType":"559","messageId":"560","endLine":10,"endColumn":53},{"ruleId":"557","severity":1,"message":"573","line":15,"column":19,"nodeType":"559","messageId":"560","endLine":15,"endColumn":31},{"ruleId":"549","severity":1,"message":"574","line":163,"column":7,"nodeType":"551","endLine":163,"endColumn":29,"suggestions":"575"},{"ruleId":"549","severity":1,"message":"576","line":181,"column":7,"nodeType":"551","endLine":181,"endColumn":36,"suggestions":"577"},{"ruleId":"549","severity":1,"message":"578","line":193,"column":7,"nodeType":"551","endLine":193,"endColumn":19,"suggestions":"579"},{"ruleId":"557","severity":1,"message":"580","line":11,"column":20,"nodeType":"559","messageId":"560","endLine":11,"endColumn":29},{"ruleId":"581","severity":1,"message":"582","line":231,"column":44,"nodeType":"546","messageId":"583","endLine":231,"endColumn":45},{"ruleId":"557","severity":1,"message":"584","line":5,"column":10,"nodeType":"559","messageId":"560","endLine":5,"endColumn":34},{"ruleId":"585","severity":1,"message":"586","line":328,"column":58,"nodeType":"564","messageId":"587","endLine":328,"endColumn":141},{"ruleId":"585","severity":1,"message":"586","line":373,"column":67,"nodeType":"564","messageId":"587","endLine":373,"endColumn":150},{"ruleId":"585","severity":1,"message":"588","line":883,"column":44,"nodeType":"564","messageId":"587","endLine":883,"endColumn":93},{"ruleId":"544","severity":1,"message":"548","line":883,"column":73,"nodeType":"546","messageId":"547","endLine":883,"endColumn":75},{"ruleId":"585","severity":1,"message":"588","line":901,"column":44,"nodeType":"564","messageId":"587","endLine":901,"endColumn":93},{"ruleId":"544","severity":1,"message":"548","line":901,"column":73,"nodeType":"546","messageId":"547","endLine":901,"endColumn":75},{"ruleId":"557","severity":1,"message":"589","line":908,"column":7,"nodeType":"559","messageId":"560","endLine":908,"endColumn":38},{"ruleId":"585","severity":1,"message":"588","line":919,"column":44,"nodeType":"564","messageId":"587","endLine":919,"endColumn":93},{"ruleId":"544","severity":1,"message":"548","line":919,"column":73,"nodeType":"546","messageId":"547","endLine":919,"endColumn":75},{"ruleId":"585","severity":1,"message":"588","line":940,"column":44,"nodeType":"564","messageId":"587","endLine":940,"endColumn":93},{"ruleId":"544","severity":1,"message":"548","line":940,"column":73,"nodeType":"546","messageId":"547","endLine":940,"endColumn":75},{"ruleId":"544","severity":1,"message":"545","line":949,"column":47,"nodeType":"546","messageId":"547","endLine":949,"endColumn":49},{"ruleId":"540","replacedBy":"590"},{"ruleId":"542","replacedBy":"591"},{"ruleId":"557","severity":1,"message":"592","line":40,"column":55,"nodeType":"559","messageId":"560","endLine":40,"endColumn":62},{"ruleId":"549","severity":1,"message":"574","line":236,"column":7,"nodeType":"551","endLine":236,"endColumn":29,"suggestions":"593"},{"ruleId":"549","severity":1,"message":"576","line":253,"column":7,"nodeType":"551","endLine":253,"endColumn":36,"suggestions":"594"},{"ruleId":"549","severity":1,"message":"578","line":265,"column":7,"nodeType":"551","endLine":265,"endColumn":19,"suggestions":"595"},{"ruleId":"581","severity":1,"message":"582","line":406,"column":48,"nodeType":"546","messageId":"583","endLine":406,"endColumn":49},{"ruleId":"557","severity":1,"message":"596","line":32,"column":7,"nodeType":"559","messageId":"560","endLine":32,"endColumn":34},{"ruleId":"585","severity":1,"message":"586","line":374,"column":64,"nodeType":"564","messageId":"587","endLine":374,"endColumn":147},{"ruleId":"557","severity":1,"message":"597","line":482,"column":59,"nodeType":"559","messageId":"560","endLine":482,"endColumn":82},{"ruleId":"562","severity":1,"message":"563","line":648,"column":40,"nodeType":"564","messageId":"565","endLine":648,"endColumn":42},{"ruleId":"562","severity":1,"message":"563","line":771,"column":29,"nodeType":"564","messageId":"565","endLine":771,"endColumn":31},{"ruleId":"557","severity":1,"message":"598","line":869,"column":54,"nodeType":"559","messageId":"560","endLine":869,"endColumn":76},{"ruleId":"557","severity":1,"message":"599","line":876,"column":119,"nodeType":"559","messageId":"560","endLine":876,"endColumn":128},{"ruleId":"557","severity":1,"message":"600","line":1017,"column":16,"nodeType":"559","messageId":"560","endLine":1017,"endColumn":34},{"ruleId":"557","severity":1,"message":"601","line":1018,"column":16,"nodeType":"559","messageId":"560","endLine":1018,"endColumn":36},{"ruleId":"557","severity":1,"message":"602","line":1213,"column":19,"nodeType":"559","messageId":"560","endLine":1213,"endColumn":44},{"ruleId":"585","severity":1,"message":"588","line":1555,"column":44,"nodeType":"564","messageId":"587","endLine":1555,"endColumn":93},{"ruleId":"544","severity":1,"message":"548","line":1555,"column":73,"nodeType":"546","messageId":"547","endLine":1555,"endColumn":75},{"ruleId":"585","severity":1,"message":"588","line":1573,"column":44,"nodeType":"564","messageId":"587","endLine":1573,"endColumn":93},{"ruleId":"544","severity":1,"message":"548","line":1573,"column":73,"nodeType":"546","messageId":"547","endLine":1573,"endColumn":75},{"ruleId":"585","severity":1,"message":"588","line":1591,"column":44,"nodeType":"564","messageId":"587","endLine":1591,"endColumn":93},{"ruleId":"544","severity":1,"message":"548","line":1591,"column":73,"nodeType":"546","messageId":"547","endLine":1591,"endColumn":75},{"ruleId":"585","severity":1,"message":"588","line":1612,"column":44,"nodeType":"564","messageId":"587","endLine":1612,"endColumn":93},{"ruleId":"544","severity":1,"message":"548","line":1612,"column":73,"nodeType":"546","messageId":"547","endLine":1612,"endColumn":75},{"ruleId":"544","severity":1,"message":"545","line":1621,"column":47,"nodeType":"546","messageId":"547","endLine":1621,"endColumn":49},{"ruleId":"562","severity":1,"message":"603","line":1634,"column":33,"nodeType":"564","messageId":"604","endLine":1634,"endColumn":35},{"ruleId":"562","severity":1,"message":"605","line":1762,"column":30,"nodeType":"564","messageId":"604","endLine":1762,"endColumn":32},{"ruleId":"557","severity":1,"message":"606","line":8,"column":35,"nodeType":"559","messageId":"560","endLine":8,"endColumn":43},{"ruleId":"557","severity":1,"message":"607","line":14,"column":38,"nodeType":"559","messageId":"560","endLine":14,"endColumn":48},{"ruleId":"585","severity":1,"message":"588","line":74,"column":44,"nodeType":"564","messageId":"587","endLine":74,"endColumn":91},{"ruleId":"544","severity":1,"message":"548","line":74,"column":70,"nodeType":"546","messageId":"547","endLine":74,"endColumn":72},{"ruleId":"544","severity":1,"message":"548","line":167,"column":30,"nodeType":"546","messageId":"547","endLine":167,"endColumn":32},{"ruleId":"544","severity":1,"message":"548","line":196,"column":16,"nodeType":"546","messageId":"547","endLine":196,"endColumn":18},{"ruleId":"608","severity":1,"message":"609","line":4,"column":1,"nodeType":"610","endLine":23,"endColumn":3},{"ruleId":"557","severity":1,"message":"611","line":5,"column":9,"nodeType":"559","messageId":"560","endLine":5,"endColumn":14},{"ruleId":"557","severity":1,"message":"612","line":5,"column":16,"nodeType":"559","messageId":"560","endLine":5,"endColumn":22},{"ruleId":"549","severity":1,"message":"613","line":29,"column":7,"nodeType":"551","endLine":29,"endColumn":17,"suggestions":"614"},{"ruleId":"549","severity":1,"message":"615","line":96,"column":7,"nodeType":"551","endLine":96,"endColumn":9,"suggestions":"616"},{"ruleId":"557","severity":1,"message":"617","line":18,"column":19,"nodeType":"559","messageId":"560","endLine":18,"endColumn":27},{"ruleId":"549","severity":1,"message":"618","line":46,"column":7,"nodeType":"551","endLine":46,"endColumn":9,"suggestions":"619"},{"ruleId":"549","severity":1,"message":"620","line":30,"column":7,"nodeType":"551","endLine":30,"endColumn":9,"suggestions":"621"},{"ruleId":"544","severity":1,"message":"548","line":49,"column":61,"nodeType":"546","messageId":"547","endLine":49,"endColumn":63},{"ruleId":"557","severity":1,"message":"622","line":52,"column":11,"nodeType":"559","messageId":"560","endLine":52,"endColumn":18},{"ruleId":"549","severity":1,"message":"623","line":136,"column":7,"nodeType":"551","endLine":136,"endColumn":9,"suggestions":"624"},{"ruleId":"568","severity":1,"message":"569","line":27,"column":29,"nodeType":"570","endLine":30,"endColumn":32},{"ruleId":"549","severity":1,"message":"625","line":194,"column":7,"nodeType":"551","endLine":194,"endColumn":15,"suggestions":"626"},{"ruleId":"557","severity":1,"message":"627","line":45,"column":13,"nodeType":"559","messageId":"560","endLine":45,"endColumn":22},{"ruleId":"557","severity":1,"message":"628","line":45,"column":24,"nodeType":"559","messageId":"560","endLine":45,"endColumn":29},{"ruleId":"549","severity":1,"message":"629","line":128,"column":8,"nodeType":"551","endLine":128,"endColumn":10,"suggestions":"630"},{"ruleId":"568","severity":1,"message":"569","line":216,"column":29,"nodeType":"570","endLine":216,"endColumn":68},{"ruleId":"568","severity":1,"message":"569","line":222,"column":29,"nodeType":"570","endLine":222,"endColumn":68},{"ruleId":"568","severity":1,"message":"569","line":229,"column":29,"nodeType":"570","endLine":229,"endColumn":68},{"ruleId":"568","severity":1,"message":"569","line":235,"column":29,"nodeType":"570","endLine":235,"endColumn":69},{"ruleId":"568","severity":1,"message":"569","line":241,"column":29,"nodeType":"570","endLine":241,"endColumn":69},{"ruleId":"557","severity":1,"message":"631","line":11,"column":28,"nodeType":"559","messageId":"560","endLine":11,"endColumn":33},{"ruleId":"557","severity":1,"message":"617","line":17,"column":20,"nodeType":"559","messageId":"560","endLine":17,"endColumn":28},{"ruleId":"557","severity":1,"message":"627","line":19,"column":13,"nodeType":"559","messageId":"560","endLine":19,"endColumn":22},{"ruleId":"557","severity":1,"message":"628","line":19,"column":24,"nodeType":"559","messageId":"560","endLine":19,"endColumn":29},{"ruleId":"557","severity":1,"message":"632","line":21,"column":11,"nodeType":"559","messageId":"560","endLine":21,"endColumn":20},{"ruleId":"557","severity":1,"message":"633","line":24,"column":21,"nodeType":"559","messageId":"560","endLine":24,"endColumn":31},{"ruleId":"557","severity":1,"message":"627","line":17,"column":13,"nodeType":"559","messageId":"560","endLine":17,"endColumn":22},{"ruleId":"557","severity":1,"message":"628","line":17,"column":24,"nodeType":"559","messageId":"560","endLine":17,"endColumn":29},{"ruleId":"557","severity":1,"message":"634","line":35,"column":25,"nodeType":"559","messageId":"560","endLine":35,"endColumn":39},{"ruleId":"544","severity":1,"message":"548","line":52,"column":64,"nodeType":"546","messageId":"547","endLine":52,"endColumn":66},{"ruleId":"635","severity":1,"message":"636","line":34,"column":13,"nodeType":"637","messageId":"547","endLine":34,"endColumn":19},{"ruleId":"557","severity":1,"message":"627","line":12,"column":10,"nodeType":"559","messageId":"560","endLine":12,"endColumn":19},{"ruleId":"549","severity":1,"message":"638","line":166,"column":7,"nodeType":"551","endLine":166,"endColumn":18,"suggestions":"639"},{"ruleId":"549","severity":1,"message":"640","line":210,"column":7,"nodeType":"551","endLine":210,"endColumn":9,"suggestions":"641"},{"ruleId":"557","severity":1,"message":"642","line":75,"column":32,"nodeType":"559","messageId":"560","endLine":75,"endColumn":36},{"ruleId":"557","severity":1,"message":"607","line":78,"column":63,"nodeType":"559","messageId":"560","endLine":78,"endColumn":73},{"ruleId":"549","severity":1,"message":"643","line":289,"column":7,"nodeType":"551","endLine":289,"endColumn":9,"suggestions":"644"},{"ruleId":"549","severity":1,"message":"645","line":318,"column":7,"nodeType":"551","endLine":318,"endColumn":37,"suggestions":"646"},{"ruleId":"549","severity":1,"message":"647","line":352,"column":7,"nodeType":"551","endLine":352,"endColumn":18,"suggestions":"648"},{"ruleId":"549","severity":1,"message":"649","line":369,"column":7,"nodeType":"551","endLine":369,"endColumn":17,"suggestions":"650"},{"ruleId":"651","severity":1,"message":"652","line":1189,"column":21,"nodeType":"653","messageId":"654","endLine":1189,"endColumn":23},{"ruleId":"651","severity":1,"message":"652","line":1189,"column":46,"nodeType":"653","messageId":"654","endLine":1189,"endColumn":48},{"ruleId":"651","severity":1,"message":"652","line":1221,"column":22,"nodeType":"653","messageId":"654","endLine":1221,"endColumn":24},{"ruleId":"651","severity":1,"message":"652","line":1221,"column":68,"nodeType":"653","messageId":"654","endLine":1221,"endColumn":70},{"ruleId":"549","severity":1,"message":"655","line":1301,"column":7,"nodeType":"551","endLine":1301,"endColumn":9,"suggestions":"656"},{"ruleId":"549","severity":1,"message":"657","line":58,"column":7,"nodeType":"551","endLine":58,"endColumn":21,"suggestions":"658"},{"ruleId":"557","severity":1,"message":"659","line":91,"column":26,"nodeType":"559","messageId":"560","endLine":91,"endColumn":33},{"ruleId":"549","severity":1,"message":"555","line":100,"column":7,"nodeType":"551","endLine":100,"endColumn":9,"suggestions":"660"},{"ruleId":"549","severity":1,"message":"661","line":573,"column":7,"nodeType":"551","endLine":573,"endColumn":9,"suggestions":"662"},{"ruleId":"562","severity":1,"message":"563","line":1235,"column":22,"nodeType":"564","messageId":"565","endLine":1235,"endColumn":24},{"ruleId":"663","severity":1,"message":"664","line":1411,"column":27,"nodeType":"665","messageId":"666","endLine":1411,"endColumn":28,"fix":"667"},{"ruleId":"562","severity":1,"message":"563","line":1740,"column":24,"nodeType":"564","messageId":"565","endLine":1740,"endColumn":26},{"ruleId":"557","severity":1,"message":"668","line":16,"column":21,"nodeType":"559","messageId":"560","endLine":16,"endColumn":29},{"ruleId":"557","severity":1,"message":"669","line":16,"column":39,"nodeType":"559","messageId":"560","endLine":16,"endColumn":58},{"ruleId":"557","severity":1,"message":"580","line":21,"column":12,"nodeType":"559","messageId":"560","endLine":21,"endColumn":21},{"ruleId":"557","severity":1,"message":"670","line":21,"column":23,"nodeType":"559","messageId":"560","endLine":21,"endColumn":42},{"ruleId":"557","severity":1,"message":"671","line":21,"column":44,"nodeType":"559","messageId":"560","endLine":21,"endColumn":57},{"ruleId":"557","severity":1,"message":"573","line":23,"column":12,"nodeType":"559","messageId":"560","endLine":23,"endColumn":24},{"ruleId":"557","severity":1,"message":"672","line":31,"column":11,"nodeType":"559","messageId":"560","endLine":31,"endColumn":18},{"ruleId":"557","severity":1,"message":"673","line":40,"column":16,"nodeType":"559","messageId":"560","endLine":40,"endColumn":31},{"ruleId":"549","severity":1,"message":"674","line":147,"column":7,"nodeType":"551","endLine":147,"endColumn":18,"suggestions":"675"},{"ruleId":"557","severity":1,"message":"676","line":152,"column":11,"nodeType":"559","messageId":"560","endLine":152,"endColumn":34},{"ruleId":"557","severity":1,"message":"677","line":152,"column":36,"nodeType":"559","messageId":"560","endLine":152,"endColumn":62},{"ruleId":"557","severity":1,"message":"678","line":153,"column":11,"nodeType":"559","messageId":"560","endLine":153,"endColumn":28},{"ruleId":"557","severity":1,"message":"679","line":153,"column":30,"nodeType":"559","messageId":"560","endLine":153,"endColumn":50},{"ruleId":"557","severity":1,"message":"680","line":228,"column":10,"nodeType":"559","messageId":"560","endLine":228,"endColumn":33},{"ruleId":"557","severity":1,"message":"681","line":263,"column":10,"nodeType":"559","messageId":"560","endLine":263,"endColumn":41},{"ruleId":"557","severity":1,"message":"682","line":384,"column":10,"nodeType":"559","messageId":"560","endLine":384,"endColumn":29},{"ruleId":"557","severity":1,"message":"683","line":415,"column":10,"nodeType":"559","messageId":"560","endLine":415,"endColumn":50},{"ruleId":"557","severity":1,"message":"684","line":434,"column":10,"nodeType":"559","messageId":"560","endLine":434,"endColumn":35},{"ruleId":"557","severity":1,"message":"685","line":585,"column":7,"nodeType":"559","messageId":"560","endLine":585,"endColumn":25},{"ruleId":"557","severity":1,"message":"686","line":626,"column":7,"nodeType":"559","messageId":"560","endLine":626,"endColumn":28},{"ruleId":"557","severity":1,"message":"687","line":684,"column":7,"nodeType":"559","messageId":"560","endLine":684,"endColumn":32},{"ruleId":"557","severity":1,"message":"688","line":699,"column":7,"nodeType":"559","messageId":"560","endLine":699,"endColumn":40},{"ruleId":"557","severity":1,"message":"689","line":35,"column":7,"nodeType":"559","messageId":"560","endLine":35,"endColumn":19},{"ruleId":"557","severity":1,"message":"690","line":59,"column":29,"nodeType":"559","messageId":"560","endLine":59,"endColumn":41},{"ruleId":"557","severity":1,"message":"642","line":62,"column":32,"nodeType":"559","messageId":"560","endLine":62,"endColumn":36},{"ruleId":"557","severity":1,"message":"691","line":62,"column":47,"nodeType":"559","messageId":"560","endLine":62,"endColumn":58},{"ruleId":"557","severity":1,"message":"692","line":62,"column":141,"nodeType":"559","messageId":"560","endLine":62,"endColumn":158},{"ruleId":"557","severity":1,"message":"572","line":65,"column":12,"nodeType":"559","messageId":"560","endLine":65,"endColumn":19},{"ruleId":"557","severity":1,"message":"622","line":65,"column":21,"nodeType":"559","messageId":"560","endLine":65,"endColumn":28},{"ruleId":"557","severity":1,"message":"693","line":65,"column":63,"nodeType":"559","messageId":"560","endLine":65,"endColumn":74},{"ruleId":"557","severity":1,"message":"694","line":65,"column":93,"nodeType":"559","messageId":"560","endLine":65,"endColumn":115},{"ruleId":"557","severity":1,"message":"695","line":68,"column":7,"nodeType":"559","messageId":"560","endLine":68,"endColumn":23},{"ruleId":"557","severity":1,"message":"696","line":68,"column":25,"nodeType":"559","messageId":"560","endLine":68,"endColumn":38},{"ruleId":"557","severity":1,"message":"697","line":68,"column":40,"nodeType":"559","messageId":"560","endLine":68,"endColumn":54},{"ruleId":"557","severity":1,"message":"698","line":69,"column":52,"nodeType":"559","messageId":"560","endLine":69,"endColumn":80},{"ruleId":"557","severity":1,"message":"699","line":95,"column":11,"nodeType":"559","messageId":"560","endLine":95,"endColumn":30},{"ruleId":"557","severity":1,"message":"700","line":103,"column":30,"nodeType":"559","messageId":"560","endLine":103,"endColumn":50},{"ruleId":"549","severity":1,"message":"701","line":270,"column":7,"nodeType":"551","endLine":270,"endColumn":9,"suggestions":"702"},{"ruleId":"663","severity":1,"message":"664","line":278,"column":39,"nodeType":"665","messageId":"666","endLine":278,"endColumn":40,"fix":"703"},{"ruleId":"549","severity":1,"message":"704","line":299,"column":7,"nodeType":"551","endLine":299,"endColumn":32,"suggestions":"705"},{"ruleId":"557","severity":1,"message":"706","line":1145,"column":7,"nodeType":"559","messageId":"560","endLine":1145,"endColumn":25},{"ruleId":"557","severity":1,"message":"707","line":1174,"column":7,"nodeType":"559","messageId":"560","endLine":1174,"endColumn":32},{"ruleId":"557","severity":1,"message":"708","line":1246,"column":7,"nodeType":"559","messageId":"560","endLine":1246,"endColumn":19},{"ruleId":"557","severity":1,"message":"709","line":1341,"column":7,"nodeType":"559","messageId":"560","endLine":1341,"endColumn":23},"no-native-reassign",["710"],"no-negated-in-lhs",["711"],"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","Expected '===' and instead saw '=='.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'projectsArray' and 'token'. Either include them or remove the dependency array. If 'setDataDB' needs the current value of 'projectsArray', you can also switch to useReducer instead of useState and read 'projectsArray' in the reducer.","ArrayExpression",["712"],"React Hook useEffect has missing dependencies: 'email', 'fetchDataOneSheet', 'getSheetRows', 'projectId', 'projectName', 'result', 'role', 'setUserData', and 'token'. Either include them or remove the dependency array.",["713"],"React Hook useEffect has a missing dependency: 'EventKeyDown'. Either include it or remove the dependency array.",["714"],"no-unused-vars","'OverwriteCellsModified' is assigned a value but never used.","Identifier","unusedVar","'adminFncServerInit' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'SpinStyled' is assigned a value but never used.","'value' is assigned a value but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","'addNos' is assigned a value but never used.","'rowsAll' is assigned a value but never used.","'stateProject' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'columnIndex', 'inputRender', 'isLockedColumn', 'isLockedRow', and 'rowIndex'. Either include them or remove the dependency array.",["715"],"React Hook useEffect has missing dependencies: 'cellEditDone', 'columnIndex', 'inputRender', 'isLockedColumn', 'isLockedRow', 'rowIndex', and 'stateCell.tempCopiedText'. Either include them or remove the dependency array.",["716"],"React Hook useEffect has a missing dependency: 'btnShown'. Either include it or remove the dependency array.",["717"],"'stateCell' is assigned a value but never used.","no-useless-concat","Unexpected string concatenation of literals.","unexpectedConcat","'convertCellTempToHistory' is defined but never used.","no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'arrayNodes'.","unsafeRefs","Function declared in a loop contains unsafe references to variable(s) 'preRow'.","'_processChainRowsSplitGroupFnc2' is assigned a value but never used.",["710"],["711"],"'company' is assigned a value but never used.",["718"],["719"],["720"],"'getFileNameFromLinkResponse' is assigned a value but never used.","'projectIsAppliedRfaView' is assigned a value but never used.","'dwgIdsToRollBackSubmit' is assigned a value but never used.","'companies' is assigned a value but never used.","'arrayKeySubmission' is assigned a value but never used.","'arrayKeyResubmission' is assigned a value but never used.","'rowIdsArrayToTriggerLater' is assigned a value but never used.","Array.prototype.map() expects a value to be returned at the end of arrow function.","expectedAtEnd","Array.prototype.sort() expects a value to be returned at the end of arrow function.","'rowIndex' is assigned a value but never used.","'rowsRfaAll' is assigned a value but never used.","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","'Group' is assigned a value but never used.","'Button' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'actionType', 'styleFrozen', 'styleHidden', and 'styleShown'. Either include them or remove the dependency array.",["721"],"React Hook useEffect has missing dependencies: 'headers', 'projectId', 'rowData', 'rowId', 'rowsVersionsToSave', and 'token'. Either include them or remove the dependency array.",["722"],"'stateRow' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'headerKey', 'projectId', 'rowId', and 'token'. Either include them or remove the dependency array.",["723"],"React Hook useEffect has missing dependencies: 'projectId' and 'token'. Either include them or remove the dependency array.",["724"],"'loading' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'activityRecorded', 'dwgName', 'dwgNumber', 'headers', 'projectId', 'revKey', 'stateRow.rowsAll', 'statusKey', and 'token'. Either include them or remove the dependency array.",["725"],"React Hook useEffect has missing dependencies: 'data.value', 'id', and 'setFilterSelect'. Either include them or remove the dependency array. If 'setFilterSelect' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["726"],"'projectId' is assigned a value but never used.","'token' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'activityRecorded', 'cellsHistoryInCurrentSheet', 'headers', and 'stateRow.rowsAll'. Either include them or remove the dependency array.",["727"],"'rowId' is assigned a value but never used.","'headerKey' is assigned a value but never used.","'setHistory' is assigned a value but never used.","'setHistoryData' is assigned a value but never used.","no-dupe-keys","Duplicate key 'border'.","ObjectExpression","React Hook useEffect has missing dependencies: 'column.key', 'companies', 'company', 'isUserCanSubmitRfaBothSide', 'pageSheetTypeName', 'roleTradeCompany.company', 'roleTradeCompany.role', 'rowData', and 'rowsRfaAllInit'. Either include them or remove the dependency array.",["728"],"React Hook useEffect has missing dependencies: 'column.key', 'projectIsAppliedRfaView', and 'rowData'. Either include them or remove the dependency array.",["729"],"'role' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'company', 'currentRfaData', 'currentRfaNumber', 'currentRfaRef', 'formRfaType', 'isFormEditting', and 'rowsRfaAllInit'. Either include them or remove the dependency array.",["730"],"React Hook useEffect has missing dependencies: 'drawingTypeTreeDmsView', 'formRfaType', 'isFormEditting', and 'rowsRfaAllInit'. Either include them or remove the dependency array.",["731"],"React Hook useEffect has missing dependencies: 'company' and 'dwgsToAddNewRFA'. Either include them or remove the dependency array.",["732"],"React Hook useEffect has missing dependencies: 'company', 'dwgsToAddNewRFA', and 'formRfaType'. Either include them or remove the dependency array.",["733"],"no-mixed-operators","Unexpected mix of '&&' and '||'.","LogicalExpression","unexpectedMixedOperator","React Hook useEffect has missing dependencies: 'isFirstSubmission', 'rowData.id', and 'setRevisionDwg'. Either include them or remove the dependency array. If 'setRevisionDwg' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["734"],"React Hook useEffect has missing dependencies: 'drawingTypeTreeDmsView', 'rowsAll', and 'tradeOfRfaForFirstTimeSubmit'. Either include them or remove the dependency array.",["735"],"'rowData' is assigned a value but never used.",["736"],"React Hook useEffect has missing dependencies: 'companies', 'company', 'email', 'fetchDataOneSheet', 'getSheetRows', 'isAdmin', 'isUserCanSubmitRfaBothSide', 'listGroup', 'listUser', 'pageSheetTypeName', 'projectId', 'projectIsAppliedRfaView', 'projectName', 'projectNameShort', 'role', 'roleTradeCompany', 'setUserData', and 'token'. Either include them or remove the dependency array.",["737"],"rest-spread-spacing","Unexpected whitespace after spread operator.","SpreadElement","unexpectedWhitespace",{"range":"738","text":"739"},"'cellData' is assigned a value but never used.","'buttonPanelFunction' is assigned a value but never used.","'getCellModifiedTemp' is assigned a value but never used.","'setCellActive' is assigned a value but never used.","'refText' is assigned a value but never used.","'allRowsChildren' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'arrayExpandedColumn', 'column.key', 'rowData', and 'rowsRfamAllInit'. Either include them or remove the dependency array.",["740"],"'isDrawingDetailTableDms' is assigned a value but never used.","'setIsDrawingDetailTableDms' is assigned a value but never used.","'is3dModelAttached' is assigned a value but never used.","'setIs3dModelAttached' is assigned a value but never used.","'onClickSubmitOrReplyRFA' is assigned a value but never used.","'onMouseDownCellButtonConsultant' is assigned a value but never used.","'checkIfEditBtnShown' is assigned a value but never used.","'applyChooseConsultantToReplyForAdminOnly' is assigned a value but never used.","'applyResubmitForAdminOnly' is assigned a value but never used.","'ModalStyledSetting' is assigned a value but never used.","'checkIfEditTimeIsOver' is assigned a value but never used.","'getInfoKeyFromRfaDataForm' is assigned a value but never used.","'FormPickConsultantToReplyForAdmin' is assigned a value but never used.","'versionArray' is assigned a value but never used.","'getSheetRows' is assigned a value but never used.","'companyUser' is assigned a value but never used.","'pageSheetTypeName' is assigned a value but never used.","'rowsRfamAll' is assigned a value but never used.","'drawingTypeTreeDmsView' is assigned a value but never used.","'currentRfaNumber' is assigned a value but never used.","'currentRfaRef' is assigned a value but never used.","'currentRfaData' is assigned a value but never used.","'adminActionConsultantToReply' is assigned a value but never used.","'tablePickDrawingRFA' is assigned a value but never used.","'setDwgsImportFromRFA' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'formRefType' and 'isFormEditting'. Either include them or remove the dependency array.",["741"],{"range":"742","text":"739"},"React Hook useEffect has missing dependencies: 'formRefType', 'isFormEditting', and 'rowsRfamAllInit'. Either include them or remove the dependency array.",["743"],"'ModalConfirmStyled' is assigned a value but never used.","'ModalPickDrawingRFAStyled' is assigned a value but never used.","'SelectStyled' is assigned a value but never used.","'convertTradeCode' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"744","fix":"745"},{"desc":"746","fix":"747"},{"desc":"748","fix":"749"},{"desc":"750","fix":"751"},{"desc":"752","fix":"753"},{"desc":"754","fix":"755"},{"desc":"750","fix":"756"},{"desc":"752","fix":"757"},{"desc":"754","fix":"758"},{"desc":"759","fix":"760"},{"desc":"761","fix":"762"},{"desc":"763","fix":"764"},{"desc":"765","fix":"766"},{"desc":"767","fix":"768"},{"desc":"769","fix":"770"},{"desc":"771","fix":"772"},{"desc":"773","fix":"774"},{"desc":"775","fix":"776"},{"desc":"777","fix":"778"},{"desc":"779","fix":"780"},{"desc":"781","fix":"782"},{"desc":"783","fix":"784"},{"desc":"785","fix":"786"},{"desc":"787","fix":"788"},{"desc":"748","fix":"789"},{"desc":"790","fix":"791"},[54948,54949],"",{"desc":"792","fix":"793"},{"desc":"794","fix":"795"},[12784,12785],{"desc":"796","fix":"797"},"Update the dependencies array to be: [projectsArray, token]",{"range":"798","text":"799"},"Update the dependencies array to be: [email, fetchDataOneSheet, getSheetRows, projectId, projectName, result, role, setUserData, sheetDataInputRaw, token]",{"range":"800","text":"801"},"Update the dependencies array to be: [EventKeyDown]",{"range":"802","text":"803"},"Update the dependencies array to be: [columnIndex, inputRender, isLockedColumn, isLockedRow, rowIndex, stateCell.cellActive]",{"range":"804","text":"805"},"Update the dependencies array to be: [cellEditDone, columnIndex, inputRender, isLockedColumn, isLockedRow, rowIndex, stateCell.cellAppliedAction, stateCell.tempCopiedText]",{"range":"806","text":"807"},"Update the dependencies array to be: [btnShown, valueInput]",{"range":"808","text":"809"},{"range":"810","text":"805"},{"range":"811","text":"807"},{"range":"812","text":"809"},"Update the dependencies array to be: [actionType, styleFrozen, styleHidden, styleShown, tag.mode]",{"range":"813","text":"814"},"Update the dependencies array to be: [headers, projectId, rowData, rowId, rowsVersionsToSave, token]",{"range":"815","text":"816"},"Update the dependencies array to be: [headerKey, projectId, rowId, token]",{"range":"817","text":"818"},"Update the dependencies array to be: [projectId, token]",{"range":"819","text":"820"},"Update the dependencies array to be: [activityRecorded, dwgName, dwgNumber, headers, projectId, revKey, stateRow.rowsAll, statusKey, token]",{"range":"821","text":"822"},"Update the dependencies array to be: [column, data.value, id, setFilterSelect]",{"range":"823","text":"824"},"Update the dependencies array to be: [activityRecorded, cellsHistoryInCurrentSheet, headers, stateRow.rowsAll]",{"range":"825","text":"826"},"Update the dependencies array to be: [activeBtn, column.key, companies, company, isUserCanSubmitRfaBothSide, pageSheetTypeName, roleTradeCompany.company, roleTradeCompany.role, rowData, rowsRfaAllInit]",{"range":"827","text":"828"},"Update the dependencies array to be: [column.key, projectIsAppliedRfaView, rowData]",{"range":"829","text":"830"},"Update the dependencies array to be: [company, currentRfaData, currentRfaNumber, currentRfaRef, formRfaType, isFormEditting, rowsRfaAllInit]",{"range":"831","text":"832"},"Update the dependencies array to be: [drawingTypeTreeDmsView, formRfaType, isFormEditting, rowsRfaAllInit, tradeOfRfaForFirstTimeSubmit]",{"range":"833","text":"834"},"Update the dependencies array to be: [company, dwgsToAddNewRFA, filesDWFX]",{"range":"835","text":"836"},"Update the dependencies array to be: [company, dwgsToAddNewRFA, filesPDF, formRfaType]",{"range":"837","text":"838"},"Update the dependencies array to be: [isFirstSubmission, rowData.id, setRevisionDwg]",{"range":"839","text":"840"},"Update the dependencies array to be: [drawingTrade, drawingTypeTreeDmsView, rowsAll, tradeOfRfaForFirstTimeSubmit]",{"range":"841","text":"842"},{"range":"843","text":"803"},"Update the dependencies array to be: [companies, company, email, fetchDataOneSheet, getSheetRows, isAdmin, isUserCanSubmitRfaBothSide, listGroup, listUser, pageSheetTypeName, projectId, projectIsAppliedRfaView, projectName, projectNameShort, role, roleTradeCompany, setUserData, token]",{"range":"844","text":"845"},"Update the dependencies array to be: [activeBtn, arrayExpandedColumn, column.key, rowData, rowsRfamAllInit]",{"range":"846","text":"847"},"Update the dependencies array to be: [formRefType, isFormEditting]",{"range":"848","text":"849"},"Update the dependencies array to be: [formRefType, isFormEditting, rowsRfamAllInit, tradeForFirstTimeSubmit]",{"range":"850","text":"851"},[2288,2290],"[projectsArray, token]",[2792,2811],"[email, fetchDataOneSheet, getSheetRows, projectId, projectName, result, role, setUserData, sheetDataInputRaw, token]",[3754,3756],"[EventKeyDown]",[5419,5441],"[columnIndex, inputRender, isLockedColumn, isLockedRow, rowIndex, stateCell.cellActive]",[6009,6038],"[cellEditDone, columnIndex, inputRender, isLockedColumn, isLockedRow, rowIndex, stateCell.cellAppliedAction, stateCell.tempCopiedText]",[6346,6358],"[btnShown, valueInput]",[8292,8314],[8872,8901],[9227,9239],[915,925],"[actionType, styleFrozen, styleHidden, styleShown, tag.mode]",[3172,3174],"[headers, projectId, rowData, rowId, rowsVersionsToSave, token]",[1520,1522],"[headerKey, projectId, rowId, token]",[1037,1039],"[projectId, token]",[5030,5032],"[activityRecorded, dwgName, dwgNumber, headers, projectId, revKey, stateRow.rowsAll, statusKey, token]",[5672,5680],"[column, data.value, id, setFilterSelect]",[4660,4662],"[activityRecorded, cellsHistoryInCurrentSheet, headers, stateRow.rowsAll]",[7141,7152],"[activeBtn, column.key, companies, company, isUserCanSubmitRfaBothSide, pageSheetTypeName, roleTradeCompany.company, roleTradeCompany.role, rowData, rowsRfaAllInit]",[8898,8900],"[column.key, projectIsAppliedRfaView, rowData]",[13034,13036],"[company, currentRfaData, currentRfaNumber, currentRfaRef, formRfaType, isFormEditting, rowsRfaAllInit]",[14454,14484],"[drawingTypeTreeDmsView, formRfaType, isFormEditting, rowsRfaAllInit, tradeOfRfaForFirstTimeSubmit]",[15597,15608],"[company, dwgsToAddNewRFA, filesDWFX]",[16325,16335],"[company, dwgsToAddNewRFA, filesPDF, formRfaType]",[56436,56438],"[isFirstSubmission, rowData.id, setRevisionDwg]",[1947,1961],"[drawingTrade, drawingTypeTreeDmsView, rowsAll, tradeOfRfaForFirstTimeSubmit]",[3859,3861],[23606,23608],"[companies, company, email, fetchDataOneSheet, getSheetRows, isAdmin, isUserCanSubmitRfaBothSide, listGroup, listUser, pageSheetTypeName, projectId, projectIsAppliedRfaView, projectName, projectNameShort, role, roleTradeCompany, setUserData, token]",[6294,6305],"[activeBtn, arrayExpandedColumn, column.key, rowData, rowsRfamAllInit]",[12472,12474],"[formRefType, isFormEditting]",[13747,13772],"[formRefType, isFormEditting, rowsRfamAllInit, tradeForFirstTimeSubmit]"]
[{"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\index.js":"1","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\App.js":"2","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\reportWebVitals.js":"3","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\contexts\\cellContext.js":"4","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\contexts\\rowContext.js":"5","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\contexts\\projectContext.js":"6","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\PageSpreadsheet.jsx":"7","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\contexts\\_createDataContext.js":"8","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\PanelSetting.jsx":"9","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\CellHeader.jsx":"10","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\Cell.jsx":"11","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\PanelFunction.jsx":"12","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\utils\\index.js":"13","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\constants\\index.js":"14","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\PanelCalendar.jsx":"15","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\ReorderColumnForm.jsx":"16","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\ColorizedForm.jsx":"17","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\TableDrawingDetail.jsx":"18","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\TableCellHistory.jsx":"19","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\InputSearch.jsx":"20","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\IconTable.jsx":"21","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\CellIndex.jsx":"22","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\FormSort.jsx":"23","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\FormFilter.jsx":"24","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\FormGroup.jsx":"25","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\TableActivityHistory.jsx":"26","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\FormDateAutomation.jsx":"27","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\ButtonStyle.jsx":"28","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\ButtonGroupComp.jsx":"29","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\PanelConfirm.jsx":"30","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\FormDrawingTypeOrder.jsx":"31","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\FormCellColorizedCheck.jsx":"32","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\TestTree.jsx":"33","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\PanelCalendarDuration.jsx":"34","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\FormFilterActivityHistory.jsx":"35"},{"size":507,"mtime":1607175136833,"results":"36","hashOfConfig":"37"},{"size":1016,"mtime":1610070370727,"results":"38","hashOfConfig":"37"},{"size":362,"mtime":1606274463595,"results":"39","hashOfConfig":"37"},{"size":1435,"mtime":1609840744275,"results":"40","hashOfConfig":"37"},{"size":582,"mtime":1609148593298,"results":"41","hashOfConfig":"37"},{"size":964,"mtime":1609149456727,"results":"42","hashOfConfig":"37"},{"size":33975,"mtime":1610070310117,"results":"43","hashOfConfig":"37"},{"size":613,"mtime":1604905406752,"results":"44","hashOfConfig":"37"},{"size":25293,"mtime":1610070008052,"results":"45","hashOfConfig":"37"},{"size":530,"mtime":1609861179935,"results":"46","hashOfConfig":"37"},{"size":14045,"mtime":1610029209197,"results":"47","hashOfConfig":"37"},{"size":2057,"mtime":1610009662306,"results":"48","hashOfConfig":"37"},{"size":25187,"mtime":1610028146095,"results":"49","hashOfConfig":"37"},{"size":789,"mtime":1609170899693,"results":"50","hashOfConfig":"37"},{"size":381,"mtime":1608382149906,"results":"51","hashOfConfig":"37"},{"size":5882,"mtime":1609774583397,"results":"52","hashOfConfig":"37"},{"size":1505,"mtime":1609948277172,"results":"53","hashOfConfig":"37"},{"size":6286,"mtime":1610001969913,"results":"54","hashOfConfig":"37"},{"size":2097,"mtime":1610029504347,"results":"55","hashOfConfig":"37"},{"size":4198,"mtime":1609746105036,"results":"56","hashOfConfig":"37"},{"size":2878,"mtime":1610027014056,"results":"57","hashOfConfig":"37"},{"size":758,"mtime":1609775818433,"results":"58","hashOfConfig":"37"},{"size":6079,"mtime":1609942695103,"results":"59","hashOfConfig":"37"},{"size":5678,"mtime":1609774737388,"results":"60","hashOfConfig":"37"},{"size":4325,"mtime":1609900878619,"results":"61","hashOfConfig":"37"},{"size":10965,"mtime":1610030333601,"results":"62","hashOfConfig":"37"},{"size":4393,"mtime":1609251699928,"results":"63","hashOfConfig":"37"},{"size":723,"mtime":1609943027873,"results":"64","hashOfConfig":"37"},{"size":751,"mtime":1608563473295,"results":"65","hashOfConfig":"37"},{"size":715,"mtime":1609771644240,"results":"66","hashOfConfig":"37"},{"size":10810,"mtime":1610028188457,"results":"67","hashOfConfig":"37"},{"size":3121,"mtime":1609251920425,"results":"68","hashOfConfig":"37"},{"size":7279,"mtime":1609736342497,"results":"69","hashOfConfig":"37"},{"size":766,"mtime":1610028181675,"results":"70","hashOfConfig":"37"},{"size":5318,"mtime":1609946141888,"results":"71","hashOfConfig":"37"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},"utwymk",{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"87","messages":"88","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"74"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"92","messages":"93","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"74"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"74"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":19,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"74"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"74"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"74"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117","usedDeprecatedRules":"74"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132","usedDeprecatedRules":"74"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"137","usedDeprecatedRules":"74"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"144","usedDeprecatedRules":"74"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"147","usedDeprecatedRules":"74"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\index.js",[],["154","155"],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\App.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\reportWebVitals.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\contexts\\cellContext.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\contexts\\rowContext.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\contexts\\projectContext.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\PageSpreadsheet.jsx",["156","157","158","159","160"],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\contexts\\_createDataContext.js",["161"],"import React, { createContext, useReducer } from 'react';\r\n\r\n\r\nexport default (reducer, actions, initValue) => {\r\n\r\n    const Context = createContext();\r\n\r\n    const Provider = ({ children }) => {\r\n        const [state, dispatch] = useReducer(reducer, initValue);\r\n\r\n        const boundActions = {};\r\n        for (let key in actions) {\r\n            boundActions[key] = actions[key](dispatch);\r\n        };\r\n\r\n        return (\r\n            <Context.Provider value={{ state, ...boundActions }}>\r\n                {children}\r\n            </Context.Provider>\r\n        );\r\n    };\r\n    return { Context, Provider };\r\n};\r\n","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\PanelSetting.jsx",["162","163","164"],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\CellHeader.jsx",["165","166","167","168","169","170"],"import React from 'react';\r\n\r\n\r\nconst CellHeader = (props) => {\r\n\r\n    const { className, column, columns, columnIndex, onMouseDownColumnHeader, headerIndex, container } = props;\r\n\r\n    return (\r\n        <div\r\n            style={{\r\n                height: '100%',\r\n                width: '100%',\r\n                verticalAlign: 'middle',\r\n            }}\r\n            // onMouseDown={(e) => onMouseDownColumnHeader(e, column.title)}\r\n        >\r\n            {column.title}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CellHeader;\r\n","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\Cell.jsx",["171","172","173","174","175"],"import moment from 'moment';\r\nimport React, { useContext, useEffect, useRef, useState } from 'react';\r\nimport styled from 'styled-components';\r\nimport { colorType } from '../../constants';\r\nimport { Context as CellContext } from '../../contexts/cellContext';\r\nimport { Context as ProjectContext } from '../../contexts/projectContext';\r\nimport { Context as RowContext } from '../../contexts/rowContext';\r\nimport PanelCalendar from './PanelCalendar';\r\n\r\n\r\n\r\nconst Cell = (props) => {\r\n\r\n    const {\r\n        rowData, column, rowIndex, columnIndex,\r\n        onRightClickCell, setPosition, getCurrentDOMCell\r\n    } = props;\r\n\r\n    let cellData = props.cellData;\r\n    \r\n    if ((column.key.includes('(A)') || \r\n        column.key.includes('(T)') || \r\n        column.key === 'Construction Issuance Date' ||\r\n        column.key === 'Construction Start') && cellData && cellData.length === 10 && cellData.includes('-')) {\r\n            cellData = moment(cellData, 'YYYY-MM-DD').format('DD/MM/YY');\r\n    };\r\n\r\n\r\n    const { state: stateCell, getCellModifiedTemp, setCellActive } = useContext(CellContext);\r\n    const { state: stateProject } = useContext(ProjectContext);\r\n    const { state: stateRow, getSheetRows } = useContext(RowContext);\r\n    let { drawingTypeTree, rowsAll, showDrawingsOnly } = stateRow;\r\n\r\n\r\n    const inputRef = useRef();\r\n    const cellRef = useRef();\r\n    const panelRef = useRef();\r\n    const buttonRef = useRef();\r\n\r\n\r\n \r\n\r\n    const [inputRender, setInputRender] = useState(false);\r\n    const [initValue, setInitValue] = useState(cellData || '');\r\n    const [value, setValue] = useState(cellData || '');\r\n    const [btnShown, setBtnShown] = useState(false);\r\n    const [panelData, setPanelData] = useState(false);\r\n\r\n\r\n    // after keydown ENTER to show input ...\r\n    useEffect(() => {\r\n        if (\r\n            !inputRender &&\r\n            stateCell.cellActive &&\r\n            stateCell.cellActive.rowIndex === rowIndex &&\r\n            stateCell.cellActive.columnIndex === columnIndex &&\r\n            !cellLocked(stateProject.allDataOneSheet.role, column.key, showDrawingsOnly)\r\n        ) {\r\n            setInputRender(true);\r\n        };\r\n    }, [stateCell.cellActive]);\r\n\r\n\r\n    const getCellTempId = () => {\r\n        return `${rowData['id']}-${column.key}`;\r\n    };\r\n    const cellEditDone = (value) => {\r\n        if (rowData._rowLevel === 1) {\r\n\r\n            getCellModifiedTemp({ [getCellTempId()]: value });\r\n            let row = rowsAll.find(r => r.id === rowData.id);\r\n            row[column.key] = value;\r\n            getSheetRows({ ...stateRow, rowsAll });\r\n\r\n        } else {\r\n\r\n            let row = drawingTypeTree.find(x => x.id === rowData.id);\r\n            row[column.key] = value;\r\n            getSheetRows({ ...stateRow, drawingTypeTree });\r\n        };\r\n    };\r\n\r\n\r\n    const onDoubleClick = () => {\r\n        setInputRender(true);\r\n        getCurrentDOMCell();\r\n    };\r\n    const onClick = () => {\r\n        setBtnShown(true);\r\n        if (!inputRender) {\r\n            setPosition({ cell: cellRef.current.parentElement, rowIndex, columnIndex });\r\n        };\r\n    };\r\n    useEffect(() => {\r\n        // FOCUS right after press ENTER...\r\n        if (inputRender) {\r\n            inputRef.current.focus();\r\n        };\r\n    }, [inputRender]);\r\n\r\n\r\n    useEffect(() => {\r\n        document.addEventListener('click', EventClickToHidePanelAndInput);\r\n        return () => document.removeEventListener('click', EventClickToHidePanelAndInput);\r\n    }, []);\r\n    const EventClickToHidePanelAndInput = (e) => {\r\n        if (e.target !== cellRef.current && inputRef.current && e.target !== inputRef.current) {\r\n            setInputRender(false);\r\n        } else if (e.target !== cellRef.current && e.target !== panelRef.current && e.target !== buttonRef.current) {\r\n            setPanelData(false);\r\n        };\r\n    };\r\n\r\n\r\n\r\n    const onMouseLeave = () => {\r\n        setBtnShown(false);\r\n    };\r\n    const onMouseDown = (e) => {\r\n        if (e.button === 2) { // check mouse RIGHT CLICK ...\r\n            onRightClickCell(e, props);\r\n        };\r\n    };\r\n    const pickDataSelect = (value) => {\r\n        setBtnShown(false);\r\n        setPanelData(false);\r\n        setValue(value);\r\n        if (initValue !== value) {\r\n            cellEditDone(value);\r\n        } else {\r\n            setInputRender(false);\r\n        };\r\n    };\r\n    const pickDate = (value) => {\r\n        setBtnShown(false);\r\n        setPanelData(false);\r\n        setValue(moment(value).format('DD/MM/YY'));\r\n        if (initValue !== value) {\r\n            cellEditDone(moment(value).format('DD/MM/YY'));\r\n        } else {\r\n            setInputRender(false);\r\n        };\r\n    };\r\n\r\n\r\n\r\n    const onChange = (e) => {\r\n        setValue(e.target.value);\r\n    };\r\n    const onBlur = () => {\r\n        if (initValue !== value) {\r\n            cellEditDone(value);\r\n        };\r\n        setInputRender(false);\r\n    };\r\n    // ENTER to hide input after finishing typing ...\r\n    const onKeyPress = (e) => {\r\n        if (\r\n            e.key === 'Enter' &&\r\n            inputRender &&\r\n            stateCell.cellActive &&\r\n            stateCell.cellActive.rowIndex === rowIndex &&\r\n            stateCell.cellActive.columnIndex === columnIndex &&\r\n            !cellLocked(stateProject.allDataOneSheet.role, column.key, showDrawingsOnly)\r\n        ) {\r\n            inputRef.current.blur();\r\n            setCellActive(null);\r\n        };\r\n    };\r\n\r\n\r\n\r\n    return (\r\n        <>\r\n            <div\r\n                ref={cellRef}\r\n                onDoubleClick={onDoubleClick}\r\n                onClick={onClick}\r\n                onMouseLeave={onMouseLeave}\r\n                onMouseDown={onMouseDown}\r\n                style={{\r\n                    width: '100%',\r\n                    height: '100%',\r\n                    padding: 5,\r\n                    position: 'relative',\r\n                    color: 'black',\r\n                    pointerEvents: cellLocked(stateProject.allDataOneSheet.role, column.key, showDrawingsOnly) && 'none',\r\n                    // background: cellBackground(stateProject.allDataOneSheet.role, column.key, rowData._rowLevel) ? '#fafafa' : 'transparent'\r\n                }}\r\n            >\r\n                {inputRender ? (\r\n                    <input\r\n                        value={value}\r\n                        onChange={onChange}\r\n                        onBlur={onBlur}\r\n                        onKeyPress={onKeyPress}\r\n                        ref={inputRef}\r\n                        style={{\r\n                            outline: 'none',\r\n                            border: 'none',\r\n                            background: 'transparent',\r\n                            width: column.width - 30\r\n                        }}\r\n                    />\r\n\r\n                ) : (\r\n                        <div style={{\r\n                            textOverflow: 'ellipsis',\r\n                            overflow: 'hidden',\r\n                            whiteSpace: 'nowrap',\r\n                            width: column.width - 30\r\n                        }}>\r\n                            {\r\n                                stateCell.cellsModifiedTemp[getCellTempId()] ||  // there is modified data\r\n                                (getCellTempId() in stateCell.cellsModifiedTemp && ' ') || // there is modified data === empty\r\n                                cellData // there is no modification\r\n                            }\r\n                        </div>\r\n                    )\r\n                }\r\n\r\n\r\n                {btnShown && !cellBtnDisabled(column.key) && (\r\n                    <div style={{\r\n                        cursor: 'pointer',\r\n                        position: 'absolute',\r\n                        right: 5,\r\n                        top: 5,\r\n                        height: 17,\r\n                        width: 17,\r\n                        backgroundImage: `url('./img/btn-${checkIconBtn(column.key) ? 'calendar2' : 'down2'}.png')`,\r\n                        backgroundSize: 17\r\n                    }}\r\n                        onMouseDown={(e) => {\r\n                            e.stopPropagation();\r\n                            setPanelData(!panelData);\r\n                        }}\r\n                        ref={buttonRef}\r\n                    />\r\n                )}\r\n\r\n\r\n                {panelData && (\r\n                    <div style={{\r\n                        position: 'absolute',\r\n                        background: 'white',\r\n                        top: 30,\r\n                        left: 0,\r\n                        minWidth: column.width,\r\n                        zIndex: 999,\r\n                        padding: '3px 5px 3px 7px',\r\n                        boxShadow: 'rgba(0, 0, 0, 0.09) 0px 2px 1px, rgba(0, 0, 0, 0.09) 0px 4px 2px, rgba(0, 0, 0, 0.09) 0px 8px 4px, rgba(0, 0, 0, 0.09) 0px 16px 8px, rgba(0, 0, 0, 0.09) 0px 32px 16px'\r\n                    }}\r\n                        ref={panelRef}\r\n                    >\r\n                        {checkIconBtn(column.key) ? (\r\n                            <PanelCalendar pickDate={pickDate} />\r\n                        ) : getColumnsValue(rowsAll, column.key).map(item => {\r\n                            return (\r\n                                <SelectStyled\r\n                                    key={item}\r\n                                    onMouseDown={(e) => {\r\n                                        e.stopPropagation();\r\n                                        pickDataSelect(item);\r\n                                    }}\r\n                                >{item}</SelectStyled>\r\n                            );\r\n                        })}\r\n                    </div>\r\n                )}\r\n\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Cell;\r\n\r\nconst SelectStyled = styled.div`\r\n    padding: 4px;\r\n    &:hover {\r\n        background-color: ${colorType.grey4};\r\n        cursor: pointer;\r\n    };\r\n    transition: 0.2s;\r\n`;\r\n\r\nconst checkIconBtn = (header) => {\r\n    return header.includes('(A)') || \r\n        header.includes('(T)') || \r\n        header === 'Construction Issuance Date' ||\r\n        header === 'Construction Start';\r\n};\r\n\r\nconst cellBtnDisabled = (headerId) => {\r\n    if (headerId === 'Index' || headerId === 'Drawing Number' || headerId === 'Drawing Name') return true;\r\n};\r\n\r\nconst getColumnsValue = (rows, headerKey) => {\r\n\r\n    let valueArr = [];\r\n    rows.filter(r => r._rowLevel === 1).forEach(row => {\r\n        valueArr.push(row[headerKey]);\r\n    });\r\n    valueArr = [...new Set(valueArr)].filter(e => e);\r\n    valueArr.sort((a, b) => a > b ? 1 : (b > a ? -1 : 0));\r\n\r\n    if (headerKey === 'Status') return [\r\n        'Not Started',\r\n        '1st cut of model in-progress',\r\n        '1st cut of drawing in-progress',\r\n        'Pending design',\r\n        'Consultant reviewing',\r\n        'Reject and resubmit',\r\n        'Approved with comments, to Resubmit',\r\n        'Revise In-Progress',\r\n        'Approved with Comment, no submission Required',\r\n        'Approved for Construction'\r\n    ];\r\n    return valueArr;\r\n};\r\n\r\nconst colors = {\r\n    red: '#FFDAB9',\r\n    blue: '#AFEEEE',\r\n    brown: '#F0E68C',\r\n    green: '#98FB98',\r\n    white: 'white'\r\n};\r\n\r\n\r\nconst colorizedRows = (colorized, rowData) => {\r\n    if (colorized === 'Rev') {\r\n        return rowData[colorized] === '0' ? colors.red :\r\n            rowData[colorized] === 'A' ? colors.blue :\r\n                rowData[colorized] === 'B' ? colors.brown : colors.white\r\n    } else if (colorized === 'Status') {\r\n        return rowData[colorized] === 'Reject And Resubmit' ? colors.red :\r\n            rowData[colorized] === 'Approved for Construction' ? colors.blue :\r\n                rowData[colorized] === 'Not Started' ? colors.white : colors.green\r\n    } else if (colorized === 'Modeller') {\r\n        return rowData[colorized] === 'Anne' ? colors.red :\r\n            rowData[colorized] === 'Judy' ? colors.blue :\r\n                rowData[colorized] === 'Thomas' ? colors.white : colors.green\r\n    } else if (colorized === 'Coordinator In Charge') {\r\n        return rowData[colorized] === 'Hannah' ? colors.red : colors.white\r\n    };\r\n};\r\n\r\nconst ColumnsLockedModeller = [\r\n    'Drg To Consultant (T)',\r\n    'Drg To Consultant (A)',\r\n    'Consultant Reply (T)',\r\n    'Consultant Reply (A)',\r\n    'Get Approval (T)',\r\n    'Get Approval (A)',\r\n    'Construction Issuance Date',\r\n    'Construction Start',\r\n];\r\nconst cellLocked = (title, column, showDrawingsOnly) => {\r\n    // lock in groups columns mode;\r\n    if (showDrawingsOnly === 'group-columns') return true;\r\n    if (title === 'modeller' && ColumnsLockedModeller.includes(column)) return true;\r\n    if (title === 'coordinator' || title === 'document controller') return false;\r\n    if (title === 'manager' || title === 'viewer') return true;\r\n    if (title === 'production' && column !== 'Construction Start') return true;\r\n};\r\nconst cellBackground = (title, column, rowLevel) => {\r\n    if (rowLevel !== 1) return false;\r\n\r\n    if (title === 'modeller' && ColumnsLockedModeller.includes(column)) return true;\r\n    if (title === 'coordinator' || title === 'document controller') return false;\r\n    if (title === 'manager' || title === 'viewer') return true;\r\n    if (title === 'production' && column !== 'Construction Start') return true;\r\n};\r\n\r\nconst checkIfCellsRangeContainsCell = (cellsRangeStart, cellsRangeEnd, rowIndex, columnIndex) => {\r\n\r\n    let rowMin = cellsRangeStart.rowIndex <= cellsRangeEnd.rowIndex ? cellsRangeStart.rowIndex : cellsRangeEnd.rowIndex;\r\n    let rowMax = cellsRangeStart.rowIndex > cellsRangeEnd.rowIndex ? cellsRangeStart.rowIndex : cellsRangeEnd.rowIndex;\r\n\r\n    let columnMin = cellsRangeStart.columnIndex <= cellsRangeEnd.columnIndex ? cellsRangeStart.columnIndex : cellsRangeEnd.columnIndex;\r\n    let columnMax = cellsRangeStart.columnIndex > cellsRangeEnd.columnIndex ? cellsRangeStart.columnIndex : cellsRangeEnd.columnIndex;\r\n\r\n    return (\r\n        rowIndex >= rowMin &&\r\n        rowIndex <= rowMax &&\r\n        columnIndex >= columnMin &&\r\n        columnIndex <= columnMax\r\n    );\r\n};","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\PanelFunction.jsx",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\utils\\index.js",["176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194"],"import Axios from 'axios';\r\nimport _ from 'lodash';\r\n\r\n\r\n\r\n\r\nexport const formatStringNameToId = (str) => {\r\n    let mystring = str\r\n        .replace(/ /g, '')\r\n        .replace(/\\(|\\)/g, '')\r\n        .replace(/\\//g, '');\r\n\r\n    return mystring.charAt(0).toLowerCase() + mystring.slice(1);\r\n};\r\n\r\n\r\n\r\nexport const extractCellInfo = (key) => {\r\n    return {\r\n        rowId: key.slice(0, 24),\r\n        headerName: key.slice(25, key.length)\r\n    }\r\n};\r\n\r\n\r\nexport const mongoObjectId = () => {\r\n    var timestamp = (new Date().getTime() / 1000 | 0).toString(16);\r\n    return timestamp + 'xxxxxxxxxxxxxxxx'.replace(/[x]/g, function () {\r\n        return (Math.random() * 16 | 0).toString(16);\r\n    }).toLowerCase();\r\n};\r\n\r\n\r\nexport const getHeadersText = (headers) => {\r\n    if (!headers) return [];\r\n    let arr = [];\r\n    headers.forEach(hd => {\r\n        arr.push(hd.text);\r\n    });\r\n    return arr;\r\n};\r\n\r\nexport const getHeaderKey = (headers, headerText) => {\r\n    if (!headers) return;\r\n\r\n    return headers.find(hd => hd.text === headerText).key;\r\n};\r\n\r\n\r\n\r\nexport const groupRowsBy = (array, key) => {\r\n\r\n    return array.reduce((result, currentValue) => {\r\n        (result[currentValue[key]] = result[currentValue[key]] || []).push(\r\n            currentValue\r\n        );\r\n\r\n        return result;\r\n    }, {});\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport const mapSubRows = (rows) => {\r\n\r\n    if (!rows) return;\r\n\r\n    let rowsArr = rows.filter(r => r._rowLevel === 0);\r\n\r\n    if (rowsArr.length < 1) return rows;\r\n\r\n    let rowsSubArr = rows.filter(r => r._rowLevel === 1);\r\n    if (rowsSubArr.length < 1) return rows;\r\n\r\n    const rowsDataOutput = rowsArr.map(r => {\r\n        let subR = rowsSubArr.filter(rSub => rSub._parentRow === r.id);\r\n        return {\r\n            ...r, children: subR\r\n        }\r\n    });\r\n    return rowsDataOutput;\r\n};\r\n\r\n\r\n\r\n\r\nexport const groupByHeaders = (data, headers) => {\r\n    let res = [];\r\n    let _map = {};\r\n    // push all rowIds have children in here\r\n    let parentIdsArr = [];\r\n    let _mapParentIds = {};\r\n\r\n    for (let item of data) {\r\n        let _prevLevelKey = '';\r\n        let _prevLevelParent = null;\r\n        for (let i = 0, level = 2 - headers.length; i < headers.length; i++, level++) {\r\n            let arrayParent = i == 0 ? res : _prevLevelParent.children;\r\n\r\n            let header = headers[i];\r\n            let value = String(item[header]).trim() || '';\r\n\r\n            let levelKey = `${_prevLevelKey}_._${value}`;\r\n            let levelParentIndex = _map[levelKey];\r\n            let levelParent = arrayParent[levelParentIndex];\r\n\r\n            if (!levelParent) {\r\n                let iddd = mongoObjectId();\r\n                levelParent = _newParent(item, header, level, iddd);\r\n\r\n                _map[levelKey] = arrayParent.length;\r\n                arrayParent.push(levelParent);\r\n            };\r\n\r\n            levelParent.count++;\r\n            // levelParent[header] = `${item[header]}: (${levelParent.count} nos)`;\r\n            levelParent['Drawing Number'] = `${String(item[header]).toUpperCase()}: (${levelParent.count} nos)`;\r\n\r\n            if (!_mapParentIds[levelParent.id]) { // levelParent id not yet been push to parentIdsArr\r\n                parentIdsArr.push(levelParent.id);\r\n                _mapParentIds[levelParent.id] = true;\r\n            }\r\n\r\n            if (i == headers.length - 1) {\r\n                levelParent.children.push(item);\r\n            } else {\r\n                _prevLevelKey = levelKey;\r\n                _prevLevelParent = levelParent;\r\n            };\r\n        };\r\n    };\r\n    return {\r\n        rows: res,\r\n        expandedRows: parentIdsArr\r\n    };\r\n};\r\nfunction _newParent(item, header, level, iddd) {\r\n    return {\r\n        id: iddd,\r\n        _rowLevel: level,\r\n        _src_header: item[header],\r\n        count: 0,\r\n        children: []\r\n    };\r\n};\r\n\r\nconst returnDate = (num) => {\r\n    let date = new Date();\r\n    date.setDate(date.getDate() + num);\r\n    return date;\r\n};\r\n\r\n\r\nexport const convertCellTempToHistory = (\r\n    cellsModifiedTemp,\r\n    stateProject\r\n) => {\r\n    const { email, publicSettings } = stateProject.allDataOneSheet;\r\n\r\n    const cellsHistoryData = Object.keys(cellsModifiedTemp).map(key => {\r\n        const { rowId, headerName } = extractCellInfo(key);\r\n\r\n        const dataOut = {\r\n            rowId,\r\n            headerKey: getHeaderKey(publicSettings.headers, headerName),\r\n            history: {\r\n                text: cellsModifiedTemp[key],\r\n                user: email,\r\n                createdAt: new Date(),\r\n            }\r\n        };\r\n        return dataOut;\r\n    });\r\n    return cellsHistoryData;\r\n};\r\n\r\nexport const convertDrawingVersionToHistory = (\r\n    rowsHistory,\r\n    stateProject\r\n) => {\r\n    const { username, publicSettings } = stateProject.allDataOneSheet;\r\n\r\n    const rowsHistoryOutput = rowsHistory.map(rowsH => {\r\n        let obj = {};\r\n        publicSettings.headers.forEach(hd => {\r\n            if (rowsH[hd.text]) obj = { ...obj || {}, [hd.key]: rowsH[hd.text] };\r\n        });\r\n        return {\r\n            row: rowsH.id,\r\n            history: obj,\r\n            username\r\n        };\r\n    });\r\n    return rowsHistoryOutput;\r\n};\r\n\r\n\r\n\r\n\r\nexport const convertHistoryData = (data) => {\r\n    let arr = [];\r\n    data.forEach(ch => {\r\n        const { histories, headerKey, row } = ch;\r\n        histories.forEach(dt => {\r\n            arr.push({\r\n                ...dt,\r\n                headerKey, row\r\n            });\r\n        });\r\n    });\r\n    return arr\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport const addZero = (num) => {\r\n    if (num < 10) return '0' + num;\r\n    return num;\r\n};\r\n\r\nconst getRndInteger = (min, max) => {\r\n    return Math.floor(Math.random() * (max - min)) + min;\r\n};\r\n\r\n\r\nconst findHeaderId = (headers, headerName) => {\r\n    let header = headers.find(hd => hd.text === headerName);\r\n    return header.key;\r\n};\r\n\r\n\r\n\r\nexport const convertHeadersTextToKeyArray = (headersText, headers) => {\r\n\r\n    return headersText.map(hdText => {\r\n        let hdObj = headers.find(hd => hd.text === hdText);\r\n\r\n        return hdObj.key\r\n    });\r\n};\r\n\r\n\r\n\r\n\r\nconst _groupSubRowsByParentId = (subRows) => {\r\n    let groups = {};\r\n    for (let subRow of subRows) {\r\n        let parentId = subRow._parentRow;\r\n        let group = groups[parentId] || [];\r\n        groups[parentId] = group;\r\n        group.push(subRow);\r\n    };\r\n    return groups;\r\n};\r\nconst _filterRows = (rowsData) => {\r\n    let rows = [];\r\n    let subRowsLv1 = [];\r\n    let subRowsLv2 = [];\r\n\r\n    for (let rowData of rowsData) {\r\n        let level = rowData._rowLevel;\r\n        if (level === 0) {\r\n            rows.push(rowData);\r\n        } else if (level == 1) {\r\n            subRowsLv1.push(rowData);\r\n        } else if (level == 2) {\r\n            subRowsLv2.push(rowData);\r\n        };\r\n    };\r\n    return [rows, subRowsLv1, subRowsLv2];\r\n};\r\nexport const sortRowsReorder = (rowsData) => {\r\n    let [rows, subRowsLv1, subRowsLv2] = _filterRows(rowsData);\r\n    let rowsProcessed = [];\r\n    let groupSubRowsLv1 = _groupSubRowsByParentId(subRowsLv1);\r\n    let groupSubRowsLv2 = _groupSubRowsByParentId(subRowsLv2);\r\n\r\n    let firstRowIndex = rows.findIndex((row) => row._preRow === null);\r\n    if (firstRowIndex >= 0) {\r\n        let preRow = rows.splice(firstRowIndex, 1)[0];\r\n        while (preRow) {\r\n            rowsProcessed.push(preRow);\r\n\r\n            // sort & format subRowsLv1\r\n            let subRowsLv1 = groupSubRowsLv1[preRow.id] || [];\r\n            let firstSubRowLv1Index = subRowsLv1.findIndex(\r\n                (sr1) => sr1._preRow == null\r\n            );\r\n            if (firstSubRowLv1Index >= 0) {\r\n                let preSubRowLv1 = subRowsLv1.splice(firstSubRowLv1Index, 1)[0];\r\n                while (preSubRowLv1) {\r\n                    rowsProcessed.push(preSubRowLv1);\r\n\r\n                    // sort & format subRowsLv2\r\n                    let subRowsLv2 = groupSubRowsLv2[preSubRowLv1.id] || [];\r\n                    let firstSubRowLv2Index = subRowsLv2.findIndex(\r\n                        (sr2) => sr2._preRow == null\r\n                    );\r\n                    if (firstSubRowLv2Index >= 0) {\r\n                        let preSubRowLv2 = subRowsLv2.splice(firstSubRowLv2Index, 1)[0];\r\n                        while (preSubRowLv2) {\r\n                            rowsProcessed.push(preSubRowLv2);\r\n\r\n                            let nextSubRowLv2Index = subRowsLv2.findIndex(\r\n                                (sr2) => String(sr2._preRow) == String(preSubRowLv2.id)\r\n                            );\r\n                            if (nextSubRowLv2Index >= 0) {\r\n                                preSubRowLv2 = subRowsLv2.splice(nextSubRowLv2Index, 1)[0];\r\n                            } else {\r\n                                preSubRowLv2 = null;\r\n                            };\r\n                        };\r\n                    };\r\n\r\n                    let nextSubRowLv1Index = subRowsLv1.findIndex(\r\n                        (sr1) => String(sr1._preRow) == String(preSubRowLv1.id)\r\n                    );\r\n                    if (nextSubRowLv1Index >= 0) {\r\n                        preSubRowLv1 = subRowsLv1.splice(nextSubRowLv1Index, 1)[0];\r\n                    } else {\r\n                        preSubRowLv1 = null;\r\n                    };\r\n                };\r\n            };\r\n\r\n            let nextRowIndex = rows.findIndex(\r\n                (row) => String(row._preRow) == String(preRow.id)\r\n            );\r\n            if (nextRowIndex >= 0) {\r\n                preRow = rows.splice(nextRowIndex, 1)[0];\r\n            } else {\r\n                preRow = null;\r\n            };\r\n        };\r\n    };\r\n\r\n    return rowsProcessed;\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst saveRandomRows = async () => {\r\n    try {\r\n        let arrrows = [];\r\n        for (let i = 0; i < 1; i++) {\r\n            // const data = newObj2(stateProject.allDataOneSheet.publicSettings.headers);\r\n            const row = {\r\n                // data,\r\n                parentRow: '5fe979ed94100ae8c49c4afc',\r\n                preRow: null,\r\n                level: 1\r\n            };\r\n            arrrows.push(row);\r\n        };\r\n        await Axios.post(\r\n            // `${SERVER_URL}/sheet/update-rows/${projectId}`,\r\n            { rows: arrrows }\r\n        );\r\n    } catch (err) {\r\n        console.log(err);\r\n    };\r\n};\r\n\r\n\r\n// WORKING WITH SMARTHSHEET ..................................................................\r\n\r\nexport const getDataConvertedSmartsheet = (projectArray) => {\r\n\r\n    let dataOutput = {};\r\n    for (let i = 0; i < projectArray.length; i++) {\r\n\r\n        // get the column header\r\n        const project = projectArray[i];\r\n        const categoryArray = _.map(project.columns, 'title');\r\n        let columnsIndexArray = {};\r\n        categoryArray.forEach(cate => {\r\n            project.columns.forEach(cl => {\r\n                if (cl.title === cate) columnsIndexArray[cate] = cl.index;\r\n            });\r\n        });\r\n\r\n        let allDrawings = [];\r\n\r\n        for (let i = 0; i < project.rows.length; i++) {\r\n            const dwg = project.rows[i];\r\n            allDrawings.push([...dwg.cells]);\r\n        };\r\n\r\n        dataOutput[project.name.slice(0, project.name.length - 17)] = {\r\n            allDrawings,\r\n            allDrawingsSorted: pickDataToTable(allDrawings, columnsIndexArray)\r\n        };\r\n    };\r\n\r\n    return dataOutput;\r\n};\r\n\r\nconst pickDataToTable = (drawings, columnsIndexArray) => {\r\n    let arrayDrw = [];\r\n    drawings.forEach(dwg => {\r\n        let objDwg = {};\r\n        Object.keys(columnsIndexArray).forEach(header => {\r\n            if (header === 'Rev') {\r\n                objDwg[checkSpelling(header)] = dwg[columnsIndexArray[header]].displayValue;\r\n            } else {\r\n                if (dwg[columnsIndexArray[header]].value) {\r\n                    objDwg[checkSpelling(header)] = dwg[columnsIndexArray[header]].value;\r\n                };\r\n            };\r\n        });\r\n        arrayDrw.push(objDwg);\r\n    });\r\n    return arrayDrw;\r\n};\r\n\r\n\r\nconst checkSpelling = (header) => {\r\n    if (header === 'Construction issuance date') return 'Construction Issuance Date';\r\n    if (header === 'Drg to Consultant (T)') return 'Drg To Consultant (T)';\r\n    if (header === 'Drg to Consultant (A)') return 'Drg To Consultant (A)';\r\n    if (header === 'get Approval (A)') return 'Get Approval (A)';\r\n    if (header === 'get Approval (T)') return 'Get Approval (T)';\r\n    return header;\r\n};\r\n\r\n\r\n\r\nexport const getHeaderWidth = (header) => {\r\n\r\n    if (header === 'RFA Ref') return 170;\r\n    else if (\r\n        header === 'Block/Zone' ||\r\n        header === 'Level' || header === 'Unit/CJ' ||\r\n        header === 'Drg Type' || header === 'Use For' ||\r\n        header === 'Coordinator In Charge' || header === 'Modeller' ||\r\n        header === 'Model Progress' || header === 'Drawing Progress' ||\r\n        header === 'Construction Start'\r\n    ) return 100;\r\n    else if (header === 'Construction Issuance Date') return 120;\r\n    else if (header === 'Drawing') return 100;\r\n\r\n    else if (\r\n        header === 'Drg To Consultant (A)' ||\r\n        header === 'Drg To Consultant (T)' ||\r\n        header === 'Get Approval (A)' ||\r\n        header === 'Get Approval (T)'\r\n    ) return 120;\r\n\r\n    else if (header.includes('(A)') || header.includes('(T)')) return 90;\r\n\r\n\r\n\r\n\r\n    else if (header === 'Rev') return 50;\r\n    else if (header === 'Status') return 280;\r\n    else if (header === 'Remark') return 120;\r\n    else if (header === 'Drawing Number') return 350;\r\n    else if (header === 'Drawing Name') return 450;\r\n    else return 300;\r\n\r\n};\r\n\r\nexport const rowClassNameGetColumnsValue = (rows, headers) => {\r\n    let valueObj = {};\r\n    headers.forEach(hd => {\r\n       let valueArr = rows.map(row => row[hd.text] || '');\r\n       valueArr = [...new Set(valueArr)].filter(e => e);\r\n       valueArr.sort((a, b) => a > b ? 1 : (b > a ? -1 : 0));\r\n       if (valueArr.length > 0) valueObj[hd.text] = valueArr;\r\n    });\r\n    return valueObj;\r\n };\r\nexport const getActionName = (type) => {\r\n    if (type === 'filter-ICON') return 'Create New Filter';\r\n    if (type === 'reorderColumn-ICON') return 'Columns Layout';\r\n    if (type === 'group-ICON') return 'Group Data';\r\n    if (type === 'sort-ICON') return 'Sort Data';\r\n    if (type === 'rollback-ICON') return 'Clear Filter/Sort/Group/Search';\r\n    if (type === 'addDrawingType-ICON') return 'Drawing Type Organization';\r\n    if (type === 'color-cell-history-ICON') return 'Check Data Changed';\r\n    if (type === 'View Cell History') return 'Cell History';\r\n    if (type === 'Delete Drawing') return 'Delete Drawing';\r\n    if (type === 'history-ICON') return 'Activity History';\r\n    if (type === 'colorized-ICON') return 'Drawing Colorization';\r\n    else return '';\r\n};\r\nexport const getModalWidth = (type) => {\r\n    if (type === 'history-ICON') return window.innerWidth * 0.8 + 20;\r\n    else return 520;\r\n};\r\n\r\n\r\n\r\n\r\nconst createParentRows = (arr) => {\r\n    let newRows = [];\r\n    arr.forEach((title, i) => {\r\n        newRows.push({\r\n            id: mongoObjectId(),\r\n            _rowLevel: 0,\r\n            expanded: true,\r\n            'Drawing Number': title\r\n        });\r\n    });\r\n    return newRows;\r\n};\r\nconst getParentRowsHandy = () => {\r\n    let arrParentTitle = [\r\n        'COLUMN AND WALL SETTING OUT Keyplan',\r\n        'UNIT TYPE LAYOUT TSO Plan',\r\n        'STAIRCASES and LIFT LOBBIES',\r\n        'ANCILLARY STRUCTURES',\r\n        'No Name 1',\r\n        'No Name 2',\r\n        'PBU Tile layout',\r\n        'Tile layout',\r\n        'Clubhouse',\r\n        'RCP',\r\n        'RCP Unit type',\r\n        'RCP Clubhouse',\r\n        'Swimming Pool',\r\n        'External Sections/ Elevations',\r\n        'Driveway/ Pavement',\r\n        'No Name 3',\r\n        'No Name 4',\r\n        'Carpark Details',\r\n        'M&E Details',\r\n        'FAÇADE Maintenance',\r\n        'No Name 5',\r\n        'TOILETS Details',\r\n    ];\r\n    let rows = createParentRows(arrParentTitle);\r\n    return rows;\r\n};\r\nconst getParent_IdHandy = (i) => {\r\n    if (i >= 3 && i <= 47) return 0;\r\n    if (i >= 49 && i <= 94) return 1;\r\n    if (i >= 96 && i <= 147) return 2;\r\n    if (i >= 149 && i <= 162) return 3;\r\n    if (i >= 164 && i <= 168) return 4;\r\n\r\n    if (i >= 170 && i <= 175) return 5;\r\n    if (i >= 177 && i <= 191) return 6;\r\n    if (i >= 193 && i <= 202) return 7;\r\n    if (i >= 204 && i <= 209) return 8;\r\n    if (i >= 211 && i <= 224) return 9;\r\n\r\n    if (i >= 226 && i <= 246) return 10;\r\n    if (i >= 248 && i <= 250) return 11;\r\n    if (i >= 252 && i <= 259) return 12;\r\n    if (i >= 261 && i <= 264) return 13;\r\n    if (i >= 266 && i <= 269) return 14;\r\n    \r\n    if (i >= 271 && i <= 274) return 15;\r\n    if (i >= 276 && i <= 279) return 16;\r\n    if (i >= 281 && i <= 283) return 17;\r\n    if (i >= 285 && i <= 289) return 18;\r\n    if (i >= 291 && i <= 292) return 19;\r\n    \r\n    if (i >= 294 && i <= 296) return 20;\r\n    if (i >= 298 && i <= 306) return 21;\r\n};\r\nconst getParentRowsSumang = () => {\r\n    let arrParentTitle = [\r\n        'GRID LINE',\r\n        'PRE-COMPUTATION',\r\n        'SUBSTATION',\r\n        'BASEMENT',\r\n        'EDECK',\r\n        'WSO (WALL SETTING-OUT PLANS) - BLK 42(11)',\r\n        'WSO (WALL SETTING-OUT PLANS) - BLK 44(12)',\r\n        'WSO (WALL SETTING-OUT PLANS) - BLK 22(1)',\r\n        'WSO (WALL SETTING-OUT PLANS) - BLK 24(3)',\r\n        'WSO (WALL SETTING-OUT PLANS) - BLK 26(4)',\r\n        'WSO (WALL SETTING-OUT PLANS) - BLK 32(6)',\r\n        'WSO (WALL SETTING-OUT PLANS) - BLK 34(7)',\r\n        'WSO (WALL SETTING-OUT PLANS) - BLK 28(5)',\r\n        'WSO (WALL SETTING-OUT PLANS) - BLK 46(13)',\r\n        'WSO (WALL SETTING-OUT PLANS) - BLK 36(8)',\r\n        'WSO (WALL SETTING-OUT PLANS) - BLK 30(2)',\r\n        'WSO (WALL SETTING-OUT PLANS) - BLK 38(9)',\r\n        'WSO (WALL SETTING-OUT PLANS) - BLK 40(10)',\r\n        'OVERALL FINISHING LAYOUT',\r\n        'SSS (STAIRCASE STOREY SHELTER)',\r\n        'REFLECTED CEILING PLAN',\r\n        'LIFT LOBBY',\r\n    ];\r\n    let rows = createParentRows(arrParentTitle);\r\n    return rows;\r\n};\r\nconst getParent_IdSumang = (i) => {\r\n    if (i >= 3 && i <= 4) return 0;\r\n    if (i >= 6 && i <= 6) return 1;\r\n    if (i >= 8 && i <= 9) return 2;\r\n    if (i >= 11 && i <= 20) return 3;\r\n    if (i >= 22 && i <= 35) return 4;\r\n\r\n    if (i >= 38 && i <= 43) return 5;\r\n    if (i >= 45 && i <= 50) return 6;\r\n    if (i >= 52 && i <= 59) return 7;\r\n    if (i >= 61 && i <= 70) return 8;\r\n    if (i >= 72 && i <= 78) return 9;\r\n\r\n    if (i >= 80 && i <= 85) return 10;\r\n    if (i >= 87 && i <= 92) return 11;\r\n    if (i >= 94 && i <= 100) return 12;\r\n    if (i >= 102 && i <= 107) return 13;\r\n    if (i >= 109 && i <= 114) return 14;\r\n    \r\n    if (i >= 116 && i <= 121) return 15;\r\n    if (i >= 123 && i <= 128) return 16;\r\n    if (i >= 130 && i <= 135) return 17;\r\n    if (i >= 137 && i <= 175) return 18;\r\n    if (i >= 177 && i <= 211) return 19;\r\n    \r\n    if (i >= 213 && i <= 213) return 20;\r\n    if (i >= 216 && i <= 254) return 21;\r\n};\r\n\r\nexport const getCurrentAndHistoryDrawings = (allProjects, headers) => {\r\n    let final = {};\r\n    Object.keys(allProjects).forEach(prj => {\r\n\r\n        let drawingTypeTree = prj === 'Sumang' ? getParentRowsSumang() : getParentRowsHandy();\r\n        drawingTypeTree.forEach(r => {\r\n            let headerKeyDrawingNumber = headers.find(hd => hd.text === 'Drawing Number').key;\r\n            r[headerKeyDrawingNumber] = r['Drawing Number'];\r\n            delete r['Drawing Number'];\r\n        });\r\n\r\n        let rows = prj === 'Sumang' ? allProjects['Sumang'].allDrawingsSorted : allProjects['Handy'].allDrawingsSorted;\r\n\r\n        let objChildren = {};\r\n        rows.forEach((r, i) => {\r\n            const parentIndex = prj === 'Sumang' ? getParent_IdSumang(i + 1) : getParent_IdHandy(i + 1);\r\n            objChildren[parentIndex] = [...objChildren[parentIndex] || [], r];\r\n        });\r\n\r\n        let historyOutput = [];\r\n        let rowsAllCurrentOutput = [];\r\n        Object.keys(objChildren).forEach(index => {\r\n            if (index !== 'undefined') {\r\n                let allRowsInEachFolder = objChildren[index];\r\n                let obj = {};\r\n                allRowsInEachFolder.forEach(r => {\r\n                    const key = `${r['Drawing Number'] || ''}-${r['Drawing Name'] || ''}`;\r\n                    obj[key] = [...obj[key] || [], r];\r\n                });\r\n\r\n                let rowCurrentOutput = [];\r\n                Object.keys(obj).forEach((key, i) => {\r\n                    const arr = obj[key];\r\n                    arr.sort((a, b) => ((a['Rev'] || '').toLowerCase() > (b['Rev'] || '').toLowerCase()) ? 1 : (((b['Rev'] || '').toLowerCase() > (a['Rev'] || '').toLowerCase()) ? -1 : 0));\r\n                    let rowsHistory = arr.filter((r, index) => index < arr.length - 1);\r\n                    let rowId = mongoObjectId();\r\n                    if (rowsHistory.length > 0) {\r\n                        let rowsHistoryOutput = rowsHistory.map(r => {\r\n                            let rowDataObj = { row: rowId };\r\n                            headers.forEach(hd => {\r\n                                if (r[hd.text]) rowDataObj.history = { ...rowDataObj.history || {}, [hd.key]: r[hd.text] };\r\n                            });\r\n                            return rowDataObj;\r\n                        });\r\n                        historyOutput = [...historyOutput, ...rowsHistoryOutput];\r\n                    };\r\n            \r\n                    let rowCurrent = arr[arr.length - 1];\r\n                    let rowCurrentObj = {};\r\n            \r\n                    headers.forEach(hd => {\r\n                        if (rowCurrent[hd.text]) rowCurrentObj.data = { ...rowCurrentObj.data || {}, [hd.key]: rowCurrent[hd.text] };\r\n                    });\r\n                    rowCurrentObj._id = rowId;\r\n                    rowCurrentObj.parentRow = drawingTypeTree[parseInt(index)].id;\r\n                    rowCurrentObj.level = 1;\r\n                    rowCurrentOutput.push(rowCurrentObj);\r\n                });\r\n                rowCurrentOutput.forEach((r, i) => {\r\n                    r.preRow = i === 0 ? null : rowCurrentOutput[i - 1]._id;\r\n                });\r\n                rowsAllCurrentOutput = [...rowsAllCurrentOutput, ...rowCurrentOutput];\r\n            };\r\n        });\r\n        final[prj] = {\r\n            rows: rowsAllCurrentOutput,\r\n            historyRows: historyOutput,\r\n            drawingTypeTree\r\n        };\r\n    });\r\n\r\n    return final;\r\n};\r\nconst getParentIdHandy = (i) => {\r\n    if (i >= 1 && i < 20) return 0;\r\n    if (i >= 20 && i < 42) return 1;\r\n    if (i >= 42 && i < 60) return 2;\r\n    if (i >= 60 && i < 76) return 3;\r\n    if (i >= 76 && i < 81) return 4;\r\n    if (i >= 81 && i < 87) return 5;\r\n    if (i >= 87 && i < 99) return 6;\r\n    if (i >= 99 && i < 109) return 7;\r\n    if (i >= 109 && i < 112) return 8;\r\n    if (i >= 112 && i < 126) return 9;\r\n    if (i >= 126 && i < 147) return 10;\r\n    if (i >= 147 && i < 150) return 11;\r\n    if (i >= 150 && i < 155) return 12;\r\n    if (i >= 155 && i < 159) return 13;\r\n    if (i >= 159 && i < 163) return 14;\r\n    if (i >= 163 && i < 167) return 15;\r\n    if (i >= 167 && i < 171) return 16;\r\n    if (i >= 171 && i < 174) return 17;\r\n    if (i >= 174 && i < 179) return 18;\r\n    if (i >= 179 && i < 181) return 19;\r\n    if (i >= 181 && i < 184) return 20;\r\n    if (i >= 184 && i < 193) return 21;\r\n};\r\n\r\nconst returnPreRowNullSumang = (i) => {\r\n    if (\r\n        i === 0 ||\r\n        i === 1 ||\r\n        i === 20 ||\r\n        i === 42 ||\r\n        i === 60 ||\r\n        i === 76 ||\r\n        i === 81 ||\r\n        i === 87 ||\r\n        i === 99 ||\r\n        i === 109 ||\r\n        i === 112 ||\r\n        i === 126 ||\r\n        i === 147 ||\r\n        i === 150 ||\r\n        i === 155 ||\r\n        i === 159 ||\r\n        i === 163 ||\r\n        i === 167 ||\r\n        i === 171 ||\r\n        i === 174 ||\r\n        i === 179 ||\r\n\r\n        i === 181 ||\r\n        i === 184\r\n    ) {\r\n        return true;\r\n    } else return false;\r\n};\r\nconst returnPreRowNullHandy = (i) => {\r\n    if (\r\n        i === 0 ||\r\n        i === 1 ||\r\n        i === 20 ||\r\n        i === 42 ||\r\n        i === 60 ||\r\n        i === 76 ||\r\n        i === 81 ||\r\n        i === 87 ||\r\n        i === 99 ||\r\n        i === 109 ||\r\n        i === 112 ||\r\n        i === 126 ||\r\n        i === 147 ||\r\n        i === 150 ||\r\n        i === 155 ||\r\n        i === 159 ||\r\n        i === 163 ||\r\n        i === 167 ||\r\n        i === 171 ||\r\n        i === 174 ||\r\n        i === 179 ||\r\n\r\n        i === 181 ||\r\n        i === 184\r\n    ) {\r\n        return true;\r\n    } else return false;\r\n};\r\n\r\n\r\n\r\nexport const reorderRowsFnc = (rows) => {\r\n    let rowsProcessed = [];\r\n \r\n    let firstRowIndex = rows.findIndex(row => row._preRow === null);\r\n \r\n    while (firstRowIndex >= 0) {\r\n       let preRow = rows.splice(firstRowIndex, 1)[0];\r\n       while (preRow) {\r\n          rowsProcessed.push(preRow);\r\n          let nextRowIndex = rows.findIndex(row => String(row._preRow) == String(preRow.id));\r\n          if (nextRowIndex >= 0) {\r\n             preRow = rows.splice(nextRowIndex, 1)[0];\r\n          } else {\r\n             preRow = null;\r\n          };\r\n       };\r\n       firstRowIndex = rows.findIndex((row) => row._preRow === null);\r\n    };\r\n    return rowsProcessed;\r\n };","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\constants\\index.js",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\PanelCalendar.jsx",["195","196"],"import { Calendar, Radio } from 'antd';\r\nimport React from 'react';\r\n\r\n\r\nconst { Group, Button } = Radio;\r\n\r\n\r\nconst PanelCalendar = ({ pickDate }) => {\r\n\r\n    return (\r\n        <div style={{ width: 300 }}>\r\n            <Calendar\r\n                fullscreen={false}\r\n                onSelect={pickDate}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default PanelCalendar;\r\n","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\ReorderColumnForm.jsx",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\ColorizedForm.jsx",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\TableDrawingDetail.jsx",["197"],"\r\nimport Axios from 'axios';\r\nimport React, { useContext, useEffect, useState } from 'react';\r\nimport BaseTable, { AutoResizer } from 'react-base-table';\r\nimport styled from 'styled-components';\r\nimport { colorType, SERVER_URL } from '../../constants';\r\nimport { Context as ProjectContext } from '../../contexts/projectContext';\r\nimport { Context as RowContext } from '../../contexts/rowContext';\r\nimport { getHeaderWidth, mongoObjectId } from '../../utils';\r\n\r\n\r\nconst Table = (props) => {\r\n    return (\r\n        <AutoResizer>\r\n            {({ width, height }) => {\r\n                return (\r\n                    <BaseTable\r\n                        {...props}\r\n                        width={width}\r\n                        height={height}\r\n                    />\r\n                );\r\n            }}\r\n        </AutoResizer>\r\n    );\r\n};\r\n\r\n\r\nconst TableDrawingDetail = (props) => {\r\n\r\n\r\n    const { rowData } = props;\r\n    const { state: stateProject } = useContext(ProjectContext);\r\n    const { state: stateRow } = useContext(RowContext);\r\n    const { headers } = stateProject.allDataOneSheet.publicSettings;\r\n\r\n    const [rowsHistoryDatabase, setRowsHistoryDatabase] = useState(null);\r\n    const [rowsHistoryPrevious, setRowsHistoryPrevious] = useState([]);\r\n    const [rowCurrent, setRowCurrent] = useState(null);\r\n\r\n\r\n    useEffect(() => {\r\n        const fetchRowsHistory = async () => {\r\n            try {\r\n                const res = await Axios.get(`${SERVER_URL}/row/history/${stateProject.allDataOneSheet._id}/${rowData.id}`);\r\n                let rowsHistory = [];\r\n                res.data.forEach((r, i) => {\r\n                    const { history } = r;\r\n                    if (history) {\r\n                        let data = { id: mongoObjectId() };\r\n                        Object.keys(history).forEach(key => {\r\n                            const hdText = headers.find(hd => hd.key === key).text;\r\n                            data[hdText] = history[key];\r\n                        });\r\n                        rowsHistory.push(data);\r\n                    };\r\n                });\r\n                setRowsHistoryDatabase(rowsHistory);\r\n\r\n\r\n                let rowsHistoryPrevious = [];\r\n                if (stateRow.rowsVersionsToSave) {\r\n                    rowsHistoryPrevious = stateRow.rowsVersionsToSave.filter(r => r.id === rowData.id);\r\n                    rowsHistoryPrevious.forEach((r, i) => {\r\n                        r.id = mongoObjectId();\r\n                    });\r\n                    setRowsHistoryPrevious(rowsHistoryPrevious);\r\n                };\r\n\r\n\r\n                setRowCurrent({\r\n                    ...rowData,\r\n                    key: rowsHistory.length + rowsHistoryPrevious.length + 1\r\n                });\r\n\r\n\r\n\r\n            } catch (err) {\r\n                console.log(err);\r\n            };\r\n        };\r\n        fetchRowsHistory();\r\n    }, []);\r\n\r\n    let data;\r\n    if (rowsHistoryDatabase && rowCurrent) {\r\n        data = [\r\n            ...rowsHistoryDatabase,\r\n            ...rowsHistoryPrevious,\r\n            rowCurrent\r\n        ];\r\n    };\r\n\r\n    const panelWidth = window.innerWidth * 0.8;\r\n    const panelHeight = window.innerHeight * 0.8;\r\n\r\n\r\n    return (\r\n        <div style={{\r\n            height: panelHeight,\r\n            background: 'white',\r\n            padding: 10,\r\n            display: 'flex',\r\n            justifyContent: 'center',\r\n            flexDirection: 'column',\r\n        }}>\r\n\r\n            {rowsHistoryDatabase && rowCurrent && (\r\n                <>\r\n                    <div style={{\r\n                        width: panelWidth,\r\n                        height: 100 + data.length * 30,\r\n                        margin: '0 auto',\r\n                        textAlign: 'center'\r\n                    }}>\r\n                        <div style={{ fontSize: 20, fontWeight: 'bold' }}>DRAWING HISTORY</div>\r\n                        <TableStyled\r\n                            fixed\r\n                            columns={generateColumns(getHeadersText(stateProject.allDataOneSheet.publicSettings.headers))}\r\n                            data={data}\r\n                            rowHeight={28}\r\n                        />\r\n\r\n                    </div>\r\n\r\n                    <div style={{\r\n                        margin: '0 auto',\r\n                        textAlign: 'center',\r\n                        marginTop: 100\r\n                    }}>\r\n                        <img src='./img/timeline.JPG' alt='visualize' height={panelHeight - (100 + data.length * 30) - 100} />\r\n                    </div>\r\n                </>\r\n            )}\r\n\r\n\r\n\r\n        </div>\r\n\r\n    );\r\n};\r\n\r\nexport default TableDrawingDetail;\r\n\r\n\r\nconst generateColumns = (headers) => headers.map((column, columnIndex) => ({\r\n\r\n    key: column,\r\n    dataKey: column,\r\n    title: column,\r\n    resizable: true,\r\n    width: getHeaderWidth(column),\r\n}));\r\n\r\nconst getHeadersText = (headersData) => {\r\n    return headersData.map(hd => {\r\n        return hd.text;\r\n    });\r\n};\r\n\r\n\r\n\r\n\r\nconst TableStyled = styled(Table)`\r\n\r\n    .BaseTable__table .BaseTable__body {\r\n\r\n        -webkit-touch-callout: none;\r\n        -webkit-user-select: none;\r\n        -khtml-user-select: none;\r\n        -moz-user-select: none;\r\n        -ms-user-select: none;\r\n        user-select: none;\r\n\r\n        ::-webkit-scrollbar {\r\n            -webkit-appearance: none;\r\n            background-color: #e3e3e3;\r\n        }\r\n\r\n        ::-webkit-scrollbar:vertical {\r\n            width: 15px;\r\n        }\r\n\r\n        ::-webkit-scrollbar:horizontal {\r\n            height: 15px;\r\n        }\r\n\r\n        ::-webkit-scrollbar-thumb {\r\n            border-radius: 10px;\r\n            border: 2px solid #e3e3e3;\r\n            background-color: #999;\r\n\r\n            &:hover {\r\n                background-color: #666;\r\n            }\r\n        }\r\n\r\n        ::-webkit-resizer {\r\n            display: none;\r\n        }\r\n\r\n        .BaseTable__row-cell-text {\r\n            color: black\r\n        }\r\n    }\r\n\r\n    .BaseTable__header-cell {\r\n        padding: 10px;\r\n        border-right: 1px solid #DCDCDC;\r\n\r\n        background: ${colorType.grey1};\r\n        color: black\r\n    }\r\n\r\n    .BaseTable__row-cell {\r\n        padding: 10px;\r\n        border-right: 1px solid #DCDCDC;\r\n\r\n        overflow: visible !important;\r\n    }\r\n\r\n\r\n\r\n\r\n`;\r\n\r\n","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\TableCellHistory.jsx",["198","199"],"import { List } from 'antd';\r\nimport Axios from 'axios';\r\nimport moment from 'moment';\r\nimport React, { useContext, useEffect, useState } from 'react';\r\nimport { SERVER_URL } from '../../constants';\r\nimport { Context as ProjectContext } from '../../contexts/projectContext';\r\nimport { Context as RowContext } from '../../contexts/rowContext';\r\n\r\n\r\n\r\nconst TableCellHistory = (props) => {\r\n\r\n    const { rowData, column } = props;\r\n\r\n    const {\r\n        state: stateProject\r\n    } = useContext(ProjectContext);\r\n\r\n    const {\r\n        state: stateRow\r\n    } = useContext(RowContext);\r\n\r\n    const projectId = stateProject.allDataOneSheet.projectId;\r\n    const headers = stateProject.allDataOneSheet.publicSettings.headers;\r\n    const headerKey = headers.find(hd => hd.text === column.key).key;\r\n\r\n\r\n    const [history, setHistory] = useState()\r\n\r\n    useEffect(() => {\r\n        const fetchCellHistory = async () => {\r\n            try {\r\n\r\n                const res = await Axios.get(`${SERVER_URL}/cell/history/${projectId}/${rowData.id}/${headerKey}`);\r\n\r\n                setHistory(res.data.histories.reverse());\r\n\r\n            } catch (err) {\r\n                console.log(err);\r\n            };\r\n        };\r\n        fetchCellHistory();\r\n    }, [])\r\n\r\n\r\n    return (\r\n        <div style={{ width: '100%', padding: 15, maxHeight: window.innerHeight * 0.7, overflowY: 'scroll' }}>\r\n            <List\r\n                size='small'\r\n                header={null}\r\n                footer={null}\r\n                bordered\r\n                dataSource={history}\r\n                renderItem={item => (\r\n                    <List.Item>\r\n                        <div>\r\n                            <div>{`${item.user}`}</div>\r\n                            <div style={{ fontSize: 12, color: 'grey' }}>{moment(item.createdAt).format('DD/MM/YY - HH:mm')}</div>\r\n                            <div style={{ fontWeight: 'bold' }}>{item.text}</div>\r\n                        </div>\r\n                    </List.Item>\r\n                )}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default TableCellHistory;\r\n","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\InputSearch.jsx",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\IconTable.jsx",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\CellIndex.jsx",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\FormSort.jsx",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\FormFilter.jsx",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\FormGroup.jsx",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\TableActivityHistory.jsx",["200","201","202"],"import { Modal } from 'antd';\r\nimport Axios from 'axios';\r\nimport moment from 'moment';\r\nimport React, { useContext, useEffect, useState } from 'react';\r\nimport BaseTable, { AutoResizer } from 'react-base-table';\r\nimport styled from 'styled-components';\r\nimport { colorType, SERVER_URL } from '../../constants';\r\nimport { Context as ProjectContext } from '../../contexts/projectContext';\r\nimport { Context as RowContext } from '../../contexts/rowContext';\r\nimport { convertHistoryData, mongoObjectId } from '../../utils';\r\nimport ButtonStyle from './ButtonStyle';\r\nimport FormFilterActivityHistory from './FormFilterActivityHistory';\r\nimport IconTable from './IconTable';\r\nimport PanelCalendarDuration from './PanelCalendarDuration';\r\n\r\nconst Table = (props) => {\r\n    return (\r\n        <AutoResizer>\r\n            {({ width, height }) => {\r\n                return (\r\n                    <BaseTable\r\n                        {...props}\r\n                        width={width}\r\n                        height={height}\r\n                    />\r\n                );\r\n            }}\r\n        </AutoResizer>\r\n    );\r\n};\r\n\r\nconst panelWidth = window.innerWidth * 0.8;\r\nconst panelHeight = window.innerHeight * 0.8;\r\n\r\nconst TableActivityHistory = (props) => {\r\n\r\n    const { state: stateProject } = useContext(ProjectContext);\r\n    const { state: stateRow } = useContext(RowContext);\r\n    const { allDataOneSheet: { publicSettings: { activityRecorded } } } = stateProject;\r\n\r\n\r\n\r\n    const projectId = stateProject.allDataOneSheet.projectId;\r\n    const headers = stateProject.allDataOneSheet.publicSettings.headers;\r\n\r\n    const [historyAll, setHistoryAll] = useState(null);\r\n\r\n\r\n    const headersShown = [\r\n        'Drawing Number',\r\n        'Drawing Name',\r\n        'Column',\r\n        'Value',\r\n        'User',\r\n        'Created At',\r\n        'Action'\r\n    ];\r\n\r\n    const revKey = headers.find(hd => hd.text === 'Rev').key;\r\n    const statusKey = headers.find(hd => hd.text === 'Status').key;\r\n    const dwgNumber = headers.find(hd => hd.text === 'Drawing Number').key;\r\n    const dwgName = headers.find(hd => hd.text === 'Drawing Name').key;\r\n\r\n    useEffect(() => {\r\n        const fetchRowsAndCellHistory = async () => {\r\n            try {\r\n                const resRows = await Axios.get(`${SERVER_URL}/row/history/${projectId}`);\r\n                const resCells = await Axios.get(`${SERVER_URL}/cell/history/${projectId}`);\r\n\r\n                let rowsOutput = [];\r\n                resRows.data.forEach(row => {\r\n                    const { history } = row;\r\n                    if (history) rowsOutput.push({\r\n                        'Drawing Number': history[dwgNumber],\r\n                        'Drawing Name': history[dwgName],\r\n                        'Column': 'Rev & Status',\r\n                        'Value': `${history[revKey]} - ${history[statusKey]}`,\r\n                        'User': row.userId || 'n/a',\r\n                        'Created At': moment(row.createdAt).format('DD/MM/YY - HH:mm'),\r\n                        'Action': 'Save Drawing Version',\r\n                        id: mongoObjectId()\r\n                    });\r\n                });\r\n\r\n                let cellsOutput = [];\r\n                convertHistoryData(resCells.data).forEach(cell => {\r\n                    const row = stateRow.rowsAll.find(r => r.id === cell.row);\r\n                    if (row) cellsOutput.push({\r\n                        'Drawing Number': row['Drawing Number'],\r\n                        'Drawing Name': row['Drawing Name'],\r\n                        'Column': headers.find(hd => hd.key === cell.headerKey).text,\r\n                        'Value': cell.text,\r\n                        'User': cell.userId || 'n/a',\r\n                        'Created At': moment(cell.createdAt).format('DD/MM/YY - HH:mm'),\r\n                        'Action': 'Edit Cell',\r\n                        id: mongoObjectId()\r\n                    });\r\n                });\r\n\r\n                const activityRecordedData = activityRecorded.map(r => {\r\n                    return {\r\n                        'Drawing Number': r[dwgNumber],\r\n                        'Drawing Name': r[dwgName],\r\n                        'Column': undefined,\r\n                        'Value': undefined,\r\n                        'User': r.userId || 'n/a',\r\n                        'Created At': moment(r.createdAt).format('DD/MM/YY - HH:mm'),\r\n                        'Action': r.action,\r\n                        id: mongoObjectId()\r\n                    };\r\n                });\r\n                let outputArr = [...rowsOutput, ...cellsOutput, ...activityRecordedData].sort((b, a) => a['Created At'] > b['Created At'] ? 1 : b['Created At'] > a['Created At'] ? -1 : 0);\r\n\r\n                setHistoryAll(outputArr);\r\n\r\n            } catch (err) {\r\n                console.log(err);\r\n            };\r\n        };\r\n        fetchRowsAndCellHistory();\r\n    }, []);\r\n\r\n\r\n\r\n    const [modalFilter, setModalFilter] = useState(false);\r\n\r\n    const applyFilter = (data) => {\r\n        setHistoryAll(data);\r\n        setModalFilter(false);\r\n    };\r\n\r\n\r\n    const onClick = () => {\r\n  \r\n\r\n    };\r\n\r\n\r\n\r\n    return (\r\n        <>\r\n            {historyAll && (\r\n                <div style={{\r\n                    height: panelHeight,\r\n                    background: 'white',\r\n                    padding: 10,\r\n                    display: 'flex',\r\n                    justifyContent: 'center',\r\n                    flexDirection: 'column',\r\n                }}>\r\n                    <div style={{ display: 'flex', marginBottom: 10 }}>\r\n                        <PanelCalendarDuration />\r\n                        <ButtonStyle\r\n                            onClick={onClick}\r\n                            marginLeft={5}\r\n                            name='Check History'\r\n                        />\r\n                    </div>\r\n                    <div style={{ display: 'flex', marginBottom: 10 }}>\r\n                        <div style={{ marginRight: 10, display: 'flex' }}>\r\n                            <IconTable type='filter' onClick={() => setModalFilter(true)} />\r\n                            <IconTable type='rollback' onClick={() => {}} />\r\n                        </div>\r\n\r\n                        <ButtonStyle\r\n                            onClick={() => { }}\r\n                            marginRight={5}\r\n                            name='Last 7 Days'\r\n                        />\r\n                        <ButtonStyle\r\n                            onClick={() => { }}\r\n                            marginRight={5}\r\n                            name='Last 14 Days'\r\n                        />\r\n                        <ButtonStyle\r\n                            onClick={() => { }}\r\n                            marginRight={5}\r\n                            name='This Month'\r\n                        />\r\n                    </div>\r\n\r\n                    <div style={{\r\n                        width: panelWidth,\r\n                        height: '100%',\r\n                        margin: '0 auto',\r\n                        textAlign: 'center'\r\n                    }}>\r\n                        <TableStyled\r\n                            fixed\r\n                            columns={generateColumns(headersShown)}\r\n                            data={historyAll}\r\n                            rowHeight={28}\r\n                        />\r\n                    </div>\r\n                </div>\r\n            )}\r\n\r\n            {modalFilter && (\r\n                <ModalStyledSetting\r\n                    title='Filter Data Activity History'\r\n                    visible={modalFilter}\r\n                    footer={null}\r\n                    onCancel={() => {\r\n                        setModalFilter(false);\r\n                    }}\r\n                    destroyOnClose={true}\r\n                    centered={true}\r\n                >\r\n                    <FormFilterActivityHistory\r\n                        applyFilter={applyFilter}\r\n                        onClickCancelModal={() => setModalFilter(false)}\r\n                        rowsAll={historyAll}\r\n                        headers={headersShown}\r\n                    />\r\n                </ModalStyledSetting>\r\n            )}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default TableActivityHistory;\r\n\r\n\r\nconst generateColumns = (headers) => headers.map((column, columnIndex) => ({\r\n\r\n    key: column,\r\n    dataKey: column,\r\n    title: column,\r\n    resizable: true,\r\n    width: getHeaderWidth2(column),\r\n}));\r\nconst getHeaderWidth2 = (header) => {\r\n    if (header === 'Drawing Number') return 300;\r\n    if (header === 'Drawing Name') return 300;\r\n    if (header === 'Column') return 200;\r\n    if (header === 'Value') return 300;\r\n    if (header === 'User') return 200;\r\n    if (header === 'Created At') return 200;\r\n    if (header === 'Action') return 200;\r\n};\r\nconst getHeadersText = (headersData) => {\r\n    return headersData.map(hd => {\r\n        return hd.text;\r\n    });\r\n};\r\n\r\nconst getDrawingName = (headers, rowsAll, rowId, headerId) => {\r\n\r\n    let row = rowsAll.find(r => r.id === rowId);\r\n    let headerText = headers.find(hd => hd.key === headerId)['text'];\r\n\r\n    return {\r\n        headerText,\r\n        drawingName: row['Drawing Name'],\r\n        drawingNumber: row['Drawing Number'],\r\n    }\r\n};\r\n\r\nconst ModalStyledSetting = styled(Modal)`\r\n    .ant-modal-content {\r\n        border-radius: 0;\r\n    }\r\n   .ant-modal-close {\r\n      display: none;\r\n   }\r\n   .ant-modal-header {\r\n      padding: 10px;\r\n   }\r\n   .ant-modal-title {\r\n        padding-left: 10px;\r\n        font-size: 20px;\r\n        font-weight: bold;\r\n   }\r\n   .ant-modal-body {\r\n      padding: 0;\r\n      display: flex;\r\n      justify-content: center;\r\n   }\r\n`;\r\nconst TableStyled = styled(Table)`\r\n\r\n    .BaseTable__table .BaseTable__body {\r\n\r\n        -webkit-touch-callout: none;\r\n        -webkit-user-select: none;\r\n        -khtml-user-select: none;\r\n        -moz-user-select: none;\r\n        -ms-user-select: none;\r\n        user-select: none;\r\n\r\n        ::-webkit-scrollbar {\r\n            -webkit-appearance: none;\r\n            background-color: #e3e3e3;\r\n        }\r\n\r\n        ::-webkit-scrollbar:vertical {\r\n            width: 15px;\r\n        }\r\n\r\n        ::-webkit-scrollbar:horizontal {\r\n            height: 15px;\r\n        }\r\n\r\n        ::-webkit-scrollbar-thumb {\r\n            border-radius: 10px;\r\n            border: 2px solid #e3e3e3;\r\n            background-color: #999;\r\n\r\n            &:hover {\r\n                background-color: #666;\r\n            }\r\n        }\r\n\r\n        ::-webkit-resizer {\r\n            display: none;\r\n        }\r\n\r\n        .BaseTable__row-cell-text {\r\n            color: black\r\n        }\r\n    }\r\n\r\n    .BaseTable__header-cell {\r\n        padding: 10px;\r\n        border-right: 1px solid #DCDCDC;\r\n\r\n        background: ${colorType.grey1};\r\n        color: black\r\n    }\r\n\r\n    .BaseTable__row-cell {\r\n        padding: 10px;\r\n        border-right: 1px solid #DCDCDC;\r\n\r\n        overflow: visible !important;\r\n    }\r\n\r\n\r\n\r\n\r\n`;\r\n\r\n\r\n\r\n\r\n","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\FormDateAutomation.jsx",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\ButtonStyle.jsx",["203"],"import { Button } from 'antd';\r\nimport React from 'react';\r\n\r\nconst ButtonStyle = ({\r\n    colorText,\r\n    marginRight,\r\n    marginLeft,\r\n    borderColor,\r\n    marginBottom,\r\n    background,\r\n    name,\r\n    onClick\r\n}) => {\r\n\r\n    return (\r\n        <Button \r\n            style={{\r\n                borderRadius: 0,\r\n                background: background,\r\n                color: colorText,\r\n                border: 'none',\r\n                marginRight,\r\n                marginBottom,\r\n                marginLeft,\r\n                border: `1px solid ${borderColor || background}`\r\n            }}\r\n            onClick={onClick}\r\n        >\r\n            {name}\r\n        </Button>\r\n    );\r\n};\r\n\r\nexport default ButtonStyle;\r\n\r\n\r\n","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\ButtonGroupComp.jsx",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\PanelConfirm.jsx",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\FormDrawingTypeOrder.jsx",["204","205","206","207"],"import { Icon, Input, Modal } from 'antd';\r\nimport React, { useContext, useEffect, useRef, useState } from 'react';\r\nimport SortableTree from 'react-sortable-tree';\r\nimport 'react-sortable-tree/style.css';\r\nimport styled from 'styled-components';\r\nimport { colorType } from '../../constants';\r\nimport { Context as ProjectContext } from '../../contexts/projectContext';\r\nimport { Context as RowContext } from '../../contexts/rowContext';\r\nimport { mongoObjectId } from '../../utils';\r\nimport ButtonGroupComp from './ButtonGroupComp';\r\n\r\n\r\n\r\n\r\n\r\nconst FormDrawingTypeOrder = ({ onClickCancelModal, applyFolderOrganize }) => {\r\n\r\n   const { state: stateRow } = useContext(RowContext);\r\n   const { state: stateProject } = useContext(ProjectContext);\r\n\r\n   const [input, setInput] = useState(addProjectLevel(stateRow.drawingTypeTree, stateProject.allDataOneSheet.projectName));\r\n   const [data, setData] = useState(arrangeDrawingType(input));\r\n\r\n\r\n\r\n   useEffect(() => {\r\n      setData(arrangeDrawingType(input));\r\n   }, [input]);\r\n\r\n   const onClickApply = () => {\r\n      input.splice(0, 1); // remove projectName Row\r\n      applyFolderOrganize(input);\r\n   };\r\n\r\n\r\n   const addFolderBelow = (node) => {\r\n      let nodeIndex;\r\n      input.forEach((nd, i) => {\r\n         if (nd.id === node.id) nodeIndex = i;\r\n      });\r\n\r\n      let newNodeIndex;\r\n      for (let i = 0; i < input.length; i++) {\r\n         if (input[i]._rowLevel - 1 === node._rowLevel && i > nodeIndex) {\r\n            if (!newNodeIndex) newNodeIndex = i;\r\n         };\r\n      };\r\n      for (let i = 0; i < Math.abs(node._rowLevel); i++) {\r\n         input.splice(newNodeIndex + i, 0, {\r\n            id: mongoObjectId(),\r\n            'Drawing Number': 'NEW DRAWING TYPE...',\r\n            _rowLevel: node._rowLevel + i + 1,\r\n            expanded: true,\r\n         });\r\n      };\r\n      setInput([...input]);\r\n   };\r\n\r\n   const [modalShown, setModalShown] = useState(false);\r\n   const [modalTitle, setModalTitle] = useState(null);\r\n   const [value, setValue] = useState(null);\r\n   const [item, setItem] = useState(null);\r\n\r\n   const deleteFolder = (node) => {\r\n      setItem(node);\r\n      setModalTitle('Delete Drawing Type');\r\n      setModalShown(true);\r\n   };\r\n   const editFolderName = (node) => {\r\n      setValue(node.title);\r\n      setItem(node);\r\n      setModalTitle('Edit Drawing Type Name');\r\n      setModalShown(true);\r\n   };\r\n   const onClickApplyModal = () => {\r\n\r\n      if (modalTitle === 'Delete Drawing Type') {\r\n\r\n         let removeArr = [...item.children || [], item];\r\n         const removeIdsArr = removeArr.map(e => e.id);\r\n         let arr = input.filter(e => removeIdsArr.indexOf(e.id) === -1);\r\n         setInput([...arr]);\r\n\r\n         setModalShown(false);\r\n         setModalTitle(null);\r\n         setValue(null);\r\n         setItem(null);\r\n      } else {\r\n         input.find(e => e.id === item.id)['Drawing Number'] = value;\r\n         setInput([...input]);\r\n\r\n         setModalShown(false);\r\n         setModalTitle(null);\r\n         setValue(null);\r\n         setItem(null);\r\n      };\r\n   };\r\n\r\n   const fileAdd = () => {\r\n      let projectLevel = input[0]._rowLevel;\r\n      input[0]._rowLevel = projectLevel - 1;\r\n      input.splice(1, 0, {\r\n         id: mongoObjectId(),\r\n         'Drawing Number': 'NEW DRAWING TYPE...',\r\n         _rowLevel: projectLevel,\r\n         expanded: true,\r\n      });\r\n      setInput([...input]);\r\n   };\r\n\r\n   return (\r\n      <Container>\r\n\r\n         <PanelStyled>\r\n\r\n            <SortableTree\r\n               treeData={data}\r\n               onChange={treeData => {\r\n                  // setData(treeData);\r\n               }}\r\n               canDrop={(props) => {\r\n                  const { nextParent, node } = props;\r\n                  return nextParent && nextParent._rowLevel === node._rowLevel - 1;\r\n               }}\r\n               onMoveNode={({ prevTreeIndex, nextTreeIndex }) => {\r\n                  let item = input[prevTreeIndex];\r\n                  input.splice(prevTreeIndex, 1);\r\n                  input.splice(nextTreeIndex, 0, item);\r\n                  setInput([...input]);\r\n               }}\r\n               isVirtualized={false}\r\n               generateNodeProps={(props) => {\r\n                  const { node, parentNode } = props;\r\n                  return ({\r\n                     buttons: parentNode === null ? [\r\n                        // <IconBtn type='file-add' onClick={() => fileAdd()} />,\r\n                        <IconBtn type='plus' onClick={() => addFolderBelow(node)} />,\r\n                     ] : node._rowLevel !== 0 ? [\r\n                        <IconBtn type='plus' onClick={() => addFolderBelow(node)} />,\r\n                        <IconBtn type='edit' onClick={() => editFolderName(node)} />,\r\n                        <IconBtn type='delete' onClick={() => deleteFolder(node)} />\r\n                     ] : [\r\n                              <IconBtn type='edit' onClick={() => editFolderName(node)} />,\r\n                              <IconBtn type='delete' onClick={() => deleteFolder(node)} />\r\n                           ]\r\n                  })\r\n               }}\r\n            />\r\n         </PanelStyled>\r\n\r\n         <div style={{ padding: 20, display: 'flex', flexDirection: 'row-reverse' }}>\r\n            <ButtonGroupComp\r\n               onClickCancel={onClickCancelModal}\r\n               onClickApply={onClickApply}\r\n            />\r\n         </div>\r\n\r\n         {modalShown && (\r\n            <ModalStyledSetting\r\n               title={modalTitle}\r\n               visible={modalShown}\r\n               footer={null}\r\n               onCancel={() => {\r\n                  setModalShown(false);\r\n                  setValue(null);\r\n                  setModalTitle(null);\r\n               }}\r\n               destroyOnClose={true}\r\n               centered={true}\r\n            >\r\n               <div style={{ padding: 20, width: '100%' }}>\r\n                  {modalTitle === 'Delete Drawing Type' ? (\r\n                     <div>Are you sure ???</div>\r\n                  ) : (\r\n                        <Input\r\n                           placeholder='Enter new name...'\r\n                           style={{ width: '100%' }}\r\n                           value={value}\r\n                           onChange={(e) => setValue(e.target.value)}\r\n                        />\r\n                     )}\r\n\r\n                  <div style={{ padding: 20, display: 'flex', flexDirection: 'row-reverse' }}>\r\n                     <ButtonGroupComp\r\n                        onClickCancel={() => {\r\n                           setModalShown(false);\r\n                           setValue(null);\r\n                           setModalTitle(null);\r\n                        }}\r\n                        onClickApply={onClickApplyModal}\r\n                     />\r\n                  </div>\r\n               </div>\r\n            </ModalStyledSetting>\r\n         )}\r\n      </Container>\r\n   );\r\n};\r\n\r\nexport default FormDrawingTypeOrder;\r\n\r\n\r\nconst IconBtn = ({ type, onClick }) => {\r\n   return (\r\n      <IconStyle type={type} onClick={onClick} />\r\n   );\r\n};\r\n\r\nconst IconStyle = styled(Icon)`\r\n   margin: 3px;\r\n   padding: 5px;\r\n   border-radius: 3px;\r\n   border: 1px solid ${colorType.grey0};\r\n   &:hover {\r\n      background-color: ${colorType.grey0};\r\n   };\r\n`;\r\nconst ModalStyledSetting = styled(Modal)`\r\n    .ant-modal-content {\r\n        border-radius: 0;\r\n    }\r\n   .ant-modal-close {\r\n      display: none;\r\n   }\r\n   .ant-modal-header {\r\n      padding: 10px;\r\n   }\r\n   .ant-modal-title {\r\n        padding-left: 10px;\r\n        font-size: 20px;\r\n        font-weight: bold;\r\n   }\r\n   .ant-modal-body {\r\n      padding: 0;\r\n      display: flex;\r\n      justify-content: center;\r\n   }\r\n`;\r\n\r\nconst addProjectLevel = (drawingTypeTree, projectName) => {\r\n\r\n   let data = drawingTypeTree.map(e => ({ ...e }));\r\n   let levelArray = [...new Set(data.map(r => r._rowLevel))].sort((a, b) => b - a);\r\n\r\n   let projectLevel = levelArray[levelArray.length - 1] - 1;\r\n\r\n   data.unshift({\r\n      'Drawing Number': projectName,\r\n      id: mongoObjectId(),\r\n      _rowLevel: projectLevel,\r\n      expanded: true\r\n   });\r\n   return data;\r\n};\r\n\r\nconst arrangeDrawingType = (xxx) => {\r\n\r\n   let data = xxx.map(e => ({ ...e }));\r\n   let levelArray = [...new Set(data.map(r => r._rowLevel))].sort((a, b) => b - a);\r\n\r\n   levelArray.forEach(lvl => {\r\n      data.forEach((row, index) => {\r\n         if (row._rowLevel === lvl) {\r\n            row.title = row['Drawing Number'];\r\n            delete row['Drawing Number'];\r\n\r\n            let arr = data.filter((r, i) => r._rowLevel === lvl - 1 && i < index);\r\n            let parentRow = arr[arr.length - 1];\r\n            if (parentRow) parentRow.children = [...parentRow.children || [], row];\r\n         };\r\n      });\r\n   });\r\n   return data.filter(r => r._rowLevel === levelArray[levelArray.length - 1]);\r\n};\r\n\r\n\r\n\r\n\r\nconst InputComp = ({ tag, updateFolderName, index }) => {\r\n\r\n   const [value, setValue] = useState(tag.header);\r\n   const [isDoubleClick, setIsDoubleClick] = useState(false);\r\n\r\n   const inputReff = useRef();\r\n\r\n\r\n   useEffect(() => {\r\n      if (isDoubleClick) {\r\n         inputReff.current.focus();\r\n      };\r\n\r\n   }, [isDoubleClick]);\r\n\r\n   return (\r\n      <div\r\n         onDoubleClick={() => setIsDoubleClick(true)}\r\n         onBlur={() => {\r\n            setIsDoubleClick(false);\r\n            updateFolderName(tag, index, value);\r\n         }}\r\n         style={{\r\n            width: '75%',\r\n            overflow: 'hidden',\r\n            textOverflow: 'ellipsis',\r\n            whiteSpace: 'nowrap'\r\n         }}\r\n      >\r\n         {isDoubleClick ? (\r\n            <input\r\n               ref={inputReff}\r\n               value={value}\r\n               onChange={(e) => setValue(e.target.value)}\r\n               style={{\r\n                  width: '100%',\r\n                  border: 'none'\r\n               }}\r\n            />\r\n         ) : (\r\n               <div>{tag.header}</div>\r\n            )\r\n         }\r\n\r\n      </div>\r\n\r\n   );\r\n\r\n};\r\n\r\nconst addZero = (num) => {\r\n   if (num < 10) return '0' + num;\r\n   return num;\r\n};\r\n\r\nconst Container = styled.div`\r\n   height: ${`${window.innerHeight * 0.8}` + 'px'};\r\n   width: 100%;\r\n   display: flex;\r\n   flex-direction: column;\r\n`;\r\n\r\n\r\nconst PanelStyled = styled.div`\r\n\r\n    width: 100%;\r\n    float: right;\r\n    overflow-x: hidden;\r\n    border-bottom: 1px solid ${colorType.grey4};\r\n\r\n    ::-webkit-scrollbar {\r\n        -webkit-appearance: none;\r\n        background-color: #e3e3e3;\r\n    }\r\n\r\n    ::-webkit-scrollbar:vertical {\r\n        width: 15px;\r\n    }\r\n\r\n    ::-webkit-scrollbar:horizontal {\r\n        height: 15px;\r\n    }\r\n\r\n    ::-webkit-scrollbar-thumb {\r\n        border-radius: 10px;\r\n        border: 2px solid #e3e3e3;\r\n        background-color: #999;\r\n\r\n        &:hover {\r\n            background-color: #666;\r\n        }\r\n    }\r\n`;","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\FormCellColorizedCheck.jsx",["208","209","210"],"import { Button, DatePicker } from 'antd';\r\nimport Axios from 'axios';\r\nimport moment from 'moment';\r\nimport React, { useContext, useEffect, useState } from 'react';\r\nimport { SERVER_URL } from '../../constants';\r\nimport { Context as ProjectContext } from '../../contexts/projectContext';\r\nimport { Context as RowContext } from '../../contexts/rowContext';\r\nimport { convertHistoryData } from '../../utils';\r\n\r\n\r\n\r\n\r\nconst FormCellColorizedCheck = ({ setCellHistoryArr }) => {\r\n\r\n    const {\r\n        state: stateProject\r\n    } = useContext(ProjectContext);\r\n\r\n    const {\r\n        state: stateRow\r\n    } = useContext(RowContext);\r\n\r\n    const projectId = stateProject.allDataOneSheet.projectId;\r\n    const headersArr = stateProject.allDataOneSheet.publicSettings.headers;\r\n\r\n    useEffect(() => {\r\n\r\n        const fetchProjectHistory = async () => {\r\n            try {\r\n                const res = await Axios.get(`${SERVER_URL}/cell/history/${projectId}`);\r\n                setHistoryData(res.data);\r\n\r\n            } catch (err) {\r\n                console.log(err);\r\n            };\r\n        };\r\n        fetchProjectHistory();\r\n    }, []);\r\n\r\n    const [historyData, setHistoryData] = useState([]);\r\n    const [start, setStart] = useState(null);\r\n    const [end, setEnd] = useState(null);\r\n\r\n\r\n    const onClick = () => {\r\n\r\n        if (!start || !end) return;\r\n        \r\n        let startDate = start.toDate();\r\n        let endDate = end.toDate();\r\n\r\n        if (startDate > endDate) return;\r\n\r\n        let filterCells = convertHistoryData(historyData).filter(cell => {\r\n\r\n            let createdAt = moment(cell.createdAt).toDate();\r\n            return createdAt >= startDate && createdAt <= endDate;\r\n        });\r\n\r\n        const cellArr = filterCells.map(ch => {\r\n            const { row: rowId, headerKey } = ch;\r\n            let headerText = headersArr.find(hd => hd.key === headerKey).text;\r\n            return {\r\n                rowId,\r\n                header: headerText\r\n            }\r\n        });\r\n\r\n        let unique = cellArr.reduce((res, itm) => {\r\n            let result = res.find(item => JSON.stringify(item) == JSON.stringify(itm));\r\n            if (!result) return res.concat(itm);\r\n            return res;\r\n        }, []);\r\n\r\n        setCellHistoryArr(unique);\r\n    };\r\n\r\n    return (\r\n        <div style={{\r\n            width: '30vw',\r\n            height: '20vh',\r\n            padding: 15\r\n        }}>\r\n            <div style={{ display: 'flex', marginBottom: 20, marginTop: 20, width: '100%' }}>\r\n                <DatePicker onChange={e => setStart(e)} style={{ width: '100%' }} />\r\n                <DatePicker onChange={e => setEnd(e)} style={{ width: '100%' }} />\r\n            </div>\r\n            <div style={{ display: 'flex', justifyContent: 'space-between', marginBottom: 20, width: '100%' }}>\r\n                <Button>Last 7 Days</Button>\r\n                <Button>Last 14 Days</Button>\r\n                <Button>This Month</Button>\r\n            </div>\r\n            <Button type='primary' onClick={onClick}>Check</Button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default FormCellColorizedCheck;\r\n","D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\TestTree.jsx",["211","212"],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\PanelCalendarDuration.jsx",[],"D:\\994 WOH HUP 2020\\Projects\\wh-spreadsheet-mern-rbt\\wh-spreadsheet-client\\src\\layouts\\pageSpreadsheet\\FormFilterActivityHistory.jsx",[],{"ruleId":"213","replacedBy":"214"},{"ruleId":"215","replacedBy":"216"},{"ruleId":"217","severity":1,"message":"218","line":69,"column":7,"nodeType":"219","endLine":69,"endColumn":9,"suggestions":"220"},{"ruleId":"217","severity":1,"message":"221","line":484,"column":7,"nodeType":"219","endLine":484,"endColumn":9,"suggestions":"222"},{"ruleId":"223","severity":1,"message":"224","line":497,"column":10,"nodeType":"225","messageId":"226","endLine":497,"endColumn":24},{"ruleId":"223","severity":1,"message":"227","line":516,"column":28,"nodeType":"225","messageId":"226","endLine":516,"endColumn":46},{"ruleId":"228","severity":1,"message":"229","line":936,"column":33,"nodeType":"230","messageId":"231","endLine":936,"endColumn":35},{"ruleId":"232","severity":1,"message":"233","line":4,"column":1,"nodeType":"234","endLine":23,"endColumn":3},{"ruleId":"223","severity":1,"message":"235","line":36,"column":29,"nodeType":"225","messageId":"226","endLine":36,"endColumn":41},{"ruleId":"217","severity":1,"message":"236","line":46,"column":7,"nodeType":"219","endLine":46,"endColumn":9,"suggestions":"237"},{"ruleId":"223","severity":1,"message":"238","line":346,"column":27,"nodeType":"225","messageId":"226","endLine":346,"endColumn":45},{"ruleId":"223","severity":1,"message":"239","line":6,"column":13,"nodeType":"225","messageId":"226","endLine":6,"endColumn":22},{"ruleId":"223","severity":1,"message":"240","line":6,"column":32,"nodeType":"225","messageId":"226","endLine":6,"endColumn":39},{"ruleId":"223","severity":1,"message":"241","line":6,"column":41,"nodeType":"225","messageId":"226","endLine":6,"endColumn":52},{"ruleId":"223","severity":1,"message":"242","line":6,"column":54,"nodeType":"225","messageId":"226","endLine":6,"endColumn":77},{"ruleId":"223","severity":1,"message":"243","line":6,"column":79,"nodeType":"225","messageId":"226","endLine":6,"endColumn":90},{"ruleId":"223","severity":1,"message":"244","line":6,"column":92,"nodeType":"225","messageId":"226","endLine":6,"endColumn":101},{"ruleId":"223","severity":1,"message":"245","line":44,"column":23,"nodeType":"225","messageId":"226","endLine":44,"endColumn":35},{"ruleId":"217","severity":1,"message":"246","line":61,"column":8,"nodeType":"219","endLine":61,"endColumn":30,"suggestions":"247"},{"ruleId":"223","severity":1,"message":"248","line":332,"column":7,"nodeType":"225","messageId":"226","endLine":332,"endColumn":20},{"ruleId":"223","severity":1,"message":"249","line":368,"column":7,"nodeType":"225","messageId":"226","endLine":368,"endColumn":21},{"ruleId":"223","severity":1,"message":"250","line":377,"column":7,"nodeType":"225","messageId":"226","endLine":377,"endColumn":36},{"ruleId":"251","severity":1,"message":"252","line":103,"column":33,"nodeType":"253","messageId":"254","endLine":103,"endColumn":35},{"ruleId":"251","severity":1,"message":"252","line":129,"column":19,"nodeType":"253","messageId":"254","endLine":129,"endColumn":21},{"ruleId":"223","severity":1,"message":"255","line":152,"column":7,"nodeType":"225","messageId":"226","endLine":152,"endColumn":17},{"ruleId":"223","severity":1,"message":"256","line":231,"column":7,"nodeType":"225","messageId":"226","endLine":231,"endColumn":20},{"ruleId":"223","severity":1,"message":"257","line":236,"column":7,"nodeType":"225","messageId":"226","endLine":236,"endColumn":19},{"ruleId":"251","severity":1,"message":"252","line":274,"column":26,"nodeType":"253","messageId":"254","endLine":274,"endColumn":28},{"ruleId":"251","severity":1,"message":"252","line":276,"column":26,"nodeType":"253","messageId":"254","endLine":276,"endColumn":28},{"ruleId":"258","severity":1,"message":"259","line":315,"column":33,"nodeType":"230","messageId":"260","endLine":315,"endColumn":88},{"ruleId":"251","severity":1,"message":"252","line":315,"column":62,"nodeType":"253","messageId":"254","endLine":315,"endColumn":64},{"ruleId":"258","severity":1,"message":"261","line":326,"column":25,"nodeType":"230","messageId":"260","endLine":326,"endColumn":80},{"ruleId":"251","severity":1,"message":"252","line":326,"column":54,"nodeType":"253","messageId":"254","endLine":326,"endColumn":56},{"ruleId":"258","severity":1,"message":"262","line":337,"column":17,"nodeType":"230","messageId":"260","endLine":337,"endColumn":66},{"ruleId":"251","severity":1,"message":"252","line":337,"column":46,"nodeType":"253","messageId":"254","endLine":337,"endColumn":48},{"ruleId":"223","severity":1,"message":"263","line":362,"column":7,"nodeType":"225","messageId":"226","endLine":362,"endColumn":21},{"ruleId":"223","severity":1,"message":"264","line":713,"column":7,"nodeType":"225","messageId":"226","endLine":713,"endColumn":23},{"ruleId":"223","severity":1,"message":"265","line":738,"column":7,"nodeType":"225","messageId":"226","endLine":738,"endColumn":29},{"ruleId":"223","severity":1,"message":"266","line":768,"column":7,"nodeType":"225","messageId":"226","endLine":768,"endColumn":28},{"ruleId":"258","severity":1,"message":"262","line":810,"column":45,"nodeType":"230","messageId":"260","endLine":810,"endColumn":92},{"ruleId":"251","severity":1,"message":"252","line":810,"column":72,"nodeType":"253","messageId":"254","endLine":810,"endColumn":74},{"ruleId":"223","severity":1,"message":"267","line":5,"column":9,"nodeType":"225","messageId":"226","endLine":5,"endColumn":14},{"ruleId":"223","severity":1,"message":"268","line":5,"column":16,"nodeType":"225","messageId":"226","endLine":5,"endColumn":22},{"ruleId":"217","severity":1,"message":"269","line":83,"column":8,"nodeType":"219","endLine":83,"endColumn":10,"suggestions":"270"},{"ruleId":"223","severity":1,"message":"271","line":20,"column":16,"nodeType":"225","messageId":"226","endLine":20,"endColumn":24},{"ruleId":"217","severity":1,"message":"272","line":43,"column":8,"nodeType":"219","endLine":43,"endColumn":10,"suggestions":"273"},{"ruleId":"217","severity":1,"message":"274","line":121,"column":8,"nodeType":"219","endLine":121,"endColumn":10,"suggestions":"275"},{"ruleId":"223","severity":1,"message":"276","line":241,"column":7,"nodeType":"225","messageId":"226","endLine":241,"endColumn":21},{"ruleId":"223","severity":1,"message":"277","line":247,"column":7,"nodeType":"225","messageId":"226","endLine":247,"endColumn":21},{"ruleId":"278","severity":1,"message":"279","line":25,"column":17,"nodeType":"280","messageId":"254","endLine":25,"endColumn":23},{"ruleId":"223","severity":1,"message":"281","line":99,"column":10,"nodeType":"225","messageId":"226","endLine":99,"endColumn":17},{"ruleId":"223","severity":1,"message":"282","line":279,"column":7,"nodeType":"225","messageId":"226","endLine":279,"endColumn":16},{"ruleId":"223","severity":1,"message":"283","line":329,"column":7,"nodeType":"225","messageId":"226","endLine":329,"endColumn":14},{"ruleId":"284","severity":1,"message":"285","line":335,"column":44,"nodeType":"253","messageId":"286","endLine":335,"endColumn":45},{"ruleId":"223","severity":1,"message":"271","line":20,"column":16,"nodeType":"225","messageId":"226","endLine":20,"endColumn":24},{"ruleId":"217","severity":1,"message":"287","line":38,"column":8,"nodeType":"219","endLine":38,"endColumn":10,"suggestions":"288"},{"ruleId":"251","severity":1,"message":"252","line":70,"column":64,"nodeType":"253","messageId":"254","endLine":70,"endColumn":66},{"ruleId":"223","severity":1,"message":"289","line":11,"column":5,"nodeType":"225","messageId":"226","endLine":11,"endColumn":20},{"ruleId":"223","severity":1,"message":"290","line":60,"column":18,"nodeType":"225","messageId":"226","endLine":60,"endColumn":26},"no-native-reassign",["291"],"no-negated-in-lhs",["292"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'EventKeyDown'. Either include it or remove the dependency array.","ArrayExpression",["293"],"React Hook useEffect has missing dependencies: 'email', 'fetchDataOneSheet', 'getSheetRows', 'projectId', 'projectName', 'role', and 'setUserData'. Either include them or remove the dependency array.",["294"],"no-unused-vars","'askBeforeClose' is assigned a value but never used.","Identifier","unusedVar","'setExpandColumnKey' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","'getSheetRows' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'panelSettingType' and 'saveDataToServer'. Either include them or remove the dependency array.",["295"],"'userSettingsFromDB' is assigned a value but never used.","'className' is assigned a value but never used.","'columns' is assigned a value but never used.","'columnIndex' is assigned a value but never used.","'onMouseDownColumnHeader' is assigned a value but never used.","'headerIndex' is assigned a value but never used.","'container' is assigned a value but never used.","'setInitValue' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'column.key', 'columnIndex', 'inputRender', 'rowIndex', 'showDrawingsOnly', and 'stateProject.allDataOneSheet.role'. Either include them or remove the dependency array.",["296"],"'colorizedRows' is assigned a value but never used.","'cellBackground' is assigned a value but never used.","'checkIfCellsRangeContainsCell' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'returnDate' is assigned a value but never used.","'getRndInteger' is assigned a value but never used.","'findHeaderId' is assigned a value but never used.","no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'preSubRowLv2'.","unsafeRefs","Function declared in a loop contains unsafe references to variable(s) 'preSubRowLv1'.","Function declared in a loop contains unsafe references to variable(s) 'preRow'.","'saveRandomRows' is assigned a value but never used.","'getParentIdHandy' is assigned a value but never used.","'returnPreRowNullSumang' is assigned a value but never used.","'returnPreRowNullHandy' is assigned a value but never used.","'Group' is assigned a value but never used.","'Button' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'headers', 'rowData', 'stateProject.allDataOneSheet._id', and 'stateRow.rowsVersionsToSave'. Either include them or remove the dependency array.",["297"],"'stateRow' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'headerKey', 'projectId', and 'rowData.id'. Either include them or remove the dependency array.",["298"],"React Hook useEffect has missing dependencies: 'activityRecorded', 'dwgName', 'dwgNumber', 'headers', 'projectId', 'revKey', 'stateRow.rowsAll', and 'statusKey'. Either include them or remove the dependency array.",["299"],"'getHeadersText' is assigned a value but never used.","'getDrawingName' is assigned a value but never used.","no-dupe-keys","Duplicate key 'border'.","ObjectExpression","'fileAdd' is assigned a value but never used.","'InputComp' is assigned a value but never used.","'addZero' is assigned a value but never used.","no-useless-concat","Unexpected string concatenation of literals.","unexpectedConcat","React Hook useEffect has a missing dependency: 'projectId'. Either include it or remove the dependency array.",["300"],"'drawingTypeData' is assigned a value but never used.","'setInput' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"301","fix":"302"},{"desc":"303","fix":"304"},{"desc":"305","fix":"306"},{"desc":"307","fix":"308"},{"desc":"309","fix":"310"},{"desc":"311","fix":"312"},{"desc":"313","fix":"314"},{"desc":"315","fix":"316"},"Update the dependencies array to be: [EventKeyDown]",{"range":"317","text":"318"},"Update the dependencies array to be: [email, fetchDataOneSheet, getSheetRows, projectId, projectName, role, setUserData]",{"range":"319","text":"320"},"Update the dependencies array to be: [panelSettingType, saveDataToServer]",{"range":"321","text":"322"},"Update the dependencies array to be: [column.key, columnIndex, inputRender, rowIndex, showDrawingsOnly, stateCell.cellActive, stateProject.allDataOneSheet.role]",{"range":"323","text":"324"},"Update the dependencies array to be: [headers, rowData, stateProject.allDataOneSheet._id, stateRow.rowsVersionsToSave]",{"range":"325","text":"326"},"Update the dependencies array to be: [headerKey, projectId, rowData.id]",{"range":"327","text":"328"},"Update the dependencies array to be: [activityRecorded, dwgName, dwgNumber, headers, projectId, revKey, stateRow.rowsAll, statusKey]",{"range":"329","text":"330"},"Update the dependencies array to be: [projectId]",{"range":"331","text":"332"},[2336,2338],"[EventKeyDown]",[18891,18893],"[email, fetchDataOneSheet, getSheetRows, projectId, projectName, role, setUserData]",[1922,1924],"[panelSettingType, saveDataToServer]",[2168,2190],"[column.key, columnIndex, inputRender, rowIndex, showDrawingsOnly, stateCell.cellActive, stateProject.allDataOneSheet.role]",[2878,2880],"[headers, rowData, stateProject.allDataOneSheet._id, stateRow.rowsVersionsToSave]",[1246,1248],"[headerKey, projectId, rowData.id]",[4888,4890],"[activityRecorded, dwgName, dwgNumber, headers, projectId, revKey, stateRow.rowsAll, statusKey]",[1136,1138],"[projectId]"]